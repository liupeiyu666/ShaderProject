//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "miHoYo/miHoYo_Character/Character_Common/Avatar_Alpha_Transparent" {
Properties {
_Color ("Main Color", Color) = (1,1,1,1)
_EnvColor ("Env Color", Color) = (1,1,1,1)
_Scale ("Scale Compared to Maya", Float) = 0.01
_BloomFactor ("Bloom Factor", Float) = 0.25
_MainTex ("Main Tex (RGB)", 2D) = "white" { }
_LightMapTex ("Light Map Tex (RGB)", 2D) = "gray" { }
_LightSpecColor ("Light Specular Color", Color) = (1,1,1,1)
_LightArea ("Light Area Threshold", Range(0, 1)) = 0.51
_SecondShadow ("Second Shadow Threshold", Range(0, 1)) = 0.51
_FirstShadowMultColor ("First Shadow Multiply Color", Color) = (0.9,0.7,0.75,1)
_SecondShadowMultColor ("Second Shadow Multiply Color", Color) = (0.75,0.6,0.65,1)
_Shininess ("Specular Shininess", Range(0.1, 100)) = 10
_SpecMulti ("Specular Multiply Factor", Range(0, 1)) = 0.1
_OutlineWidth ("Outline Width", Range(0, 100)) = 0.2
_OutlineColor ("Outline Color", Color) = (0,0,0,1)
_MaxOutlineZOffset ("Max Outline Z Offset", Range(0, 100)) = 1
_OutlineCamStart ("Outline Camera Adjustment Start Distance", Range(0, 10000)) = 1000
_Opaqueness ("Opaqueness", Range(0, 1)) = 1
_FadeDistance ("Fade Start Distance", Range(0, 10)) = 0
_FadeOffset ("Fade Start Offset", Range(0, 10)) = 0
_FadeDistanceScale ("Fade Distance Scale(turn this up to stop fading)", Range(0, 1)) = 1
[Toggle(LOOKUP_COLOR)] _LookupColor ("Lookup Color", Float) = 0
[Toggle(LOOKUP_COLOR_BILINEAR)] _LookupColorBilinear ("Lookup Color Bilinear", Float) = 0
_factorTex ("Factor Tex", 2D) = "white" { }
_indexTex ("Index Tex", 2D) = "white" { }
_tableTex ("Lookup Tex", 2D) = "white" { }
[Toggle(SPECIAL_STATE)] _SpecialState ("Special State", Float) = 0
_SPTex ("SP Tex", 2D) = "white" { }
_SPNoiseTex ("SP Noise Tex", 2D) = "white" { }
_SPNoiseScaler ("SP Noise Scaler", Range(0, 10)) = 1
_SPIntensity ("SP Intensity", Range(0, 1)) = 0.5
_SPTransition ("SP Transition", Range(0, 1)) = 0
_SPTransitionColor ("SP Transition Color", Color) = (1,1,1,1)
_SPOpaqueness ("SP Opaqueness", Range(0, 1)) = 1
_SPOutlineColor ("SP Outline Color", Color) = (1,1,1,1)
_SPTransitionEmissionScaler ("SP Transition Emission Scaler", Range(1, 100)) = 1
_SPTransitionBloomFactor ("SP Transition Bloom Factor", Float) = 1
_SPCubeMap ("SP CubeMap", Cube) = "white" { }
_SPCubeMapColor ("SP CubeMap Color", Color) = (1,1,1,0)
_SPCubeMapOffset ("SP CubeMap Offset", Vector) = (0,0,0,0)
_SPCubeMapIntensity ("SP CubeMap Intensity", Range(0, 1)) = 0
_SPCubeMapNoiseIntensity ("SP CubeMap Noise Intensity", Range(0, 5)) = 0
_SPCubeMapBrightness ("SP CubeMap Brightness", Float) = 1.26
_SPOldColor ("SP Old Color", Color) = (1,1,1,0)
[Toggle(RIM_GLOW)] _RimGlow ("Rim Glow", Float) = 0
[Enum(Lerp, 1, Add, 2)] _RGBlendType ("Rim Glow Blend Type", Float) = 1
_RGColor ("Rim Glow Color", Color) = (1,1,1,1)
_RGShininess ("Rim Glow Shininess", Float) = 1
_RGScale ("Rim Glow Scale", Float) = 1
_RGBias ("Rim Glow Bias", Float) = 0
_RGRatio ("Rim Glow Ratio", Range(0, 1)) = 0.5
_RGBloomFactor ("Rim Glow Bloom Factor", Float) = 1
_HRRimIntensity ("Hard Rim Mask", Range(0, 1)) = 0
_HRRimPower ("Hard Rim Ratio", Range(1E-06, 3)) = 0.1
_MoreHardRimColor ("More HardRim Color", Range(0, 1)) = 0
_HRRimColor2 ("Hard Rim Color2(0.4>A>0.2)", Color) = (1,1,1,1)
_HRRimColor3 ("Hard Rim Color3(0.6>A>0.4)", Color) = (1,1,1,1)
_HRRimColor4 ("Hard Rim Color4(0.8>A>0.6)", Color) = (1,1,1,1)
_HRRimColor5 ("Hard Rim Color5(A>0.8)", Color) = (1,1,1,1)
[Toggle(DISTORTION)] _Distortion ("Distortion", Float) = 0
_DTTex ("Distortion Tex", 2D) = "gray" { }
_DTIntensity ("Distortion Intensity", Range(1, 9)) = 5
_DTPlaySpeed ("Distortion Play Speed", Float) = 0
_DTNormalDisplacment ("Distortion Normal Displacment", Float) = 0
_DTUVScaleInX ("Distortion UV Scale in X", Float) = 1
_DTUVScaleInY ("Distortion UV Scale in Y", Float) = 1
_DTFresnel ("Distortion Fresnel Params", Vector) = (1,1,0,0)
_VertexAlphaFactor ("Alpha From Vertex Factor (0: not use)", Range(0, 1)) = 0
[Toggle(USINGDITHERALPAH)] _UsingDitherAlpha ("UsingDitherAlpha", Float) = 0
_DitherAlpha ("Dither Alpha Value", Range(0, 1)) = 1
}
SubShader {
 LOD 200
 Tags { "Distortion" = "None" "IGNOREPROJECTOR" = "true" "OutlineType" = "Complex" "QUEUE" = "Transparent" "Reflected" = "Reflected" "RenderType" = "Transparent" }
 Pass {
  LOD 200
  Tags { "Distortion" = "None" "IGNOREPROJECTOR" = "true" "OutlineType" = "Complex" "QUEUE" = "Transparent" "Reflected" = "Reflected" "RenderType" = "Transparent" }
  GpuProgramID 7117
Program "vp" {
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" }
""
}
}
}
 Pass {
  Name "COMPLEX_TRANS"
  LOD 200
  Tags { "Distortion" = "None" "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "OutlineType" = "Complex" "QUEUE" = "Transparent" "Reflected" = "Reflected" "RenderType" = "Transparent" }
  GpuProgramID 89546
Program "vp" {
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump float u_xlat16_6;
ivec3 u_xlati6;
mediump vec3 u_xlat16_8;
bvec2 u_xlatb12;
float u_xlat18;
bool u_xlatb18;
mediump float u_xlat16_20;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat18 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat18 = floor(u_xlat18);
    u_xlat6.z = max(u_xlat18, 0.0);
    u_xlat16_8.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_8.x = u_xlat16_8.x * 0.5 + (-_SecondShadow);
    u_xlat16_8.x = u_xlat16_8.x + 1.0;
    u_xlat16_8.x = floor(u_xlat16_8.x);
    u_xlat16_8.x = max(u_xlat16_8.x, 0.0);
    u_xlati3 = int(u_xlat16_8.x);
    u_xlat16_8.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_8.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_8.xyz;
    u_xlat6.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlati6.xz = ivec2(u_xlat6.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati6.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati6.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati6.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati6.z != 0) ? u_xlat16_4.xyz : u_xlat16_8.xyz;
    u_xlat16_20 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_4.xyz = vec3(u_xlat16_20) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat3.xyz = u_xlat6.xxx * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb18 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat16_5.xyz = u_xlat1.xyz * u_xlat6.xxx + _CustomLightDir.xyz;
    u_xlat16_20 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_5.xyz = vec3(u_xlat16_20) * u_xlat16_5.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb18)) ? u_xlat16_5.xyz : u_xlat3.xyz;
    u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
    u_xlat16_20 = max(u_xlat16_20, 0.0);
    u_xlat16_20 = log2(u_xlat16_20);
    u_xlat16_20 = u_xlat16_20 * _Shininess;
    u_xlat16_20 = exp2(u_xlat16_20);
    u_xlat16_6 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_6 = (-u_xlat16_20) + u_xlat16_6;
    u_xlat6.x = u_xlat16_6 + 1.0;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlati6.x = int(u_xlat6.x);
    u_xlat16_4.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlati6.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_4.xyz;
    SV_Target0.w = u_xlat10_1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump float u_xlat16_6;
ivec3 u_xlati6;
mediump vec3 u_xlat16_8;
bvec2 u_xlatb12;
float u_xlat18;
bool u_xlatb18;
mediump float u_xlat16_20;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat18 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat18 = floor(u_xlat18);
    u_xlat6.z = max(u_xlat18, 0.0);
    u_xlat16_8.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_8.x = u_xlat16_8.x * 0.5 + (-_SecondShadow);
    u_xlat16_8.x = u_xlat16_8.x + 1.0;
    u_xlat16_8.x = floor(u_xlat16_8.x);
    u_xlat16_8.x = max(u_xlat16_8.x, 0.0);
    u_xlati3 = int(u_xlat16_8.x);
    u_xlat16_8.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_8.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_8.xyz;
    u_xlat6.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlati6.xz = ivec2(u_xlat6.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati6.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati6.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati6.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati6.z != 0) ? u_xlat16_4.xyz : u_xlat16_8.xyz;
    u_xlat16_20 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_4.xyz = vec3(u_xlat16_20) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat3.xyz = u_xlat6.xxx * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb18 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat16_5.xyz = u_xlat1.xyz * u_xlat6.xxx + _CustomLightDir.xyz;
    u_xlat16_20 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_5.xyz = vec3(u_xlat16_20) * u_xlat16_5.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb18)) ? u_xlat16_5.xyz : u_xlat3.xyz;
    u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
    u_xlat16_20 = max(u_xlat16_20, 0.0);
    u_xlat16_20 = log2(u_xlat16_20);
    u_xlat16_20 = u_xlat16_20 * _Shininess;
    u_xlat16_20 = exp2(u_xlat16_20);
    u_xlat16_6 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_6 = (-u_xlat16_20) + u_xlat16_6;
    u_xlat6.x = u_xlat16_6 + 1.0;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlati6.x = int(u_xlat6.x);
    u_xlat16_4.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlati6.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_4.xyz;
    SV_Target0.w = u_xlat10_1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump float u_xlat16_6;
ivec3 u_xlati6;
mediump vec3 u_xlat16_8;
bvec2 u_xlatb12;
float u_xlat18;
bool u_xlatb18;
mediump float u_xlat16_20;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat18 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat18 = floor(u_xlat18);
    u_xlat6.z = max(u_xlat18, 0.0);
    u_xlat16_8.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_8.x = u_xlat16_8.x * 0.5 + (-_SecondShadow);
    u_xlat16_8.x = u_xlat16_8.x + 1.0;
    u_xlat16_8.x = floor(u_xlat16_8.x);
    u_xlat16_8.x = max(u_xlat16_8.x, 0.0);
    u_xlati3 = int(u_xlat16_8.x);
    u_xlat16_8.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_8.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_8.xyz;
    u_xlat6.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlati6.xz = ivec2(u_xlat6.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati6.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati6.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati6.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati6.z != 0) ? u_xlat16_4.xyz : u_xlat16_8.xyz;
    u_xlat16_20 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_4.xyz = vec3(u_xlat16_20) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat3.xyz = u_xlat6.xxx * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb18 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat16_5.xyz = u_xlat1.xyz * u_xlat6.xxx + _CustomLightDir.xyz;
    u_xlat16_20 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_5.xyz = vec3(u_xlat16_20) * u_xlat16_5.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb18)) ? u_xlat16_5.xyz : u_xlat3.xyz;
    u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
    u_xlat16_20 = max(u_xlat16_20, 0.0);
    u_xlat16_20 = log2(u_xlat16_20);
    u_xlat16_20 = u_xlat16_20 * _Shininess;
    u_xlat16_20 = exp2(u_xlat16_20);
    u_xlat16_6 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_6 = (-u_xlat16_20) + u_xlat16_6;
    u_xlat6.x = u_xlat16_6 + 1.0;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlati6.x = int(u_xlat6.x);
    u_xlat16_4.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlati6.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_4.xyz;
    SV_Target0.w = u_xlat10_1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump float u_xlat16_6;
ivec3 u_xlati6;
mediump vec3 u_xlat16_8;
bvec2 u_xlatb12;
float u_xlat18;
bool u_xlatb18;
mediump float u_xlat16_20;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat18 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat18 = floor(u_xlat18);
    u_xlat6.z = max(u_xlat18, 0.0);
    u_xlat16_8.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_8.x = u_xlat16_8.x * 0.5 + (-_SecondShadow);
    u_xlat16_8.x = u_xlat16_8.x + 1.0;
    u_xlat16_8.x = floor(u_xlat16_8.x);
    u_xlat16_8.x = max(u_xlat16_8.x, 0.0);
    u_xlati3 = int(u_xlat16_8.x);
    u_xlat16_8.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_8.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_8.xyz;
    u_xlat6.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlati6.xz = ivec2(u_xlat6.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati6.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati6.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati6.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati6.z != 0) ? u_xlat16_4.xyz : u_xlat16_8.xyz;
    u_xlat16_20 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_4.xyz = vec3(u_xlat16_20) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat3.xyz = u_xlat6.xxx * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb18 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat16_5.xyz = u_xlat1.xyz * u_xlat6.xxx + _CustomLightDir.xyz;
    u_xlat16_20 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_5.xyz = vec3(u_xlat16_20) * u_xlat16_5.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb18)) ? u_xlat16_5.xyz : u_xlat3.xyz;
    u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
    u_xlat16_20 = max(u_xlat16_20, 0.0);
    u_xlat16_20 = log2(u_xlat16_20);
    u_xlat16_20 = u_xlat16_20 * _Shininess;
    u_xlat16_20 = exp2(u_xlat16_20);
    u_xlat16_6 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_6 = (-u_xlat16_20) + u_xlat16_6;
    u_xlat6.x = u_xlat16_6 + 1.0;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlati6.x = int(u_xlat6.x);
    u_xlat16_4.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlati6.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_4.xyz;
    SV_Target0.w = u_xlat10_1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump float u_xlat16_6;
ivec3 u_xlati6;
mediump vec3 u_xlat16_8;
bvec2 u_xlatb12;
float u_xlat18;
bool u_xlatb18;
mediump float u_xlat16_20;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat18 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat18 = floor(u_xlat18);
    u_xlat6.z = max(u_xlat18, 0.0);
    u_xlat16_8.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_8.x = u_xlat16_8.x * 0.5 + (-_SecondShadow);
    u_xlat16_8.x = u_xlat16_8.x + 1.0;
    u_xlat16_8.x = floor(u_xlat16_8.x);
    u_xlat16_8.x = max(u_xlat16_8.x, 0.0);
    u_xlati3 = int(u_xlat16_8.x);
    u_xlat16_8.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_8.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_8.xyz;
    u_xlat6.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlati6.xz = ivec2(u_xlat6.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati6.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati6.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati6.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati6.z != 0) ? u_xlat16_4.xyz : u_xlat16_8.xyz;
    u_xlat16_20 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_4.xyz = vec3(u_xlat16_20) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat3.xyz = u_xlat6.xxx * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb18 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat16_5.xyz = u_xlat1.xyz * u_xlat6.xxx + _CustomLightDir.xyz;
    u_xlat16_20 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_5.xyz = vec3(u_xlat16_20) * u_xlat16_5.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb18)) ? u_xlat16_5.xyz : u_xlat3.xyz;
    u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
    u_xlat16_20 = max(u_xlat16_20, 0.0);
    u_xlat16_20 = log2(u_xlat16_20);
    u_xlat16_20 = u_xlat16_20 * _Shininess;
    u_xlat16_20 = exp2(u_xlat16_20);
    u_xlat16_6 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_6 = (-u_xlat16_20) + u_xlat16_6;
    u_xlat6.x = u_xlat16_6 + 1.0;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlati6.x = int(u_xlat6.x);
    u_xlat16_4.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlati6.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_4.xyz;
    SV_Target0.w = u_xlat10_1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump float u_xlat16_6;
ivec3 u_xlati6;
mediump vec3 u_xlat16_8;
bvec2 u_xlatb12;
float u_xlat18;
bool u_xlatb18;
mediump float u_xlat16_20;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat18 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat18 = floor(u_xlat18);
    u_xlat6.z = max(u_xlat18, 0.0);
    u_xlat16_8.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_8.x = u_xlat16_8.x * 0.5 + (-_SecondShadow);
    u_xlat16_8.x = u_xlat16_8.x + 1.0;
    u_xlat16_8.x = floor(u_xlat16_8.x);
    u_xlat16_8.x = max(u_xlat16_8.x, 0.0);
    u_xlati3 = int(u_xlat16_8.x);
    u_xlat16_8.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_8.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_8.xyz;
    u_xlat6.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlati6.xz = ivec2(u_xlat6.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati6.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati6.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati6.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati6.z != 0) ? u_xlat16_4.xyz : u_xlat16_8.xyz;
    u_xlat16_20 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_4.xyz = vec3(u_xlat16_20) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat3.xyz = u_xlat6.xxx * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb18 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat16_5.xyz = u_xlat1.xyz * u_xlat6.xxx + _CustomLightDir.xyz;
    u_xlat16_20 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_5.xyz = vec3(u_xlat16_20) * u_xlat16_5.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb18)) ? u_xlat16_5.xyz : u_xlat3.xyz;
    u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
    u_xlat16_20 = max(u_xlat16_20, 0.0);
    u_xlat16_20 = log2(u_xlat16_20);
    u_xlat16_20 = u_xlat16_20 * _Shininess;
    u_xlat16_20 = exp2(u_xlat16_20);
    u_xlat16_6 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_6 = (-u_xlat16_20) + u_xlat16_6;
    u_xlat6.x = u_xlat16_6 + 1.0;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlati6.x = int(u_xlat6.x);
    u_xlat16_4.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlati6.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_4.xyz;
    SV_Target0.w = u_xlat10_1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
int u_xlati1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
ivec3 u_xlati7;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_25 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati1) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat1.xz = vec2(u_xlat16_25) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_25 = (u_xlati7.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_25 = u_xlat16_25 + vs_COLOR1.x;
    u_xlat16_25 = u_xlat16_25 * 0.5 + (-_LightArea);
    u_xlat16_25 = u_xlat16_25 + 1.0;
    u_xlat16_25 = floor(u_xlat16_25);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlati7.x = int(u_xlat16_25);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat1.xzw = u_xlat1.xzw * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat2.xyz = u_xlat7.xxx * u_xlat1.xzw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb21 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xzw = u_xlat1.xzw * u_xlat7.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat16_6.xyz = u_xlat1.xzw * u_xlat7.xxx + _CustomLightDir.xyz;
    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb21)) ? u_xlat16_6.xyz : u_xlat2.xyz;
    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_25 = log2(u_xlat16_25);
    u_xlat16_25 = u_xlat16_25 * _Shininess;
    u_xlat16_25 = exp2(u_xlat16_25);
    u_xlat16_7 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_7 = (-u_xlat16_25) + u_xlat16_7;
    u_xlat7.x = u_xlat16_7 + 1.0;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.x = int(u_xlat7.x);
    u_xlat16_5.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_5.xyz = u_xlat10_0.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = (u_xlati7.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_4.xyz * _EnvColor.xyz + u_xlat16_5.xyz;
    SV_Target0.w = u_xlat10_1.y * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
int u_xlati1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
ivec3 u_xlati7;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_25 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati1) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat1.xz = vec2(u_xlat16_25) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_25 = (u_xlati7.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_25 = u_xlat16_25 + vs_COLOR1.x;
    u_xlat16_25 = u_xlat16_25 * 0.5 + (-_LightArea);
    u_xlat16_25 = u_xlat16_25 + 1.0;
    u_xlat16_25 = floor(u_xlat16_25);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlati7.x = int(u_xlat16_25);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat1.xzw = u_xlat1.xzw * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat2.xyz = u_xlat7.xxx * u_xlat1.xzw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb21 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xzw = u_xlat1.xzw * u_xlat7.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat16_6.xyz = u_xlat1.xzw * u_xlat7.xxx + _CustomLightDir.xyz;
    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb21)) ? u_xlat16_6.xyz : u_xlat2.xyz;
    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_25 = log2(u_xlat16_25);
    u_xlat16_25 = u_xlat16_25 * _Shininess;
    u_xlat16_25 = exp2(u_xlat16_25);
    u_xlat16_7 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_7 = (-u_xlat16_25) + u_xlat16_7;
    u_xlat7.x = u_xlat16_7 + 1.0;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.x = int(u_xlat7.x);
    u_xlat16_5.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_5.xyz = u_xlat10_0.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = (u_xlati7.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_4.xyz * _EnvColor.xyz + u_xlat16_5.xyz;
    SV_Target0.w = u_xlat10_1.y * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
int u_xlati1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
ivec3 u_xlati7;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_25 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati1) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat1.xz = vec2(u_xlat16_25) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_25 = (u_xlati7.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_25 = u_xlat16_25 + vs_COLOR1.x;
    u_xlat16_25 = u_xlat16_25 * 0.5 + (-_LightArea);
    u_xlat16_25 = u_xlat16_25 + 1.0;
    u_xlat16_25 = floor(u_xlat16_25);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlati7.x = int(u_xlat16_25);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat1.xzw = u_xlat1.xzw * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat2.xyz = u_xlat7.xxx * u_xlat1.xzw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb21 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xzw = u_xlat1.xzw * u_xlat7.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat16_6.xyz = u_xlat1.xzw * u_xlat7.xxx + _CustomLightDir.xyz;
    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb21)) ? u_xlat16_6.xyz : u_xlat2.xyz;
    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_25 = log2(u_xlat16_25);
    u_xlat16_25 = u_xlat16_25 * _Shininess;
    u_xlat16_25 = exp2(u_xlat16_25);
    u_xlat16_7 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_7 = (-u_xlat16_25) + u_xlat16_7;
    u_xlat7.x = u_xlat16_7 + 1.0;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.x = int(u_xlat7.x);
    u_xlat16_5.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_5.xyz = u_xlat10_0.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = (u_xlati7.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_4.xyz * _EnvColor.xyz + u_xlat16_5.xyz;
    SV_Target0.w = u_xlat10_1.y * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump float u_xlat16_11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
bvec2 u_xlatb22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
bool u_xlatb33;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat2.xyz = u_xlat11.xxx * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * u_xlat11.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat11.xxx + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb33)) ? u_xlat16_9.xyz : u_xlat2.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_11 = (-u_xlat16_40) + u_xlat16_11;
    u_xlat11.x = u_xlat16_11 + 1.0;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.x = int(u_xlat11.x);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_7.xyz * _EnvColor.xyz + u_xlat16_8.xyz;
    SV_Target0.w = u_xlat1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump float u_xlat16_11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
bvec2 u_xlatb22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
bool u_xlatb33;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat2.xyz = u_xlat11.xxx * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * u_xlat11.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat11.xxx + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb33)) ? u_xlat16_9.xyz : u_xlat2.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_11 = (-u_xlat16_40) + u_xlat16_11;
    u_xlat11.x = u_xlat16_11 + 1.0;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.x = int(u_xlat11.x);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_7.xyz * _EnvColor.xyz + u_xlat16_8.xyz;
    SV_Target0.w = u_xlat1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump float u_xlat16_11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
bvec2 u_xlatb22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
bool u_xlatb33;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat2.xyz = u_xlat11.xxx * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * u_xlat11.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat11.xxx + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb33)) ? u_xlat16_9.xyz : u_xlat2.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_11 = (-u_xlat16_40) + u_xlat16_11;
    u_xlat11.x = u_xlat16_11 + 1.0;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.x = int(u_xlat11.x);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_7.xyz * _EnvColor.xyz + u_xlat16_8.xyz;
    SV_Target0.w = u_xlat1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
int u_xlati3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
mediump float u_xlat16_8;
int u_xlati8;
bvec3 u_xlatb8;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
int u_xlati11;
float u_xlat16;
mediump float u_xlat16_16;
bvec2 u_xlatb16;
mediump float u_xlat16_26;
bool u_xlatb27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat3.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati11 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati11) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat11.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8 != 0) ? u_xlat11.y : u_xlat11.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8 = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (int(u_xlati8) != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat3.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + _WorldSpaceLightPos0.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat5.xyz = vec3(u_xlat8) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb27 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + (-_WorldSpaceLightPos0.xyz);
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat16_6.xyz = u_xlat1.xyz * vec3(u_xlat8) + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb27)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_26) + u_xlat16_8;
    u_xlat8 = u_xlat16_8 + 1.0;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati8) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
        u_xlat8 = (-u_xlat0.x) + 1.00100005;
        u_xlat8 = max(u_xlat8, 0.00100000005);
        u_xlat8 = min(u_xlat8, 1.0);
        u_xlat8 = log2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGShininess;
        u_xlat8 = exp2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGScale + _RGBias;
        u_xlat16 = u_xlat10_0.w + 0.100000001;
        u_xlatb5 = greaterThanEqual(vec4(u_xlat16), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb1.xyz = lessThan(vec4(u_xlat16), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb1.x = u_xlatb1.x && u_xlatb5.y;
        u_xlatb1.y = u_xlatb1.y && u_xlatb5.z;
        u_xlatb1.z = u_xlatb1.z && u_xlatb5.w;
        u_xlat16_6 = (u_xlatb1.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb1.y) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_6 = (u_xlatb1.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_5 = (u_xlatb5.x) ? _HRRimColor5 : u_xlat16_6;
        u_xlat16_5 = (int(_MoreHardRimColor) != 0) ? u_xlat16_5 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_26 = inversesqrt(u_xlat16_26);
        u_xlat16_6.xyz = vec3(u_xlat16_26) * _WorldSpaceLightPos0.xyz;
        u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
        u_xlat16_26 = u_xlat16_16 + 0.5;
        u_xlat16_26 = u_xlat0.x * u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_5.w<u_xlat16_26);
#else
        u_xlatb0 = u_xlat16_5.w<u_xlat16_26;
#endif
        u_xlat16_26 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_5.xyz;
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_HRRimPower) + u_xlat16_2.xyz;
        u_xlat16_26 = u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_26 * _RGRatio;
        u_xlat1.xyz = vec3(u_xlat8) * _RGColor.xyz + (-u_xlat16_2.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat16_2.xyz;
        u_xlat16_26 = float(_HRRimIntensity);
        u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat16_6.xyz;
        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
            u_xlat8 = (-u_xlat0.x) + 1.00100005;
            u_xlat8 = max(u_xlat8, 0.00100000005);
            u_xlat8 = min(u_xlat8, 1.0);
            u_xlat8 = log2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGShininess;
            u_xlat8 = exp2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGScale + _RGBias;
            u_xlat16_6.xyz = vec3(u_xlat8) * _RGColor.xyz;
            u_xlat8 = u_xlat10_0.w + 0.100000001;
            u_xlatb3 = greaterThanEqual(vec4(u_xlat8), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb8.xyz = lessThan(vec4(u_xlat8), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb8.x = u_xlatb8.x && u_xlatb3.y;
            u_xlatb8.y = u_xlatb8.y && u_xlatb3.z;
            u_xlatb8.z = u_xlatb8.z && u_xlatb3.w;
            u_xlat16_5 = (u_xlatb8.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_5 = (u_xlatb8.y) ? _HRRimColor2 : u_xlat16_5;
            u_xlat16_5 = (u_xlatb8.x) ? _HRRimColor3 : u_xlat16_5;
            u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_5;
            u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_26 = inversesqrt(u_xlat16_26);
            u_xlat16_7.xyz = vec3(u_xlat16_26) * _WorldSpaceLightPos0.xyz;
            u_xlat16_8 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
            u_xlat16_26 = u_xlat16_8 + 0.5;
            u_xlat16_26 = u_xlat0.x * u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_26);
#else
            u_xlatb0 = u_xlat16_3.w<u_xlat16_26;
#endif
            u_xlat16_26 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz;
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_HRRimPower);
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_6.xyz = u_xlat16_2.xyz + u_xlat16_6.xyz;
            u_xlat16_26 = float(_HRRimIntensity);
            u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_6.xyz);
            SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_6.xyz;
        } else {
            SV_Target0.xyz = u_xlat16_2.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat10_1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
int u_xlati3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
mediump float u_xlat16_8;
int u_xlati8;
bvec3 u_xlatb8;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
int u_xlati11;
float u_xlat16;
mediump float u_xlat16_16;
bvec2 u_xlatb16;
mediump float u_xlat16_26;
bool u_xlatb27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat3.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati11 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati11) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat11.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8 != 0) ? u_xlat11.y : u_xlat11.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8 = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (int(u_xlati8) != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat3.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + _WorldSpaceLightPos0.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat5.xyz = vec3(u_xlat8) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb27 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + (-_WorldSpaceLightPos0.xyz);
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat16_6.xyz = u_xlat1.xyz * vec3(u_xlat8) + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb27)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_26) + u_xlat16_8;
    u_xlat8 = u_xlat16_8 + 1.0;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati8) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
        u_xlat8 = (-u_xlat0.x) + 1.00100005;
        u_xlat8 = max(u_xlat8, 0.00100000005);
        u_xlat8 = min(u_xlat8, 1.0);
        u_xlat8 = log2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGShininess;
        u_xlat8 = exp2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGScale + _RGBias;
        u_xlat16 = u_xlat10_0.w + 0.100000001;
        u_xlatb5 = greaterThanEqual(vec4(u_xlat16), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb1.xyz = lessThan(vec4(u_xlat16), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb1.x = u_xlatb1.x && u_xlatb5.y;
        u_xlatb1.y = u_xlatb1.y && u_xlatb5.z;
        u_xlatb1.z = u_xlatb1.z && u_xlatb5.w;
        u_xlat16_6 = (u_xlatb1.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb1.y) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_6 = (u_xlatb1.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_5 = (u_xlatb5.x) ? _HRRimColor5 : u_xlat16_6;
        u_xlat16_5 = (int(_MoreHardRimColor) != 0) ? u_xlat16_5 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_26 = inversesqrt(u_xlat16_26);
        u_xlat16_6.xyz = vec3(u_xlat16_26) * _WorldSpaceLightPos0.xyz;
        u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
        u_xlat16_26 = u_xlat16_16 + 0.5;
        u_xlat16_26 = u_xlat0.x * u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_5.w<u_xlat16_26);
#else
        u_xlatb0 = u_xlat16_5.w<u_xlat16_26;
#endif
        u_xlat16_26 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_5.xyz;
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_HRRimPower) + u_xlat16_2.xyz;
        u_xlat16_26 = u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_26 * _RGRatio;
        u_xlat1.xyz = vec3(u_xlat8) * _RGColor.xyz + (-u_xlat16_2.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat16_2.xyz;
        u_xlat16_26 = float(_HRRimIntensity);
        u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat16_6.xyz;
        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
            u_xlat8 = (-u_xlat0.x) + 1.00100005;
            u_xlat8 = max(u_xlat8, 0.00100000005);
            u_xlat8 = min(u_xlat8, 1.0);
            u_xlat8 = log2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGShininess;
            u_xlat8 = exp2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGScale + _RGBias;
            u_xlat16_6.xyz = vec3(u_xlat8) * _RGColor.xyz;
            u_xlat8 = u_xlat10_0.w + 0.100000001;
            u_xlatb3 = greaterThanEqual(vec4(u_xlat8), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb8.xyz = lessThan(vec4(u_xlat8), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb8.x = u_xlatb8.x && u_xlatb3.y;
            u_xlatb8.y = u_xlatb8.y && u_xlatb3.z;
            u_xlatb8.z = u_xlatb8.z && u_xlatb3.w;
            u_xlat16_5 = (u_xlatb8.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_5 = (u_xlatb8.y) ? _HRRimColor2 : u_xlat16_5;
            u_xlat16_5 = (u_xlatb8.x) ? _HRRimColor3 : u_xlat16_5;
            u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_5;
            u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_26 = inversesqrt(u_xlat16_26);
            u_xlat16_7.xyz = vec3(u_xlat16_26) * _WorldSpaceLightPos0.xyz;
            u_xlat16_8 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
            u_xlat16_26 = u_xlat16_8 + 0.5;
            u_xlat16_26 = u_xlat0.x * u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_26);
#else
            u_xlatb0 = u_xlat16_3.w<u_xlat16_26;
#endif
            u_xlat16_26 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz;
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_HRRimPower);
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_6.xyz = u_xlat16_2.xyz + u_xlat16_6.xyz;
            u_xlat16_26 = float(_HRRimIntensity);
            u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_6.xyz);
            SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_6.xyz;
        } else {
            SV_Target0.xyz = u_xlat16_2.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat10_1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
int u_xlati3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
mediump float u_xlat16_8;
int u_xlati8;
bvec3 u_xlatb8;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
int u_xlati11;
float u_xlat16;
mediump float u_xlat16_16;
bvec2 u_xlatb16;
mediump float u_xlat16_26;
bool u_xlatb27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat3.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati11 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati11) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat11.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8 != 0) ? u_xlat11.y : u_xlat11.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8 = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (int(u_xlati8) != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat3.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + _WorldSpaceLightPos0.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat5.xyz = vec3(u_xlat8) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb27 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + (-_WorldSpaceLightPos0.xyz);
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat16_6.xyz = u_xlat1.xyz * vec3(u_xlat8) + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb27)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_26) + u_xlat16_8;
    u_xlat8 = u_xlat16_8 + 1.0;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati8) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
        u_xlat8 = (-u_xlat0.x) + 1.00100005;
        u_xlat8 = max(u_xlat8, 0.00100000005);
        u_xlat8 = min(u_xlat8, 1.0);
        u_xlat8 = log2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGShininess;
        u_xlat8 = exp2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGScale + _RGBias;
        u_xlat16 = u_xlat10_0.w + 0.100000001;
        u_xlatb5 = greaterThanEqual(vec4(u_xlat16), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb1.xyz = lessThan(vec4(u_xlat16), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb1.x = u_xlatb1.x && u_xlatb5.y;
        u_xlatb1.y = u_xlatb1.y && u_xlatb5.z;
        u_xlatb1.z = u_xlatb1.z && u_xlatb5.w;
        u_xlat16_6 = (u_xlatb1.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb1.y) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_6 = (u_xlatb1.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_5 = (u_xlatb5.x) ? _HRRimColor5 : u_xlat16_6;
        u_xlat16_5 = (int(_MoreHardRimColor) != 0) ? u_xlat16_5 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_26 = inversesqrt(u_xlat16_26);
        u_xlat16_6.xyz = vec3(u_xlat16_26) * _WorldSpaceLightPos0.xyz;
        u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
        u_xlat16_26 = u_xlat16_16 + 0.5;
        u_xlat16_26 = u_xlat0.x * u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_5.w<u_xlat16_26);
#else
        u_xlatb0 = u_xlat16_5.w<u_xlat16_26;
#endif
        u_xlat16_26 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_5.xyz;
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_HRRimPower) + u_xlat16_2.xyz;
        u_xlat16_26 = u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_26 * _RGRatio;
        u_xlat1.xyz = vec3(u_xlat8) * _RGColor.xyz + (-u_xlat16_2.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat16_2.xyz;
        u_xlat16_26 = float(_HRRimIntensity);
        u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat16_6.xyz;
        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
            u_xlat8 = (-u_xlat0.x) + 1.00100005;
            u_xlat8 = max(u_xlat8, 0.00100000005);
            u_xlat8 = min(u_xlat8, 1.0);
            u_xlat8 = log2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGShininess;
            u_xlat8 = exp2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGScale + _RGBias;
            u_xlat16_6.xyz = vec3(u_xlat8) * _RGColor.xyz;
            u_xlat8 = u_xlat10_0.w + 0.100000001;
            u_xlatb3 = greaterThanEqual(vec4(u_xlat8), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb8.xyz = lessThan(vec4(u_xlat8), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb8.x = u_xlatb8.x && u_xlatb3.y;
            u_xlatb8.y = u_xlatb8.y && u_xlatb3.z;
            u_xlatb8.z = u_xlatb8.z && u_xlatb3.w;
            u_xlat16_5 = (u_xlatb8.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_5 = (u_xlatb8.y) ? _HRRimColor2 : u_xlat16_5;
            u_xlat16_5 = (u_xlatb8.x) ? _HRRimColor3 : u_xlat16_5;
            u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_5;
            u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_26 = inversesqrt(u_xlat16_26);
            u_xlat16_7.xyz = vec3(u_xlat16_26) * _WorldSpaceLightPos0.xyz;
            u_xlat16_8 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
            u_xlat16_26 = u_xlat16_8 + 0.5;
            u_xlat16_26 = u_xlat0.x * u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_26);
#else
            u_xlatb0 = u_xlat16_3.w<u_xlat16_26;
#endif
            u_xlat16_26 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz;
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_HRRimPower);
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_6.xyz = u_xlat16_2.xyz + u_xlat16_6.xyz;
            u_xlat16_26 = float(_HRRimIntensity);
            u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_6.xyz);
            SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_6.xyz;
        } else {
            SV_Target0.xyz = u_xlat16_2.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat10_1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
int u_xlati3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
mediump float u_xlat16_8;
int u_xlati8;
bvec3 u_xlatb8;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
int u_xlati11;
float u_xlat16;
mediump float u_xlat16_16;
bvec2 u_xlatb16;
mediump float u_xlat16_26;
bool u_xlatb27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat3.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati11 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati11) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat11.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8 != 0) ? u_xlat11.y : u_xlat11.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8 = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (int(u_xlati8) != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat3.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + _WorldSpaceLightPos0.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat5.xyz = vec3(u_xlat8) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb27 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + (-_WorldSpaceLightPos0.xyz);
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat16_6.xyz = u_xlat1.xyz * vec3(u_xlat8) + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb27)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_26) + u_xlat16_8;
    u_xlat8 = u_xlat16_8 + 1.0;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati8) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
        u_xlat8 = (-u_xlat0.x) + 1.00100005;
        u_xlat8 = max(u_xlat8, 0.00100000005);
        u_xlat8 = min(u_xlat8, 1.0);
        u_xlat8 = log2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGShininess;
        u_xlat8 = exp2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGScale + _RGBias;
        u_xlat16 = u_xlat10_0.w + 0.100000001;
        u_xlatb5 = greaterThanEqual(vec4(u_xlat16), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb1.xyz = lessThan(vec4(u_xlat16), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb1.x = u_xlatb1.x && u_xlatb5.y;
        u_xlatb1.y = u_xlatb1.y && u_xlatb5.z;
        u_xlatb1.z = u_xlatb1.z && u_xlatb5.w;
        u_xlat16_6 = (u_xlatb1.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb1.y) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_6 = (u_xlatb1.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_5 = (u_xlatb5.x) ? _HRRimColor5 : u_xlat16_6;
        u_xlat16_5 = (int(_MoreHardRimColor) != 0) ? u_xlat16_5 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_26 = inversesqrt(u_xlat16_26);
        u_xlat16_6.xyz = vec3(u_xlat16_26) * _WorldSpaceLightPos0.xyz;
        u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
        u_xlat16_26 = u_xlat16_16 + 0.5;
        u_xlat16_26 = u_xlat0.x * u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_5.w<u_xlat16_26);
#else
        u_xlatb0 = u_xlat16_5.w<u_xlat16_26;
#endif
        u_xlat16_26 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_5.xyz;
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_HRRimPower) + u_xlat16_2.xyz;
        u_xlat16_26 = u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_26 * _RGRatio;
        u_xlat1.xyz = vec3(u_xlat8) * _RGColor.xyz + (-u_xlat16_2.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat16_2.xyz;
        u_xlat16_26 = float(_HRRimIntensity);
        u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat16_6.xyz;
        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
            u_xlat8 = (-u_xlat0.x) + 1.00100005;
            u_xlat8 = max(u_xlat8, 0.00100000005);
            u_xlat8 = min(u_xlat8, 1.0);
            u_xlat8 = log2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGShininess;
            u_xlat8 = exp2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGScale + _RGBias;
            u_xlat16_6.xyz = vec3(u_xlat8) * _RGColor.xyz;
            u_xlat8 = u_xlat10_0.w + 0.100000001;
            u_xlatb3 = greaterThanEqual(vec4(u_xlat8), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb8.xyz = lessThan(vec4(u_xlat8), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb8.x = u_xlatb8.x && u_xlatb3.y;
            u_xlatb8.y = u_xlatb8.y && u_xlatb3.z;
            u_xlatb8.z = u_xlatb8.z && u_xlatb3.w;
            u_xlat16_5 = (u_xlatb8.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_5 = (u_xlatb8.y) ? _HRRimColor2 : u_xlat16_5;
            u_xlat16_5 = (u_xlatb8.x) ? _HRRimColor3 : u_xlat16_5;
            u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_5;
            u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_26 = inversesqrt(u_xlat16_26);
            u_xlat16_7.xyz = vec3(u_xlat16_26) * _WorldSpaceLightPos0.xyz;
            u_xlat16_8 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
            u_xlat16_26 = u_xlat16_8 + 0.5;
            u_xlat16_26 = u_xlat0.x * u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_26);
#else
            u_xlatb0 = u_xlat16_3.w<u_xlat16_26;
#endif
            u_xlat16_26 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz;
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_HRRimPower);
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_6.xyz = u_xlat16_2.xyz + u_xlat16_6.xyz;
            u_xlat16_26 = float(_HRRimIntensity);
            u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_6.xyz);
            SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_6.xyz;
        } else {
            SV_Target0.xyz = u_xlat16_2.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat10_1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
int u_xlati3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
mediump float u_xlat16_8;
int u_xlati8;
bvec3 u_xlatb8;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
int u_xlati11;
float u_xlat16;
mediump float u_xlat16_16;
bvec2 u_xlatb16;
mediump float u_xlat16_26;
bool u_xlatb27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat3.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati11 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati11) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat11.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8 != 0) ? u_xlat11.y : u_xlat11.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8 = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (int(u_xlati8) != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat3.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + _WorldSpaceLightPos0.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat5.xyz = vec3(u_xlat8) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb27 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + (-_WorldSpaceLightPos0.xyz);
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat16_6.xyz = u_xlat1.xyz * vec3(u_xlat8) + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb27)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_26) + u_xlat16_8;
    u_xlat8 = u_xlat16_8 + 1.0;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati8) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
        u_xlat8 = (-u_xlat0.x) + 1.00100005;
        u_xlat8 = max(u_xlat8, 0.00100000005);
        u_xlat8 = min(u_xlat8, 1.0);
        u_xlat8 = log2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGShininess;
        u_xlat8 = exp2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGScale + _RGBias;
        u_xlat16 = u_xlat10_0.w + 0.100000001;
        u_xlatb5 = greaterThanEqual(vec4(u_xlat16), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb1.xyz = lessThan(vec4(u_xlat16), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb1.x = u_xlatb1.x && u_xlatb5.y;
        u_xlatb1.y = u_xlatb1.y && u_xlatb5.z;
        u_xlatb1.z = u_xlatb1.z && u_xlatb5.w;
        u_xlat16_6 = (u_xlatb1.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb1.y) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_6 = (u_xlatb1.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_5 = (u_xlatb5.x) ? _HRRimColor5 : u_xlat16_6;
        u_xlat16_5 = (int(_MoreHardRimColor) != 0) ? u_xlat16_5 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_26 = inversesqrt(u_xlat16_26);
        u_xlat16_6.xyz = vec3(u_xlat16_26) * _WorldSpaceLightPos0.xyz;
        u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
        u_xlat16_26 = u_xlat16_16 + 0.5;
        u_xlat16_26 = u_xlat0.x * u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_5.w<u_xlat16_26);
#else
        u_xlatb0 = u_xlat16_5.w<u_xlat16_26;
#endif
        u_xlat16_26 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_5.xyz;
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_HRRimPower) + u_xlat16_2.xyz;
        u_xlat16_26 = u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_26 * _RGRatio;
        u_xlat1.xyz = vec3(u_xlat8) * _RGColor.xyz + (-u_xlat16_2.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat16_2.xyz;
        u_xlat16_26 = float(_HRRimIntensity);
        u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat16_6.xyz;
        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
            u_xlat8 = (-u_xlat0.x) + 1.00100005;
            u_xlat8 = max(u_xlat8, 0.00100000005);
            u_xlat8 = min(u_xlat8, 1.0);
            u_xlat8 = log2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGShininess;
            u_xlat8 = exp2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGScale + _RGBias;
            u_xlat16_6.xyz = vec3(u_xlat8) * _RGColor.xyz;
            u_xlat8 = u_xlat10_0.w + 0.100000001;
            u_xlatb3 = greaterThanEqual(vec4(u_xlat8), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb8.xyz = lessThan(vec4(u_xlat8), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb8.x = u_xlatb8.x && u_xlatb3.y;
            u_xlatb8.y = u_xlatb8.y && u_xlatb3.z;
            u_xlatb8.z = u_xlatb8.z && u_xlatb3.w;
            u_xlat16_5 = (u_xlatb8.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_5 = (u_xlatb8.y) ? _HRRimColor2 : u_xlat16_5;
            u_xlat16_5 = (u_xlatb8.x) ? _HRRimColor3 : u_xlat16_5;
            u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_5;
            u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_26 = inversesqrt(u_xlat16_26);
            u_xlat16_7.xyz = vec3(u_xlat16_26) * _WorldSpaceLightPos0.xyz;
            u_xlat16_8 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
            u_xlat16_26 = u_xlat16_8 + 0.5;
            u_xlat16_26 = u_xlat0.x * u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_26);
#else
            u_xlatb0 = u_xlat16_3.w<u_xlat16_26;
#endif
            u_xlat16_26 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz;
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_HRRimPower);
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_6.xyz = u_xlat16_2.xyz + u_xlat16_6.xyz;
            u_xlat16_26 = float(_HRRimIntensity);
            u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_6.xyz);
            SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_6.xyz;
        } else {
            SV_Target0.xyz = u_xlat16_2.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat10_1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
int u_xlati3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
mediump float u_xlat16_8;
int u_xlati8;
bvec3 u_xlatb8;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
int u_xlati11;
float u_xlat16;
mediump float u_xlat16_16;
bvec2 u_xlatb16;
mediump float u_xlat16_26;
bool u_xlatb27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat3.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati11 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati11) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat11.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8 != 0) ? u_xlat11.y : u_xlat11.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8 = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (int(u_xlati8) != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat3.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + _WorldSpaceLightPos0.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat5.xyz = vec3(u_xlat8) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb27 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + (-_WorldSpaceLightPos0.xyz);
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat16_6.xyz = u_xlat1.xyz * vec3(u_xlat8) + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb27)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_26) + u_xlat16_8;
    u_xlat8 = u_xlat16_8 + 1.0;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati8) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
        u_xlat8 = (-u_xlat0.x) + 1.00100005;
        u_xlat8 = max(u_xlat8, 0.00100000005);
        u_xlat8 = min(u_xlat8, 1.0);
        u_xlat8 = log2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGShininess;
        u_xlat8 = exp2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGScale + _RGBias;
        u_xlat16 = u_xlat10_0.w + 0.100000001;
        u_xlatb5 = greaterThanEqual(vec4(u_xlat16), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb1.xyz = lessThan(vec4(u_xlat16), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb1.x = u_xlatb1.x && u_xlatb5.y;
        u_xlatb1.y = u_xlatb1.y && u_xlatb5.z;
        u_xlatb1.z = u_xlatb1.z && u_xlatb5.w;
        u_xlat16_6 = (u_xlatb1.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb1.y) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_6 = (u_xlatb1.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_5 = (u_xlatb5.x) ? _HRRimColor5 : u_xlat16_6;
        u_xlat16_5 = (int(_MoreHardRimColor) != 0) ? u_xlat16_5 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_26 = inversesqrt(u_xlat16_26);
        u_xlat16_6.xyz = vec3(u_xlat16_26) * _WorldSpaceLightPos0.xyz;
        u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
        u_xlat16_26 = u_xlat16_16 + 0.5;
        u_xlat16_26 = u_xlat0.x * u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_5.w<u_xlat16_26);
#else
        u_xlatb0 = u_xlat16_5.w<u_xlat16_26;
#endif
        u_xlat16_26 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_5.xyz;
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_HRRimPower) + u_xlat16_2.xyz;
        u_xlat16_26 = u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_26 * _RGRatio;
        u_xlat1.xyz = vec3(u_xlat8) * _RGColor.xyz + (-u_xlat16_2.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat16_2.xyz;
        u_xlat16_26 = float(_HRRimIntensity);
        u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat16_6.xyz;
        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
            u_xlat8 = (-u_xlat0.x) + 1.00100005;
            u_xlat8 = max(u_xlat8, 0.00100000005);
            u_xlat8 = min(u_xlat8, 1.0);
            u_xlat8 = log2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGShininess;
            u_xlat8 = exp2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGScale + _RGBias;
            u_xlat16_6.xyz = vec3(u_xlat8) * _RGColor.xyz;
            u_xlat8 = u_xlat10_0.w + 0.100000001;
            u_xlatb3 = greaterThanEqual(vec4(u_xlat8), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb8.xyz = lessThan(vec4(u_xlat8), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb8.x = u_xlatb8.x && u_xlatb3.y;
            u_xlatb8.y = u_xlatb8.y && u_xlatb3.z;
            u_xlatb8.z = u_xlatb8.z && u_xlatb3.w;
            u_xlat16_5 = (u_xlatb8.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_5 = (u_xlatb8.y) ? _HRRimColor2 : u_xlat16_5;
            u_xlat16_5 = (u_xlatb8.x) ? _HRRimColor3 : u_xlat16_5;
            u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_5;
            u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_26 = inversesqrt(u_xlat16_26);
            u_xlat16_7.xyz = vec3(u_xlat16_26) * _WorldSpaceLightPos0.xyz;
            u_xlat16_8 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
            u_xlat16_26 = u_xlat16_8 + 0.5;
            u_xlat16_26 = u_xlat0.x * u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_26);
#else
            u_xlatb0 = u_xlat16_3.w<u_xlat16_26;
#endif
            u_xlat16_26 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz;
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_HRRimPower);
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_6.xyz = u_xlat16_2.xyz + u_xlat16_6.xyz;
            u_xlat16_26 = float(_HRRimIntensity);
            u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_6.xyz);
            SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_6.xyz;
        } else {
            SV_Target0.xyz = u_xlat16_2.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat10_1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
int u_xlati1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec3 u_xlat10_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
mediump float u_xlat16_8;
int u_xlati8;
bvec3 u_xlatb8;
float u_xlat16;
mediump float u_xlat16_16;
bvec2 u_xlatb16;
vec2 u_xlat17;
int u_xlati17;
bool u_xlatb26;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_28 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat1.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati17 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati17) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat17.xy = vec2(u_xlat16_28) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_28 = (u_xlati8 != 0) ? u_xlat17.y : u_xlat17.x;
    u_xlat16_28 = u_xlat16_28 + vs_COLOR1.x;
    u_xlat16_28 = u_xlat16_28 * 0.5 + (-_LightArea);
    u_xlat16_28 = u_xlat16_28 + 1.0;
    u_xlat16_28 = floor(u_xlat16_28);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlati8 = int(u_xlat16_28);
    u_xlat16_4.xyz = (int(u_xlati8) != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (int(u_xlati1) != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_5.xyz = vec3(u_xlat16_28) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8 = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xzw;
    u_xlat1.xzw = u_xlat1.xzw * vec3(u_xlat8) + _WorldSpaceLightPos0.xyz;
    u_xlat8 = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat3.xyz = vec3(u_xlat8) * u_xlat1.xzw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb26 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xzw = u_xlat1.xzw * vec3(u_xlat8) + (-_WorldSpaceLightPos0.xyz);
    u_xlat8 = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat16_6.xyz = u_xlat1.xzw * vec3(u_xlat8) + _CustomLightDir.xyz;
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb26)) ? u_xlat16_6.xyz : u_xlat3.xyz;
    u_xlat16_28 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = log2(u_xlat16_28);
    u_xlat16_28 = u_xlat16_28 * _Shininess;
    u_xlat16_28 = exp2(u_xlat16_28);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_28) + u_xlat16_8;
    u_xlat8 = u_xlat16_8 + 1.0;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati8) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_5.xyz);
        u_xlat8 = (-u_xlat0.x) + 1.00100005;
        u_xlat8 = max(u_xlat8, 0.00100000005);
        u_xlat8 = min(u_xlat8, 1.0);
        u_xlat8 = log2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGShininess;
        u_xlat8 = exp2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGScale + _RGBias;
        u_xlat16 = u_xlat10_0.w + 0.100000001;
        u_xlatb3 = greaterThanEqual(vec4(u_xlat16), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb1.xzw = lessThan(vec4(u_xlat16), vec4(0.600000024, 0.0, 0.400000006, 0.800000012)).xzw;
        u_xlatb1.x = u_xlatb1.x && u_xlatb3.y;
        u_xlatb1.z = u_xlatb1.z && u_xlatb3.z;
        u_xlatb1.w = u_xlatb1.w && u_xlatb3.w;
        u_xlat16_6 = (u_xlatb1.w) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb1.z) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_6 = (u_xlatb1.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_6;
        u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_28 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_28 = inversesqrt(u_xlat16_28);
        u_xlat16_6.xyz = vec3(u_xlat16_28) * _WorldSpaceLightPos0.xyz;
        u_xlat16_16 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
        u_xlat16_28 = u_xlat16_16 + 0.5;
        u_xlat16_28 = u_xlat0.x * u_xlat16_28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_28);
#else
        u_xlatb0 = u_xlat16_3.w<u_xlat16_28;
#endif
        u_xlat16_28 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(u_xlat16_28);
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_HRRimPower) + u_xlat16_4.xyz;
        u_xlat16_28 = u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
        u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_28 * _RGRatio;
        u_xlat1.xzw = vec3(u_xlat8) * _RGColor.xyz + (-u_xlat16_4.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xzw + u_xlat16_4.xyz;
        u_xlat16_28 = float(_HRRimIntensity);
        u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat16_6.xyz;
        SV_Target0.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_5.xyz);
            u_xlat8 = (-u_xlat0.x) + 1.00100005;
            u_xlat8 = max(u_xlat8, 0.00100000005);
            u_xlat8 = min(u_xlat8, 1.0);
            u_xlat8 = log2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGShininess;
            u_xlat8 = exp2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGScale + _RGBias;
            u_xlat16_6.xyz = vec3(u_xlat8) * _RGColor.xyz;
            u_xlat8 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat8), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb8.xyz = lessThan(vec4(u_xlat8), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb8.x = u_xlatb8.x && u_xlatb2.y;
            u_xlatb8.y = u_xlatb8.y && u_xlatb2.z;
            u_xlatb8.z = u_xlatb8.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb8.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb8.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb8.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_28 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_28 = inversesqrt(u_xlat16_28);
            u_xlat16_7.xyz = vec3(u_xlat16_28) * _WorldSpaceLightPos0.xyz;
            u_xlat16_8 = dot(u_xlat16_5.xyz, u_xlat16_7.xyz);
            u_xlat16_28 = u_xlat16_8 + 0.5;
            u_xlat16_28 = u_xlat0.x * u_xlat16_28;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_28);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_28;
#endif
            u_xlat16_28 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(u_xlat16_28);
            u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_HRRimPower);
            u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_5.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
            u_xlat16_28 = float(_HRRimIntensity);
            u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
            SV_Target0.xyz = vec3(u_xlat16_28) * u_xlat16_5.xyz + u_xlat16_6.xyz;
        } else {
            SV_Target0.xyz = u_xlat16_4.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat10_1.y * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
int u_xlati1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec3 u_xlat10_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
mediump float u_xlat16_8;
int u_xlati8;
bvec3 u_xlatb8;
float u_xlat16;
mediump float u_xlat16_16;
bvec2 u_xlatb16;
vec2 u_xlat17;
int u_xlati17;
bool u_xlatb26;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_28 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat1.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati17 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati17) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat17.xy = vec2(u_xlat16_28) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_28 = (u_xlati8 != 0) ? u_xlat17.y : u_xlat17.x;
    u_xlat16_28 = u_xlat16_28 + vs_COLOR1.x;
    u_xlat16_28 = u_xlat16_28 * 0.5 + (-_LightArea);
    u_xlat16_28 = u_xlat16_28 + 1.0;
    u_xlat16_28 = floor(u_xlat16_28);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlati8 = int(u_xlat16_28);
    u_xlat16_4.xyz = (int(u_xlati8) != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (int(u_xlati1) != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_5.xyz = vec3(u_xlat16_28) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8 = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xzw;
    u_xlat1.xzw = u_xlat1.xzw * vec3(u_xlat8) + _WorldSpaceLightPos0.xyz;
    u_xlat8 = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat3.xyz = vec3(u_xlat8) * u_xlat1.xzw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb26 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xzw = u_xlat1.xzw * vec3(u_xlat8) + (-_WorldSpaceLightPos0.xyz);
    u_xlat8 = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat16_6.xyz = u_xlat1.xzw * vec3(u_xlat8) + _CustomLightDir.xyz;
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb26)) ? u_xlat16_6.xyz : u_xlat3.xyz;
    u_xlat16_28 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = log2(u_xlat16_28);
    u_xlat16_28 = u_xlat16_28 * _Shininess;
    u_xlat16_28 = exp2(u_xlat16_28);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_28) + u_xlat16_8;
    u_xlat8 = u_xlat16_8 + 1.0;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati8) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_5.xyz);
        u_xlat8 = (-u_xlat0.x) + 1.00100005;
        u_xlat8 = max(u_xlat8, 0.00100000005);
        u_xlat8 = min(u_xlat8, 1.0);
        u_xlat8 = log2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGShininess;
        u_xlat8 = exp2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGScale + _RGBias;
        u_xlat16 = u_xlat10_0.w + 0.100000001;
        u_xlatb3 = greaterThanEqual(vec4(u_xlat16), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb1.xzw = lessThan(vec4(u_xlat16), vec4(0.600000024, 0.0, 0.400000006, 0.800000012)).xzw;
        u_xlatb1.x = u_xlatb1.x && u_xlatb3.y;
        u_xlatb1.z = u_xlatb1.z && u_xlatb3.z;
        u_xlatb1.w = u_xlatb1.w && u_xlatb3.w;
        u_xlat16_6 = (u_xlatb1.w) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb1.z) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_6 = (u_xlatb1.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_6;
        u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_28 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_28 = inversesqrt(u_xlat16_28);
        u_xlat16_6.xyz = vec3(u_xlat16_28) * _WorldSpaceLightPos0.xyz;
        u_xlat16_16 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
        u_xlat16_28 = u_xlat16_16 + 0.5;
        u_xlat16_28 = u_xlat0.x * u_xlat16_28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_28);
#else
        u_xlatb0 = u_xlat16_3.w<u_xlat16_28;
#endif
        u_xlat16_28 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(u_xlat16_28);
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_HRRimPower) + u_xlat16_4.xyz;
        u_xlat16_28 = u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
        u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_28 * _RGRatio;
        u_xlat1.xzw = vec3(u_xlat8) * _RGColor.xyz + (-u_xlat16_4.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xzw + u_xlat16_4.xyz;
        u_xlat16_28 = float(_HRRimIntensity);
        u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat16_6.xyz;
        SV_Target0.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_5.xyz);
            u_xlat8 = (-u_xlat0.x) + 1.00100005;
            u_xlat8 = max(u_xlat8, 0.00100000005);
            u_xlat8 = min(u_xlat8, 1.0);
            u_xlat8 = log2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGShininess;
            u_xlat8 = exp2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGScale + _RGBias;
            u_xlat16_6.xyz = vec3(u_xlat8) * _RGColor.xyz;
            u_xlat8 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat8), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb8.xyz = lessThan(vec4(u_xlat8), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb8.x = u_xlatb8.x && u_xlatb2.y;
            u_xlatb8.y = u_xlatb8.y && u_xlatb2.z;
            u_xlatb8.z = u_xlatb8.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb8.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb8.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb8.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_28 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_28 = inversesqrt(u_xlat16_28);
            u_xlat16_7.xyz = vec3(u_xlat16_28) * _WorldSpaceLightPos0.xyz;
            u_xlat16_8 = dot(u_xlat16_5.xyz, u_xlat16_7.xyz);
            u_xlat16_28 = u_xlat16_8 + 0.5;
            u_xlat16_28 = u_xlat0.x * u_xlat16_28;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_28);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_28;
#endif
            u_xlat16_28 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(u_xlat16_28);
            u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_HRRimPower);
            u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_5.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
            u_xlat16_28 = float(_HRRimIntensity);
            u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
            SV_Target0.xyz = vec3(u_xlat16_28) * u_xlat16_5.xyz + u_xlat16_6.xyz;
        } else {
            SV_Target0.xyz = u_xlat16_4.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat10_1.y * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
int u_xlati1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec3 u_xlat10_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
mediump float u_xlat16_8;
int u_xlati8;
bvec3 u_xlatb8;
float u_xlat16;
mediump float u_xlat16_16;
bvec2 u_xlatb16;
vec2 u_xlat17;
int u_xlati17;
bool u_xlatb26;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_28 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat1.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati17 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati17) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat17.xy = vec2(u_xlat16_28) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_28 = (u_xlati8 != 0) ? u_xlat17.y : u_xlat17.x;
    u_xlat16_28 = u_xlat16_28 + vs_COLOR1.x;
    u_xlat16_28 = u_xlat16_28 * 0.5 + (-_LightArea);
    u_xlat16_28 = u_xlat16_28 + 1.0;
    u_xlat16_28 = floor(u_xlat16_28);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlati8 = int(u_xlat16_28);
    u_xlat16_4.xyz = (int(u_xlati8) != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (int(u_xlati1) != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_5.xyz = vec3(u_xlat16_28) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8 = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xzw;
    u_xlat1.xzw = u_xlat1.xzw * vec3(u_xlat8) + _WorldSpaceLightPos0.xyz;
    u_xlat8 = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat3.xyz = vec3(u_xlat8) * u_xlat1.xzw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb26 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xzw = u_xlat1.xzw * vec3(u_xlat8) + (-_WorldSpaceLightPos0.xyz);
    u_xlat8 = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat16_6.xyz = u_xlat1.xzw * vec3(u_xlat8) + _CustomLightDir.xyz;
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb26)) ? u_xlat16_6.xyz : u_xlat3.xyz;
    u_xlat16_28 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = log2(u_xlat16_28);
    u_xlat16_28 = u_xlat16_28 * _Shininess;
    u_xlat16_28 = exp2(u_xlat16_28);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_28) + u_xlat16_8;
    u_xlat8 = u_xlat16_8 + 1.0;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati8) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_5.xyz);
        u_xlat8 = (-u_xlat0.x) + 1.00100005;
        u_xlat8 = max(u_xlat8, 0.00100000005);
        u_xlat8 = min(u_xlat8, 1.0);
        u_xlat8 = log2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGShininess;
        u_xlat8 = exp2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGScale + _RGBias;
        u_xlat16 = u_xlat10_0.w + 0.100000001;
        u_xlatb3 = greaterThanEqual(vec4(u_xlat16), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb1.xzw = lessThan(vec4(u_xlat16), vec4(0.600000024, 0.0, 0.400000006, 0.800000012)).xzw;
        u_xlatb1.x = u_xlatb1.x && u_xlatb3.y;
        u_xlatb1.z = u_xlatb1.z && u_xlatb3.z;
        u_xlatb1.w = u_xlatb1.w && u_xlatb3.w;
        u_xlat16_6 = (u_xlatb1.w) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb1.z) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_6 = (u_xlatb1.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_6;
        u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_28 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_28 = inversesqrt(u_xlat16_28);
        u_xlat16_6.xyz = vec3(u_xlat16_28) * _WorldSpaceLightPos0.xyz;
        u_xlat16_16 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
        u_xlat16_28 = u_xlat16_16 + 0.5;
        u_xlat16_28 = u_xlat0.x * u_xlat16_28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_28);
#else
        u_xlatb0 = u_xlat16_3.w<u_xlat16_28;
#endif
        u_xlat16_28 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(u_xlat16_28);
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_HRRimPower) + u_xlat16_4.xyz;
        u_xlat16_28 = u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
        u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_28 * _RGRatio;
        u_xlat1.xzw = vec3(u_xlat8) * _RGColor.xyz + (-u_xlat16_4.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xzw + u_xlat16_4.xyz;
        u_xlat16_28 = float(_HRRimIntensity);
        u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat16_6.xyz;
        SV_Target0.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_5.xyz);
            u_xlat8 = (-u_xlat0.x) + 1.00100005;
            u_xlat8 = max(u_xlat8, 0.00100000005);
            u_xlat8 = min(u_xlat8, 1.0);
            u_xlat8 = log2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGShininess;
            u_xlat8 = exp2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGScale + _RGBias;
            u_xlat16_6.xyz = vec3(u_xlat8) * _RGColor.xyz;
            u_xlat8 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat8), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb8.xyz = lessThan(vec4(u_xlat8), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb8.x = u_xlatb8.x && u_xlatb2.y;
            u_xlatb8.y = u_xlatb8.y && u_xlatb2.z;
            u_xlatb8.z = u_xlatb8.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb8.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb8.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb8.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_28 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_28 = inversesqrt(u_xlat16_28);
            u_xlat16_7.xyz = vec3(u_xlat16_28) * _WorldSpaceLightPos0.xyz;
            u_xlat16_8 = dot(u_xlat16_5.xyz, u_xlat16_7.xyz);
            u_xlat16_28 = u_xlat16_8 + 0.5;
            u_xlat16_28 = u_xlat0.x * u_xlat16_28;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_28);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_28;
#endif
            u_xlat16_28 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(u_xlat16_28);
            u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_HRRimPower);
            u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_5.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
            u_xlat16_28 = float(_HRRimIntensity);
            u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
            SV_Target0.xyz = vec3(u_xlat16_28) * u_xlat16_5.xyz + u_xlat16_6.xyz;
        } else {
            SV_Target0.xyz = u_xlat16_4.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat10_1.y * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
int u_xlati2;
bvec4 u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec4 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
float u_xlat11;
mediump float u_xlat16_11;
int u_xlati11;
bvec3 u_xlatb11;
mediump float u_xlat16_12;
vec2 u_xlat13;
int u_xlati13;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
bvec2 u_xlatb22;
mediump float u_xlat16_24;
lowp vec2 u_xlat10_24;
bool u_xlatb35;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_24 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_24 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_12 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat5.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat5.w = u_xlat2.x * u_xlat16_12 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat5;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat2.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat2.x = max(u_xlat2.x, 0.0);
    u_xlati2 = int(u_xlat2.x);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati13 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati13) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11 = floor(u_xlat11);
    u_xlat11 = max(u_xlat11, 0.0);
    u_xlati11 = int(u_xlat11);
    u_xlat13.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11 != 0) ? u_xlat13.y : u_xlat13.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11 = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (int(u_xlati11) != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + _WorldSpaceLightPos0.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat3.xyz = vec3(u_xlat11) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + (-_WorldSpaceLightPos0.xyz);
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat16_9.xyz = u_xlat1.xyz * vec3(u_xlat11) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb35)) ? u_xlat16_9.xyz : u_xlat3.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_11 = (-u_xlat16_40) + u_xlat16_11;
    u_xlat11 = u_xlat16_11 + 1.0;
    u_xlat11 = floor(u_xlat11);
    u_xlat11 = max(u_xlat11, 0.0);
    u_xlati11 = int(u_xlat11);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati11) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz + u_xlat16_9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_8.xyz);
        u_xlat11 = (-u_xlat0.x) + 1.00100005;
        u_xlat11 = max(u_xlat11, 0.00100000005);
        u_xlat11 = min(u_xlat11, 1.0);
        u_xlat11 = log2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGShininess;
        u_xlat11 = exp2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGScale + _RGBias;
        u_xlat22 = u_xlat10_0.w + 0.100000001;
        u_xlatb3 = greaterThanEqual(vec4(u_xlat22), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb1.xyz = lessThan(vec4(u_xlat22), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb1.x = u_xlatb1.x && u_xlatb3.y;
        u_xlatb1.y = u_xlatb1.y && u_xlatb3.z;
        u_xlatb1.z = u_xlatb1.z && u_xlatb3.w;
        u_xlat16_4 = (u_xlatb1.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_4 = (u_xlatb1.y) ? _HRRimColor2 : u_xlat16_4;
        u_xlat16_4 = (u_xlatb1.x) ? _HRRimColor3 : u_xlat16_4;
        u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_4;
        u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_40 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_40 = inversesqrt(u_xlat16_40);
        u_xlat16_9.xyz = vec3(u_xlat16_40) * _WorldSpaceLightPos0.xyz;
        u_xlat16_22 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
        u_xlat16_40 = u_xlat16_22 + 0.5;
        u_xlat16_40 = u_xlat0.x * u_xlat16_40;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_40);
#else
        u_xlatb0 = u_xlat16_3.w<u_xlat16_40;
#endif
        u_xlat16_40 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_9.xyz = u_xlat16_3.xyz * vec3(u_xlat16_40);
        u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(_HRRimPower) + u_xlat16_7.xyz;
        u_xlat16_40 = u_xlat11;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_40 = min(max(u_xlat16_40, 0.0), 1.0);
#else
        u_xlat16_40 = clamp(u_xlat16_40, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_40 * _RGRatio;
        u_xlat1.xyz = vec3(u_xlat11) * _RGColor.xyz + (-u_xlat16_7.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat16_7.xyz;
        u_xlat16_40 = float(_HRRimIntensity);
        u_xlat16_9.xyz = (-u_xlat0.xyz) + u_xlat16_9.xyz;
        SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_8.xyz);
            u_xlat11 = (-u_xlat0.x) + 1.00100005;
            u_xlat11 = max(u_xlat11, 0.00100000005);
            u_xlat11 = min(u_xlat11, 1.0);
            u_xlat11 = log2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGShininess;
            u_xlat11 = exp2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGScale + _RGBias;
            u_xlat16_9.xyz = vec3(u_xlat11) * _RGColor.xyz;
            u_xlat11 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat11), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb11.xyz = lessThan(vec4(u_xlat11), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb11.x = u_xlatb11.x && u_xlatb2.y;
            u_xlatb11.y = u_xlatb11.y && u_xlatb2.z;
            u_xlatb11.z = u_xlatb11.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb11.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb11.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb11.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_40 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_40 = inversesqrt(u_xlat16_40);
            u_xlat16_10.xyz = vec3(u_xlat16_40) * _WorldSpaceLightPos0.xyz;
            u_xlat16_11 = dot(u_xlat16_8.xyz, u_xlat16_10.xyz);
            u_xlat16_40 = u_xlat16_11 + 0.5;
            u_xlat16_40 = u_xlat0.x * u_xlat16_40;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_40);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_40;
#endif
            u_xlat16_40 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_8.xyz = u_xlat16_2.xyz * vec3(u_xlat16_40);
            u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_HRRimPower);
            u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_8.xyz = u_xlat16_7.xyz + u_xlat16_8.xyz;
            u_xlat16_9.xyz = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_9.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
            u_xlat16_40 = float(_HRRimIntensity);
            u_xlat16_8.xyz = u_xlat16_8.xyz + (-u_xlat16_9.xyz);
            SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat16_8.xyz + u_xlat16_9.xyz;
        } else {
            SV_Target0.xyz = u_xlat16_7.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
int u_xlati2;
bvec4 u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec4 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
float u_xlat11;
mediump float u_xlat16_11;
int u_xlati11;
bvec3 u_xlatb11;
mediump float u_xlat16_12;
vec2 u_xlat13;
int u_xlati13;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
bvec2 u_xlatb22;
mediump float u_xlat16_24;
lowp vec2 u_xlat10_24;
bool u_xlatb35;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_24 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_24 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_12 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat5.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat5.w = u_xlat2.x * u_xlat16_12 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat5;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat2.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat2.x = max(u_xlat2.x, 0.0);
    u_xlati2 = int(u_xlat2.x);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati13 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati13) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11 = floor(u_xlat11);
    u_xlat11 = max(u_xlat11, 0.0);
    u_xlati11 = int(u_xlat11);
    u_xlat13.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11 != 0) ? u_xlat13.y : u_xlat13.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11 = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (int(u_xlati11) != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + _WorldSpaceLightPos0.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat3.xyz = vec3(u_xlat11) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + (-_WorldSpaceLightPos0.xyz);
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat16_9.xyz = u_xlat1.xyz * vec3(u_xlat11) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb35)) ? u_xlat16_9.xyz : u_xlat3.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_11 = (-u_xlat16_40) + u_xlat16_11;
    u_xlat11 = u_xlat16_11 + 1.0;
    u_xlat11 = floor(u_xlat11);
    u_xlat11 = max(u_xlat11, 0.0);
    u_xlati11 = int(u_xlat11);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati11) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz + u_xlat16_9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_8.xyz);
        u_xlat11 = (-u_xlat0.x) + 1.00100005;
        u_xlat11 = max(u_xlat11, 0.00100000005);
        u_xlat11 = min(u_xlat11, 1.0);
        u_xlat11 = log2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGShininess;
        u_xlat11 = exp2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGScale + _RGBias;
        u_xlat22 = u_xlat10_0.w + 0.100000001;
        u_xlatb3 = greaterThanEqual(vec4(u_xlat22), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb1.xyz = lessThan(vec4(u_xlat22), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb1.x = u_xlatb1.x && u_xlatb3.y;
        u_xlatb1.y = u_xlatb1.y && u_xlatb3.z;
        u_xlatb1.z = u_xlatb1.z && u_xlatb3.w;
        u_xlat16_4 = (u_xlatb1.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_4 = (u_xlatb1.y) ? _HRRimColor2 : u_xlat16_4;
        u_xlat16_4 = (u_xlatb1.x) ? _HRRimColor3 : u_xlat16_4;
        u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_4;
        u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_40 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_40 = inversesqrt(u_xlat16_40);
        u_xlat16_9.xyz = vec3(u_xlat16_40) * _WorldSpaceLightPos0.xyz;
        u_xlat16_22 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
        u_xlat16_40 = u_xlat16_22 + 0.5;
        u_xlat16_40 = u_xlat0.x * u_xlat16_40;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_40);
#else
        u_xlatb0 = u_xlat16_3.w<u_xlat16_40;
#endif
        u_xlat16_40 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_9.xyz = u_xlat16_3.xyz * vec3(u_xlat16_40);
        u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(_HRRimPower) + u_xlat16_7.xyz;
        u_xlat16_40 = u_xlat11;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_40 = min(max(u_xlat16_40, 0.0), 1.0);
#else
        u_xlat16_40 = clamp(u_xlat16_40, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_40 * _RGRatio;
        u_xlat1.xyz = vec3(u_xlat11) * _RGColor.xyz + (-u_xlat16_7.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat16_7.xyz;
        u_xlat16_40 = float(_HRRimIntensity);
        u_xlat16_9.xyz = (-u_xlat0.xyz) + u_xlat16_9.xyz;
        SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_8.xyz);
            u_xlat11 = (-u_xlat0.x) + 1.00100005;
            u_xlat11 = max(u_xlat11, 0.00100000005);
            u_xlat11 = min(u_xlat11, 1.0);
            u_xlat11 = log2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGShininess;
            u_xlat11 = exp2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGScale + _RGBias;
            u_xlat16_9.xyz = vec3(u_xlat11) * _RGColor.xyz;
            u_xlat11 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat11), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb11.xyz = lessThan(vec4(u_xlat11), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb11.x = u_xlatb11.x && u_xlatb2.y;
            u_xlatb11.y = u_xlatb11.y && u_xlatb2.z;
            u_xlatb11.z = u_xlatb11.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb11.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb11.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb11.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_40 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_40 = inversesqrt(u_xlat16_40);
            u_xlat16_10.xyz = vec3(u_xlat16_40) * _WorldSpaceLightPos0.xyz;
            u_xlat16_11 = dot(u_xlat16_8.xyz, u_xlat16_10.xyz);
            u_xlat16_40 = u_xlat16_11 + 0.5;
            u_xlat16_40 = u_xlat0.x * u_xlat16_40;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_40);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_40;
#endif
            u_xlat16_40 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_8.xyz = u_xlat16_2.xyz * vec3(u_xlat16_40);
            u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_HRRimPower);
            u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_8.xyz = u_xlat16_7.xyz + u_xlat16_8.xyz;
            u_xlat16_9.xyz = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_9.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
            u_xlat16_40 = float(_HRRimIntensity);
            u_xlat16_8.xyz = u_xlat16_8.xyz + (-u_xlat16_9.xyz);
            SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat16_8.xyz + u_xlat16_9.xyz;
        } else {
            SV_Target0.xyz = u_xlat16_7.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
int u_xlati2;
bvec4 u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec4 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
float u_xlat11;
mediump float u_xlat16_11;
int u_xlati11;
bvec3 u_xlatb11;
mediump float u_xlat16_12;
vec2 u_xlat13;
int u_xlati13;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
bvec2 u_xlatb22;
mediump float u_xlat16_24;
lowp vec2 u_xlat10_24;
bool u_xlatb35;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_24 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_24 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_12 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat5.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat5.w = u_xlat2.x * u_xlat16_12 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat5;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat2.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat2.x = max(u_xlat2.x, 0.0);
    u_xlati2 = int(u_xlat2.x);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati13 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati13) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11 = floor(u_xlat11);
    u_xlat11 = max(u_xlat11, 0.0);
    u_xlati11 = int(u_xlat11);
    u_xlat13.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11 != 0) ? u_xlat13.y : u_xlat13.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11 = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (int(u_xlati11) != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + _WorldSpaceLightPos0.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat3.xyz = vec3(u_xlat11) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + (-_WorldSpaceLightPos0.xyz);
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat16_9.xyz = u_xlat1.xyz * vec3(u_xlat11) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb35)) ? u_xlat16_9.xyz : u_xlat3.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_11 = (-u_xlat16_40) + u_xlat16_11;
    u_xlat11 = u_xlat16_11 + 1.0;
    u_xlat11 = floor(u_xlat11);
    u_xlat11 = max(u_xlat11, 0.0);
    u_xlati11 = int(u_xlat11);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati11) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz + u_xlat16_9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_8.xyz);
        u_xlat11 = (-u_xlat0.x) + 1.00100005;
        u_xlat11 = max(u_xlat11, 0.00100000005);
        u_xlat11 = min(u_xlat11, 1.0);
        u_xlat11 = log2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGShininess;
        u_xlat11 = exp2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGScale + _RGBias;
        u_xlat22 = u_xlat10_0.w + 0.100000001;
        u_xlatb3 = greaterThanEqual(vec4(u_xlat22), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb1.xyz = lessThan(vec4(u_xlat22), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb1.x = u_xlatb1.x && u_xlatb3.y;
        u_xlatb1.y = u_xlatb1.y && u_xlatb3.z;
        u_xlatb1.z = u_xlatb1.z && u_xlatb3.w;
        u_xlat16_4 = (u_xlatb1.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_4 = (u_xlatb1.y) ? _HRRimColor2 : u_xlat16_4;
        u_xlat16_4 = (u_xlatb1.x) ? _HRRimColor3 : u_xlat16_4;
        u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_4;
        u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_40 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_40 = inversesqrt(u_xlat16_40);
        u_xlat16_9.xyz = vec3(u_xlat16_40) * _WorldSpaceLightPos0.xyz;
        u_xlat16_22 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
        u_xlat16_40 = u_xlat16_22 + 0.5;
        u_xlat16_40 = u_xlat0.x * u_xlat16_40;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_40);
#else
        u_xlatb0 = u_xlat16_3.w<u_xlat16_40;
#endif
        u_xlat16_40 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_9.xyz = u_xlat16_3.xyz * vec3(u_xlat16_40);
        u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(_HRRimPower) + u_xlat16_7.xyz;
        u_xlat16_40 = u_xlat11;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_40 = min(max(u_xlat16_40, 0.0), 1.0);
#else
        u_xlat16_40 = clamp(u_xlat16_40, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_40 * _RGRatio;
        u_xlat1.xyz = vec3(u_xlat11) * _RGColor.xyz + (-u_xlat16_7.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat16_7.xyz;
        u_xlat16_40 = float(_HRRimIntensity);
        u_xlat16_9.xyz = (-u_xlat0.xyz) + u_xlat16_9.xyz;
        SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_8.xyz);
            u_xlat11 = (-u_xlat0.x) + 1.00100005;
            u_xlat11 = max(u_xlat11, 0.00100000005);
            u_xlat11 = min(u_xlat11, 1.0);
            u_xlat11 = log2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGShininess;
            u_xlat11 = exp2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGScale + _RGBias;
            u_xlat16_9.xyz = vec3(u_xlat11) * _RGColor.xyz;
            u_xlat11 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat11), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb11.xyz = lessThan(vec4(u_xlat11), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb11.x = u_xlatb11.x && u_xlatb2.y;
            u_xlatb11.y = u_xlatb11.y && u_xlatb2.z;
            u_xlatb11.z = u_xlatb11.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb11.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb11.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb11.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_40 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_40 = inversesqrt(u_xlat16_40);
            u_xlat16_10.xyz = vec3(u_xlat16_40) * _WorldSpaceLightPos0.xyz;
            u_xlat16_11 = dot(u_xlat16_8.xyz, u_xlat16_10.xyz);
            u_xlat16_40 = u_xlat16_11 + 0.5;
            u_xlat16_40 = u_xlat0.x * u_xlat16_40;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_40);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_40;
#endif
            u_xlat16_40 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_8.xyz = u_xlat16_2.xyz * vec3(u_xlat16_40);
            u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_HRRimPower);
            u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_8.xyz = u_xlat16_7.xyz + u_xlat16_8.xyz;
            u_xlat16_9.xyz = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_9.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
            u_xlat16_40 = float(_HRRimIntensity);
            u_xlat16_8.xyz = u_xlat16_8.xyz + (-u_xlat16_9.xyz);
            SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat16_8.xyz + u_xlat16_9.xyz;
        } else {
            SV_Target0.xyz = u_xlat16_7.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
ivec3 u_xlati7;
mediump vec3 u_xlat16_9;
float u_xlat14;
mediump float u_xlat16_14;
int u_xlati14;
bvec2 u_xlatb14;
float u_xlat21;
float u_xlat22;
mediump float u_xlat16_23;
bool u_xlatb24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_9.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_9.x = u_xlat16_9.x * 0.5 + (-_SecondShadow);
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = floor(u_xlat16_9.x);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlati3 = int(u_xlat16_9.x);
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_9.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati7.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati7.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_4.xyz = vec3(u_xlat16_23) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat1.xyz * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = vec3(u_xlat21) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + (-_WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat21) + _CustomLightDir.xyz;
    u_xlat16_23 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb24)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_23 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = log2(u_xlat16_23);
    u_xlat16_23 = u_xlat16_23 * _Shininess;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_14 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_14 = (-u_xlat16_23) + u_xlat16_14;
    u_xlat14 = u_xlat16_14 + 1.0;
    u_xlat14 = floor(u_xlat14);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlati14 = int(u_xlat14);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati14) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
    u_xlat16_2.w = u_xlat10_1.w * vs_COLOR1.y;
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat22 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat22 = u_xlat22 * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xyz * u_xlat7.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat21)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_4.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat21 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat21) * vec2(1.70000005, 1.5) + (-vec2(u_xlat22));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat21 = u_xlat21 * 1.70000005 + (-u_xlat22);
    u_xlat21 = u_xlat21 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat21 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_4.xyz = (u_xlati1.x != 0) ? u_xlat16_4.xyz : u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat21) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
ivec3 u_xlati7;
mediump vec3 u_xlat16_9;
float u_xlat14;
mediump float u_xlat16_14;
int u_xlati14;
bvec2 u_xlatb14;
float u_xlat21;
float u_xlat22;
mediump float u_xlat16_23;
bool u_xlatb24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_9.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_9.x = u_xlat16_9.x * 0.5 + (-_SecondShadow);
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = floor(u_xlat16_9.x);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlati3 = int(u_xlat16_9.x);
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_9.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati7.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati7.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_4.xyz = vec3(u_xlat16_23) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat1.xyz * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = vec3(u_xlat21) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + (-_WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat21) + _CustomLightDir.xyz;
    u_xlat16_23 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb24)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_23 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = log2(u_xlat16_23);
    u_xlat16_23 = u_xlat16_23 * _Shininess;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_14 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_14 = (-u_xlat16_23) + u_xlat16_14;
    u_xlat14 = u_xlat16_14 + 1.0;
    u_xlat14 = floor(u_xlat14);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlati14 = int(u_xlat14);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati14) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
    u_xlat16_2.w = u_xlat10_1.w * vs_COLOR1.y;
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat22 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat22 = u_xlat22 * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xyz * u_xlat7.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat21)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_4.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat21 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat21) * vec2(1.70000005, 1.5) + (-vec2(u_xlat22));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat21 = u_xlat21 * 1.70000005 + (-u_xlat22);
    u_xlat21 = u_xlat21 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat21 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_4.xyz = (u_xlati1.x != 0) ? u_xlat16_4.xyz : u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat21) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
ivec3 u_xlati7;
mediump vec3 u_xlat16_9;
float u_xlat14;
mediump float u_xlat16_14;
int u_xlati14;
bvec2 u_xlatb14;
float u_xlat21;
float u_xlat22;
mediump float u_xlat16_23;
bool u_xlatb24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_9.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_9.x = u_xlat16_9.x * 0.5 + (-_SecondShadow);
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = floor(u_xlat16_9.x);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlati3 = int(u_xlat16_9.x);
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_9.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati7.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati7.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_4.xyz = vec3(u_xlat16_23) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat1.xyz * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = vec3(u_xlat21) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + (-_WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat21) + _CustomLightDir.xyz;
    u_xlat16_23 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb24)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_23 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = log2(u_xlat16_23);
    u_xlat16_23 = u_xlat16_23 * _Shininess;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_14 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_14 = (-u_xlat16_23) + u_xlat16_14;
    u_xlat14 = u_xlat16_14 + 1.0;
    u_xlat14 = floor(u_xlat14);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlati14 = int(u_xlat14);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati14) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
    u_xlat16_2.w = u_xlat10_1.w * vs_COLOR1.y;
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat22 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat22 = u_xlat22 * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xyz * u_xlat7.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat21)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_4.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat21 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat21) * vec2(1.70000005, 1.5) + (-vec2(u_xlat22));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat21 = u_xlat21 * 1.70000005 + (-u_xlat22);
    u_xlat21 = u_xlat21 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat21 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_4.xyz = (u_xlati1.x != 0) ? u_xlat16_4.xyz : u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat21) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
ivec3 u_xlati7;
mediump vec3 u_xlat16_9;
float u_xlat14;
mediump float u_xlat16_14;
int u_xlati14;
bvec2 u_xlatb14;
float u_xlat21;
float u_xlat22;
mediump float u_xlat16_23;
bool u_xlatb24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_9.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_9.x = u_xlat16_9.x * 0.5 + (-_SecondShadow);
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = floor(u_xlat16_9.x);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlati3 = int(u_xlat16_9.x);
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_9.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati7.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati7.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_4.xyz = vec3(u_xlat16_23) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat1.xyz * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = vec3(u_xlat21) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + (-_WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat21) + _CustomLightDir.xyz;
    u_xlat16_23 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb24)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_23 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = log2(u_xlat16_23);
    u_xlat16_23 = u_xlat16_23 * _Shininess;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_14 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_14 = (-u_xlat16_23) + u_xlat16_14;
    u_xlat14 = u_xlat16_14 + 1.0;
    u_xlat14 = floor(u_xlat14);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlati14 = int(u_xlat14);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati14) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
    u_xlat16_2.w = u_xlat10_1.w * vs_COLOR1.y;
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat22 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat22 = u_xlat22 * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xyz * u_xlat7.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat21)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_4.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat21 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat21) * vec2(1.70000005, 1.5) + (-vec2(u_xlat22));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat21 = u_xlat21 * 1.70000005 + (-u_xlat22);
    u_xlat21 = u_xlat21 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat21 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_4.xyz = (u_xlati1.x != 0) ? u_xlat16_4.xyz : u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat21) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
ivec3 u_xlati7;
mediump vec3 u_xlat16_9;
float u_xlat14;
mediump float u_xlat16_14;
int u_xlati14;
bvec2 u_xlatb14;
float u_xlat21;
float u_xlat22;
mediump float u_xlat16_23;
bool u_xlatb24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_9.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_9.x = u_xlat16_9.x * 0.5 + (-_SecondShadow);
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = floor(u_xlat16_9.x);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlati3 = int(u_xlat16_9.x);
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_9.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati7.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati7.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_4.xyz = vec3(u_xlat16_23) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat1.xyz * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = vec3(u_xlat21) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + (-_WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat21) + _CustomLightDir.xyz;
    u_xlat16_23 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb24)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_23 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = log2(u_xlat16_23);
    u_xlat16_23 = u_xlat16_23 * _Shininess;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_14 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_14 = (-u_xlat16_23) + u_xlat16_14;
    u_xlat14 = u_xlat16_14 + 1.0;
    u_xlat14 = floor(u_xlat14);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlati14 = int(u_xlat14);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati14) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
    u_xlat16_2.w = u_xlat10_1.w * vs_COLOR1.y;
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat22 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat22 = u_xlat22 * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xyz * u_xlat7.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat21)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_4.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat21 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat21) * vec2(1.70000005, 1.5) + (-vec2(u_xlat22));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat21 = u_xlat21 * 1.70000005 + (-u_xlat22);
    u_xlat21 = u_xlat21 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat21 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_4.xyz = (u_xlati1.x != 0) ? u_xlat16_4.xyz : u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat21) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
ivec3 u_xlati7;
mediump vec3 u_xlat16_9;
float u_xlat14;
mediump float u_xlat16_14;
int u_xlati14;
bvec2 u_xlatb14;
float u_xlat21;
float u_xlat22;
mediump float u_xlat16_23;
bool u_xlatb24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_9.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_9.x = u_xlat16_9.x * 0.5 + (-_SecondShadow);
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = floor(u_xlat16_9.x);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlati3 = int(u_xlat16_9.x);
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_9.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati7.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati7.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_4.xyz = vec3(u_xlat16_23) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat1.xyz * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = vec3(u_xlat21) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + (-_WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat21) + _CustomLightDir.xyz;
    u_xlat16_23 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb24)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_23 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = log2(u_xlat16_23);
    u_xlat16_23 = u_xlat16_23 * _Shininess;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_14 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_14 = (-u_xlat16_23) + u_xlat16_14;
    u_xlat14 = u_xlat16_14 + 1.0;
    u_xlat14 = floor(u_xlat14);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlati14 = int(u_xlat14);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati14) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
    u_xlat16_2.w = u_xlat10_1.w * vs_COLOR1.y;
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat22 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat22 = u_xlat22 * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xyz * u_xlat7.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat21)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_4.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat21 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat21) * vec2(1.70000005, 1.5) + (-vec2(u_xlat22));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat21 = u_xlat21 * 1.70000005 + (-u_xlat22);
    u_xlat21 = u_xlat21 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat21 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_4.xyz = (u_xlati1.x != 0) ? u_xlat16_4.xyz : u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat21) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
ivec3 u_xlati1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
ivec3 u_xlati7;
float u_xlat8;
float u_xlat14;
mediump float u_xlat16_14;
int u_xlati14;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb23;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_25 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1.x = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat1.xz = vec2(u_xlat16_25) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_25 = (u_xlati7.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_25 = u_xlat16_25 + vs_COLOR1.x;
    u_xlat16_25 = u_xlat16_25 * 0.5 + (-_LightArea);
    u_xlat16_25 = u_xlat16_25 + 1.0;
    u_xlat16_25 = floor(u_xlat16_25);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlati7.x = int(u_xlat16_25);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat2.xyz = u_xlat1.xzw * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb23 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat21) + (-_WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat2.xyz * vec3(u_xlat21) + _CustomLightDir.xyz;
    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb23)) ? u_xlat16_6.xyz : u_xlat3.xyz;
    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_25 = log2(u_xlat16_25);
    u_xlat16_25 = u_xlat16_25 * _Shininess;
    u_xlat16_25 = exp2(u_xlat16_25);
    u_xlat16_14 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_14 = (-u_xlat16_25) + u_xlat16_14;
    u_xlat14 = u_xlat16_14 + 1.0;
    u_xlat14 = floor(u_xlat14);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlati14 = int(u_xlat14);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati14) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_4.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
    u_xlat16_2.w = u_xlat10_1.y * vs_COLOR1.y;
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_4.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat8 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat8 = u_xlat8 * 1.99000001 + -1.0;
    u_xlat1.xzw = u_xlat1.xzw * u_xlat7.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xzw * u_xlat7.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat16_5.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat0.xyz = u_xlat16_5.xyz * (-vec3(u_xlat21)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_5.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_5.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_5.xyz;
    u_xlat21 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xz = vec2(u_xlat21) * vec2(1.70000005, 1.5) + (-vec2(u_xlat8));
    u_xlat1.xz = u_xlat1.xz + vec2(1.0, 1.0);
    u_xlat1.xz = floor(u_xlat1.xz);
    u_xlat1.xz = max(u_xlat1.xz, vec2(0.0, 0.0));
    u_xlati1.xz = ivec2(u_xlat1.xz);
    u_xlat21 = u_xlat21 * 1.70000005 + (-u_xlat8);
    u_xlat21 = u_xlat21 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_5.xyz = (u_xlati1.z != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat21 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_5.xyz : u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_4;
    u_xlat0 = vec4(u_xlat21) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
ivec3 u_xlati1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
ivec3 u_xlati7;
float u_xlat8;
float u_xlat14;
mediump float u_xlat16_14;
int u_xlati14;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb23;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_25 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1.x = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat1.xz = vec2(u_xlat16_25) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_25 = (u_xlati7.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_25 = u_xlat16_25 + vs_COLOR1.x;
    u_xlat16_25 = u_xlat16_25 * 0.5 + (-_LightArea);
    u_xlat16_25 = u_xlat16_25 + 1.0;
    u_xlat16_25 = floor(u_xlat16_25);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlati7.x = int(u_xlat16_25);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat2.xyz = u_xlat1.xzw * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb23 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat21) + (-_WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat2.xyz * vec3(u_xlat21) + _CustomLightDir.xyz;
    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb23)) ? u_xlat16_6.xyz : u_xlat3.xyz;
    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_25 = log2(u_xlat16_25);
    u_xlat16_25 = u_xlat16_25 * _Shininess;
    u_xlat16_25 = exp2(u_xlat16_25);
    u_xlat16_14 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_14 = (-u_xlat16_25) + u_xlat16_14;
    u_xlat14 = u_xlat16_14 + 1.0;
    u_xlat14 = floor(u_xlat14);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlati14 = int(u_xlat14);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati14) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_4.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
    u_xlat16_2.w = u_xlat10_1.y * vs_COLOR1.y;
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_4.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat8 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat8 = u_xlat8 * 1.99000001 + -1.0;
    u_xlat1.xzw = u_xlat1.xzw * u_xlat7.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xzw * u_xlat7.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat16_5.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat0.xyz = u_xlat16_5.xyz * (-vec3(u_xlat21)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_5.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_5.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_5.xyz;
    u_xlat21 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xz = vec2(u_xlat21) * vec2(1.70000005, 1.5) + (-vec2(u_xlat8));
    u_xlat1.xz = u_xlat1.xz + vec2(1.0, 1.0);
    u_xlat1.xz = floor(u_xlat1.xz);
    u_xlat1.xz = max(u_xlat1.xz, vec2(0.0, 0.0));
    u_xlati1.xz = ivec2(u_xlat1.xz);
    u_xlat21 = u_xlat21 * 1.70000005 + (-u_xlat8);
    u_xlat21 = u_xlat21 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_5.xyz = (u_xlati1.z != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat21 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_5.xyz : u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_4;
    u_xlat0 = vec4(u_xlat21) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
ivec3 u_xlati1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
ivec3 u_xlati7;
float u_xlat8;
float u_xlat14;
mediump float u_xlat16_14;
int u_xlati14;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb23;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_25 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1.x = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat1.xz = vec2(u_xlat16_25) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_25 = (u_xlati7.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_25 = u_xlat16_25 + vs_COLOR1.x;
    u_xlat16_25 = u_xlat16_25 * 0.5 + (-_LightArea);
    u_xlat16_25 = u_xlat16_25 + 1.0;
    u_xlat16_25 = floor(u_xlat16_25);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlati7.x = int(u_xlat16_25);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat2.xyz = u_xlat1.xzw * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb23 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat21) + (-_WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat2.xyz * vec3(u_xlat21) + _CustomLightDir.xyz;
    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb23)) ? u_xlat16_6.xyz : u_xlat3.xyz;
    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_25 = log2(u_xlat16_25);
    u_xlat16_25 = u_xlat16_25 * _Shininess;
    u_xlat16_25 = exp2(u_xlat16_25);
    u_xlat16_14 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_14 = (-u_xlat16_25) + u_xlat16_14;
    u_xlat14 = u_xlat16_14 + 1.0;
    u_xlat14 = floor(u_xlat14);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlati14 = int(u_xlat14);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati14) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_4.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
    u_xlat16_2.w = u_xlat10_1.y * vs_COLOR1.y;
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_4.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat8 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat8 = u_xlat8 * 1.99000001 + -1.0;
    u_xlat1.xzw = u_xlat1.xzw * u_xlat7.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xzw * u_xlat7.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat16_5.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat0.xyz = u_xlat16_5.xyz * (-vec3(u_xlat21)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_5.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_5.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_5.xyz;
    u_xlat21 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xz = vec2(u_xlat21) * vec2(1.70000005, 1.5) + (-vec2(u_xlat8));
    u_xlat1.xz = u_xlat1.xz + vec2(1.0, 1.0);
    u_xlat1.xz = floor(u_xlat1.xz);
    u_xlat1.xz = max(u_xlat1.xz, vec2(0.0, 0.0));
    u_xlati1.xz = ivec2(u_xlat1.xz);
    u_xlat21 = u_xlat21 * 1.70000005 + (-u_xlat8);
    u_xlat21 = u_xlat21 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_5.xyz = (u_xlati1.z != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat21 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_5.xyz : u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_4;
    u_xlat0 = vec4(u_xlat21) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
ivec2 u_xlati1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
bvec2 u_xlatb22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
bool u_xlatb35;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat2.xyz = u_xlat1.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_9.xyz = u_xlat2.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb35)) ? u_xlat16_9.xyz : u_xlat3.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_40) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_7.xyz * _EnvColor.xyz + u_xlat16_9.xyz;
    u_xlat16_2.w = u_xlat1.w * vs_COLOR1.y;
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_4.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat34 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat34 = u_xlat34 * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat11.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xyz * u_xlat11.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat16_8.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat16_8.xyz * (-vec3(u_xlat33)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat33 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat33) * vec2(1.70000005, 1.5) + (-vec2(u_xlat34));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat33 = u_xlat33 * 1.70000005 + (-u_xlat34);
    u_xlat33 = u_xlat33 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_7.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat33 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati1.x != 0) ? u_xlat16_7.xyz : u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_4;
    u_xlat0 = vec4(u_xlat33) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
ivec2 u_xlati1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
bvec2 u_xlatb22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
bool u_xlatb35;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat2.xyz = u_xlat1.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_9.xyz = u_xlat2.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb35)) ? u_xlat16_9.xyz : u_xlat3.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_40) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_7.xyz * _EnvColor.xyz + u_xlat16_9.xyz;
    u_xlat16_2.w = u_xlat1.w * vs_COLOR1.y;
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_4.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat34 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat34 = u_xlat34 * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat11.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xyz * u_xlat11.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat16_8.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat16_8.xyz * (-vec3(u_xlat33)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat33 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat33) * vec2(1.70000005, 1.5) + (-vec2(u_xlat34));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat33 = u_xlat33 * 1.70000005 + (-u_xlat34);
    u_xlat33 = u_xlat33 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_7.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat33 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati1.x != 0) ? u_xlat16_7.xyz : u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_4;
    u_xlat0 = vec4(u_xlat33) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
ivec2 u_xlati1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
bvec2 u_xlatb22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
bool u_xlatb35;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat2.xyz = u_xlat1.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_9.xyz = u_xlat2.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb35)) ? u_xlat16_9.xyz : u_xlat3.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_40) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_7.xyz * _EnvColor.xyz + u_xlat16_9.xyz;
    u_xlat16_2.w = u_xlat1.w * vs_COLOR1.y;
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_4.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat34 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat34 = u_xlat34 * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat11.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xyz * u_xlat11.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat16_8.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat16_8.xyz * (-vec3(u_xlat33)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat33 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat33) * vec2(1.70000005, 1.5) + (-vec2(u_xlat34));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat33 = u_xlat33 * 1.70000005 + (-u_xlat34);
    u_xlat33 = u_xlat33 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_7.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat33 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati1.x != 0) ? u_xlat16_7.xyz : u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_4;
    u_xlat0 = vec4(u_xlat33) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
ivec2 u_xlati5;
bvec3 u_xlatb5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
lowp vec3 u_xlat10_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_10;
int u_xlati10;
bvec3 u_xlatb10;
mediump vec3 u_xlat16_12;
vec2 u_xlat13;
int u_xlati13;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
bvec2 u_xlatb20;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_34;
bool u_xlatb35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat3.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
    u_xlat16_12.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_12.x = u_xlat16_12.x * 0.5 + (-_SecondShadow);
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = floor(u_xlat16_12.x);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlati13 = int(u_xlat16_12.x);
    u_xlat16_12.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_12.xyz = (int(u_xlati13) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat10 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10 = floor(u_xlat10);
    u_xlat10 = max(u_xlat10, 0.0);
    u_xlati10 = int(u_xlat10);
    u_xlat13.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati10 != 0) ? u_xlat13.y : u_xlat13.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati10 = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (int(u_xlati10) != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_4.xyz = vec3(u_xlat16_32) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat3.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat5.xyz = u_xlat1.xyz * vec3(u_xlat10) + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_32 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_7.xyz = vec3(u_xlat16_32) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb35)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_32 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_32 = max(u_xlat16_32, 0.0);
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat16_32 = u_xlat16_32 * _Shininess;
    u_xlat16_32 = exp2(u_xlat16_32);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_7.xyz;
    u_xlat16_2.w = u_xlat10_1.w * vs_COLOR1.y;
    u_xlat10_5 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_5.w * _SPOpaqueness;
    u_xlat10_8.xyz = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat0.x = u_xlat10_8.x * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + (-_WorldSpaceCameraPos.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat8.xyz = u_xlat10_8.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat8.xyz;
    u_xlat1.xyz = u_xlat1.xyz + _SPCubeMapOffset.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat16_4.xyz);
    u_xlat10 = u_xlat10 + u_xlat10;
    u_xlat1.xyz = u_xlat16_4.xyz * (-vec3(u_xlat10)) + u_xlat1.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_7.xyz;
    u_xlat10 = _SPNoiseScaler * _SPTransition;
    u_xlat5.xy = vec2(u_xlat10) * vec2(1.70000005, 1.5) + (-u_xlat0.xx);
    u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
    u_xlat5.xy = floor(u_xlat5.xy);
    u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
    u_xlati5.xy = ivec2(u_xlat5.xy);
    u_xlat0.x = u_xlat10 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat8.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz + u_xlat1.xyz;
    u_xlat16_7.xyz = (u_xlati5.y != 0) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat0.x = (u_xlati5.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati5.x != 0) ? u_xlat16_7.xyz : u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_6;
    u_xlat1 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_2;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
        u_xlat10 = (-u_xlat0.x) + 1.00100005;
        u_xlat10 = max(u_xlat10, 0.00100000005);
        u_xlat10 = min(u_xlat10, 1.0);
        u_xlat10 = log2(u_xlat10);
        u_xlat10 = u_xlat10 * _RGShininess;
        u_xlat10 = exp2(u_xlat10);
        u_xlat10 = u_xlat10 * _RGScale + _RGBias;
        u_xlat20 = u_xlat10_0.w + 0.100000001;
        u_xlatb2 = greaterThanEqual(vec4(u_xlat20), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb5.xyz = lessThan(vec4(u_xlat20), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb5.x = u_xlatb2.y && u_xlatb5.x;
        u_xlatb5.y = u_xlatb2.z && u_xlatb5.y;
        u_xlatb5.z = u_xlatb2.w && u_xlatb5.z;
        u_xlat16_6 = (u_xlatb5.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb5.y) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_5 = (u_xlatb5.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_5;
        u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_34 = inversesqrt(u_xlat16_34);
        u_xlat16_7.xyz = vec3(u_xlat16_34) * _WorldSpaceLightPos0.xyz;
        u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
        u_xlat16_34 = u_xlat16_20 + 0.5;
        u_xlat16_34 = u_xlat0.x * u_xlat16_34;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_34);
#else
        u_xlatb0 = u_xlat16_2.w<u_xlat16_34;
#endif
        u_xlat16_34 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_7.xyz = u_xlat16_2.xyz * vec3(u_xlat16_34);
        u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_HRRimPower) + u_xlat1.xyz;
        u_xlat16_34 = u_xlat10;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
        u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_34 * _RGRatio;
        u_xlat8.xyz = vec3(u_xlat10) * _RGColor.xyz + (-u_xlat1.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz + u_xlat1.xyz;
        u_xlat16_34 = float(_HRRimIntensity);
        u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat16_7.xyz;
        SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat16_7.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
            u_xlat10 = (-u_xlat0.x) + 1.00100005;
            u_xlat10 = max(u_xlat10, 0.00100000005);
            u_xlat10 = min(u_xlat10, 1.0);
            u_xlat10 = log2(u_xlat10);
            u_xlat10 = u_xlat10 * _RGShininess;
            u_xlat10 = exp2(u_xlat10);
            u_xlat10 = u_xlat10 * _RGScale + _RGBias;
            u_xlat16_7.xyz = vec3(u_xlat10) * _RGColor.xyz;
            u_xlat10 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat10), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb10.xyz = lessThan(vec4(u_xlat10), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb10.x = u_xlatb10.x && u_xlatb2.y;
            u_xlatb10.y = u_xlatb10.y && u_xlatb2.z;
            u_xlatb10.z = u_xlatb10.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb10.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb10.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb10.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_34 = inversesqrt(u_xlat16_34);
            u_xlat16_9.xyz = vec3(u_xlat16_34) * _WorldSpaceLightPos0.xyz;
            u_xlat16_10 = dot(u_xlat16_4.xyz, u_xlat16_9.xyz);
            u_xlat16_4.x = u_xlat16_10 + 0.5;
            u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_4.x);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_4.x;
#endif
            u_xlat16_4.x = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_HRRimPower);
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_4.xyz = u_xlat1.xyz + u_xlat16_4.xyz;
            u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_7.xyz = u_xlat1.xyz + u_xlat16_7.xyz;
            u_xlat16_34 = float(_HRRimIntensity);
            u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_7.xyz);
            SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz + u_xlat16_7.xyz;
        } else {
            SV_Target0.xyz = u_xlat1.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
ivec2 u_xlati5;
bvec3 u_xlatb5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
lowp vec3 u_xlat10_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_10;
int u_xlati10;
bvec3 u_xlatb10;
mediump vec3 u_xlat16_12;
vec2 u_xlat13;
int u_xlati13;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
bvec2 u_xlatb20;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_34;
bool u_xlatb35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat3.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
    u_xlat16_12.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_12.x = u_xlat16_12.x * 0.5 + (-_SecondShadow);
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = floor(u_xlat16_12.x);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlati13 = int(u_xlat16_12.x);
    u_xlat16_12.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_12.xyz = (int(u_xlati13) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat10 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10 = floor(u_xlat10);
    u_xlat10 = max(u_xlat10, 0.0);
    u_xlati10 = int(u_xlat10);
    u_xlat13.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati10 != 0) ? u_xlat13.y : u_xlat13.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati10 = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (int(u_xlati10) != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_4.xyz = vec3(u_xlat16_32) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat3.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat5.xyz = u_xlat1.xyz * vec3(u_xlat10) + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_32 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_7.xyz = vec3(u_xlat16_32) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb35)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_32 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_32 = max(u_xlat16_32, 0.0);
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat16_32 = u_xlat16_32 * _Shininess;
    u_xlat16_32 = exp2(u_xlat16_32);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_7.xyz;
    u_xlat16_2.w = u_xlat10_1.w * vs_COLOR1.y;
    u_xlat10_5 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_5.w * _SPOpaqueness;
    u_xlat10_8.xyz = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat0.x = u_xlat10_8.x * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + (-_WorldSpaceCameraPos.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat8.xyz = u_xlat10_8.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat8.xyz;
    u_xlat1.xyz = u_xlat1.xyz + _SPCubeMapOffset.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat16_4.xyz);
    u_xlat10 = u_xlat10 + u_xlat10;
    u_xlat1.xyz = u_xlat16_4.xyz * (-vec3(u_xlat10)) + u_xlat1.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_7.xyz;
    u_xlat10 = _SPNoiseScaler * _SPTransition;
    u_xlat5.xy = vec2(u_xlat10) * vec2(1.70000005, 1.5) + (-u_xlat0.xx);
    u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
    u_xlat5.xy = floor(u_xlat5.xy);
    u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
    u_xlati5.xy = ivec2(u_xlat5.xy);
    u_xlat0.x = u_xlat10 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat8.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz + u_xlat1.xyz;
    u_xlat16_7.xyz = (u_xlati5.y != 0) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat0.x = (u_xlati5.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati5.x != 0) ? u_xlat16_7.xyz : u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_6;
    u_xlat1 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_2;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
        u_xlat10 = (-u_xlat0.x) + 1.00100005;
        u_xlat10 = max(u_xlat10, 0.00100000005);
        u_xlat10 = min(u_xlat10, 1.0);
        u_xlat10 = log2(u_xlat10);
        u_xlat10 = u_xlat10 * _RGShininess;
        u_xlat10 = exp2(u_xlat10);
        u_xlat10 = u_xlat10 * _RGScale + _RGBias;
        u_xlat20 = u_xlat10_0.w + 0.100000001;
        u_xlatb2 = greaterThanEqual(vec4(u_xlat20), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb5.xyz = lessThan(vec4(u_xlat20), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb5.x = u_xlatb2.y && u_xlatb5.x;
        u_xlatb5.y = u_xlatb2.z && u_xlatb5.y;
        u_xlatb5.z = u_xlatb2.w && u_xlatb5.z;
        u_xlat16_6 = (u_xlatb5.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb5.y) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_5 = (u_xlatb5.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_5;
        u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_34 = inversesqrt(u_xlat16_34);
        u_xlat16_7.xyz = vec3(u_xlat16_34) * _WorldSpaceLightPos0.xyz;
        u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
        u_xlat16_34 = u_xlat16_20 + 0.5;
        u_xlat16_34 = u_xlat0.x * u_xlat16_34;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_34);
#else
        u_xlatb0 = u_xlat16_2.w<u_xlat16_34;
#endif
        u_xlat16_34 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_7.xyz = u_xlat16_2.xyz * vec3(u_xlat16_34);
        u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_HRRimPower) + u_xlat1.xyz;
        u_xlat16_34 = u_xlat10;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
        u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_34 * _RGRatio;
        u_xlat8.xyz = vec3(u_xlat10) * _RGColor.xyz + (-u_xlat1.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz + u_xlat1.xyz;
        u_xlat16_34 = float(_HRRimIntensity);
        u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat16_7.xyz;
        SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat16_7.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
            u_xlat10 = (-u_xlat0.x) + 1.00100005;
            u_xlat10 = max(u_xlat10, 0.00100000005);
            u_xlat10 = min(u_xlat10, 1.0);
            u_xlat10 = log2(u_xlat10);
            u_xlat10 = u_xlat10 * _RGShininess;
            u_xlat10 = exp2(u_xlat10);
            u_xlat10 = u_xlat10 * _RGScale + _RGBias;
            u_xlat16_7.xyz = vec3(u_xlat10) * _RGColor.xyz;
            u_xlat10 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat10), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb10.xyz = lessThan(vec4(u_xlat10), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb10.x = u_xlatb10.x && u_xlatb2.y;
            u_xlatb10.y = u_xlatb10.y && u_xlatb2.z;
            u_xlatb10.z = u_xlatb10.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb10.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb10.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb10.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_34 = inversesqrt(u_xlat16_34);
            u_xlat16_9.xyz = vec3(u_xlat16_34) * _WorldSpaceLightPos0.xyz;
            u_xlat16_10 = dot(u_xlat16_4.xyz, u_xlat16_9.xyz);
            u_xlat16_4.x = u_xlat16_10 + 0.5;
            u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_4.x);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_4.x;
#endif
            u_xlat16_4.x = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_HRRimPower);
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_4.xyz = u_xlat1.xyz + u_xlat16_4.xyz;
            u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_7.xyz = u_xlat1.xyz + u_xlat16_7.xyz;
            u_xlat16_34 = float(_HRRimIntensity);
            u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_7.xyz);
            SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz + u_xlat16_7.xyz;
        } else {
            SV_Target0.xyz = u_xlat1.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
ivec2 u_xlati5;
bvec3 u_xlatb5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
lowp vec3 u_xlat10_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_10;
int u_xlati10;
bvec3 u_xlatb10;
mediump vec3 u_xlat16_12;
vec2 u_xlat13;
int u_xlati13;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
bvec2 u_xlatb20;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_34;
bool u_xlatb35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat3.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
    u_xlat16_12.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_12.x = u_xlat16_12.x * 0.5 + (-_SecondShadow);
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = floor(u_xlat16_12.x);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlati13 = int(u_xlat16_12.x);
    u_xlat16_12.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_12.xyz = (int(u_xlati13) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat10 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10 = floor(u_xlat10);
    u_xlat10 = max(u_xlat10, 0.0);
    u_xlati10 = int(u_xlat10);
    u_xlat13.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati10 != 0) ? u_xlat13.y : u_xlat13.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati10 = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (int(u_xlati10) != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_4.xyz = vec3(u_xlat16_32) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat3.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat5.xyz = u_xlat1.xyz * vec3(u_xlat10) + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_32 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_7.xyz = vec3(u_xlat16_32) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb35)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_32 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_32 = max(u_xlat16_32, 0.0);
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat16_32 = u_xlat16_32 * _Shininess;
    u_xlat16_32 = exp2(u_xlat16_32);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_7.xyz;
    u_xlat16_2.w = u_xlat10_1.w * vs_COLOR1.y;
    u_xlat10_5 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_5.w * _SPOpaqueness;
    u_xlat10_8.xyz = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat0.x = u_xlat10_8.x * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + (-_WorldSpaceCameraPos.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat8.xyz = u_xlat10_8.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat8.xyz;
    u_xlat1.xyz = u_xlat1.xyz + _SPCubeMapOffset.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat16_4.xyz);
    u_xlat10 = u_xlat10 + u_xlat10;
    u_xlat1.xyz = u_xlat16_4.xyz * (-vec3(u_xlat10)) + u_xlat1.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_7.xyz;
    u_xlat10 = _SPNoiseScaler * _SPTransition;
    u_xlat5.xy = vec2(u_xlat10) * vec2(1.70000005, 1.5) + (-u_xlat0.xx);
    u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
    u_xlat5.xy = floor(u_xlat5.xy);
    u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
    u_xlati5.xy = ivec2(u_xlat5.xy);
    u_xlat0.x = u_xlat10 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat8.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz + u_xlat1.xyz;
    u_xlat16_7.xyz = (u_xlati5.y != 0) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat0.x = (u_xlati5.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati5.x != 0) ? u_xlat16_7.xyz : u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_6;
    u_xlat1 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_2;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
        u_xlat10 = (-u_xlat0.x) + 1.00100005;
        u_xlat10 = max(u_xlat10, 0.00100000005);
        u_xlat10 = min(u_xlat10, 1.0);
        u_xlat10 = log2(u_xlat10);
        u_xlat10 = u_xlat10 * _RGShininess;
        u_xlat10 = exp2(u_xlat10);
        u_xlat10 = u_xlat10 * _RGScale + _RGBias;
        u_xlat20 = u_xlat10_0.w + 0.100000001;
        u_xlatb2 = greaterThanEqual(vec4(u_xlat20), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb5.xyz = lessThan(vec4(u_xlat20), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb5.x = u_xlatb2.y && u_xlatb5.x;
        u_xlatb5.y = u_xlatb2.z && u_xlatb5.y;
        u_xlatb5.z = u_xlatb2.w && u_xlatb5.z;
        u_xlat16_6 = (u_xlatb5.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb5.y) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_5 = (u_xlatb5.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_5;
        u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_34 = inversesqrt(u_xlat16_34);
        u_xlat16_7.xyz = vec3(u_xlat16_34) * _WorldSpaceLightPos0.xyz;
        u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
        u_xlat16_34 = u_xlat16_20 + 0.5;
        u_xlat16_34 = u_xlat0.x * u_xlat16_34;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_34);
#else
        u_xlatb0 = u_xlat16_2.w<u_xlat16_34;
#endif
        u_xlat16_34 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_7.xyz = u_xlat16_2.xyz * vec3(u_xlat16_34);
        u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_HRRimPower) + u_xlat1.xyz;
        u_xlat16_34 = u_xlat10;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
        u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_34 * _RGRatio;
        u_xlat8.xyz = vec3(u_xlat10) * _RGColor.xyz + (-u_xlat1.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz + u_xlat1.xyz;
        u_xlat16_34 = float(_HRRimIntensity);
        u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat16_7.xyz;
        SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat16_7.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
            u_xlat10 = (-u_xlat0.x) + 1.00100005;
            u_xlat10 = max(u_xlat10, 0.00100000005);
            u_xlat10 = min(u_xlat10, 1.0);
            u_xlat10 = log2(u_xlat10);
            u_xlat10 = u_xlat10 * _RGShininess;
            u_xlat10 = exp2(u_xlat10);
            u_xlat10 = u_xlat10 * _RGScale + _RGBias;
            u_xlat16_7.xyz = vec3(u_xlat10) * _RGColor.xyz;
            u_xlat10 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat10), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb10.xyz = lessThan(vec4(u_xlat10), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb10.x = u_xlatb10.x && u_xlatb2.y;
            u_xlatb10.y = u_xlatb10.y && u_xlatb2.z;
            u_xlatb10.z = u_xlatb10.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb10.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb10.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb10.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_34 = inversesqrt(u_xlat16_34);
            u_xlat16_9.xyz = vec3(u_xlat16_34) * _WorldSpaceLightPos0.xyz;
            u_xlat16_10 = dot(u_xlat16_4.xyz, u_xlat16_9.xyz);
            u_xlat16_4.x = u_xlat16_10 + 0.5;
            u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_4.x);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_4.x;
#endif
            u_xlat16_4.x = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_HRRimPower);
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_4.xyz = u_xlat1.xyz + u_xlat16_4.xyz;
            u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_7.xyz = u_xlat1.xyz + u_xlat16_7.xyz;
            u_xlat16_34 = float(_HRRimIntensity);
            u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_7.xyz);
            SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz + u_xlat16_7.xyz;
        } else {
            SV_Target0.xyz = u_xlat1.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
ivec2 u_xlati5;
bvec3 u_xlatb5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
lowp vec3 u_xlat10_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_10;
int u_xlati10;
bvec3 u_xlatb10;
mediump vec3 u_xlat16_12;
vec2 u_xlat13;
int u_xlati13;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
bvec2 u_xlatb20;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_34;
bool u_xlatb35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat3.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
    u_xlat16_12.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_12.x = u_xlat16_12.x * 0.5 + (-_SecondShadow);
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = floor(u_xlat16_12.x);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlati13 = int(u_xlat16_12.x);
    u_xlat16_12.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_12.xyz = (int(u_xlati13) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat10 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10 = floor(u_xlat10);
    u_xlat10 = max(u_xlat10, 0.0);
    u_xlati10 = int(u_xlat10);
    u_xlat13.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati10 != 0) ? u_xlat13.y : u_xlat13.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati10 = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (int(u_xlati10) != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_4.xyz = vec3(u_xlat16_32) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat3.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat5.xyz = u_xlat1.xyz * vec3(u_xlat10) + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_32 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_7.xyz = vec3(u_xlat16_32) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb35)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_32 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_32 = max(u_xlat16_32, 0.0);
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat16_32 = u_xlat16_32 * _Shininess;
    u_xlat16_32 = exp2(u_xlat16_32);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_7.xyz;
    u_xlat16_2.w = u_xlat10_1.w * vs_COLOR1.y;
    u_xlat10_5 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_5.w * _SPOpaqueness;
    u_xlat10_8.xyz = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat0.x = u_xlat10_8.x * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + (-_WorldSpaceCameraPos.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat8.xyz = u_xlat10_8.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat8.xyz;
    u_xlat1.xyz = u_xlat1.xyz + _SPCubeMapOffset.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat16_4.xyz);
    u_xlat10 = u_xlat10 + u_xlat10;
    u_xlat1.xyz = u_xlat16_4.xyz * (-vec3(u_xlat10)) + u_xlat1.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_7.xyz;
    u_xlat10 = _SPNoiseScaler * _SPTransition;
    u_xlat5.xy = vec2(u_xlat10) * vec2(1.70000005, 1.5) + (-u_xlat0.xx);
    u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
    u_xlat5.xy = floor(u_xlat5.xy);
    u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
    u_xlati5.xy = ivec2(u_xlat5.xy);
    u_xlat0.x = u_xlat10 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat8.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz + u_xlat1.xyz;
    u_xlat16_7.xyz = (u_xlati5.y != 0) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat0.x = (u_xlati5.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati5.x != 0) ? u_xlat16_7.xyz : u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_6;
    u_xlat1 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_2;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
        u_xlat10 = (-u_xlat0.x) + 1.00100005;
        u_xlat10 = max(u_xlat10, 0.00100000005);
        u_xlat10 = min(u_xlat10, 1.0);
        u_xlat10 = log2(u_xlat10);
        u_xlat10 = u_xlat10 * _RGShininess;
        u_xlat10 = exp2(u_xlat10);
        u_xlat10 = u_xlat10 * _RGScale + _RGBias;
        u_xlat20 = u_xlat10_0.w + 0.100000001;
        u_xlatb2 = greaterThanEqual(vec4(u_xlat20), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb5.xyz = lessThan(vec4(u_xlat20), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb5.x = u_xlatb2.y && u_xlatb5.x;
        u_xlatb5.y = u_xlatb2.z && u_xlatb5.y;
        u_xlatb5.z = u_xlatb2.w && u_xlatb5.z;
        u_xlat16_6 = (u_xlatb5.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb5.y) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_5 = (u_xlatb5.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_5;
        u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_34 = inversesqrt(u_xlat16_34);
        u_xlat16_7.xyz = vec3(u_xlat16_34) * _WorldSpaceLightPos0.xyz;
        u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
        u_xlat16_34 = u_xlat16_20 + 0.5;
        u_xlat16_34 = u_xlat0.x * u_xlat16_34;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_34);
#else
        u_xlatb0 = u_xlat16_2.w<u_xlat16_34;
#endif
        u_xlat16_34 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_7.xyz = u_xlat16_2.xyz * vec3(u_xlat16_34);
        u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_HRRimPower) + u_xlat1.xyz;
        u_xlat16_34 = u_xlat10;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
        u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_34 * _RGRatio;
        u_xlat8.xyz = vec3(u_xlat10) * _RGColor.xyz + (-u_xlat1.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz + u_xlat1.xyz;
        u_xlat16_34 = float(_HRRimIntensity);
        u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat16_7.xyz;
        SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat16_7.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
            u_xlat10 = (-u_xlat0.x) + 1.00100005;
            u_xlat10 = max(u_xlat10, 0.00100000005);
            u_xlat10 = min(u_xlat10, 1.0);
            u_xlat10 = log2(u_xlat10);
            u_xlat10 = u_xlat10 * _RGShininess;
            u_xlat10 = exp2(u_xlat10);
            u_xlat10 = u_xlat10 * _RGScale + _RGBias;
            u_xlat16_7.xyz = vec3(u_xlat10) * _RGColor.xyz;
            u_xlat10 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat10), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb10.xyz = lessThan(vec4(u_xlat10), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb10.x = u_xlatb10.x && u_xlatb2.y;
            u_xlatb10.y = u_xlatb10.y && u_xlatb2.z;
            u_xlatb10.z = u_xlatb10.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb10.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb10.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb10.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_34 = inversesqrt(u_xlat16_34);
            u_xlat16_9.xyz = vec3(u_xlat16_34) * _WorldSpaceLightPos0.xyz;
            u_xlat16_10 = dot(u_xlat16_4.xyz, u_xlat16_9.xyz);
            u_xlat16_4.x = u_xlat16_10 + 0.5;
            u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_4.x);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_4.x;
#endif
            u_xlat16_4.x = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_HRRimPower);
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_4.xyz = u_xlat1.xyz + u_xlat16_4.xyz;
            u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_7.xyz = u_xlat1.xyz + u_xlat16_7.xyz;
            u_xlat16_34 = float(_HRRimIntensity);
            u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_7.xyz);
            SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz + u_xlat16_7.xyz;
        } else {
            SV_Target0.xyz = u_xlat1.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
ivec2 u_xlati5;
bvec3 u_xlatb5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
lowp vec3 u_xlat10_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_10;
int u_xlati10;
bvec3 u_xlatb10;
mediump vec3 u_xlat16_12;
vec2 u_xlat13;
int u_xlati13;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
bvec2 u_xlatb20;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_34;
bool u_xlatb35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat3.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
    u_xlat16_12.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_12.x = u_xlat16_12.x * 0.5 + (-_SecondShadow);
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = floor(u_xlat16_12.x);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlati13 = int(u_xlat16_12.x);
    u_xlat16_12.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_12.xyz = (int(u_xlati13) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat10 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10 = floor(u_xlat10);
    u_xlat10 = max(u_xlat10, 0.0);
    u_xlati10 = int(u_xlat10);
    u_xlat13.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati10 != 0) ? u_xlat13.y : u_xlat13.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati10 = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (int(u_xlati10) != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_4.xyz = vec3(u_xlat16_32) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat3.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat5.xyz = u_xlat1.xyz * vec3(u_xlat10) + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_32 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_7.xyz = vec3(u_xlat16_32) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb35)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_32 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_32 = max(u_xlat16_32, 0.0);
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat16_32 = u_xlat16_32 * _Shininess;
    u_xlat16_32 = exp2(u_xlat16_32);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_7.xyz;
    u_xlat16_2.w = u_xlat10_1.w * vs_COLOR1.y;
    u_xlat10_5 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_5.w * _SPOpaqueness;
    u_xlat10_8.xyz = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat0.x = u_xlat10_8.x * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + (-_WorldSpaceCameraPos.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat8.xyz = u_xlat10_8.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat8.xyz;
    u_xlat1.xyz = u_xlat1.xyz + _SPCubeMapOffset.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat16_4.xyz);
    u_xlat10 = u_xlat10 + u_xlat10;
    u_xlat1.xyz = u_xlat16_4.xyz * (-vec3(u_xlat10)) + u_xlat1.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_7.xyz;
    u_xlat10 = _SPNoiseScaler * _SPTransition;
    u_xlat5.xy = vec2(u_xlat10) * vec2(1.70000005, 1.5) + (-u_xlat0.xx);
    u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
    u_xlat5.xy = floor(u_xlat5.xy);
    u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
    u_xlati5.xy = ivec2(u_xlat5.xy);
    u_xlat0.x = u_xlat10 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat8.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz + u_xlat1.xyz;
    u_xlat16_7.xyz = (u_xlati5.y != 0) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat0.x = (u_xlati5.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati5.x != 0) ? u_xlat16_7.xyz : u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_6;
    u_xlat1 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_2;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
        u_xlat10 = (-u_xlat0.x) + 1.00100005;
        u_xlat10 = max(u_xlat10, 0.00100000005);
        u_xlat10 = min(u_xlat10, 1.0);
        u_xlat10 = log2(u_xlat10);
        u_xlat10 = u_xlat10 * _RGShininess;
        u_xlat10 = exp2(u_xlat10);
        u_xlat10 = u_xlat10 * _RGScale + _RGBias;
        u_xlat20 = u_xlat10_0.w + 0.100000001;
        u_xlatb2 = greaterThanEqual(vec4(u_xlat20), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb5.xyz = lessThan(vec4(u_xlat20), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb5.x = u_xlatb2.y && u_xlatb5.x;
        u_xlatb5.y = u_xlatb2.z && u_xlatb5.y;
        u_xlatb5.z = u_xlatb2.w && u_xlatb5.z;
        u_xlat16_6 = (u_xlatb5.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb5.y) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_5 = (u_xlatb5.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_5;
        u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_34 = inversesqrt(u_xlat16_34);
        u_xlat16_7.xyz = vec3(u_xlat16_34) * _WorldSpaceLightPos0.xyz;
        u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
        u_xlat16_34 = u_xlat16_20 + 0.5;
        u_xlat16_34 = u_xlat0.x * u_xlat16_34;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_34);
#else
        u_xlatb0 = u_xlat16_2.w<u_xlat16_34;
#endif
        u_xlat16_34 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_7.xyz = u_xlat16_2.xyz * vec3(u_xlat16_34);
        u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_HRRimPower) + u_xlat1.xyz;
        u_xlat16_34 = u_xlat10;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
        u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_34 * _RGRatio;
        u_xlat8.xyz = vec3(u_xlat10) * _RGColor.xyz + (-u_xlat1.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz + u_xlat1.xyz;
        u_xlat16_34 = float(_HRRimIntensity);
        u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat16_7.xyz;
        SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat16_7.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
            u_xlat10 = (-u_xlat0.x) + 1.00100005;
            u_xlat10 = max(u_xlat10, 0.00100000005);
            u_xlat10 = min(u_xlat10, 1.0);
            u_xlat10 = log2(u_xlat10);
            u_xlat10 = u_xlat10 * _RGShininess;
            u_xlat10 = exp2(u_xlat10);
            u_xlat10 = u_xlat10 * _RGScale + _RGBias;
            u_xlat16_7.xyz = vec3(u_xlat10) * _RGColor.xyz;
            u_xlat10 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat10), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb10.xyz = lessThan(vec4(u_xlat10), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb10.x = u_xlatb10.x && u_xlatb2.y;
            u_xlatb10.y = u_xlatb10.y && u_xlatb2.z;
            u_xlatb10.z = u_xlatb10.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb10.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb10.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb10.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_34 = inversesqrt(u_xlat16_34);
            u_xlat16_9.xyz = vec3(u_xlat16_34) * _WorldSpaceLightPos0.xyz;
            u_xlat16_10 = dot(u_xlat16_4.xyz, u_xlat16_9.xyz);
            u_xlat16_4.x = u_xlat16_10 + 0.5;
            u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_4.x);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_4.x;
#endif
            u_xlat16_4.x = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_HRRimPower);
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_4.xyz = u_xlat1.xyz + u_xlat16_4.xyz;
            u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_7.xyz = u_xlat1.xyz + u_xlat16_7.xyz;
            u_xlat16_34 = float(_HRRimIntensity);
            u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_7.xyz);
            SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz + u_xlat16_7.xyz;
        } else {
            SV_Target0.xyz = u_xlat1.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
ivec2 u_xlati5;
bvec3 u_xlatb5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
lowp vec3 u_xlat10_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_10;
int u_xlati10;
bvec3 u_xlatb10;
mediump vec3 u_xlat16_12;
vec2 u_xlat13;
int u_xlati13;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
bvec2 u_xlatb20;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_34;
bool u_xlatb35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat3.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
    u_xlat16_12.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_12.x = u_xlat16_12.x * 0.5 + (-_SecondShadow);
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = floor(u_xlat16_12.x);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlati13 = int(u_xlat16_12.x);
    u_xlat16_12.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_12.xyz = (int(u_xlati13) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat10 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10 = floor(u_xlat10);
    u_xlat10 = max(u_xlat10, 0.0);
    u_xlati10 = int(u_xlat10);
    u_xlat13.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati10 != 0) ? u_xlat13.y : u_xlat13.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati10 = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (int(u_xlati10) != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_4.xyz = vec3(u_xlat16_32) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat3.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat5.xyz = u_xlat1.xyz * vec3(u_xlat10) + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_32 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_7.xyz = vec3(u_xlat16_32) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb35)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_32 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_32 = max(u_xlat16_32, 0.0);
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat16_32 = u_xlat16_32 * _Shininess;
    u_xlat16_32 = exp2(u_xlat16_32);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_7.xyz;
    u_xlat16_2.w = u_xlat10_1.w * vs_COLOR1.y;
    u_xlat10_5 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_5.w * _SPOpaqueness;
    u_xlat10_8.xyz = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat0.x = u_xlat10_8.x * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + (-_WorldSpaceCameraPos.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat8.xyz = u_xlat10_8.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat8.xyz;
    u_xlat1.xyz = u_xlat1.xyz + _SPCubeMapOffset.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat16_4.xyz);
    u_xlat10 = u_xlat10 + u_xlat10;
    u_xlat1.xyz = u_xlat16_4.xyz * (-vec3(u_xlat10)) + u_xlat1.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_7.xyz;
    u_xlat10 = _SPNoiseScaler * _SPTransition;
    u_xlat5.xy = vec2(u_xlat10) * vec2(1.70000005, 1.5) + (-u_xlat0.xx);
    u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
    u_xlat5.xy = floor(u_xlat5.xy);
    u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
    u_xlati5.xy = ivec2(u_xlat5.xy);
    u_xlat0.x = u_xlat10 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat8.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz + u_xlat1.xyz;
    u_xlat16_7.xyz = (u_xlati5.y != 0) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat0.x = (u_xlati5.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati5.x != 0) ? u_xlat16_7.xyz : u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_6;
    u_xlat1 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_2;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
        u_xlat10 = (-u_xlat0.x) + 1.00100005;
        u_xlat10 = max(u_xlat10, 0.00100000005);
        u_xlat10 = min(u_xlat10, 1.0);
        u_xlat10 = log2(u_xlat10);
        u_xlat10 = u_xlat10 * _RGShininess;
        u_xlat10 = exp2(u_xlat10);
        u_xlat10 = u_xlat10 * _RGScale + _RGBias;
        u_xlat20 = u_xlat10_0.w + 0.100000001;
        u_xlatb2 = greaterThanEqual(vec4(u_xlat20), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb5.xyz = lessThan(vec4(u_xlat20), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb5.x = u_xlatb2.y && u_xlatb5.x;
        u_xlatb5.y = u_xlatb2.z && u_xlatb5.y;
        u_xlatb5.z = u_xlatb2.w && u_xlatb5.z;
        u_xlat16_6 = (u_xlatb5.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb5.y) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_5 = (u_xlatb5.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_5;
        u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_34 = inversesqrt(u_xlat16_34);
        u_xlat16_7.xyz = vec3(u_xlat16_34) * _WorldSpaceLightPos0.xyz;
        u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
        u_xlat16_34 = u_xlat16_20 + 0.5;
        u_xlat16_34 = u_xlat0.x * u_xlat16_34;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_34);
#else
        u_xlatb0 = u_xlat16_2.w<u_xlat16_34;
#endif
        u_xlat16_34 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_7.xyz = u_xlat16_2.xyz * vec3(u_xlat16_34);
        u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_HRRimPower) + u_xlat1.xyz;
        u_xlat16_34 = u_xlat10;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
        u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_34 * _RGRatio;
        u_xlat8.xyz = vec3(u_xlat10) * _RGColor.xyz + (-u_xlat1.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz + u_xlat1.xyz;
        u_xlat16_34 = float(_HRRimIntensity);
        u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat16_7.xyz;
        SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat16_7.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
            u_xlat10 = (-u_xlat0.x) + 1.00100005;
            u_xlat10 = max(u_xlat10, 0.00100000005);
            u_xlat10 = min(u_xlat10, 1.0);
            u_xlat10 = log2(u_xlat10);
            u_xlat10 = u_xlat10 * _RGShininess;
            u_xlat10 = exp2(u_xlat10);
            u_xlat10 = u_xlat10 * _RGScale + _RGBias;
            u_xlat16_7.xyz = vec3(u_xlat10) * _RGColor.xyz;
            u_xlat10 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat10), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb10.xyz = lessThan(vec4(u_xlat10), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb10.x = u_xlatb10.x && u_xlatb2.y;
            u_xlatb10.y = u_xlatb10.y && u_xlatb2.z;
            u_xlatb10.z = u_xlatb10.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb10.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb10.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb10.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_34 = inversesqrt(u_xlat16_34);
            u_xlat16_9.xyz = vec3(u_xlat16_34) * _WorldSpaceLightPos0.xyz;
            u_xlat16_10 = dot(u_xlat16_4.xyz, u_xlat16_9.xyz);
            u_xlat16_4.x = u_xlat16_10 + 0.5;
            u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_4.x);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_4.x;
#endif
            u_xlat16_4.x = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_HRRimPower);
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_4.xyz = u_xlat1.xyz + u_xlat16_4.xyz;
            u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_7.xyz = u_xlat1.xyz + u_xlat16_7.xyz;
            u_xlat16_34 = float(_HRRimIntensity);
            u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_7.xyz);
            SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz + u_xlat16_7.xyz;
        } else {
            SV_Target0.xyz = u_xlat1.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
int u_xlati1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec3 u_xlat10_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
bvec4 u_xlatb3;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
ivec2 u_xlati7;
bvec3 u_xlatb7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
float u_xlat11;
mediump float u_xlat16_11;
int u_xlati11;
bvec3 u_xlatb11;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
bvec2 u_xlatb22;
vec2 u_xlat23;
int u_xlati23;
float u_xlat35;
bool u_xlatb36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_37 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat1.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati23 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati23) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat11 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11 = floor(u_xlat11);
    u_xlat11 = max(u_xlat11, 0.0);
    u_xlati11 = int(u_xlat11);
    u_xlat23.xy = vec2(u_xlat16_37) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_37 = (u_xlati11 != 0) ? u_xlat23.y : u_xlat23.x;
    u_xlat16_37 = u_xlat16_37 + vs_COLOR1.x;
    u_xlat16_37 = u_xlat16_37 * 0.5 + (-_LightArea);
    u_xlat16_37 = u_xlat16_37 + 1.0;
    u_xlat16_37 = floor(u_xlat16_37);
    u_xlat16_37 = max(u_xlat16_37, 0.0);
    u_xlati11 = int(u_xlat16_37);
    u_xlat16_4.xyz = (int(u_xlati11) != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (int(u_xlati1) != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat16_37 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat16_5.xyz = vec3(u_xlat16_37) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11 = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat1.xzw;
    u_xlat3.xyz = u_xlat1.xzw * vec3(u_xlat11) + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat7.xyz = vec3(u_xlat35) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb36 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat35) + (-_WorldSpaceLightPos0.xyz);
    u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat35) + _CustomLightDir.xyz;
    u_xlat16_37 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat16_6.xyz = vec3(u_xlat16_37) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb36)) ? u_xlat16_6.xyz : u_xlat7.xyz;
    u_xlat16_37 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
    u_xlat16_37 = max(u_xlat16_37, 0.0);
    u_xlat16_37 = log2(u_xlat16_37);
    u_xlat16_37 = u_xlat16_37 * _Shininess;
    u_xlat16_37 = exp2(u_xlat16_37);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_37) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_4.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
    u_xlat16_3.w = u_xlat10_1.y * vs_COLOR1.y;
    u_xlat10_4 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_4.w * _SPOpaqueness;
    u_xlat10_7.xyz = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat0.x = u_xlat10_7.x * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xzw * vec3(u_xlat11) + (-_WorldSpaceCameraPos.xyz);
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat7.xyz = u_xlat10_7.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + u_xlat7.xyz;
    u_xlat1.xyz = u_xlat1.xyz + _SPCubeMapOffset.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat16_5.xyz);
    u_xlat11 = u_xlat11 + u_xlat11;
    u_xlat1.xyz = u_xlat16_5.xyz * (-vec3(u_xlat11)) + u_xlat1.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_8.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_8.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_8.xyz;
    u_xlat11 = _SPNoiseScaler * _SPTransition;
    u_xlat7.xy = vec2(u_xlat11) * vec2(1.70000005, 1.5) + (-u_xlat0.xx);
    u_xlat7.xy = u_xlat7.xy + vec2(1.0, 1.0);
    u_xlat7.xy = floor(u_xlat7.xy);
    u_xlat7.xy = max(u_xlat7.xy, vec2(0.0, 0.0));
    u_xlati7.xy = ivec2(u_xlat7.xy);
    u_xlat0.x = u_xlat11 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + u_xlat1.xyz;
    u_xlat16_8.xyz = (u_xlati7.y != 0) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat0.x = (u_xlati7.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_8.xyz = (u_xlati7.x != 0) ? u_xlat16_8.xyz : u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_8.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_3) + u_xlat16_6;
    u_xlat1 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_5.xyz);
        u_xlat11 = (-u_xlat0.x) + 1.00100005;
        u_xlat11 = max(u_xlat11, 0.00100000005);
        u_xlat11 = min(u_xlat11, 1.0);
        u_xlat11 = log2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGShininess;
        u_xlat11 = exp2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGScale + _RGBias;
        u_xlat22 = u_xlat10_0.w + 0.100000001;
        u_xlatb3 = greaterThanEqual(vec4(u_xlat22), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb7.xyz = lessThan(vec4(u_xlat22), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb7.x = u_xlatb3.y && u_xlatb7.x;
        u_xlatb7.y = u_xlatb3.z && u_xlatb7.y;
        u_xlatb7.z = u_xlatb3.w && u_xlatb7.z;
        u_xlat16_4 = (u_xlatb7.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_4 = (u_xlatb7.y) ? _HRRimColor2 : u_xlat16_4;
        u_xlat16_4 = (u_xlatb7.x) ? _HRRimColor3 : u_xlat16_4;
        u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_4;
        u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_38 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_38 = inversesqrt(u_xlat16_38);
        u_xlat16_6.xyz = vec3(u_xlat16_38) * _WorldSpaceLightPos0.xyz;
        u_xlat16_22 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
        u_xlat16_38 = u_xlat16_22 + 0.5;
        u_xlat16_38 = u_xlat0.x * u_xlat16_38;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_38);
#else
        u_xlatb0 = u_xlat16_3.w<u_xlat16_38;
#endif
        u_xlat16_38 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(u_xlat16_38);
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_HRRimPower) + u_xlat1.xyz;
        u_xlat16_38 = u_xlat11;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
        u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_38 * _RGRatio;
        u_xlat7.xyz = vec3(u_xlat11) * _RGColor.xyz + (-u_xlat1.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz + u_xlat1.xyz;
        u_xlat16_38 = float(_HRRimIntensity);
        u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat16_6.xyz;
        SV_Target0.xyz = vec3(u_xlat16_38) * u_xlat16_6.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_5.xyz);
            u_xlat11 = (-u_xlat0.x) + 1.00100005;
            u_xlat11 = max(u_xlat11, 0.00100000005);
            u_xlat11 = min(u_xlat11, 1.0);
            u_xlat11 = log2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGShininess;
            u_xlat11 = exp2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGScale + _RGBias;
            u_xlat16_6.xyz = vec3(u_xlat11) * _RGColor.xyz;
            u_xlat11 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat11), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb11.xyz = lessThan(vec4(u_xlat11), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb11.x = u_xlatb11.x && u_xlatb2.y;
            u_xlatb11.y = u_xlatb11.y && u_xlatb2.z;
            u_xlatb11.z = u_xlatb11.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb11.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb11.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb11.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_38 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_38 = inversesqrt(u_xlat16_38);
            u_xlat16_8.xyz = vec3(u_xlat16_38) * _WorldSpaceLightPos0.xyz;
            u_xlat16_11 = dot(u_xlat16_5.xyz, u_xlat16_8.xyz);
            u_xlat16_5.x = u_xlat16_11 + 0.5;
            u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_5.x);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_5.x;
#endif
            u_xlat16_5.x = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xxx;
            u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_HRRimPower);
            u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_5.xyz = u_xlat1.xyz + u_xlat16_5.xyz;
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_6.xyz = u_xlat1.xyz + u_xlat16_6.xyz;
            u_xlat16_38 = float(_HRRimIntensity);
            u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
            SV_Target0.xyz = vec3(u_xlat16_38) * u_xlat16_5.xyz + u_xlat16_6.xyz;
        } else {
            SV_Target0.xyz = u_xlat1.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
int u_xlati1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec3 u_xlat10_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
bvec4 u_xlatb3;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
ivec2 u_xlati7;
bvec3 u_xlatb7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
float u_xlat11;
mediump float u_xlat16_11;
int u_xlati11;
bvec3 u_xlatb11;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
bvec2 u_xlatb22;
vec2 u_xlat23;
int u_xlati23;
float u_xlat35;
bool u_xlatb36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_37 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat1.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati23 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati23) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat11 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11 = floor(u_xlat11);
    u_xlat11 = max(u_xlat11, 0.0);
    u_xlati11 = int(u_xlat11);
    u_xlat23.xy = vec2(u_xlat16_37) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_37 = (u_xlati11 != 0) ? u_xlat23.y : u_xlat23.x;
    u_xlat16_37 = u_xlat16_37 + vs_COLOR1.x;
    u_xlat16_37 = u_xlat16_37 * 0.5 + (-_LightArea);
    u_xlat16_37 = u_xlat16_37 + 1.0;
    u_xlat16_37 = floor(u_xlat16_37);
    u_xlat16_37 = max(u_xlat16_37, 0.0);
    u_xlati11 = int(u_xlat16_37);
    u_xlat16_4.xyz = (int(u_xlati11) != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (int(u_xlati1) != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat16_37 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat16_5.xyz = vec3(u_xlat16_37) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11 = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat1.xzw;
    u_xlat3.xyz = u_xlat1.xzw * vec3(u_xlat11) + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat7.xyz = vec3(u_xlat35) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb36 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat35) + (-_WorldSpaceLightPos0.xyz);
    u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat35) + _CustomLightDir.xyz;
    u_xlat16_37 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat16_6.xyz = vec3(u_xlat16_37) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb36)) ? u_xlat16_6.xyz : u_xlat7.xyz;
    u_xlat16_37 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
    u_xlat16_37 = max(u_xlat16_37, 0.0);
    u_xlat16_37 = log2(u_xlat16_37);
    u_xlat16_37 = u_xlat16_37 * _Shininess;
    u_xlat16_37 = exp2(u_xlat16_37);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_37) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_4.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
    u_xlat16_3.w = u_xlat10_1.y * vs_COLOR1.y;
    u_xlat10_4 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_4.w * _SPOpaqueness;
    u_xlat10_7.xyz = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat0.x = u_xlat10_7.x * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xzw * vec3(u_xlat11) + (-_WorldSpaceCameraPos.xyz);
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat7.xyz = u_xlat10_7.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + u_xlat7.xyz;
    u_xlat1.xyz = u_xlat1.xyz + _SPCubeMapOffset.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat16_5.xyz);
    u_xlat11 = u_xlat11 + u_xlat11;
    u_xlat1.xyz = u_xlat16_5.xyz * (-vec3(u_xlat11)) + u_xlat1.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_8.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_8.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_8.xyz;
    u_xlat11 = _SPNoiseScaler * _SPTransition;
    u_xlat7.xy = vec2(u_xlat11) * vec2(1.70000005, 1.5) + (-u_xlat0.xx);
    u_xlat7.xy = u_xlat7.xy + vec2(1.0, 1.0);
    u_xlat7.xy = floor(u_xlat7.xy);
    u_xlat7.xy = max(u_xlat7.xy, vec2(0.0, 0.0));
    u_xlati7.xy = ivec2(u_xlat7.xy);
    u_xlat0.x = u_xlat11 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + u_xlat1.xyz;
    u_xlat16_8.xyz = (u_xlati7.y != 0) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat0.x = (u_xlati7.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_8.xyz = (u_xlati7.x != 0) ? u_xlat16_8.xyz : u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_8.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_3) + u_xlat16_6;
    u_xlat1 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_5.xyz);
        u_xlat11 = (-u_xlat0.x) + 1.00100005;
        u_xlat11 = max(u_xlat11, 0.00100000005);
        u_xlat11 = min(u_xlat11, 1.0);
        u_xlat11 = log2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGShininess;
        u_xlat11 = exp2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGScale + _RGBias;
        u_xlat22 = u_xlat10_0.w + 0.100000001;
        u_xlatb3 = greaterThanEqual(vec4(u_xlat22), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb7.xyz = lessThan(vec4(u_xlat22), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb7.x = u_xlatb3.y && u_xlatb7.x;
        u_xlatb7.y = u_xlatb3.z && u_xlatb7.y;
        u_xlatb7.z = u_xlatb3.w && u_xlatb7.z;
        u_xlat16_4 = (u_xlatb7.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_4 = (u_xlatb7.y) ? _HRRimColor2 : u_xlat16_4;
        u_xlat16_4 = (u_xlatb7.x) ? _HRRimColor3 : u_xlat16_4;
        u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_4;
        u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_38 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_38 = inversesqrt(u_xlat16_38);
        u_xlat16_6.xyz = vec3(u_xlat16_38) * _WorldSpaceLightPos0.xyz;
        u_xlat16_22 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
        u_xlat16_38 = u_xlat16_22 + 0.5;
        u_xlat16_38 = u_xlat0.x * u_xlat16_38;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_38);
#else
        u_xlatb0 = u_xlat16_3.w<u_xlat16_38;
#endif
        u_xlat16_38 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(u_xlat16_38);
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_HRRimPower) + u_xlat1.xyz;
        u_xlat16_38 = u_xlat11;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
        u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_38 * _RGRatio;
        u_xlat7.xyz = vec3(u_xlat11) * _RGColor.xyz + (-u_xlat1.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz + u_xlat1.xyz;
        u_xlat16_38 = float(_HRRimIntensity);
        u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat16_6.xyz;
        SV_Target0.xyz = vec3(u_xlat16_38) * u_xlat16_6.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_5.xyz);
            u_xlat11 = (-u_xlat0.x) + 1.00100005;
            u_xlat11 = max(u_xlat11, 0.00100000005);
            u_xlat11 = min(u_xlat11, 1.0);
            u_xlat11 = log2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGShininess;
            u_xlat11 = exp2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGScale + _RGBias;
            u_xlat16_6.xyz = vec3(u_xlat11) * _RGColor.xyz;
            u_xlat11 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat11), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb11.xyz = lessThan(vec4(u_xlat11), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb11.x = u_xlatb11.x && u_xlatb2.y;
            u_xlatb11.y = u_xlatb11.y && u_xlatb2.z;
            u_xlatb11.z = u_xlatb11.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb11.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb11.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb11.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_38 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_38 = inversesqrt(u_xlat16_38);
            u_xlat16_8.xyz = vec3(u_xlat16_38) * _WorldSpaceLightPos0.xyz;
            u_xlat16_11 = dot(u_xlat16_5.xyz, u_xlat16_8.xyz);
            u_xlat16_5.x = u_xlat16_11 + 0.5;
            u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_5.x);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_5.x;
#endif
            u_xlat16_5.x = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xxx;
            u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_HRRimPower);
            u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_5.xyz = u_xlat1.xyz + u_xlat16_5.xyz;
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_6.xyz = u_xlat1.xyz + u_xlat16_6.xyz;
            u_xlat16_38 = float(_HRRimIntensity);
            u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
            SV_Target0.xyz = vec3(u_xlat16_38) * u_xlat16_5.xyz + u_xlat16_6.xyz;
        } else {
            SV_Target0.xyz = u_xlat1.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
int u_xlati1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec3 u_xlat10_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
bvec4 u_xlatb3;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
ivec2 u_xlati7;
bvec3 u_xlatb7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
float u_xlat11;
mediump float u_xlat16_11;
int u_xlati11;
bvec3 u_xlatb11;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
bvec2 u_xlatb22;
vec2 u_xlat23;
int u_xlati23;
float u_xlat35;
bool u_xlatb36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_37 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat1.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati23 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati23) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat11 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11 = floor(u_xlat11);
    u_xlat11 = max(u_xlat11, 0.0);
    u_xlati11 = int(u_xlat11);
    u_xlat23.xy = vec2(u_xlat16_37) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_37 = (u_xlati11 != 0) ? u_xlat23.y : u_xlat23.x;
    u_xlat16_37 = u_xlat16_37 + vs_COLOR1.x;
    u_xlat16_37 = u_xlat16_37 * 0.5 + (-_LightArea);
    u_xlat16_37 = u_xlat16_37 + 1.0;
    u_xlat16_37 = floor(u_xlat16_37);
    u_xlat16_37 = max(u_xlat16_37, 0.0);
    u_xlati11 = int(u_xlat16_37);
    u_xlat16_4.xyz = (int(u_xlati11) != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (int(u_xlati1) != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat16_37 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat16_5.xyz = vec3(u_xlat16_37) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11 = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat1.xzw;
    u_xlat3.xyz = u_xlat1.xzw * vec3(u_xlat11) + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat7.xyz = vec3(u_xlat35) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb36 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat35) + (-_WorldSpaceLightPos0.xyz);
    u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat35) + _CustomLightDir.xyz;
    u_xlat16_37 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat16_6.xyz = vec3(u_xlat16_37) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb36)) ? u_xlat16_6.xyz : u_xlat7.xyz;
    u_xlat16_37 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
    u_xlat16_37 = max(u_xlat16_37, 0.0);
    u_xlat16_37 = log2(u_xlat16_37);
    u_xlat16_37 = u_xlat16_37 * _Shininess;
    u_xlat16_37 = exp2(u_xlat16_37);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_37) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_4.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
    u_xlat16_3.w = u_xlat10_1.y * vs_COLOR1.y;
    u_xlat10_4 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_4.w * _SPOpaqueness;
    u_xlat10_7.xyz = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat0.x = u_xlat10_7.x * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xzw * vec3(u_xlat11) + (-_WorldSpaceCameraPos.xyz);
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat7.xyz = u_xlat10_7.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + u_xlat7.xyz;
    u_xlat1.xyz = u_xlat1.xyz + _SPCubeMapOffset.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat16_5.xyz);
    u_xlat11 = u_xlat11 + u_xlat11;
    u_xlat1.xyz = u_xlat16_5.xyz * (-vec3(u_xlat11)) + u_xlat1.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_8.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_8.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_8.xyz;
    u_xlat11 = _SPNoiseScaler * _SPTransition;
    u_xlat7.xy = vec2(u_xlat11) * vec2(1.70000005, 1.5) + (-u_xlat0.xx);
    u_xlat7.xy = u_xlat7.xy + vec2(1.0, 1.0);
    u_xlat7.xy = floor(u_xlat7.xy);
    u_xlat7.xy = max(u_xlat7.xy, vec2(0.0, 0.0));
    u_xlati7.xy = ivec2(u_xlat7.xy);
    u_xlat0.x = u_xlat11 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + u_xlat1.xyz;
    u_xlat16_8.xyz = (u_xlati7.y != 0) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat0.x = (u_xlati7.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_8.xyz = (u_xlati7.x != 0) ? u_xlat16_8.xyz : u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_8.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_3) + u_xlat16_6;
    u_xlat1 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_5.xyz);
        u_xlat11 = (-u_xlat0.x) + 1.00100005;
        u_xlat11 = max(u_xlat11, 0.00100000005);
        u_xlat11 = min(u_xlat11, 1.0);
        u_xlat11 = log2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGShininess;
        u_xlat11 = exp2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGScale + _RGBias;
        u_xlat22 = u_xlat10_0.w + 0.100000001;
        u_xlatb3 = greaterThanEqual(vec4(u_xlat22), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb7.xyz = lessThan(vec4(u_xlat22), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb7.x = u_xlatb3.y && u_xlatb7.x;
        u_xlatb7.y = u_xlatb3.z && u_xlatb7.y;
        u_xlatb7.z = u_xlatb3.w && u_xlatb7.z;
        u_xlat16_4 = (u_xlatb7.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_4 = (u_xlatb7.y) ? _HRRimColor2 : u_xlat16_4;
        u_xlat16_4 = (u_xlatb7.x) ? _HRRimColor3 : u_xlat16_4;
        u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_4;
        u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_38 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_38 = inversesqrt(u_xlat16_38);
        u_xlat16_6.xyz = vec3(u_xlat16_38) * _WorldSpaceLightPos0.xyz;
        u_xlat16_22 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
        u_xlat16_38 = u_xlat16_22 + 0.5;
        u_xlat16_38 = u_xlat0.x * u_xlat16_38;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_38);
#else
        u_xlatb0 = u_xlat16_3.w<u_xlat16_38;
#endif
        u_xlat16_38 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(u_xlat16_38);
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_HRRimPower) + u_xlat1.xyz;
        u_xlat16_38 = u_xlat11;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
        u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_38 * _RGRatio;
        u_xlat7.xyz = vec3(u_xlat11) * _RGColor.xyz + (-u_xlat1.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz + u_xlat1.xyz;
        u_xlat16_38 = float(_HRRimIntensity);
        u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat16_6.xyz;
        SV_Target0.xyz = vec3(u_xlat16_38) * u_xlat16_6.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_5.xyz);
            u_xlat11 = (-u_xlat0.x) + 1.00100005;
            u_xlat11 = max(u_xlat11, 0.00100000005);
            u_xlat11 = min(u_xlat11, 1.0);
            u_xlat11 = log2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGShininess;
            u_xlat11 = exp2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGScale + _RGBias;
            u_xlat16_6.xyz = vec3(u_xlat11) * _RGColor.xyz;
            u_xlat11 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat11), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb11.xyz = lessThan(vec4(u_xlat11), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb11.x = u_xlatb11.x && u_xlatb2.y;
            u_xlatb11.y = u_xlatb11.y && u_xlatb2.z;
            u_xlatb11.z = u_xlatb11.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb11.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb11.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb11.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_38 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_38 = inversesqrt(u_xlat16_38);
            u_xlat16_8.xyz = vec3(u_xlat16_38) * _WorldSpaceLightPos0.xyz;
            u_xlat16_11 = dot(u_xlat16_5.xyz, u_xlat16_8.xyz);
            u_xlat16_5.x = u_xlat16_11 + 0.5;
            u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_5.x);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_5.x;
#endif
            u_xlat16_5.x = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xxx;
            u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_HRRimPower);
            u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_5.xyz = u_xlat1.xyz + u_xlat16_5.xyz;
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_6.xyz = u_xlat1.xyz + u_xlat16_6.xyz;
            u_xlat16_38 = float(_HRRimIntensity);
            u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
            SV_Target0.xyz = vec3(u_xlat16_38) * u_xlat16_5.xyz + u_xlat16_6.xyz;
        } else {
            SV_Target0.xyz = u_xlat1.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
int u_xlati2;
bvec4 u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
ivec2 u_xlati4;
bvec3 u_xlatb4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec3 u_xlat10_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
float u_xlat11;
mediump float u_xlat16_11;
int u_xlati11;
bvec3 u_xlatb11;
mediump float u_xlat16_12;
vec2 u_xlat13;
int u_xlati13;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
bvec2 u_xlatb22;
mediump float u_xlat16_24;
lowp vec2 u_xlat10_24;
float u_xlat35;
bool u_xlatb36;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_24 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_24 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_12 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat5.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat5.w = u_xlat2.x * u_xlat16_12 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat5;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat2.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat2.x = max(u_xlat2.x, 0.0);
    u_xlati2 = int(u_xlat2.x);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati13 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati13) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11 = floor(u_xlat11);
    u_xlat11 = max(u_xlat11, 0.0);
    u_xlati11 = int(u_xlat11);
    u_xlat13.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11 != 0) ? u_xlat13.y : u_xlat13.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11 = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (int(u_xlati11) != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat11) + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat4.xyz = vec3(u_xlat35) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb36 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat35) + (-_WorldSpaceLightPos0.xyz);
    u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat16_9.xyz = u_xlat3.xyz * vec3(u_xlat35) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb36)) ? u_xlat16_9.xyz : u_xlat4.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_40) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_7.xyz * _EnvColor.xyz + u_xlat16_9.xyz;
    u_xlat16_3.w = u_xlat1.w * vs_COLOR1.y;
    u_xlat10_4 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_4.w * _SPOpaqueness;
    u_xlat10_6.xyz = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat0.x = u_xlat10_6.x * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + (-_WorldSpaceCameraPos.xyz);
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat6.xyz = u_xlat10_6.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + u_xlat6.xyz;
    u_xlat1.xyz = u_xlat1.xyz + _SPCubeMapOffset.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat16_8.xyz);
    u_xlat11 = u_xlat11 + u_xlat11;
    u_xlat1.xyz = u_xlat16_8.xyz * (-vec3(u_xlat11)) + u_xlat1.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_7.xyz;
    u_xlat11 = _SPNoiseScaler * _SPTransition;
    u_xlat4.xy = vec2(u_xlat11) * vec2(1.70000005, 1.5) + (-u_xlat0.xx);
    u_xlat4.xy = u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
    u_xlati4.xy = ivec2(u_xlat4.xy);
    u_xlat0.x = u_xlat11 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat1.xyz;
    u_xlat16_7.xyz = (u_xlati4.y != 0) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat0.x = (u_xlati4.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati4.x != 0) ? u_xlat16_7.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_3) + u_xlat16_5;
    u_xlat1 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_8.xyz);
        u_xlat11 = (-u_xlat0.x) + 1.00100005;
        u_xlat11 = max(u_xlat11, 0.00100000005);
        u_xlat11 = min(u_xlat11, 1.0);
        u_xlat11 = log2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGShininess;
        u_xlat11 = exp2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGScale + _RGBias;
        u_xlat22 = u_xlat10_0.w + 0.100000001;
        u_xlatb3 = greaterThanEqual(vec4(u_xlat22), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb4.xyz = lessThan(vec4(u_xlat22), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb4.x = u_xlatb3.y && u_xlatb4.x;
        u_xlatb4.y = u_xlatb3.z && u_xlatb4.y;
        u_xlatb4.z = u_xlatb3.w && u_xlatb4.z;
        u_xlat16_5 = (u_xlatb4.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_5 = (u_xlatb4.y) ? _HRRimColor2 : u_xlat16_5;
        u_xlat16_4 = (u_xlatb4.x) ? _HRRimColor3 : u_xlat16_5;
        u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_4;
        u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_7.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_7.x = inversesqrt(u_xlat16_7.x);
        u_xlat16_7.xyz = u_xlat16_7.xxx * _WorldSpaceLightPos0.xyz;
        u_xlat16_22 = dot(u_xlat16_8.xyz, u_xlat16_7.xyz);
        u_xlat16_7.x = u_xlat16_22 + 0.5;
        u_xlat16_7.x = u_xlat0.x * u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_7.x);
#else
        u_xlatb0 = u_xlat16_3.w<u_xlat16_7.x;
#endif
        u_xlat16_7.x = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_7.xyz = u_xlat16_3.xyz * u_xlat16_7.xxx;
        u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_HRRimPower) + u_xlat1.xyz;
        u_xlat16_40 = u_xlat11;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_40 = min(max(u_xlat16_40, 0.0), 1.0);
#else
        u_xlat16_40 = clamp(u_xlat16_40, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_40 * _RGRatio;
        u_xlat6.xyz = vec3(u_xlat11) * _RGColor.xyz + (-u_xlat1.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat1.xyz;
        u_xlat16_40 = float(_HRRimIntensity);
        u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat16_7.xyz;
        SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat16_7.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_8.xyz);
            u_xlat11 = (-u_xlat0.x) + 1.00100005;
            u_xlat11 = max(u_xlat11, 0.00100000005);
            u_xlat11 = min(u_xlat11, 1.0);
            u_xlat11 = log2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGShininess;
            u_xlat11 = exp2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGScale + _RGBias;
            u_xlat16_7.xyz = vec3(u_xlat11) * _RGColor.xyz;
            u_xlat11 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat11), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb11.xyz = lessThan(vec4(u_xlat11), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb11.x = u_xlatb11.x && u_xlatb2.y;
            u_xlatb11.y = u_xlatb11.y && u_xlatb2.z;
            u_xlatb11.z = u_xlatb11.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb11.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb11.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb11.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_40 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_40 = inversesqrt(u_xlat16_40);
            u_xlat16_9.xyz = vec3(u_xlat16_40) * _WorldSpaceLightPos0.xyz;
            u_xlat16_11 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
            u_xlat16_40 = u_xlat16_11 + 0.5;
            u_xlat16_40 = u_xlat0.x * u_xlat16_40;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_40);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_40;
#endif
            u_xlat16_40 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_8.xyz = u_xlat16_2.xyz * vec3(u_xlat16_40);
            u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_HRRimPower);
            u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_8.xyz = u_xlat1.xyz + u_xlat16_8.xyz;
            u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_7.xyz = u_xlat1.xyz + u_xlat16_7.xyz;
            u_xlat16_40 = float(_HRRimIntensity);
            u_xlat16_8.xyz = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
            SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat16_8.xyz + u_xlat16_7.xyz;
        } else {
            SV_Target0.xyz = u_xlat1.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
int u_xlati2;
bvec4 u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
ivec2 u_xlati4;
bvec3 u_xlatb4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec3 u_xlat10_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
float u_xlat11;
mediump float u_xlat16_11;
int u_xlati11;
bvec3 u_xlatb11;
mediump float u_xlat16_12;
vec2 u_xlat13;
int u_xlati13;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
bvec2 u_xlatb22;
mediump float u_xlat16_24;
lowp vec2 u_xlat10_24;
float u_xlat35;
bool u_xlatb36;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_24 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_24 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_12 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat5.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat5.w = u_xlat2.x * u_xlat16_12 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat5;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat2.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat2.x = max(u_xlat2.x, 0.0);
    u_xlati2 = int(u_xlat2.x);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati13 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati13) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11 = floor(u_xlat11);
    u_xlat11 = max(u_xlat11, 0.0);
    u_xlati11 = int(u_xlat11);
    u_xlat13.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11 != 0) ? u_xlat13.y : u_xlat13.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11 = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (int(u_xlati11) != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat11) + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat4.xyz = vec3(u_xlat35) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb36 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat35) + (-_WorldSpaceLightPos0.xyz);
    u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat16_9.xyz = u_xlat3.xyz * vec3(u_xlat35) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb36)) ? u_xlat16_9.xyz : u_xlat4.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_40) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_7.xyz * _EnvColor.xyz + u_xlat16_9.xyz;
    u_xlat16_3.w = u_xlat1.w * vs_COLOR1.y;
    u_xlat10_4 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_4.w * _SPOpaqueness;
    u_xlat10_6.xyz = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat0.x = u_xlat10_6.x * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + (-_WorldSpaceCameraPos.xyz);
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat6.xyz = u_xlat10_6.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + u_xlat6.xyz;
    u_xlat1.xyz = u_xlat1.xyz + _SPCubeMapOffset.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat16_8.xyz);
    u_xlat11 = u_xlat11 + u_xlat11;
    u_xlat1.xyz = u_xlat16_8.xyz * (-vec3(u_xlat11)) + u_xlat1.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_7.xyz;
    u_xlat11 = _SPNoiseScaler * _SPTransition;
    u_xlat4.xy = vec2(u_xlat11) * vec2(1.70000005, 1.5) + (-u_xlat0.xx);
    u_xlat4.xy = u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
    u_xlati4.xy = ivec2(u_xlat4.xy);
    u_xlat0.x = u_xlat11 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat1.xyz;
    u_xlat16_7.xyz = (u_xlati4.y != 0) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat0.x = (u_xlati4.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati4.x != 0) ? u_xlat16_7.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_3) + u_xlat16_5;
    u_xlat1 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_8.xyz);
        u_xlat11 = (-u_xlat0.x) + 1.00100005;
        u_xlat11 = max(u_xlat11, 0.00100000005);
        u_xlat11 = min(u_xlat11, 1.0);
        u_xlat11 = log2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGShininess;
        u_xlat11 = exp2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGScale + _RGBias;
        u_xlat22 = u_xlat10_0.w + 0.100000001;
        u_xlatb3 = greaterThanEqual(vec4(u_xlat22), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb4.xyz = lessThan(vec4(u_xlat22), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb4.x = u_xlatb3.y && u_xlatb4.x;
        u_xlatb4.y = u_xlatb3.z && u_xlatb4.y;
        u_xlatb4.z = u_xlatb3.w && u_xlatb4.z;
        u_xlat16_5 = (u_xlatb4.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_5 = (u_xlatb4.y) ? _HRRimColor2 : u_xlat16_5;
        u_xlat16_4 = (u_xlatb4.x) ? _HRRimColor3 : u_xlat16_5;
        u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_4;
        u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_7.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_7.x = inversesqrt(u_xlat16_7.x);
        u_xlat16_7.xyz = u_xlat16_7.xxx * _WorldSpaceLightPos0.xyz;
        u_xlat16_22 = dot(u_xlat16_8.xyz, u_xlat16_7.xyz);
        u_xlat16_7.x = u_xlat16_22 + 0.5;
        u_xlat16_7.x = u_xlat0.x * u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_7.x);
#else
        u_xlatb0 = u_xlat16_3.w<u_xlat16_7.x;
#endif
        u_xlat16_7.x = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_7.xyz = u_xlat16_3.xyz * u_xlat16_7.xxx;
        u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_HRRimPower) + u_xlat1.xyz;
        u_xlat16_40 = u_xlat11;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_40 = min(max(u_xlat16_40, 0.0), 1.0);
#else
        u_xlat16_40 = clamp(u_xlat16_40, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_40 * _RGRatio;
        u_xlat6.xyz = vec3(u_xlat11) * _RGColor.xyz + (-u_xlat1.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat1.xyz;
        u_xlat16_40 = float(_HRRimIntensity);
        u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat16_7.xyz;
        SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat16_7.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_8.xyz);
            u_xlat11 = (-u_xlat0.x) + 1.00100005;
            u_xlat11 = max(u_xlat11, 0.00100000005);
            u_xlat11 = min(u_xlat11, 1.0);
            u_xlat11 = log2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGShininess;
            u_xlat11 = exp2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGScale + _RGBias;
            u_xlat16_7.xyz = vec3(u_xlat11) * _RGColor.xyz;
            u_xlat11 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat11), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb11.xyz = lessThan(vec4(u_xlat11), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb11.x = u_xlatb11.x && u_xlatb2.y;
            u_xlatb11.y = u_xlatb11.y && u_xlatb2.z;
            u_xlatb11.z = u_xlatb11.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb11.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb11.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb11.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_40 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_40 = inversesqrt(u_xlat16_40);
            u_xlat16_9.xyz = vec3(u_xlat16_40) * _WorldSpaceLightPos0.xyz;
            u_xlat16_11 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
            u_xlat16_40 = u_xlat16_11 + 0.5;
            u_xlat16_40 = u_xlat0.x * u_xlat16_40;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_40);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_40;
#endif
            u_xlat16_40 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_8.xyz = u_xlat16_2.xyz * vec3(u_xlat16_40);
            u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_HRRimPower);
            u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_8.xyz = u_xlat1.xyz + u_xlat16_8.xyz;
            u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_7.xyz = u_xlat1.xyz + u_xlat16_7.xyz;
            u_xlat16_40 = float(_HRRimIntensity);
            u_xlat16_8.xyz = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
            SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat16_8.xyz + u_xlat16_7.xyz;
        } else {
            SV_Target0.xyz = u_xlat1.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
int u_xlati2;
bvec4 u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
ivec2 u_xlati4;
bvec3 u_xlatb4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec3 u_xlat10_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
float u_xlat11;
mediump float u_xlat16_11;
int u_xlati11;
bvec3 u_xlatb11;
mediump float u_xlat16_12;
vec2 u_xlat13;
int u_xlati13;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
bvec2 u_xlatb22;
mediump float u_xlat16_24;
lowp vec2 u_xlat10_24;
float u_xlat35;
bool u_xlatb36;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_24 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_24 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_12 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat5.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat5.w = u_xlat2.x * u_xlat16_12 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat5;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat2.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat2.x = max(u_xlat2.x, 0.0);
    u_xlati2 = int(u_xlat2.x);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati13 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati13) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11 = floor(u_xlat11);
    u_xlat11 = max(u_xlat11, 0.0);
    u_xlati11 = int(u_xlat11);
    u_xlat13.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11 != 0) ? u_xlat13.y : u_xlat13.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11 = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (int(u_xlati11) != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat11) + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat4.xyz = vec3(u_xlat35) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb36 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat35) + (-_WorldSpaceLightPos0.xyz);
    u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat16_9.xyz = u_xlat3.xyz * vec3(u_xlat35) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb36)) ? u_xlat16_9.xyz : u_xlat4.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_40) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_7.xyz * _EnvColor.xyz + u_xlat16_9.xyz;
    u_xlat16_3.w = u_xlat1.w * vs_COLOR1.y;
    u_xlat10_4 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_4.w * _SPOpaqueness;
    u_xlat10_6.xyz = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat0.x = u_xlat10_6.x * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + (-_WorldSpaceCameraPos.xyz);
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat6.xyz = u_xlat10_6.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + u_xlat6.xyz;
    u_xlat1.xyz = u_xlat1.xyz + _SPCubeMapOffset.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat16_8.xyz);
    u_xlat11 = u_xlat11 + u_xlat11;
    u_xlat1.xyz = u_xlat16_8.xyz * (-vec3(u_xlat11)) + u_xlat1.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_7.xyz;
    u_xlat11 = _SPNoiseScaler * _SPTransition;
    u_xlat4.xy = vec2(u_xlat11) * vec2(1.70000005, 1.5) + (-u_xlat0.xx);
    u_xlat4.xy = u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
    u_xlati4.xy = ivec2(u_xlat4.xy);
    u_xlat0.x = u_xlat11 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat1.xyz;
    u_xlat16_7.xyz = (u_xlati4.y != 0) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat0.x = (u_xlati4.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati4.x != 0) ? u_xlat16_7.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_3) + u_xlat16_5;
    u_xlat1 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_8.xyz);
        u_xlat11 = (-u_xlat0.x) + 1.00100005;
        u_xlat11 = max(u_xlat11, 0.00100000005);
        u_xlat11 = min(u_xlat11, 1.0);
        u_xlat11 = log2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGShininess;
        u_xlat11 = exp2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGScale + _RGBias;
        u_xlat22 = u_xlat10_0.w + 0.100000001;
        u_xlatb3 = greaterThanEqual(vec4(u_xlat22), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb4.xyz = lessThan(vec4(u_xlat22), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb4.x = u_xlatb3.y && u_xlatb4.x;
        u_xlatb4.y = u_xlatb3.z && u_xlatb4.y;
        u_xlatb4.z = u_xlatb3.w && u_xlatb4.z;
        u_xlat16_5 = (u_xlatb4.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_5 = (u_xlatb4.y) ? _HRRimColor2 : u_xlat16_5;
        u_xlat16_4 = (u_xlatb4.x) ? _HRRimColor3 : u_xlat16_5;
        u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_4;
        u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_7.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_7.x = inversesqrt(u_xlat16_7.x);
        u_xlat16_7.xyz = u_xlat16_7.xxx * _WorldSpaceLightPos0.xyz;
        u_xlat16_22 = dot(u_xlat16_8.xyz, u_xlat16_7.xyz);
        u_xlat16_7.x = u_xlat16_22 + 0.5;
        u_xlat16_7.x = u_xlat0.x * u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_7.x);
#else
        u_xlatb0 = u_xlat16_3.w<u_xlat16_7.x;
#endif
        u_xlat16_7.x = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_7.xyz = u_xlat16_3.xyz * u_xlat16_7.xxx;
        u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_HRRimPower) + u_xlat1.xyz;
        u_xlat16_40 = u_xlat11;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_40 = min(max(u_xlat16_40, 0.0), 1.0);
#else
        u_xlat16_40 = clamp(u_xlat16_40, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_40 * _RGRatio;
        u_xlat6.xyz = vec3(u_xlat11) * _RGColor.xyz + (-u_xlat1.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat1.xyz;
        u_xlat16_40 = float(_HRRimIntensity);
        u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat16_7.xyz;
        SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat16_7.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_8.xyz);
            u_xlat11 = (-u_xlat0.x) + 1.00100005;
            u_xlat11 = max(u_xlat11, 0.00100000005);
            u_xlat11 = min(u_xlat11, 1.0);
            u_xlat11 = log2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGShininess;
            u_xlat11 = exp2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGScale + _RGBias;
            u_xlat16_7.xyz = vec3(u_xlat11) * _RGColor.xyz;
            u_xlat11 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat11), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb11.xyz = lessThan(vec4(u_xlat11), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb11.x = u_xlatb11.x && u_xlatb2.y;
            u_xlatb11.y = u_xlatb11.y && u_xlatb2.z;
            u_xlatb11.z = u_xlatb11.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb11.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb11.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb11.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_40 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_40 = inversesqrt(u_xlat16_40);
            u_xlat16_9.xyz = vec3(u_xlat16_40) * _WorldSpaceLightPos0.xyz;
            u_xlat16_11 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
            u_xlat16_40 = u_xlat16_11 + 0.5;
            u_xlat16_40 = u_xlat0.x * u_xlat16_40;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_40);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_40;
#endif
            u_xlat16_40 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_8.xyz = u_xlat16_2.xyz * vec3(u_xlat16_40);
            u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_HRRimPower);
            u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_8.xyz = u_xlat1.xyz + u_xlat16_8.xyz;
            u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_7.xyz = u_xlat1.xyz + u_xlat16_7.xyz;
            u_xlat16_40 = float(_HRRimIntensity);
            u_xlat16_8.xyz = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
            SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat16_8.xyz + u_xlat16_7.xyz;
        } else {
            SV_Target0.xyz = u_xlat1.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump float u_xlat16_6;
ivec3 u_xlati6;
mediump vec3 u_xlat16_8;
bvec2 u_xlatb12;
float u_xlat18;
bool u_xlatb18;
mediump float u_xlat16_20;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat18 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat18 = floor(u_xlat18);
    u_xlat6.z = max(u_xlat18, 0.0);
    u_xlat16_8.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_8.x = u_xlat16_8.x * 0.5 + (-_SecondShadow);
    u_xlat16_8.x = u_xlat16_8.x + 1.0;
    u_xlat16_8.x = floor(u_xlat16_8.x);
    u_xlat16_8.x = max(u_xlat16_8.x, 0.0);
    u_xlati3 = int(u_xlat16_8.x);
    u_xlat16_8.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_8.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_8.xyz;
    u_xlat6.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlati6.xz = ivec2(u_xlat6.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati6.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati6.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati6.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati6.z != 0) ? u_xlat16_4.xyz : u_xlat16_8.xyz;
    u_xlat16_20 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_4.xyz = vec3(u_xlat16_20) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat3.xyz = u_xlat6.xxx * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb18 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat16_5.xyz = u_xlat1.xyz * u_xlat6.xxx + _CustomLightDir.xyz;
    u_xlat16_20 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_5.xyz = vec3(u_xlat16_20) * u_xlat16_5.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb18)) ? u_xlat16_5.xyz : u_xlat3.xyz;
    u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
    u_xlat16_20 = max(u_xlat16_20, 0.0);
    u_xlat16_20 = log2(u_xlat16_20);
    u_xlat16_20 = u_xlat16_20 * _Shininess;
    u_xlat16_20 = exp2(u_xlat16_20);
    u_xlat16_6 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_6 = (-u_xlat16_20) + u_xlat16_6;
    u_xlat6.x = u_xlat16_6 + 1.0;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlati6.x = int(u_xlat6.x);
    u_xlat16_4.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlati6.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_4.xyz;
    SV_Target0.w = u_xlat10_1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump float u_xlat16_6;
ivec3 u_xlati6;
mediump vec3 u_xlat16_8;
bvec2 u_xlatb12;
float u_xlat18;
bool u_xlatb18;
mediump float u_xlat16_20;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat18 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat18 = floor(u_xlat18);
    u_xlat6.z = max(u_xlat18, 0.0);
    u_xlat16_8.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_8.x = u_xlat16_8.x * 0.5 + (-_SecondShadow);
    u_xlat16_8.x = u_xlat16_8.x + 1.0;
    u_xlat16_8.x = floor(u_xlat16_8.x);
    u_xlat16_8.x = max(u_xlat16_8.x, 0.0);
    u_xlati3 = int(u_xlat16_8.x);
    u_xlat16_8.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_8.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_8.xyz;
    u_xlat6.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlati6.xz = ivec2(u_xlat6.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati6.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati6.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati6.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati6.z != 0) ? u_xlat16_4.xyz : u_xlat16_8.xyz;
    u_xlat16_20 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_4.xyz = vec3(u_xlat16_20) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat3.xyz = u_xlat6.xxx * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb18 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat16_5.xyz = u_xlat1.xyz * u_xlat6.xxx + _CustomLightDir.xyz;
    u_xlat16_20 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_5.xyz = vec3(u_xlat16_20) * u_xlat16_5.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb18)) ? u_xlat16_5.xyz : u_xlat3.xyz;
    u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
    u_xlat16_20 = max(u_xlat16_20, 0.0);
    u_xlat16_20 = log2(u_xlat16_20);
    u_xlat16_20 = u_xlat16_20 * _Shininess;
    u_xlat16_20 = exp2(u_xlat16_20);
    u_xlat16_6 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_6 = (-u_xlat16_20) + u_xlat16_6;
    u_xlat6.x = u_xlat16_6 + 1.0;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlati6.x = int(u_xlat6.x);
    u_xlat16_4.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlati6.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_4.xyz;
    SV_Target0.w = u_xlat10_1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump float u_xlat16_6;
ivec3 u_xlati6;
mediump vec3 u_xlat16_8;
bvec2 u_xlatb12;
float u_xlat18;
bool u_xlatb18;
mediump float u_xlat16_20;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat18 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat18 = floor(u_xlat18);
    u_xlat6.z = max(u_xlat18, 0.0);
    u_xlat16_8.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_8.x = u_xlat16_8.x * 0.5 + (-_SecondShadow);
    u_xlat16_8.x = u_xlat16_8.x + 1.0;
    u_xlat16_8.x = floor(u_xlat16_8.x);
    u_xlat16_8.x = max(u_xlat16_8.x, 0.0);
    u_xlati3 = int(u_xlat16_8.x);
    u_xlat16_8.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_8.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_8.xyz;
    u_xlat6.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlati6.xz = ivec2(u_xlat6.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati6.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati6.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati6.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati6.z != 0) ? u_xlat16_4.xyz : u_xlat16_8.xyz;
    u_xlat16_20 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_4.xyz = vec3(u_xlat16_20) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat3.xyz = u_xlat6.xxx * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb18 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat16_5.xyz = u_xlat1.xyz * u_xlat6.xxx + _CustomLightDir.xyz;
    u_xlat16_20 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_5.xyz = vec3(u_xlat16_20) * u_xlat16_5.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb18)) ? u_xlat16_5.xyz : u_xlat3.xyz;
    u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
    u_xlat16_20 = max(u_xlat16_20, 0.0);
    u_xlat16_20 = log2(u_xlat16_20);
    u_xlat16_20 = u_xlat16_20 * _Shininess;
    u_xlat16_20 = exp2(u_xlat16_20);
    u_xlat16_6 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_6 = (-u_xlat16_20) + u_xlat16_6;
    u_xlat6.x = u_xlat16_6 + 1.0;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlati6.x = int(u_xlat6.x);
    u_xlat16_4.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlati6.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_4.xyz;
    SV_Target0.w = u_xlat10_1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump float u_xlat16_6;
ivec3 u_xlati6;
mediump vec3 u_xlat16_8;
bvec2 u_xlatb12;
float u_xlat18;
bool u_xlatb18;
mediump float u_xlat16_20;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat18 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat18 = floor(u_xlat18);
    u_xlat6.z = max(u_xlat18, 0.0);
    u_xlat16_8.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_8.x = u_xlat16_8.x * 0.5 + (-_SecondShadow);
    u_xlat16_8.x = u_xlat16_8.x + 1.0;
    u_xlat16_8.x = floor(u_xlat16_8.x);
    u_xlat16_8.x = max(u_xlat16_8.x, 0.0);
    u_xlati3 = int(u_xlat16_8.x);
    u_xlat16_8.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_8.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_8.xyz;
    u_xlat6.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlati6.xz = ivec2(u_xlat6.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati6.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati6.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati6.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati6.z != 0) ? u_xlat16_4.xyz : u_xlat16_8.xyz;
    u_xlat16_20 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_4.xyz = vec3(u_xlat16_20) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat3.xyz = u_xlat6.xxx * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb18 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat16_5.xyz = u_xlat1.xyz * u_xlat6.xxx + _CustomLightDir.xyz;
    u_xlat16_20 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_5.xyz = vec3(u_xlat16_20) * u_xlat16_5.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb18)) ? u_xlat16_5.xyz : u_xlat3.xyz;
    u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
    u_xlat16_20 = max(u_xlat16_20, 0.0);
    u_xlat16_20 = log2(u_xlat16_20);
    u_xlat16_20 = u_xlat16_20 * _Shininess;
    u_xlat16_20 = exp2(u_xlat16_20);
    u_xlat16_6 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_6 = (-u_xlat16_20) + u_xlat16_6;
    u_xlat6.x = u_xlat16_6 + 1.0;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlati6.x = int(u_xlat6.x);
    u_xlat16_4.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlati6.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_4.xyz;
    SV_Target0.w = u_xlat10_1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump float u_xlat16_6;
ivec3 u_xlati6;
mediump vec3 u_xlat16_8;
bvec2 u_xlatb12;
float u_xlat18;
bool u_xlatb18;
mediump float u_xlat16_20;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat18 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat18 = floor(u_xlat18);
    u_xlat6.z = max(u_xlat18, 0.0);
    u_xlat16_8.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_8.x = u_xlat16_8.x * 0.5 + (-_SecondShadow);
    u_xlat16_8.x = u_xlat16_8.x + 1.0;
    u_xlat16_8.x = floor(u_xlat16_8.x);
    u_xlat16_8.x = max(u_xlat16_8.x, 0.0);
    u_xlati3 = int(u_xlat16_8.x);
    u_xlat16_8.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_8.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_8.xyz;
    u_xlat6.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlati6.xz = ivec2(u_xlat6.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati6.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati6.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati6.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati6.z != 0) ? u_xlat16_4.xyz : u_xlat16_8.xyz;
    u_xlat16_20 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_4.xyz = vec3(u_xlat16_20) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat3.xyz = u_xlat6.xxx * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb18 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat16_5.xyz = u_xlat1.xyz * u_xlat6.xxx + _CustomLightDir.xyz;
    u_xlat16_20 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_5.xyz = vec3(u_xlat16_20) * u_xlat16_5.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb18)) ? u_xlat16_5.xyz : u_xlat3.xyz;
    u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
    u_xlat16_20 = max(u_xlat16_20, 0.0);
    u_xlat16_20 = log2(u_xlat16_20);
    u_xlat16_20 = u_xlat16_20 * _Shininess;
    u_xlat16_20 = exp2(u_xlat16_20);
    u_xlat16_6 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_6 = (-u_xlat16_20) + u_xlat16_6;
    u_xlat6.x = u_xlat16_6 + 1.0;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlati6.x = int(u_xlat6.x);
    u_xlat16_4.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlati6.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_4.xyz;
    SV_Target0.w = u_xlat10_1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump float u_xlat16_6;
ivec3 u_xlati6;
mediump vec3 u_xlat16_8;
bvec2 u_xlatb12;
float u_xlat18;
bool u_xlatb18;
mediump float u_xlat16_20;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat18 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat18 = floor(u_xlat18);
    u_xlat6.z = max(u_xlat18, 0.0);
    u_xlat16_8.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_8.x = u_xlat16_8.x * 0.5 + (-_SecondShadow);
    u_xlat16_8.x = u_xlat16_8.x + 1.0;
    u_xlat16_8.x = floor(u_xlat16_8.x);
    u_xlat16_8.x = max(u_xlat16_8.x, 0.0);
    u_xlati3 = int(u_xlat16_8.x);
    u_xlat16_8.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_8.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_8.xyz;
    u_xlat6.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlati6.xz = ivec2(u_xlat6.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati6.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati6.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati6.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati6.z != 0) ? u_xlat16_4.xyz : u_xlat16_8.xyz;
    u_xlat16_20 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_4.xyz = vec3(u_xlat16_20) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat3.xyz = u_xlat6.xxx * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb18 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat16_5.xyz = u_xlat1.xyz * u_xlat6.xxx + _CustomLightDir.xyz;
    u_xlat16_20 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_5.xyz = vec3(u_xlat16_20) * u_xlat16_5.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb18)) ? u_xlat16_5.xyz : u_xlat3.xyz;
    u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
    u_xlat16_20 = max(u_xlat16_20, 0.0);
    u_xlat16_20 = log2(u_xlat16_20);
    u_xlat16_20 = u_xlat16_20 * _Shininess;
    u_xlat16_20 = exp2(u_xlat16_20);
    u_xlat16_6 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_6 = (-u_xlat16_20) + u_xlat16_6;
    u_xlat6.x = u_xlat16_6 + 1.0;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlati6.x = int(u_xlat6.x);
    u_xlat16_4.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlati6.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_4.xyz;
    SV_Target0.w = u_xlat10_1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
int u_xlati1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
ivec3 u_xlati7;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_25 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati1) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat1.xz = vec2(u_xlat16_25) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_25 = (u_xlati7.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_25 = u_xlat16_25 + vs_COLOR1.x;
    u_xlat16_25 = u_xlat16_25 * 0.5 + (-_LightArea);
    u_xlat16_25 = u_xlat16_25 + 1.0;
    u_xlat16_25 = floor(u_xlat16_25);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlati7.x = int(u_xlat16_25);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat1.xzw = u_xlat1.xzw * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat2.xyz = u_xlat7.xxx * u_xlat1.xzw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb21 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xzw = u_xlat1.xzw * u_xlat7.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat16_6.xyz = u_xlat1.xzw * u_xlat7.xxx + _CustomLightDir.xyz;
    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb21)) ? u_xlat16_6.xyz : u_xlat2.xyz;
    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_25 = log2(u_xlat16_25);
    u_xlat16_25 = u_xlat16_25 * _Shininess;
    u_xlat16_25 = exp2(u_xlat16_25);
    u_xlat16_7 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_7 = (-u_xlat16_25) + u_xlat16_7;
    u_xlat7.x = u_xlat16_7 + 1.0;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.x = int(u_xlat7.x);
    u_xlat16_5.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_5.xyz = u_xlat10_0.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = (u_xlati7.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_4.xyz * _EnvColor.xyz + u_xlat16_5.xyz;
    SV_Target0.w = u_xlat10_1.y * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
int u_xlati1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
ivec3 u_xlati7;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_25 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati1) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat1.xz = vec2(u_xlat16_25) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_25 = (u_xlati7.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_25 = u_xlat16_25 + vs_COLOR1.x;
    u_xlat16_25 = u_xlat16_25 * 0.5 + (-_LightArea);
    u_xlat16_25 = u_xlat16_25 + 1.0;
    u_xlat16_25 = floor(u_xlat16_25);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlati7.x = int(u_xlat16_25);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat1.xzw = u_xlat1.xzw * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat2.xyz = u_xlat7.xxx * u_xlat1.xzw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb21 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xzw = u_xlat1.xzw * u_xlat7.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat16_6.xyz = u_xlat1.xzw * u_xlat7.xxx + _CustomLightDir.xyz;
    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb21)) ? u_xlat16_6.xyz : u_xlat2.xyz;
    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_25 = log2(u_xlat16_25);
    u_xlat16_25 = u_xlat16_25 * _Shininess;
    u_xlat16_25 = exp2(u_xlat16_25);
    u_xlat16_7 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_7 = (-u_xlat16_25) + u_xlat16_7;
    u_xlat7.x = u_xlat16_7 + 1.0;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.x = int(u_xlat7.x);
    u_xlat16_5.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_5.xyz = u_xlat10_0.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = (u_xlati7.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_4.xyz * _EnvColor.xyz + u_xlat16_5.xyz;
    SV_Target0.w = u_xlat10_1.y * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
int u_xlati1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
ivec3 u_xlati7;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_25 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati1) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat1.xz = vec2(u_xlat16_25) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_25 = (u_xlati7.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_25 = u_xlat16_25 + vs_COLOR1.x;
    u_xlat16_25 = u_xlat16_25 * 0.5 + (-_LightArea);
    u_xlat16_25 = u_xlat16_25 + 1.0;
    u_xlat16_25 = floor(u_xlat16_25);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlati7.x = int(u_xlat16_25);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat1.xzw = u_xlat1.xzw * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat2.xyz = u_xlat7.xxx * u_xlat1.xzw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb21 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xzw = u_xlat1.xzw * u_xlat7.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat16_6.xyz = u_xlat1.xzw * u_xlat7.xxx + _CustomLightDir.xyz;
    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb21)) ? u_xlat16_6.xyz : u_xlat2.xyz;
    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_25 = log2(u_xlat16_25);
    u_xlat16_25 = u_xlat16_25 * _Shininess;
    u_xlat16_25 = exp2(u_xlat16_25);
    u_xlat16_7 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_7 = (-u_xlat16_25) + u_xlat16_7;
    u_xlat7.x = u_xlat16_7 + 1.0;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.x = int(u_xlat7.x);
    u_xlat16_5.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_5.xyz = u_xlat10_0.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = (u_xlati7.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_4.xyz * _EnvColor.xyz + u_xlat16_5.xyz;
    SV_Target0.w = u_xlat10_1.y * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump float u_xlat16_11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
bvec2 u_xlatb22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
bool u_xlatb33;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat2.xyz = u_xlat11.xxx * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * u_xlat11.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat11.xxx + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb33)) ? u_xlat16_9.xyz : u_xlat2.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_11 = (-u_xlat16_40) + u_xlat16_11;
    u_xlat11.x = u_xlat16_11 + 1.0;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.x = int(u_xlat11.x);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_7.xyz * _EnvColor.xyz + u_xlat16_8.xyz;
    SV_Target0.w = u_xlat1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump float u_xlat16_11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
bvec2 u_xlatb22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
bool u_xlatb33;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat2.xyz = u_xlat11.xxx * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * u_xlat11.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat11.xxx + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb33)) ? u_xlat16_9.xyz : u_xlat2.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_11 = (-u_xlat16_40) + u_xlat16_11;
    u_xlat11.x = u_xlat16_11 + 1.0;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.x = int(u_xlat11.x);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_7.xyz * _EnvColor.xyz + u_xlat16_8.xyz;
    SV_Target0.w = u_xlat1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump float u_xlat16_11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
bvec2 u_xlatb22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
bool u_xlatb33;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat2.xyz = u_xlat11.xxx * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * u_xlat11.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat11.xxx + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb33)) ? u_xlat16_9.xyz : u_xlat2.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_11 = (-u_xlat16_40) + u_xlat16_11;
    u_xlat11.x = u_xlat16_11 + 1.0;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.x = int(u_xlat11.x);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_7.xyz * _EnvColor.xyz + u_xlat16_8.xyz;
    SV_Target0.w = u_xlat1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
int u_xlati3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
mediump float u_xlat16_8;
int u_xlati8;
bvec3 u_xlatb8;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
int u_xlati11;
float u_xlat16;
mediump float u_xlat16_16;
bvec2 u_xlatb16;
mediump float u_xlat16_26;
bool u_xlatb27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat3.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati11 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati11) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat11.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8 != 0) ? u_xlat11.y : u_xlat11.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8 = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (int(u_xlati8) != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat3.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + _WorldSpaceLightPos0.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat5.xyz = vec3(u_xlat8) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb27 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + (-_WorldSpaceLightPos0.xyz);
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat16_6.xyz = u_xlat1.xyz * vec3(u_xlat8) + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb27)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_26) + u_xlat16_8;
    u_xlat8 = u_xlat16_8 + 1.0;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati8) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
        u_xlat8 = (-u_xlat0.x) + 1.00100005;
        u_xlat8 = max(u_xlat8, 0.00100000005);
        u_xlat8 = min(u_xlat8, 1.0);
        u_xlat8 = log2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGShininess;
        u_xlat8 = exp2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGScale + _RGBias;
        u_xlat16 = u_xlat10_0.w + 0.100000001;
        u_xlatb5 = greaterThanEqual(vec4(u_xlat16), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb1.xyz = lessThan(vec4(u_xlat16), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb1.x = u_xlatb1.x && u_xlatb5.y;
        u_xlatb1.y = u_xlatb1.y && u_xlatb5.z;
        u_xlatb1.z = u_xlatb1.z && u_xlatb5.w;
        u_xlat16_6 = (u_xlatb1.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb1.y) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_6 = (u_xlatb1.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_5 = (u_xlatb5.x) ? _HRRimColor5 : u_xlat16_6;
        u_xlat16_5 = (int(_MoreHardRimColor) != 0) ? u_xlat16_5 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_26 = inversesqrt(u_xlat16_26);
        u_xlat16_6.xyz = vec3(u_xlat16_26) * _WorldSpaceLightPos0.xyz;
        u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
        u_xlat16_26 = u_xlat16_16 + 0.5;
        u_xlat16_26 = u_xlat0.x * u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_5.w<u_xlat16_26);
#else
        u_xlatb0 = u_xlat16_5.w<u_xlat16_26;
#endif
        u_xlat16_26 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_5.xyz;
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_HRRimPower) + u_xlat16_2.xyz;
        u_xlat16_26 = u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_26 * _RGRatio;
        u_xlat1.xyz = vec3(u_xlat8) * _RGColor.xyz + (-u_xlat16_2.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat16_2.xyz;
        u_xlat16_26 = float(_HRRimIntensity);
        u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat16_6.xyz;
        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
            u_xlat8 = (-u_xlat0.x) + 1.00100005;
            u_xlat8 = max(u_xlat8, 0.00100000005);
            u_xlat8 = min(u_xlat8, 1.0);
            u_xlat8 = log2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGShininess;
            u_xlat8 = exp2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGScale + _RGBias;
            u_xlat16_6.xyz = vec3(u_xlat8) * _RGColor.xyz;
            u_xlat8 = u_xlat10_0.w + 0.100000001;
            u_xlatb3 = greaterThanEqual(vec4(u_xlat8), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb8.xyz = lessThan(vec4(u_xlat8), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb8.x = u_xlatb8.x && u_xlatb3.y;
            u_xlatb8.y = u_xlatb8.y && u_xlatb3.z;
            u_xlatb8.z = u_xlatb8.z && u_xlatb3.w;
            u_xlat16_5 = (u_xlatb8.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_5 = (u_xlatb8.y) ? _HRRimColor2 : u_xlat16_5;
            u_xlat16_5 = (u_xlatb8.x) ? _HRRimColor3 : u_xlat16_5;
            u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_5;
            u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_26 = inversesqrt(u_xlat16_26);
            u_xlat16_7.xyz = vec3(u_xlat16_26) * _WorldSpaceLightPos0.xyz;
            u_xlat16_8 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
            u_xlat16_26 = u_xlat16_8 + 0.5;
            u_xlat16_26 = u_xlat0.x * u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_26);
#else
            u_xlatb0 = u_xlat16_3.w<u_xlat16_26;
#endif
            u_xlat16_26 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz;
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_HRRimPower);
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_6.xyz = u_xlat16_2.xyz + u_xlat16_6.xyz;
            u_xlat16_26 = float(_HRRimIntensity);
            u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_6.xyz);
            SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_6.xyz;
        } else {
            SV_Target0.xyz = u_xlat16_2.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat10_1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
int u_xlati3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
mediump float u_xlat16_8;
int u_xlati8;
bvec3 u_xlatb8;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
int u_xlati11;
float u_xlat16;
mediump float u_xlat16_16;
bvec2 u_xlatb16;
mediump float u_xlat16_26;
bool u_xlatb27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat3.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati11 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati11) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat11.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8 != 0) ? u_xlat11.y : u_xlat11.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8 = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (int(u_xlati8) != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat3.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + _WorldSpaceLightPos0.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat5.xyz = vec3(u_xlat8) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb27 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + (-_WorldSpaceLightPos0.xyz);
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat16_6.xyz = u_xlat1.xyz * vec3(u_xlat8) + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb27)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_26) + u_xlat16_8;
    u_xlat8 = u_xlat16_8 + 1.0;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati8) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
        u_xlat8 = (-u_xlat0.x) + 1.00100005;
        u_xlat8 = max(u_xlat8, 0.00100000005);
        u_xlat8 = min(u_xlat8, 1.0);
        u_xlat8 = log2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGShininess;
        u_xlat8 = exp2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGScale + _RGBias;
        u_xlat16 = u_xlat10_0.w + 0.100000001;
        u_xlatb5 = greaterThanEqual(vec4(u_xlat16), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb1.xyz = lessThan(vec4(u_xlat16), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb1.x = u_xlatb1.x && u_xlatb5.y;
        u_xlatb1.y = u_xlatb1.y && u_xlatb5.z;
        u_xlatb1.z = u_xlatb1.z && u_xlatb5.w;
        u_xlat16_6 = (u_xlatb1.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb1.y) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_6 = (u_xlatb1.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_5 = (u_xlatb5.x) ? _HRRimColor5 : u_xlat16_6;
        u_xlat16_5 = (int(_MoreHardRimColor) != 0) ? u_xlat16_5 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_26 = inversesqrt(u_xlat16_26);
        u_xlat16_6.xyz = vec3(u_xlat16_26) * _WorldSpaceLightPos0.xyz;
        u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
        u_xlat16_26 = u_xlat16_16 + 0.5;
        u_xlat16_26 = u_xlat0.x * u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_5.w<u_xlat16_26);
#else
        u_xlatb0 = u_xlat16_5.w<u_xlat16_26;
#endif
        u_xlat16_26 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_5.xyz;
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_HRRimPower) + u_xlat16_2.xyz;
        u_xlat16_26 = u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_26 * _RGRatio;
        u_xlat1.xyz = vec3(u_xlat8) * _RGColor.xyz + (-u_xlat16_2.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat16_2.xyz;
        u_xlat16_26 = float(_HRRimIntensity);
        u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat16_6.xyz;
        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
            u_xlat8 = (-u_xlat0.x) + 1.00100005;
            u_xlat8 = max(u_xlat8, 0.00100000005);
            u_xlat8 = min(u_xlat8, 1.0);
            u_xlat8 = log2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGShininess;
            u_xlat8 = exp2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGScale + _RGBias;
            u_xlat16_6.xyz = vec3(u_xlat8) * _RGColor.xyz;
            u_xlat8 = u_xlat10_0.w + 0.100000001;
            u_xlatb3 = greaterThanEqual(vec4(u_xlat8), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb8.xyz = lessThan(vec4(u_xlat8), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb8.x = u_xlatb8.x && u_xlatb3.y;
            u_xlatb8.y = u_xlatb8.y && u_xlatb3.z;
            u_xlatb8.z = u_xlatb8.z && u_xlatb3.w;
            u_xlat16_5 = (u_xlatb8.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_5 = (u_xlatb8.y) ? _HRRimColor2 : u_xlat16_5;
            u_xlat16_5 = (u_xlatb8.x) ? _HRRimColor3 : u_xlat16_5;
            u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_5;
            u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_26 = inversesqrt(u_xlat16_26);
            u_xlat16_7.xyz = vec3(u_xlat16_26) * _WorldSpaceLightPos0.xyz;
            u_xlat16_8 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
            u_xlat16_26 = u_xlat16_8 + 0.5;
            u_xlat16_26 = u_xlat0.x * u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_26);
#else
            u_xlatb0 = u_xlat16_3.w<u_xlat16_26;
#endif
            u_xlat16_26 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz;
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_HRRimPower);
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_6.xyz = u_xlat16_2.xyz + u_xlat16_6.xyz;
            u_xlat16_26 = float(_HRRimIntensity);
            u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_6.xyz);
            SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_6.xyz;
        } else {
            SV_Target0.xyz = u_xlat16_2.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat10_1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
int u_xlati3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
mediump float u_xlat16_8;
int u_xlati8;
bvec3 u_xlatb8;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
int u_xlati11;
float u_xlat16;
mediump float u_xlat16_16;
bvec2 u_xlatb16;
mediump float u_xlat16_26;
bool u_xlatb27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat3.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati11 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati11) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat11.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8 != 0) ? u_xlat11.y : u_xlat11.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8 = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (int(u_xlati8) != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat3.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + _WorldSpaceLightPos0.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat5.xyz = vec3(u_xlat8) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb27 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + (-_WorldSpaceLightPos0.xyz);
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat16_6.xyz = u_xlat1.xyz * vec3(u_xlat8) + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb27)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_26) + u_xlat16_8;
    u_xlat8 = u_xlat16_8 + 1.0;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati8) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
        u_xlat8 = (-u_xlat0.x) + 1.00100005;
        u_xlat8 = max(u_xlat8, 0.00100000005);
        u_xlat8 = min(u_xlat8, 1.0);
        u_xlat8 = log2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGShininess;
        u_xlat8 = exp2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGScale + _RGBias;
        u_xlat16 = u_xlat10_0.w + 0.100000001;
        u_xlatb5 = greaterThanEqual(vec4(u_xlat16), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb1.xyz = lessThan(vec4(u_xlat16), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb1.x = u_xlatb1.x && u_xlatb5.y;
        u_xlatb1.y = u_xlatb1.y && u_xlatb5.z;
        u_xlatb1.z = u_xlatb1.z && u_xlatb5.w;
        u_xlat16_6 = (u_xlatb1.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb1.y) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_6 = (u_xlatb1.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_5 = (u_xlatb5.x) ? _HRRimColor5 : u_xlat16_6;
        u_xlat16_5 = (int(_MoreHardRimColor) != 0) ? u_xlat16_5 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_26 = inversesqrt(u_xlat16_26);
        u_xlat16_6.xyz = vec3(u_xlat16_26) * _WorldSpaceLightPos0.xyz;
        u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
        u_xlat16_26 = u_xlat16_16 + 0.5;
        u_xlat16_26 = u_xlat0.x * u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_5.w<u_xlat16_26);
#else
        u_xlatb0 = u_xlat16_5.w<u_xlat16_26;
#endif
        u_xlat16_26 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_5.xyz;
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_HRRimPower) + u_xlat16_2.xyz;
        u_xlat16_26 = u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_26 * _RGRatio;
        u_xlat1.xyz = vec3(u_xlat8) * _RGColor.xyz + (-u_xlat16_2.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat16_2.xyz;
        u_xlat16_26 = float(_HRRimIntensity);
        u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat16_6.xyz;
        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
            u_xlat8 = (-u_xlat0.x) + 1.00100005;
            u_xlat8 = max(u_xlat8, 0.00100000005);
            u_xlat8 = min(u_xlat8, 1.0);
            u_xlat8 = log2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGShininess;
            u_xlat8 = exp2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGScale + _RGBias;
            u_xlat16_6.xyz = vec3(u_xlat8) * _RGColor.xyz;
            u_xlat8 = u_xlat10_0.w + 0.100000001;
            u_xlatb3 = greaterThanEqual(vec4(u_xlat8), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb8.xyz = lessThan(vec4(u_xlat8), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb8.x = u_xlatb8.x && u_xlatb3.y;
            u_xlatb8.y = u_xlatb8.y && u_xlatb3.z;
            u_xlatb8.z = u_xlatb8.z && u_xlatb3.w;
            u_xlat16_5 = (u_xlatb8.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_5 = (u_xlatb8.y) ? _HRRimColor2 : u_xlat16_5;
            u_xlat16_5 = (u_xlatb8.x) ? _HRRimColor3 : u_xlat16_5;
            u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_5;
            u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_26 = inversesqrt(u_xlat16_26);
            u_xlat16_7.xyz = vec3(u_xlat16_26) * _WorldSpaceLightPos0.xyz;
            u_xlat16_8 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
            u_xlat16_26 = u_xlat16_8 + 0.5;
            u_xlat16_26 = u_xlat0.x * u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_26);
#else
            u_xlatb0 = u_xlat16_3.w<u_xlat16_26;
#endif
            u_xlat16_26 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz;
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_HRRimPower);
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_6.xyz = u_xlat16_2.xyz + u_xlat16_6.xyz;
            u_xlat16_26 = float(_HRRimIntensity);
            u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_6.xyz);
            SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_6.xyz;
        } else {
            SV_Target0.xyz = u_xlat16_2.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat10_1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
int u_xlati3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
mediump float u_xlat16_8;
int u_xlati8;
bvec3 u_xlatb8;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
int u_xlati11;
float u_xlat16;
mediump float u_xlat16_16;
bvec2 u_xlatb16;
mediump float u_xlat16_26;
bool u_xlatb27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat3.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati11 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati11) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat11.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8 != 0) ? u_xlat11.y : u_xlat11.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8 = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (int(u_xlati8) != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat3.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + _WorldSpaceLightPos0.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat5.xyz = vec3(u_xlat8) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb27 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + (-_WorldSpaceLightPos0.xyz);
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat16_6.xyz = u_xlat1.xyz * vec3(u_xlat8) + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb27)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_26) + u_xlat16_8;
    u_xlat8 = u_xlat16_8 + 1.0;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati8) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
        u_xlat8 = (-u_xlat0.x) + 1.00100005;
        u_xlat8 = max(u_xlat8, 0.00100000005);
        u_xlat8 = min(u_xlat8, 1.0);
        u_xlat8 = log2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGShininess;
        u_xlat8 = exp2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGScale + _RGBias;
        u_xlat16 = u_xlat10_0.w + 0.100000001;
        u_xlatb5 = greaterThanEqual(vec4(u_xlat16), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb1.xyz = lessThan(vec4(u_xlat16), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb1.x = u_xlatb1.x && u_xlatb5.y;
        u_xlatb1.y = u_xlatb1.y && u_xlatb5.z;
        u_xlatb1.z = u_xlatb1.z && u_xlatb5.w;
        u_xlat16_6 = (u_xlatb1.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb1.y) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_6 = (u_xlatb1.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_5 = (u_xlatb5.x) ? _HRRimColor5 : u_xlat16_6;
        u_xlat16_5 = (int(_MoreHardRimColor) != 0) ? u_xlat16_5 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_26 = inversesqrt(u_xlat16_26);
        u_xlat16_6.xyz = vec3(u_xlat16_26) * _WorldSpaceLightPos0.xyz;
        u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
        u_xlat16_26 = u_xlat16_16 + 0.5;
        u_xlat16_26 = u_xlat0.x * u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_5.w<u_xlat16_26);
#else
        u_xlatb0 = u_xlat16_5.w<u_xlat16_26;
#endif
        u_xlat16_26 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_5.xyz;
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_HRRimPower) + u_xlat16_2.xyz;
        u_xlat16_26 = u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_26 * _RGRatio;
        u_xlat1.xyz = vec3(u_xlat8) * _RGColor.xyz + (-u_xlat16_2.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat16_2.xyz;
        u_xlat16_26 = float(_HRRimIntensity);
        u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat16_6.xyz;
        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
            u_xlat8 = (-u_xlat0.x) + 1.00100005;
            u_xlat8 = max(u_xlat8, 0.00100000005);
            u_xlat8 = min(u_xlat8, 1.0);
            u_xlat8 = log2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGShininess;
            u_xlat8 = exp2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGScale + _RGBias;
            u_xlat16_6.xyz = vec3(u_xlat8) * _RGColor.xyz;
            u_xlat8 = u_xlat10_0.w + 0.100000001;
            u_xlatb3 = greaterThanEqual(vec4(u_xlat8), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb8.xyz = lessThan(vec4(u_xlat8), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb8.x = u_xlatb8.x && u_xlatb3.y;
            u_xlatb8.y = u_xlatb8.y && u_xlatb3.z;
            u_xlatb8.z = u_xlatb8.z && u_xlatb3.w;
            u_xlat16_5 = (u_xlatb8.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_5 = (u_xlatb8.y) ? _HRRimColor2 : u_xlat16_5;
            u_xlat16_5 = (u_xlatb8.x) ? _HRRimColor3 : u_xlat16_5;
            u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_5;
            u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_26 = inversesqrt(u_xlat16_26);
            u_xlat16_7.xyz = vec3(u_xlat16_26) * _WorldSpaceLightPos0.xyz;
            u_xlat16_8 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
            u_xlat16_26 = u_xlat16_8 + 0.5;
            u_xlat16_26 = u_xlat0.x * u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_26);
#else
            u_xlatb0 = u_xlat16_3.w<u_xlat16_26;
#endif
            u_xlat16_26 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz;
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_HRRimPower);
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_6.xyz = u_xlat16_2.xyz + u_xlat16_6.xyz;
            u_xlat16_26 = float(_HRRimIntensity);
            u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_6.xyz);
            SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_6.xyz;
        } else {
            SV_Target0.xyz = u_xlat16_2.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat10_1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
int u_xlati3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
mediump float u_xlat16_8;
int u_xlati8;
bvec3 u_xlatb8;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
int u_xlati11;
float u_xlat16;
mediump float u_xlat16_16;
bvec2 u_xlatb16;
mediump float u_xlat16_26;
bool u_xlatb27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat3.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati11 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati11) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat11.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8 != 0) ? u_xlat11.y : u_xlat11.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8 = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (int(u_xlati8) != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat3.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + _WorldSpaceLightPos0.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat5.xyz = vec3(u_xlat8) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb27 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + (-_WorldSpaceLightPos0.xyz);
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat16_6.xyz = u_xlat1.xyz * vec3(u_xlat8) + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb27)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_26) + u_xlat16_8;
    u_xlat8 = u_xlat16_8 + 1.0;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati8) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
        u_xlat8 = (-u_xlat0.x) + 1.00100005;
        u_xlat8 = max(u_xlat8, 0.00100000005);
        u_xlat8 = min(u_xlat8, 1.0);
        u_xlat8 = log2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGShininess;
        u_xlat8 = exp2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGScale + _RGBias;
        u_xlat16 = u_xlat10_0.w + 0.100000001;
        u_xlatb5 = greaterThanEqual(vec4(u_xlat16), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb1.xyz = lessThan(vec4(u_xlat16), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb1.x = u_xlatb1.x && u_xlatb5.y;
        u_xlatb1.y = u_xlatb1.y && u_xlatb5.z;
        u_xlatb1.z = u_xlatb1.z && u_xlatb5.w;
        u_xlat16_6 = (u_xlatb1.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb1.y) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_6 = (u_xlatb1.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_5 = (u_xlatb5.x) ? _HRRimColor5 : u_xlat16_6;
        u_xlat16_5 = (int(_MoreHardRimColor) != 0) ? u_xlat16_5 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_26 = inversesqrt(u_xlat16_26);
        u_xlat16_6.xyz = vec3(u_xlat16_26) * _WorldSpaceLightPos0.xyz;
        u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
        u_xlat16_26 = u_xlat16_16 + 0.5;
        u_xlat16_26 = u_xlat0.x * u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_5.w<u_xlat16_26);
#else
        u_xlatb0 = u_xlat16_5.w<u_xlat16_26;
#endif
        u_xlat16_26 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_5.xyz;
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_HRRimPower) + u_xlat16_2.xyz;
        u_xlat16_26 = u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_26 * _RGRatio;
        u_xlat1.xyz = vec3(u_xlat8) * _RGColor.xyz + (-u_xlat16_2.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat16_2.xyz;
        u_xlat16_26 = float(_HRRimIntensity);
        u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat16_6.xyz;
        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
            u_xlat8 = (-u_xlat0.x) + 1.00100005;
            u_xlat8 = max(u_xlat8, 0.00100000005);
            u_xlat8 = min(u_xlat8, 1.0);
            u_xlat8 = log2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGShininess;
            u_xlat8 = exp2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGScale + _RGBias;
            u_xlat16_6.xyz = vec3(u_xlat8) * _RGColor.xyz;
            u_xlat8 = u_xlat10_0.w + 0.100000001;
            u_xlatb3 = greaterThanEqual(vec4(u_xlat8), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb8.xyz = lessThan(vec4(u_xlat8), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb8.x = u_xlatb8.x && u_xlatb3.y;
            u_xlatb8.y = u_xlatb8.y && u_xlatb3.z;
            u_xlatb8.z = u_xlatb8.z && u_xlatb3.w;
            u_xlat16_5 = (u_xlatb8.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_5 = (u_xlatb8.y) ? _HRRimColor2 : u_xlat16_5;
            u_xlat16_5 = (u_xlatb8.x) ? _HRRimColor3 : u_xlat16_5;
            u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_5;
            u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_26 = inversesqrt(u_xlat16_26);
            u_xlat16_7.xyz = vec3(u_xlat16_26) * _WorldSpaceLightPos0.xyz;
            u_xlat16_8 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
            u_xlat16_26 = u_xlat16_8 + 0.5;
            u_xlat16_26 = u_xlat0.x * u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_26);
#else
            u_xlatb0 = u_xlat16_3.w<u_xlat16_26;
#endif
            u_xlat16_26 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz;
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_HRRimPower);
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_6.xyz = u_xlat16_2.xyz + u_xlat16_6.xyz;
            u_xlat16_26 = float(_HRRimIntensity);
            u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_6.xyz);
            SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_6.xyz;
        } else {
            SV_Target0.xyz = u_xlat16_2.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat10_1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
int u_xlati3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
mediump float u_xlat16_8;
int u_xlati8;
bvec3 u_xlatb8;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
int u_xlati11;
float u_xlat16;
mediump float u_xlat16_16;
bvec2 u_xlatb16;
mediump float u_xlat16_26;
bool u_xlatb27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat3.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati11 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati11) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat11.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8 != 0) ? u_xlat11.y : u_xlat11.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8 = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (int(u_xlati8) != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat3.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + _WorldSpaceLightPos0.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat5.xyz = vec3(u_xlat8) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb27 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + (-_WorldSpaceLightPos0.xyz);
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat16_6.xyz = u_xlat1.xyz * vec3(u_xlat8) + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb27)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_26) + u_xlat16_8;
    u_xlat8 = u_xlat16_8 + 1.0;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati8) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
        u_xlat8 = (-u_xlat0.x) + 1.00100005;
        u_xlat8 = max(u_xlat8, 0.00100000005);
        u_xlat8 = min(u_xlat8, 1.0);
        u_xlat8 = log2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGShininess;
        u_xlat8 = exp2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGScale + _RGBias;
        u_xlat16 = u_xlat10_0.w + 0.100000001;
        u_xlatb5 = greaterThanEqual(vec4(u_xlat16), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb1.xyz = lessThan(vec4(u_xlat16), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb1.x = u_xlatb1.x && u_xlatb5.y;
        u_xlatb1.y = u_xlatb1.y && u_xlatb5.z;
        u_xlatb1.z = u_xlatb1.z && u_xlatb5.w;
        u_xlat16_6 = (u_xlatb1.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb1.y) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_6 = (u_xlatb1.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_5 = (u_xlatb5.x) ? _HRRimColor5 : u_xlat16_6;
        u_xlat16_5 = (int(_MoreHardRimColor) != 0) ? u_xlat16_5 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_26 = inversesqrt(u_xlat16_26);
        u_xlat16_6.xyz = vec3(u_xlat16_26) * _WorldSpaceLightPos0.xyz;
        u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
        u_xlat16_26 = u_xlat16_16 + 0.5;
        u_xlat16_26 = u_xlat0.x * u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_5.w<u_xlat16_26);
#else
        u_xlatb0 = u_xlat16_5.w<u_xlat16_26;
#endif
        u_xlat16_26 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_5.xyz;
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_HRRimPower) + u_xlat16_2.xyz;
        u_xlat16_26 = u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_26 * _RGRatio;
        u_xlat1.xyz = vec3(u_xlat8) * _RGColor.xyz + (-u_xlat16_2.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat16_2.xyz;
        u_xlat16_26 = float(_HRRimIntensity);
        u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat16_6.xyz;
        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
            u_xlat8 = (-u_xlat0.x) + 1.00100005;
            u_xlat8 = max(u_xlat8, 0.00100000005);
            u_xlat8 = min(u_xlat8, 1.0);
            u_xlat8 = log2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGShininess;
            u_xlat8 = exp2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGScale + _RGBias;
            u_xlat16_6.xyz = vec3(u_xlat8) * _RGColor.xyz;
            u_xlat8 = u_xlat10_0.w + 0.100000001;
            u_xlatb3 = greaterThanEqual(vec4(u_xlat8), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb8.xyz = lessThan(vec4(u_xlat8), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb8.x = u_xlatb8.x && u_xlatb3.y;
            u_xlatb8.y = u_xlatb8.y && u_xlatb3.z;
            u_xlatb8.z = u_xlatb8.z && u_xlatb3.w;
            u_xlat16_5 = (u_xlatb8.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_5 = (u_xlatb8.y) ? _HRRimColor2 : u_xlat16_5;
            u_xlat16_5 = (u_xlatb8.x) ? _HRRimColor3 : u_xlat16_5;
            u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_5;
            u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_26 = inversesqrt(u_xlat16_26);
            u_xlat16_7.xyz = vec3(u_xlat16_26) * _WorldSpaceLightPos0.xyz;
            u_xlat16_8 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
            u_xlat16_26 = u_xlat16_8 + 0.5;
            u_xlat16_26 = u_xlat0.x * u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_26);
#else
            u_xlatb0 = u_xlat16_3.w<u_xlat16_26;
#endif
            u_xlat16_26 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz;
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_HRRimPower);
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_6.xyz = u_xlat16_2.xyz + u_xlat16_6.xyz;
            u_xlat16_26 = float(_HRRimIntensity);
            u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_6.xyz);
            SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_6.xyz;
        } else {
            SV_Target0.xyz = u_xlat16_2.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat10_1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
int u_xlati1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec3 u_xlat10_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
mediump float u_xlat16_8;
int u_xlati8;
bvec3 u_xlatb8;
float u_xlat16;
mediump float u_xlat16_16;
bvec2 u_xlatb16;
vec2 u_xlat17;
int u_xlati17;
bool u_xlatb26;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_28 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat1.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati17 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati17) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat17.xy = vec2(u_xlat16_28) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_28 = (u_xlati8 != 0) ? u_xlat17.y : u_xlat17.x;
    u_xlat16_28 = u_xlat16_28 + vs_COLOR1.x;
    u_xlat16_28 = u_xlat16_28 * 0.5 + (-_LightArea);
    u_xlat16_28 = u_xlat16_28 + 1.0;
    u_xlat16_28 = floor(u_xlat16_28);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlati8 = int(u_xlat16_28);
    u_xlat16_4.xyz = (int(u_xlati8) != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (int(u_xlati1) != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_5.xyz = vec3(u_xlat16_28) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8 = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xzw;
    u_xlat1.xzw = u_xlat1.xzw * vec3(u_xlat8) + _WorldSpaceLightPos0.xyz;
    u_xlat8 = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat3.xyz = vec3(u_xlat8) * u_xlat1.xzw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb26 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xzw = u_xlat1.xzw * vec3(u_xlat8) + (-_WorldSpaceLightPos0.xyz);
    u_xlat8 = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat16_6.xyz = u_xlat1.xzw * vec3(u_xlat8) + _CustomLightDir.xyz;
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb26)) ? u_xlat16_6.xyz : u_xlat3.xyz;
    u_xlat16_28 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = log2(u_xlat16_28);
    u_xlat16_28 = u_xlat16_28 * _Shininess;
    u_xlat16_28 = exp2(u_xlat16_28);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_28) + u_xlat16_8;
    u_xlat8 = u_xlat16_8 + 1.0;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati8) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_5.xyz);
        u_xlat8 = (-u_xlat0.x) + 1.00100005;
        u_xlat8 = max(u_xlat8, 0.00100000005);
        u_xlat8 = min(u_xlat8, 1.0);
        u_xlat8 = log2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGShininess;
        u_xlat8 = exp2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGScale + _RGBias;
        u_xlat16 = u_xlat10_0.w + 0.100000001;
        u_xlatb3 = greaterThanEqual(vec4(u_xlat16), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb1.xzw = lessThan(vec4(u_xlat16), vec4(0.600000024, 0.0, 0.400000006, 0.800000012)).xzw;
        u_xlatb1.x = u_xlatb1.x && u_xlatb3.y;
        u_xlatb1.z = u_xlatb1.z && u_xlatb3.z;
        u_xlatb1.w = u_xlatb1.w && u_xlatb3.w;
        u_xlat16_6 = (u_xlatb1.w) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb1.z) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_6 = (u_xlatb1.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_6;
        u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_28 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_28 = inversesqrt(u_xlat16_28);
        u_xlat16_6.xyz = vec3(u_xlat16_28) * _WorldSpaceLightPos0.xyz;
        u_xlat16_16 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
        u_xlat16_28 = u_xlat16_16 + 0.5;
        u_xlat16_28 = u_xlat0.x * u_xlat16_28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_28);
#else
        u_xlatb0 = u_xlat16_3.w<u_xlat16_28;
#endif
        u_xlat16_28 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(u_xlat16_28);
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_HRRimPower) + u_xlat16_4.xyz;
        u_xlat16_28 = u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
        u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_28 * _RGRatio;
        u_xlat1.xzw = vec3(u_xlat8) * _RGColor.xyz + (-u_xlat16_4.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xzw + u_xlat16_4.xyz;
        u_xlat16_28 = float(_HRRimIntensity);
        u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat16_6.xyz;
        SV_Target0.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_5.xyz);
            u_xlat8 = (-u_xlat0.x) + 1.00100005;
            u_xlat8 = max(u_xlat8, 0.00100000005);
            u_xlat8 = min(u_xlat8, 1.0);
            u_xlat8 = log2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGShininess;
            u_xlat8 = exp2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGScale + _RGBias;
            u_xlat16_6.xyz = vec3(u_xlat8) * _RGColor.xyz;
            u_xlat8 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat8), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb8.xyz = lessThan(vec4(u_xlat8), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb8.x = u_xlatb8.x && u_xlatb2.y;
            u_xlatb8.y = u_xlatb8.y && u_xlatb2.z;
            u_xlatb8.z = u_xlatb8.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb8.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb8.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb8.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_28 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_28 = inversesqrt(u_xlat16_28);
            u_xlat16_7.xyz = vec3(u_xlat16_28) * _WorldSpaceLightPos0.xyz;
            u_xlat16_8 = dot(u_xlat16_5.xyz, u_xlat16_7.xyz);
            u_xlat16_28 = u_xlat16_8 + 0.5;
            u_xlat16_28 = u_xlat0.x * u_xlat16_28;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_28);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_28;
#endif
            u_xlat16_28 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(u_xlat16_28);
            u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_HRRimPower);
            u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_5.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
            u_xlat16_28 = float(_HRRimIntensity);
            u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
            SV_Target0.xyz = vec3(u_xlat16_28) * u_xlat16_5.xyz + u_xlat16_6.xyz;
        } else {
            SV_Target0.xyz = u_xlat16_4.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat10_1.y * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
int u_xlati1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec3 u_xlat10_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
mediump float u_xlat16_8;
int u_xlati8;
bvec3 u_xlatb8;
float u_xlat16;
mediump float u_xlat16_16;
bvec2 u_xlatb16;
vec2 u_xlat17;
int u_xlati17;
bool u_xlatb26;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_28 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat1.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati17 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati17) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat17.xy = vec2(u_xlat16_28) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_28 = (u_xlati8 != 0) ? u_xlat17.y : u_xlat17.x;
    u_xlat16_28 = u_xlat16_28 + vs_COLOR1.x;
    u_xlat16_28 = u_xlat16_28 * 0.5 + (-_LightArea);
    u_xlat16_28 = u_xlat16_28 + 1.0;
    u_xlat16_28 = floor(u_xlat16_28);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlati8 = int(u_xlat16_28);
    u_xlat16_4.xyz = (int(u_xlati8) != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (int(u_xlati1) != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_5.xyz = vec3(u_xlat16_28) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8 = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xzw;
    u_xlat1.xzw = u_xlat1.xzw * vec3(u_xlat8) + _WorldSpaceLightPos0.xyz;
    u_xlat8 = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat3.xyz = vec3(u_xlat8) * u_xlat1.xzw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb26 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xzw = u_xlat1.xzw * vec3(u_xlat8) + (-_WorldSpaceLightPos0.xyz);
    u_xlat8 = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat16_6.xyz = u_xlat1.xzw * vec3(u_xlat8) + _CustomLightDir.xyz;
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb26)) ? u_xlat16_6.xyz : u_xlat3.xyz;
    u_xlat16_28 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = log2(u_xlat16_28);
    u_xlat16_28 = u_xlat16_28 * _Shininess;
    u_xlat16_28 = exp2(u_xlat16_28);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_28) + u_xlat16_8;
    u_xlat8 = u_xlat16_8 + 1.0;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati8) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_5.xyz);
        u_xlat8 = (-u_xlat0.x) + 1.00100005;
        u_xlat8 = max(u_xlat8, 0.00100000005);
        u_xlat8 = min(u_xlat8, 1.0);
        u_xlat8 = log2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGShininess;
        u_xlat8 = exp2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGScale + _RGBias;
        u_xlat16 = u_xlat10_0.w + 0.100000001;
        u_xlatb3 = greaterThanEqual(vec4(u_xlat16), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb1.xzw = lessThan(vec4(u_xlat16), vec4(0.600000024, 0.0, 0.400000006, 0.800000012)).xzw;
        u_xlatb1.x = u_xlatb1.x && u_xlatb3.y;
        u_xlatb1.z = u_xlatb1.z && u_xlatb3.z;
        u_xlatb1.w = u_xlatb1.w && u_xlatb3.w;
        u_xlat16_6 = (u_xlatb1.w) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb1.z) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_6 = (u_xlatb1.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_6;
        u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_28 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_28 = inversesqrt(u_xlat16_28);
        u_xlat16_6.xyz = vec3(u_xlat16_28) * _WorldSpaceLightPos0.xyz;
        u_xlat16_16 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
        u_xlat16_28 = u_xlat16_16 + 0.5;
        u_xlat16_28 = u_xlat0.x * u_xlat16_28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_28);
#else
        u_xlatb0 = u_xlat16_3.w<u_xlat16_28;
#endif
        u_xlat16_28 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(u_xlat16_28);
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_HRRimPower) + u_xlat16_4.xyz;
        u_xlat16_28 = u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
        u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_28 * _RGRatio;
        u_xlat1.xzw = vec3(u_xlat8) * _RGColor.xyz + (-u_xlat16_4.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xzw + u_xlat16_4.xyz;
        u_xlat16_28 = float(_HRRimIntensity);
        u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat16_6.xyz;
        SV_Target0.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_5.xyz);
            u_xlat8 = (-u_xlat0.x) + 1.00100005;
            u_xlat8 = max(u_xlat8, 0.00100000005);
            u_xlat8 = min(u_xlat8, 1.0);
            u_xlat8 = log2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGShininess;
            u_xlat8 = exp2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGScale + _RGBias;
            u_xlat16_6.xyz = vec3(u_xlat8) * _RGColor.xyz;
            u_xlat8 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat8), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb8.xyz = lessThan(vec4(u_xlat8), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb8.x = u_xlatb8.x && u_xlatb2.y;
            u_xlatb8.y = u_xlatb8.y && u_xlatb2.z;
            u_xlatb8.z = u_xlatb8.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb8.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb8.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb8.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_28 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_28 = inversesqrt(u_xlat16_28);
            u_xlat16_7.xyz = vec3(u_xlat16_28) * _WorldSpaceLightPos0.xyz;
            u_xlat16_8 = dot(u_xlat16_5.xyz, u_xlat16_7.xyz);
            u_xlat16_28 = u_xlat16_8 + 0.5;
            u_xlat16_28 = u_xlat0.x * u_xlat16_28;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_28);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_28;
#endif
            u_xlat16_28 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(u_xlat16_28);
            u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_HRRimPower);
            u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_5.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
            u_xlat16_28 = float(_HRRimIntensity);
            u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
            SV_Target0.xyz = vec3(u_xlat16_28) * u_xlat16_5.xyz + u_xlat16_6.xyz;
        } else {
            SV_Target0.xyz = u_xlat16_4.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat10_1.y * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
int u_xlati1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec3 u_xlat10_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
mediump float u_xlat16_8;
int u_xlati8;
bvec3 u_xlatb8;
float u_xlat16;
mediump float u_xlat16_16;
bvec2 u_xlatb16;
vec2 u_xlat17;
int u_xlati17;
bool u_xlatb26;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_28 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat1.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati17 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati17) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat17.xy = vec2(u_xlat16_28) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_28 = (u_xlati8 != 0) ? u_xlat17.y : u_xlat17.x;
    u_xlat16_28 = u_xlat16_28 + vs_COLOR1.x;
    u_xlat16_28 = u_xlat16_28 * 0.5 + (-_LightArea);
    u_xlat16_28 = u_xlat16_28 + 1.0;
    u_xlat16_28 = floor(u_xlat16_28);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlati8 = int(u_xlat16_28);
    u_xlat16_4.xyz = (int(u_xlati8) != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (int(u_xlati1) != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_5.xyz = vec3(u_xlat16_28) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8 = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xzw;
    u_xlat1.xzw = u_xlat1.xzw * vec3(u_xlat8) + _WorldSpaceLightPos0.xyz;
    u_xlat8 = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat3.xyz = vec3(u_xlat8) * u_xlat1.xzw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb26 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xzw = u_xlat1.xzw * vec3(u_xlat8) + (-_WorldSpaceLightPos0.xyz);
    u_xlat8 = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat16_6.xyz = u_xlat1.xzw * vec3(u_xlat8) + _CustomLightDir.xyz;
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb26)) ? u_xlat16_6.xyz : u_xlat3.xyz;
    u_xlat16_28 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = log2(u_xlat16_28);
    u_xlat16_28 = u_xlat16_28 * _Shininess;
    u_xlat16_28 = exp2(u_xlat16_28);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_28) + u_xlat16_8;
    u_xlat8 = u_xlat16_8 + 1.0;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati8) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_5.xyz);
        u_xlat8 = (-u_xlat0.x) + 1.00100005;
        u_xlat8 = max(u_xlat8, 0.00100000005);
        u_xlat8 = min(u_xlat8, 1.0);
        u_xlat8 = log2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGShininess;
        u_xlat8 = exp2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGScale + _RGBias;
        u_xlat16 = u_xlat10_0.w + 0.100000001;
        u_xlatb3 = greaterThanEqual(vec4(u_xlat16), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb1.xzw = lessThan(vec4(u_xlat16), vec4(0.600000024, 0.0, 0.400000006, 0.800000012)).xzw;
        u_xlatb1.x = u_xlatb1.x && u_xlatb3.y;
        u_xlatb1.z = u_xlatb1.z && u_xlatb3.z;
        u_xlatb1.w = u_xlatb1.w && u_xlatb3.w;
        u_xlat16_6 = (u_xlatb1.w) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb1.z) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_6 = (u_xlatb1.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_6;
        u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_28 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_28 = inversesqrt(u_xlat16_28);
        u_xlat16_6.xyz = vec3(u_xlat16_28) * _WorldSpaceLightPos0.xyz;
        u_xlat16_16 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
        u_xlat16_28 = u_xlat16_16 + 0.5;
        u_xlat16_28 = u_xlat0.x * u_xlat16_28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_28);
#else
        u_xlatb0 = u_xlat16_3.w<u_xlat16_28;
#endif
        u_xlat16_28 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(u_xlat16_28);
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_HRRimPower) + u_xlat16_4.xyz;
        u_xlat16_28 = u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
        u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_28 * _RGRatio;
        u_xlat1.xzw = vec3(u_xlat8) * _RGColor.xyz + (-u_xlat16_4.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xzw + u_xlat16_4.xyz;
        u_xlat16_28 = float(_HRRimIntensity);
        u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat16_6.xyz;
        SV_Target0.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_5.xyz);
            u_xlat8 = (-u_xlat0.x) + 1.00100005;
            u_xlat8 = max(u_xlat8, 0.00100000005);
            u_xlat8 = min(u_xlat8, 1.0);
            u_xlat8 = log2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGShininess;
            u_xlat8 = exp2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGScale + _RGBias;
            u_xlat16_6.xyz = vec3(u_xlat8) * _RGColor.xyz;
            u_xlat8 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat8), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb8.xyz = lessThan(vec4(u_xlat8), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb8.x = u_xlatb8.x && u_xlatb2.y;
            u_xlatb8.y = u_xlatb8.y && u_xlatb2.z;
            u_xlatb8.z = u_xlatb8.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb8.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb8.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb8.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_28 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_28 = inversesqrt(u_xlat16_28);
            u_xlat16_7.xyz = vec3(u_xlat16_28) * _WorldSpaceLightPos0.xyz;
            u_xlat16_8 = dot(u_xlat16_5.xyz, u_xlat16_7.xyz);
            u_xlat16_28 = u_xlat16_8 + 0.5;
            u_xlat16_28 = u_xlat0.x * u_xlat16_28;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_28);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_28;
#endif
            u_xlat16_28 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(u_xlat16_28);
            u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_HRRimPower);
            u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_5.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
            u_xlat16_28 = float(_HRRimIntensity);
            u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
            SV_Target0.xyz = vec3(u_xlat16_28) * u_xlat16_5.xyz + u_xlat16_6.xyz;
        } else {
            SV_Target0.xyz = u_xlat16_4.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat10_1.y * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
int u_xlati2;
bvec4 u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec4 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
float u_xlat11;
mediump float u_xlat16_11;
int u_xlati11;
bvec3 u_xlatb11;
mediump float u_xlat16_12;
vec2 u_xlat13;
int u_xlati13;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
bvec2 u_xlatb22;
mediump float u_xlat16_24;
lowp vec2 u_xlat10_24;
bool u_xlatb35;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_24 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_24 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_12 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat5.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat5.w = u_xlat2.x * u_xlat16_12 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat5;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat2.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat2.x = max(u_xlat2.x, 0.0);
    u_xlati2 = int(u_xlat2.x);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati13 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati13) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11 = floor(u_xlat11);
    u_xlat11 = max(u_xlat11, 0.0);
    u_xlati11 = int(u_xlat11);
    u_xlat13.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11 != 0) ? u_xlat13.y : u_xlat13.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11 = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (int(u_xlati11) != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + _WorldSpaceLightPos0.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat3.xyz = vec3(u_xlat11) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + (-_WorldSpaceLightPos0.xyz);
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat16_9.xyz = u_xlat1.xyz * vec3(u_xlat11) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb35)) ? u_xlat16_9.xyz : u_xlat3.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_11 = (-u_xlat16_40) + u_xlat16_11;
    u_xlat11 = u_xlat16_11 + 1.0;
    u_xlat11 = floor(u_xlat11);
    u_xlat11 = max(u_xlat11, 0.0);
    u_xlati11 = int(u_xlat11);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati11) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz + u_xlat16_9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_8.xyz);
        u_xlat11 = (-u_xlat0.x) + 1.00100005;
        u_xlat11 = max(u_xlat11, 0.00100000005);
        u_xlat11 = min(u_xlat11, 1.0);
        u_xlat11 = log2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGShininess;
        u_xlat11 = exp2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGScale + _RGBias;
        u_xlat22 = u_xlat10_0.w + 0.100000001;
        u_xlatb3 = greaterThanEqual(vec4(u_xlat22), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb1.xyz = lessThan(vec4(u_xlat22), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb1.x = u_xlatb1.x && u_xlatb3.y;
        u_xlatb1.y = u_xlatb1.y && u_xlatb3.z;
        u_xlatb1.z = u_xlatb1.z && u_xlatb3.w;
        u_xlat16_4 = (u_xlatb1.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_4 = (u_xlatb1.y) ? _HRRimColor2 : u_xlat16_4;
        u_xlat16_4 = (u_xlatb1.x) ? _HRRimColor3 : u_xlat16_4;
        u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_4;
        u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_40 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_40 = inversesqrt(u_xlat16_40);
        u_xlat16_9.xyz = vec3(u_xlat16_40) * _WorldSpaceLightPos0.xyz;
        u_xlat16_22 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
        u_xlat16_40 = u_xlat16_22 + 0.5;
        u_xlat16_40 = u_xlat0.x * u_xlat16_40;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_40);
#else
        u_xlatb0 = u_xlat16_3.w<u_xlat16_40;
#endif
        u_xlat16_40 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_9.xyz = u_xlat16_3.xyz * vec3(u_xlat16_40);
        u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(_HRRimPower) + u_xlat16_7.xyz;
        u_xlat16_40 = u_xlat11;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_40 = min(max(u_xlat16_40, 0.0), 1.0);
#else
        u_xlat16_40 = clamp(u_xlat16_40, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_40 * _RGRatio;
        u_xlat1.xyz = vec3(u_xlat11) * _RGColor.xyz + (-u_xlat16_7.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat16_7.xyz;
        u_xlat16_40 = float(_HRRimIntensity);
        u_xlat16_9.xyz = (-u_xlat0.xyz) + u_xlat16_9.xyz;
        SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_8.xyz);
            u_xlat11 = (-u_xlat0.x) + 1.00100005;
            u_xlat11 = max(u_xlat11, 0.00100000005);
            u_xlat11 = min(u_xlat11, 1.0);
            u_xlat11 = log2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGShininess;
            u_xlat11 = exp2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGScale + _RGBias;
            u_xlat16_9.xyz = vec3(u_xlat11) * _RGColor.xyz;
            u_xlat11 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat11), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb11.xyz = lessThan(vec4(u_xlat11), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb11.x = u_xlatb11.x && u_xlatb2.y;
            u_xlatb11.y = u_xlatb11.y && u_xlatb2.z;
            u_xlatb11.z = u_xlatb11.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb11.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb11.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb11.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_40 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_40 = inversesqrt(u_xlat16_40);
            u_xlat16_10.xyz = vec3(u_xlat16_40) * _WorldSpaceLightPos0.xyz;
            u_xlat16_11 = dot(u_xlat16_8.xyz, u_xlat16_10.xyz);
            u_xlat16_40 = u_xlat16_11 + 0.5;
            u_xlat16_40 = u_xlat0.x * u_xlat16_40;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_40);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_40;
#endif
            u_xlat16_40 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_8.xyz = u_xlat16_2.xyz * vec3(u_xlat16_40);
            u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_HRRimPower);
            u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_8.xyz = u_xlat16_7.xyz + u_xlat16_8.xyz;
            u_xlat16_9.xyz = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_9.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
            u_xlat16_40 = float(_HRRimIntensity);
            u_xlat16_8.xyz = u_xlat16_8.xyz + (-u_xlat16_9.xyz);
            SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat16_8.xyz + u_xlat16_9.xyz;
        } else {
            SV_Target0.xyz = u_xlat16_7.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
int u_xlati2;
bvec4 u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec4 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
float u_xlat11;
mediump float u_xlat16_11;
int u_xlati11;
bvec3 u_xlatb11;
mediump float u_xlat16_12;
vec2 u_xlat13;
int u_xlati13;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
bvec2 u_xlatb22;
mediump float u_xlat16_24;
lowp vec2 u_xlat10_24;
bool u_xlatb35;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_24 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_24 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_12 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat5.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat5.w = u_xlat2.x * u_xlat16_12 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat5;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat2.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat2.x = max(u_xlat2.x, 0.0);
    u_xlati2 = int(u_xlat2.x);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati13 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati13) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11 = floor(u_xlat11);
    u_xlat11 = max(u_xlat11, 0.0);
    u_xlati11 = int(u_xlat11);
    u_xlat13.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11 != 0) ? u_xlat13.y : u_xlat13.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11 = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (int(u_xlati11) != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + _WorldSpaceLightPos0.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat3.xyz = vec3(u_xlat11) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + (-_WorldSpaceLightPos0.xyz);
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat16_9.xyz = u_xlat1.xyz * vec3(u_xlat11) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb35)) ? u_xlat16_9.xyz : u_xlat3.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_11 = (-u_xlat16_40) + u_xlat16_11;
    u_xlat11 = u_xlat16_11 + 1.0;
    u_xlat11 = floor(u_xlat11);
    u_xlat11 = max(u_xlat11, 0.0);
    u_xlati11 = int(u_xlat11);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati11) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz + u_xlat16_9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_8.xyz);
        u_xlat11 = (-u_xlat0.x) + 1.00100005;
        u_xlat11 = max(u_xlat11, 0.00100000005);
        u_xlat11 = min(u_xlat11, 1.0);
        u_xlat11 = log2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGShininess;
        u_xlat11 = exp2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGScale + _RGBias;
        u_xlat22 = u_xlat10_0.w + 0.100000001;
        u_xlatb3 = greaterThanEqual(vec4(u_xlat22), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb1.xyz = lessThan(vec4(u_xlat22), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb1.x = u_xlatb1.x && u_xlatb3.y;
        u_xlatb1.y = u_xlatb1.y && u_xlatb3.z;
        u_xlatb1.z = u_xlatb1.z && u_xlatb3.w;
        u_xlat16_4 = (u_xlatb1.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_4 = (u_xlatb1.y) ? _HRRimColor2 : u_xlat16_4;
        u_xlat16_4 = (u_xlatb1.x) ? _HRRimColor3 : u_xlat16_4;
        u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_4;
        u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_40 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_40 = inversesqrt(u_xlat16_40);
        u_xlat16_9.xyz = vec3(u_xlat16_40) * _WorldSpaceLightPos0.xyz;
        u_xlat16_22 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
        u_xlat16_40 = u_xlat16_22 + 0.5;
        u_xlat16_40 = u_xlat0.x * u_xlat16_40;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_40);
#else
        u_xlatb0 = u_xlat16_3.w<u_xlat16_40;
#endif
        u_xlat16_40 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_9.xyz = u_xlat16_3.xyz * vec3(u_xlat16_40);
        u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(_HRRimPower) + u_xlat16_7.xyz;
        u_xlat16_40 = u_xlat11;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_40 = min(max(u_xlat16_40, 0.0), 1.0);
#else
        u_xlat16_40 = clamp(u_xlat16_40, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_40 * _RGRatio;
        u_xlat1.xyz = vec3(u_xlat11) * _RGColor.xyz + (-u_xlat16_7.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat16_7.xyz;
        u_xlat16_40 = float(_HRRimIntensity);
        u_xlat16_9.xyz = (-u_xlat0.xyz) + u_xlat16_9.xyz;
        SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_8.xyz);
            u_xlat11 = (-u_xlat0.x) + 1.00100005;
            u_xlat11 = max(u_xlat11, 0.00100000005);
            u_xlat11 = min(u_xlat11, 1.0);
            u_xlat11 = log2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGShininess;
            u_xlat11 = exp2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGScale + _RGBias;
            u_xlat16_9.xyz = vec3(u_xlat11) * _RGColor.xyz;
            u_xlat11 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat11), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb11.xyz = lessThan(vec4(u_xlat11), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb11.x = u_xlatb11.x && u_xlatb2.y;
            u_xlatb11.y = u_xlatb11.y && u_xlatb2.z;
            u_xlatb11.z = u_xlatb11.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb11.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb11.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb11.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_40 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_40 = inversesqrt(u_xlat16_40);
            u_xlat16_10.xyz = vec3(u_xlat16_40) * _WorldSpaceLightPos0.xyz;
            u_xlat16_11 = dot(u_xlat16_8.xyz, u_xlat16_10.xyz);
            u_xlat16_40 = u_xlat16_11 + 0.5;
            u_xlat16_40 = u_xlat0.x * u_xlat16_40;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_40);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_40;
#endif
            u_xlat16_40 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_8.xyz = u_xlat16_2.xyz * vec3(u_xlat16_40);
            u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_HRRimPower);
            u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_8.xyz = u_xlat16_7.xyz + u_xlat16_8.xyz;
            u_xlat16_9.xyz = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_9.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
            u_xlat16_40 = float(_HRRimIntensity);
            u_xlat16_8.xyz = u_xlat16_8.xyz + (-u_xlat16_9.xyz);
            SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat16_8.xyz + u_xlat16_9.xyz;
        } else {
            SV_Target0.xyz = u_xlat16_7.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
int u_xlati2;
bvec4 u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec4 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
float u_xlat11;
mediump float u_xlat16_11;
int u_xlati11;
bvec3 u_xlatb11;
mediump float u_xlat16_12;
vec2 u_xlat13;
int u_xlati13;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
bvec2 u_xlatb22;
mediump float u_xlat16_24;
lowp vec2 u_xlat10_24;
bool u_xlatb35;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_24 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_24 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_12 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat5.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat5.w = u_xlat2.x * u_xlat16_12 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat5;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat2.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat2.x = max(u_xlat2.x, 0.0);
    u_xlati2 = int(u_xlat2.x);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati13 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati13) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11 = floor(u_xlat11);
    u_xlat11 = max(u_xlat11, 0.0);
    u_xlati11 = int(u_xlat11);
    u_xlat13.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11 != 0) ? u_xlat13.y : u_xlat13.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11 = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (int(u_xlati11) != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + _WorldSpaceLightPos0.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat3.xyz = vec3(u_xlat11) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + (-_WorldSpaceLightPos0.xyz);
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat16_9.xyz = u_xlat1.xyz * vec3(u_xlat11) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb35)) ? u_xlat16_9.xyz : u_xlat3.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_11 = (-u_xlat16_40) + u_xlat16_11;
    u_xlat11 = u_xlat16_11 + 1.0;
    u_xlat11 = floor(u_xlat11);
    u_xlat11 = max(u_xlat11, 0.0);
    u_xlati11 = int(u_xlat11);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati11) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz + u_xlat16_9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_8.xyz);
        u_xlat11 = (-u_xlat0.x) + 1.00100005;
        u_xlat11 = max(u_xlat11, 0.00100000005);
        u_xlat11 = min(u_xlat11, 1.0);
        u_xlat11 = log2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGShininess;
        u_xlat11 = exp2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGScale + _RGBias;
        u_xlat22 = u_xlat10_0.w + 0.100000001;
        u_xlatb3 = greaterThanEqual(vec4(u_xlat22), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb1.xyz = lessThan(vec4(u_xlat22), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb1.x = u_xlatb1.x && u_xlatb3.y;
        u_xlatb1.y = u_xlatb1.y && u_xlatb3.z;
        u_xlatb1.z = u_xlatb1.z && u_xlatb3.w;
        u_xlat16_4 = (u_xlatb1.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_4 = (u_xlatb1.y) ? _HRRimColor2 : u_xlat16_4;
        u_xlat16_4 = (u_xlatb1.x) ? _HRRimColor3 : u_xlat16_4;
        u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_4;
        u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_40 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_40 = inversesqrt(u_xlat16_40);
        u_xlat16_9.xyz = vec3(u_xlat16_40) * _WorldSpaceLightPos0.xyz;
        u_xlat16_22 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
        u_xlat16_40 = u_xlat16_22 + 0.5;
        u_xlat16_40 = u_xlat0.x * u_xlat16_40;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_40);
#else
        u_xlatb0 = u_xlat16_3.w<u_xlat16_40;
#endif
        u_xlat16_40 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_9.xyz = u_xlat16_3.xyz * vec3(u_xlat16_40);
        u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(_HRRimPower) + u_xlat16_7.xyz;
        u_xlat16_40 = u_xlat11;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_40 = min(max(u_xlat16_40, 0.0), 1.0);
#else
        u_xlat16_40 = clamp(u_xlat16_40, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_40 * _RGRatio;
        u_xlat1.xyz = vec3(u_xlat11) * _RGColor.xyz + (-u_xlat16_7.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat16_7.xyz;
        u_xlat16_40 = float(_HRRimIntensity);
        u_xlat16_9.xyz = (-u_xlat0.xyz) + u_xlat16_9.xyz;
        SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_8.xyz);
            u_xlat11 = (-u_xlat0.x) + 1.00100005;
            u_xlat11 = max(u_xlat11, 0.00100000005);
            u_xlat11 = min(u_xlat11, 1.0);
            u_xlat11 = log2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGShininess;
            u_xlat11 = exp2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGScale + _RGBias;
            u_xlat16_9.xyz = vec3(u_xlat11) * _RGColor.xyz;
            u_xlat11 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat11), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb11.xyz = lessThan(vec4(u_xlat11), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb11.x = u_xlatb11.x && u_xlatb2.y;
            u_xlatb11.y = u_xlatb11.y && u_xlatb2.z;
            u_xlatb11.z = u_xlatb11.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb11.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb11.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb11.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_40 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_40 = inversesqrt(u_xlat16_40);
            u_xlat16_10.xyz = vec3(u_xlat16_40) * _WorldSpaceLightPos0.xyz;
            u_xlat16_11 = dot(u_xlat16_8.xyz, u_xlat16_10.xyz);
            u_xlat16_40 = u_xlat16_11 + 0.5;
            u_xlat16_40 = u_xlat0.x * u_xlat16_40;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_40);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_40;
#endif
            u_xlat16_40 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_8.xyz = u_xlat16_2.xyz * vec3(u_xlat16_40);
            u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_HRRimPower);
            u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_8.xyz = u_xlat16_7.xyz + u_xlat16_8.xyz;
            u_xlat16_9.xyz = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_9.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
            u_xlat16_40 = float(_HRRimIntensity);
            u_xlat16_8.xyz = u_xlat16_8.xyz + (-u_xlat16_9.xyz);
            SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat16_8.xyz + u_xlat16_9.xyz;
        } else {
            SV_Target0.xyz = u_xlat16_7.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
ivec3 u_xlati7;
mediump vec3 u_xlat16_9;
float u_xlat14;
mediump float u_xlat16_14;
int u_xlati14;
bvec2 u_xlatb14;
float u_xlat21;
float u_xlat22;
mediump float u_xlat16_23;
bool u_xlatb24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_9.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_9.x = u_xlat16_9.x * 0.5 + (-_SecondShadow);
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = floor(u_xlat16_9.x);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlati3 = int(u_xlat16_9.x);
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_9.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati7.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati7.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_4.xyz = vec3(u_xlat16_23) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat1.xyz * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = vec3(u_xlat21) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + (-_WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat21) + _CustomLightDir.xyz;
    u_xlat16_23 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb24)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_23 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = log2(u_xlat16_23);
    u_xlat16_23 = u_xlat16_23 * _Shininess;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_14 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_14 = (-u_xlat16_23) + u_xlat16_14;
    u_xlat14 = u_xlat16_14 + 1.0;
    u_xlat14 = floor(u_xlat14);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlati14 = int(u_xlat14);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati14) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
    u_xlat16_2.w = u_xlat10_1.w * vs_COLOR1.y;
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat22 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat22 = u_xlat22 * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xyz * u_xlat7.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat21)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_4.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat21 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat21) * vec2(1.70000005, 1.5) + (-vec2(u_xlat22));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat21 = u_xlat21 * 1.70000005 + (-u_xlat22);
    u_xlat21 = u_xlat21 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat21 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_4.xyz = (u_xlati1.x != 0) ? u_xlat16_4.xyz : u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat21) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
ivec3 u_xlati7;
mediump vec3 u_xlat16_9;
float u_xlat14;
mediump float u_xlat16_14;
int u_xlati14;
bvec2 u_xlatb14;
float u_xlat21;
float u_xlat22;
mediump float u_xlat16_23;
bool u_xlatb24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_9.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_9.x = u_xlat16_9.x * 0.5 + (-_SecondShadow);
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = floor(u_xlat16_9.x);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlati3 = int(u_xlat16_9.x);
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_9.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati7.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati7.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_4.xyz = vec3(u_xlat16_23) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat1.xyz * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = vec3(u_xlat21) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + (-_WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat21) + _CustomLightDir.xyz;
    u_xlat16_23 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb24)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_23 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = log2(u_xlat16_23);
    u_xlat16_23 = u_xlat16_23 * _Shininess;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_14 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_14 = (-u_xlat16_23) + u_xlat16_14;
    u_xlat14 = u_xlat16_14 + 1.0;
    u_xlat14 = floor(u_xlat14);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlati14 = int(u_xlat14);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati14) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
    u_xlat16_2.w = u_xlat10_1.w * vs_COLOR1.y;
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat22 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat22 = u_xlat22 * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xyz * u_xlat7.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat21)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_4.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat21 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat21) * vec2(1.70000005, 1.5) + (-vec2(u_xlat22));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat21 = u_xlat21 * 1.70000005 + (-u_xlat22);
    u_xlat21 = u_xlat21 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat21 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_4.xyz = (u_xlati1.x != 0) ? u_xlat16_4.xyz : u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat21) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
ivec3 u_xlati7;
mediump vec3 u_xlat16_9;
float u_xlat14;
mediump float u_xlat16_14;
int u_xlati14;
bvec2 u_xlatb14;
float u_xlat21;
float u_xlat22;
mediump float u_xlat16_23;
bool u_xlatb24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_9.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_9.x = u_xlat16_9.x * 0.5 + (-_SecondShadow);
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = floor(u_xlat16_9.x);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlati3 = int(u_xlat16_9.x);
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_9.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati7.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati7.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_4.xyz = vec3(u_xlat16_23) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat1.xyz * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = vec3(u_xlat21) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + (-_WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat21) + _CustomLightDir.xyz;
    u_xlat16_23 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb24)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_23 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = log2(u_xlat16_23);
    u_xlat16_23 = u_xlat16_23 * _Shininess;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_14 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_14 = (-u_xlat16_23) + u_xlat16_14;
    u_xlat14 = u_xlat16_14 + 1.0;
    u_xlat14 = floor(u_xlat14);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlati14 = int(u_xlat14);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati14) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
    u_xlat16_2.w = u_xlat10_1.w * vs_COLOR1.y;
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat22 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat22 = u_xlat22 * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xyz * u_xlat7.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat21)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_4.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat21 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat21) * vec2(1.70000005, 1.5) + (-vec2(u_xlat22));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat21 = u_xlat21 * 1.70000005 + (-u_xlat22);
    u_xlat21 = u_xlat21 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat21 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_4.xyz = (u_xlati1.x != 0) ? u_xlat16_4.xyz : u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat21) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
ivec3 u_xlati7;
mediump vec3 u_xlat16_9;
float u_xlat14;
mediump float u_xlat16_14;
int u_xlati14;
bvec2 u_xlatb14;
float u_xlat21;
float u_xlat22;
mediump float u_xlat16_23;
bool u_xlatb24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_9.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_9.x = u_xlat16_9.x * 0.5 + (-_SecondShadow);
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = floor(u_xlat16_9.x);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlati3 = int(u_xlat16_9.x);
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_9.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati7.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati7.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_4.xyz = vec3(u_xlat16_23) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat1.xyz * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = vec3(u_xlat21) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + (-_WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat21) + _CustomLightDir.xyz;
    u_xlat16_23 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb24)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_23 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = log2(u_xlat16_23);
    u_xlat16_23 = u_xlat16_23 * _Shininess;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_14 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_14 = (-u_xlat16_23) + u_xlat16_14;
    u_xlat14 = u_xlat16_14 + 1.0;
    u_xlat14 = floor(u_xlat14);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlati14 = int(u_xlat14);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati14) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
    u_xlat16_2.w = u_xlat10_1.w * vs_COLOR1.y;
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat22 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat22 = u_xlat22 * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xyz * u_xlat7.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat21)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_4.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat21 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat21) * vec2(1.70000005, 1.5) + (-vec2(u_xlat22));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat21 = u_xlat21 * 1.70000005 + (-u_xlat22);
    u_xlat21 = u_xlat21 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat21 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_4.xyz = (u_xlati1.x != 0) ? u_xlat16_4.xyz : u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat21) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
ivec3 u_xlati7;
mediump vec3 u_xlat16_9;
float u_xlat14;
mediump float u_xlat16_14;
int u_xlati14;
bvec2 u_xlatb14;
float u_xlat21;
float u_xlat22;
mediump float u_xlat16_23;
bool u_xlatb24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_9.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_9.x = u_xlat16_9.x * 0.5 + (-_SecondShadow);
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = floor(u_xlat16_9.x);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlati3 = int(u_xlat16_9.x);
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_9.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati7.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati7.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_4.xyz = vec3(u_xlat16_23) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat1.xyz * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = vec3(u_xlat21) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + (-_WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat21) + _CustomLightDir.xyz;
    u_xlat16_23 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb24)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_23 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = log2(u_xlat16_23);
    u_xlat16_23 = u_xlat16_23 * _Shininess;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_14 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_14 = (-u_xlat16_23) + u_xlat16_14;
    u_xlat14 = u_xlat16_14 + 1.0;
    u_xlat14 = floor(u_xlat14);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlati14 = int(u_xlat14);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati14) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
    u_xlat16_2.w = u_xlat10_1.w * vs_COLOR1.y;
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat22 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat22 = u_xlat22 * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xyz * u_xlat7.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat21)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_4.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat21 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat21) * vec2(1.70000005, 1.5) + (-vec2(u_xlat22));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat21 = u_xlat21 * 1.70000005 + (-u_xlat22);
    u_xlat21 = u_xlat21 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat21 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_4.xyz = (u_xlati1.x != 0) ? u_xlat16_4.xyz : u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat21) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
ivec3 u_xlati7;
mediump vec3 u_xlat16_9;
float u_xlat14;
mediump float u_xlat16_14;
int u_xlati14;
bvec2 u_xlatb14;
float u_xlat21;
float u_xlat22;
mediump float u_xlat16_23;
bool u_xlatb24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_9.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_9.x = u_xlat16_9.x * 0.5 + (-_SecondShadow);
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = floor(u_xlat16_9.x);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlati3 = int(u_xlat16_9.x);
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_9.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati7.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati7.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_4.xyz = vec3(u_xlat16_23) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat1.xyz * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = vec3(u_xlat21) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + (-_WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat21) + _CustomLightDir.xyz;
    u_xlat16_23 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb24)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_23 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = log2(u_xlat16_23);
    u_xlat16_23 = u_xlat16_23 * _Shininess;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_14 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_14 = (-u_xlat16_23) + u_xlat16_14;
    u_xlat14 = u_xlat16_14 + 1.0;
    u_xlat14 = floor(u_xlat14);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlati14 = int(u_xlat14);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati14) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
    u_xlat16_2.w = u_xlat10_1.w * vs_COLOR1.y;
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat22 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat22 = u_xlat22 * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xyz * u_xlat7.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat21)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_4.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat21 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat21) * vec2(1.70000005, 1.5) + (-vec2(u_xlat22));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat21 = u_xlat21 * 1.70000005 + (-u_xlat22);
    u_xlat21 = u_xlat21 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat21 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_4.xyz = (u_xlati1.x != 0) ? u_xlat16_4.xyz : u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat21) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
ivec3 u_xlati1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
ivec3 u_xlati7;
float u_xlat8;
float u_xlat14;
mediump float u_xlat16_14;
int u_xlati14;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb23;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_25 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1.x = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat1.xz = vec2(u_xlat16_25) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_25 = (u_xlati7.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_25 = u_xlat16_25 + vs_COLOR1.x;
    u_xlat16_25 = u_xlat16_25 * 0.5 + (-_LightArea);
    u_xlat16_25 = u_xlat16_25 + 1.0;
    u_xlat16_25 = floor(u_xlat16_25);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlati7.x = int(u_xlat16_25);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat2.xyz = u_xlat1.xzw * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb23 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat21) + (-_WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat2.xyz * vec3(u_xlat21) + _CustomLightDir.xyz;
    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb23)) ? u_xlat16_6.xyz : u_xlat3.xyz;
    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_25 = log2(u_xlat16_25);
    u_xlat16_25 = u_xlat16_25 * _Shininess;
    u_xlat16_25 = exp2(u_xlat16_25);
    u_xlat16_14 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_14 = (-u_xlat16_25) + u_xlat16_14;
    u_xlat14 = u_xlat16_14 + 1.0;
    u_xlat14 = floor(u_xlat14);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlati14 = int(u_xlat14);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati14) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_4.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
    u_xlat16_2.w = u_xlat10_1.y * vs_COLOR1.y;
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_4.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat8 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat8 = u_xlat8 * 1.99000001 + -1.0;
    u_xlat1.xzw = u_xlat1.xzw * u_xlat7.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xzw * u_xlat7.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat16_5.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat0.xyz = u_xlat16_5.xyz * (-vec3(u_xlat21)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_5.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_5.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_5.xyz;
    u_xlat21 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xz = vec2(u_xlat21) * vec2(1.70000005, 1.5) + (-vec2(u_xlat8));
    u_xlat1.xz = u_xlat1.xz + vec2(1.0, 1.0);
    u_xlat1.xz = floor(u_xlat1.xz);
    u_xlat1.xz = max(u_xlat1.xz, vec2(0.0, 0.0));
    u_xlati1.xz = ivec2(u_xlat1.xz);
    u_xlat21 = u_xlat21 * 1.70000005 + (-u_xlat8);
    u_xlat21 = u_xlat21 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_5.xyz = (u_xlati1.z != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat21 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_5.xyz : u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_4;
    u_xlat0 = vec4(u_xlat21) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
ivec3 u_xlati1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
ivec3 u_xlati7;
float u_xlat8;
float u_xlat14;
mediump float u_xlat16_14;
int u_xlati14;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb23;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_25 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1.x = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat1.xz = vec2(u_xlat16_25) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_25 = (u_xlati7.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_25 = u_xlat16_25 + vs_COLOR1.x;
    u_xlat16_25 = u_xlat16_25 * 0.5 + (-_LightArea);
    u_xlat16_25 = u_xlat16_25 + 1.0;
    u_xlat16_25 = floor(u_xlat16_25);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlati7.x = int(u_xlat16_25);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat2.xyz = u_xlat1.xzw * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb23 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat21) + (-_WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat2.xyz * vec3(u_xlat21) + _CustomLightDir.xyz;
    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb23)) ? u_xlat16_6.xyz : u_xlat3.xyz;
    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_25 = log2(u_xlat16_25);
    u_xlat16_25 = u_xlat16_25 * _Shininess;
    u_xlat16_25 = exp2(u_xlat16_25);
    u_xlat16_14 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_14 = (-u_xlat16_25) + u_xlat16_14;
    u_xlat14 = u_xlat16_14 + 1.0;
    u_xlat14 = floor(u_xlat14);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlati14 = int(u_xlat14);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati14) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_4.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
    u_xlat16_2.w = u_xlat10_1.y * vs_COLOR1.y;
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_4.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat8 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat8 = u_xlat8 * 1.99000001 + -1.0;
    u_xlat1.xzw = u_xlat1.xzw * u_xlat7.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xzw * u_xlat7.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat16_5.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat0.xyz = u_xlat16_5.xyz * (-vec3(u_xlat21)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_5.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_5.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_5.xyz;
    u_xlat21 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xz = vec2(u_xlat21) * vec2(1.70000005, 1.5) + (-vec2(u_xlat8));
    u_xlat1.xz = u_xlat1.xz + vec2(1.0, 1.0);
    u_xlat1.xz = floor(u_xlat1.xz);
    u_xlat1.xz = max(u_xlat1.xz, vec2(0.0, 0.0));
    u_xlati1.xz = ivec2(u_xlat1.xz);
    u_xlat21 = u_xlat21 * 1.70000005 + (-u_xlat8);
    u_xlat21 = u_xlat21 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_5.xyz = (u_xlati1.z != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat21 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_5.xyz : u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_4;
    u_xlat0 = vec4(u_xlat21) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
ivec3 u_xlati1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
ivec3 u_xlati7;
float u_xlat8;
float u_xlat14;
mediump float u_xlat16_14;
int u_xlati14;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb23;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_25 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1.x = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat1.xz = vec2(u_xlat16_25) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_25 = (u_xlati7.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_25 = u_xlat16_25 + vs_COLOR1.x;
    u_xlat16_25 = u_xlat16_25 * 0.5 + (-_LightArea);
    u_xlat16_25 = u_xlat16_25 + 1.0;
    u_xlat16_25 = floor(u_xlat16_25);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlati7.x = int(u_xlat16_25);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat2.xyz = u_xlat1.xzw * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb23 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat21) + (-_WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat2.xyz * vec3(u_xlat21) + _CustomLightDir.xyz;
    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb23)) ? u_xlat16_6.xyz : u_xlat3.xyz;
    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_25 = log2(u_xlat16_25);
    u_xlat16_25 = u_xlat16_25 * _Shininess;
    u_xlat16_25 = exp2(u_xlat16_25);
    u_xlat16_14 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_14 = (-u_xlat16_25) + u_xlat16_14;
    u_xlat14 = u_xlat16_14 + 1.0;
    u_xlat14 = floor(u_xlat14);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlati14 = int(u_xlat14);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati14) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_4.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
    u_xlat16_2.w = u_xlat10_1.y * vs_COLOR1.y;
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_4.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat8 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat8 = u_xlat8 * 1.99000001 + -1.0;
    u_xlat1.xzw = u_xlat1.xzw * u_xlat7.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xzw * u_xlat7.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat16_5.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat0.xyz = u_xlat16_5.xyz * (-vec3(u_xlat21)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_5.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_5.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_5.xyz;
    u_xlat21 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xz = vec2(u_xlat21) * vec2(1.70000005, 1.5) + (-vec2(u_xlat8));
    u_xlat1.xz = u_xlat1.xz + vec2(1.0, 1.0);
    u_xlat1.xz = floor(u_xlat1.xz);
    u_xlat1.xz = max(u_xlat1.xz, vec2(0.0, 0.0));
    u_xlati1.xz = ivec2(u_xlat1.xz);
    u_xlat21 = u_xlat21 * 1.70000005 + (-u_xlat8);
    u_xlat21 = u_xlat21 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_5.xyz = (u_xlati1.z != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat21 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_5.xyz : u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_4;
    u_xlat0 = vec4(u_xlat21) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
ivec2 u_xlati1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
bvec2 u_xlatb22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
bool u_xlatb35;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat2.xyz = u_xlat1.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_9.xyz = u_xlat2.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb35)) ? u_xlat16_9.xyz : u_xlat3.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_40) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_7.xyz * _EnvColor.xyz + u_xlat16_9.xyz;
    u_xlat16_2.w = u_xlat1.w * vs_COLOR1.y;
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_4.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat34 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat34 = u_xlat34 * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat11.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xyz * u_xlat11.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat16_8.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat16_8.xyz * (-vec3(u_xlat33)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat33 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat33) * vec2(1.70000005, 1.5) + (-vec2(u_xlat34));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat33 = u_xlat33 * 1.70000005 + (-u_xlat34);
    u_xlat33 = u_xlat33 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_7.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat33 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati1.x != 0) ? u_xlat16_7.xyz : u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_4;
    u_xlat0 = vec4(u_xlat33) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
ivec2 u_xlati1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
bvec2 u_xlatb22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
bool u_xlatb35;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat2.xyz = u_xlat1.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_9.xyz = u_xlat2.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb35)) ? u_xlat16_9.xyz : u_xlat3.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_40) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_7.xyz * _EnvColor.xyz + u_xlat16_9.xyz;
    u_xlat16_2.w = u_xlat1.w * vs_COLOR1.y;
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_4.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat34 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat34 = u_xlat34 * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat11.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xyz * u_xlat11.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat16_8.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat16_8.xyz * (-vec3(u_xlat33)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat33 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat33) * vec2(1.70000005, 1.5) + (-vec2(u_xlat34));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat33 = u_xlat33 * 1.70000005 + (-u_xlat34);
    u_xlat33 = u_xlat33 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_7.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat33 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati1.x != 0) ? u_xlat16_7.xyz : u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_4;
    u_xlat0 = vec4(u_xlat33) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
ivec2 u_xlati1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
bvec2 u_xlatb22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
bool u_xlatb35;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat2.xyz = u_xlat1.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_9.xyz = u_xlat2.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb35)) ? u_xlat16_9.xyz : u_xlat3.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_40) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_7.xyz * _EnvColor.xyz + u_xlat16_9.xyz;
    u_xlat16_2.w = u_xlat1.w * vs_COLOR1.y;
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_4.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat34 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat34 = u_xlat34 * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat11.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xyz * u_xlat11.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat16_8.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat16_8.xyz * (-vec3(u_xlat33)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat33 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat33) * vec2(1.70000005, 1.5) + (-vec2(u_xlat34));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat33 = u_xlat33 * 1.70000005 + (-u_xlat34);
    u_xlat33 = u_xlat33 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_7.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat33 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati1.x != 0) ? u_xlat16_7.xyz : u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_4;
    u_xlat0 = vec4(u_xlat33) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
ivec2 u_xlati5;
bvec3 u_xlatb5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
lowp vec3 u_xlat10_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_10;
int u_xlati10;
bvec3 u_xlatb10;
mediump vec3 u_xlat16_12;
vec2 u_xlat13;
int u_xlati13;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
bvec2 u_xlatb20;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_34;
bool u_xlatb35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat3.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
    u_xlat16_12.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_12.x = u_xlat16_12.x * 0.5 + (-_SecondShadow);
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = floor(u_xlat16_12.x);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlati13 = int(u_xlat16_12.x);
    u_xlat16_12.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_12.xyz = (int(u_xlati13) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat10 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10 = floor(u_xlat10);
    u_xlat10 = max(u_xlat10, 0.0);
    u_xlati10 = int(u_xlat10);
    u_xlat13.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati10 != 0) ? u_xlat13.y : u_xlat13.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati10 = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (int(u_xlati10) != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_4.xyz = vec3(u_xlat16_32) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat3.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat5.xyz = u_xlat1.xyz * vec3(u_xlat10) + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_32 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_7.xyz = vec3(u_xlat16_32) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb35)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_32 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_32 = max(u_xlat16_32, 0.0);
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat16_32 = u_xlat16_32 * _Shininess;
    u_xlat16_32 = exp2(u_xlat16_32);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_7.xyz;
    u_xlat16_2.w = u_xlat10_1.w * vs_COLOR1.y;
    u_xlat10_5 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_5.w * _SPOpaqueness;
    u_xlat10_8.xyz = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat0.x = u_xlat10_8.x * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + (-_WorldSpaceCameraPos.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat8.xyz = u_xlat10_8.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat8.xyz;
    u_xlat1.xyz = u_xlat1.xyz + _SPCubeMapOffset.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat16_4.xyz);
    u_xlat10 = u_xlat10 + u_xlat10;
    u_xlat1.xyz = u_xlat16_4.xyz * (-vec3(u_xlat10)) + u_xlat1.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_7.xyz;
    u_xlat10 = _SPNoiseScaler * _SPTransition;
    u_xlat5.xy = vec2(u_xlat10) * vec2(1.70000005, 1.5) + (-u_xlat0.xx);
    u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
    u_xlat5.xy = floor(u_xlat5.xy);
    u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
    u_xlati5.xy = ivec2(u_xlat5.xy);
    u_xlat0.x = u_xlat10 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat8.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz + u_xlat1.xyz;
    u_xlat16_7.xyz = (u_xlati5.y != 0) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat0.x = (u_xlati5.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati5.x != 0) ? u_xlat16_7.xyz : u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_6;
    u_xlat1 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_2;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
        u_xlat10 = (-u_xlat0.x) + 1.00100005;
        u_xlat10 = max(u_xlat10, 0.00100000005);
        u_xlat10 = min(u_xlat10, 1.0);
        u_xlat10 = log2(u_xlat10);
        u_xlat10 = u_xlat10 * _RGShininess;
        u_xlat10 = exp2(u_xlat10);
        u_xlat10 = u_xlat10 * _RGScale + _RGBias;
        u_xlat20 = u_xlat10_0.w + 0.100000001;
        u_xlatb2 = greaterThanEqual(vec4(u_xlat20), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb5.xyz = lessThan(vec4(u_xlat20), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb5.x = u_xlatb2.y && u_xlatb5.x;
        u_xlatb5.y = u_xlatb2.z && u_xlatb5.y;
        u_xlatb5.z = u_xlatb2.w && u_xlatb5.z;
        u_xlat16_6 = (u_xlatb5.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb5.y) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_5 = (u_xlatb5.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_5;
        u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_34 = inversesqrt(u_xlat16_34);
        u_xlat16_7.xyz = vec3(u_xlat16_34) * _WorldSpaceLightPos0.xyz;
        u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
        u_xlat16_34 = u_xlat16_20 + 0.5;
        u_xlat16_34 = u_xlat0.x * u_xlat16_34;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_34);
#else
        u_xlatb0 = u_xlat16_2.w<u_xlat16_34;
#endif
        u_xlat16_34 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_7.xyz = u_xlat16_2.xyz * vec3(u_xlat16_34);
        u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_HRRimPower) + u_xlat1.xyz;
        u_xlat16_34 = u_xlat10;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
        u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_34 * _RGRatio;
        u_xlat8.xyz = vec3(u_xlat10) * _RGColor.xyz + (-u_xlat1.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz + u_xlat1.xyz;
        u_xlat16_34 = float(_HRRimIntensity);
        u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat16_7.xyz;
        SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat16_7.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
            u_xlat10 = (-u_xlat0.x) + 1.00100005;
            u_xlat10 = max(u_xlat10, 0.00100000005);
            u_xlat10 = min(u_xlat10, 1.0);
            u_xlat10 = log2(u_xlat10);
            u_xlat10 = u_xlat10 * _RGShininess;
            u_xlat10 = exp2(u_xlat10);
            u_xlat10 = u_xlat10 * _RGScale + _RGBias;
            u_xlat16_7.xyz = vec3(u_xlat10) * _RGColor.xyz;
            u_xlat10 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat10), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb10.xyz = lessThan(vec4(u_xlat10), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb10.x = u_xlatb10.x && u_xlatb2.y;
            u_xlatb10.y = u_xlatb10.y && u_xlatb2.z;
            u_xlatb10.z = u_xlatb10.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb10.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb10.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb10.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_34 = inversesqrt(u_xlat16_34);
            u_xlat16_9.xyz = vec3(u_xlat16_34) * _WorldSpaceLightPos0.xyz;
            u_xlat16_10 = dot(u_xlat16_4.xyz, u_xlat16_9.xyz);
            u_xlat16_4.x = u_xlat16_10 + 0.5;
            u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_4.x);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_4.x;
#endif
            u_xlat16_4.x = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_HRRimPower);
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_4.xyz = u_xlat1.xyz + u_xlat16_4.xyz;
            u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_7.xyz = u_xlat1.xyz + u_xlat16_7.xyz;
            u_xlat16_34 = float(_HRRimIntensity);
            u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_7.xyz);
            SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz + u_xlat16_7.xyz;
        } else {
            SV_Target0.xyz = u_xlat1.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
ivec2 u_xlati5;
bvec3 u_xlatb5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
lowp vec3 u_xlat10_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_10;
int u_xlati10;
bvec3 u_xlatb10;
mediump vec3 u_xlat16_12;
vec2 u_xlat13;
int u_xlati13;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
bvec2 u_xlatb20;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_34;
bool u_xlatb35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat3.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
    u_xlat16_12.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_12.x = u_xlat16_12.x * 0.5 + (-_SecondShadow);
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = floor(u_xlat16_12.x);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlati13 = int(u_xlat16_12.x);
    u_xlat16_12.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_12.xyz = (int(u_xlati13) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat10 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10 = floor(u_xlat10);
    u_xlat10 = max(u_xlat10, 0.0);
    u_xlati10 = int(u_xlat10);
    u_xlat13.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati10 != 0) ? u_xlat13.y : u_xlat13.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati10 = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (int(u_xlati10) != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_4.xyz = vec3(u_xlat16_32) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat3.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat5.xyz = u_xlat1.xyz * vec3(u_xlat10) + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_32 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_7.xyz = vec3(u_xlat16_32) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb35)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_32 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_32 = max(u_xlat16_32, 0.0);
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat16_32 = u_xlat16_32 * _Shininess;
    u_xlat16_32 = exp2(u_xlat16_32);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_7.xyz;
    u_xlat16_2.w = u_xlat10_1.w * vs_COLOR1.y;
    u_xlat10_5 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_5.w * _SPOpaqueness;
    u_xlat10_8.xyz = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat0.x = u_xlat10_8.x * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + (-_WorldSpaceCameraPos.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat8.xyz = u_xlat10_8.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat8.xyz;
    u_xlat1.xyz = u_xlat1.xyz + _SPCubeMapOffset.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat16_4.xyz);
    u_xlat10 = u_xlat10 + u_xlat10;
    u_xlat1.xyz = u_xlat16_4.xyz * (-vec3(u_xlat10)) + u_xlat1.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_7.xyz;
    u_xlat10 = _SPNoiseScaler * _SPTransition;
    u_xlat5.xy = vec2(u_xlat10) * vec2(1.70000005, 1.5) + (-u_xlat0.xx);
    u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
    u_xlat5.xy = floor(u_xlat5.xy);
    u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
    u_xlati5.xy = ivec2(u_xlat5.xy);
    u_xlat0.x = u_xlat10 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat8.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz + u_xlat1.xyz;
    u_xlat16_7.xyz = (u_xlati5.y != 0) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat0.x = (u_xlati5.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati5.x != 0) ? u_xlat16_7.xyz : u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_6;
    u_xlat1 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_2;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
        u_xlat10 = (-u_xlat0.x) + 1.00100005;
        u_xlat10 = max(u_xlat10, 0.00100000005);
        u_xlat10 = min(u_xlat10, 1.0);
        u_xlat10 = log2(u_xlat10);
        u_xlat10 = u_xlat10 * _RGShininess;
        u_xlat10 = exp2(u_xlat10);
        u_xlat10 = u_xlat10 * _RGScale + _RGBias;
        u_xlat20 = u_xlat10_0.w + 0.100000001;
        u_xlatb2 = greaterThanEqual(vec4(u_xlat20), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb5.xyz = lessThan(vec4(u_xlat20), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb5.x = u_xlatb2.y && u_xlatb5.x;
        u_xlatb5.y = u_xlatb2.z && u_xlatb5.y;
        u_xlatb5.z = u_xlatb2.w && u_xlatb5.z;
        u_xlat16_6 = (u_xlatb5.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb5.y) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_5 = (u_xlatb5.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_5;
        u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_34 = inversesqrt(u_xlat16_34);
        u_xlat16_7.xyz = vec3(u_xlat16_34) * _WorldSpaceLightPos0.xyz;
        u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
        u_xlat16_34 = u_xlat16_20 + 0.5;
        u_xlat16_34 = u_xlat0.x * u_xlat16_34;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_34);
#else
        u_xlatb0 = u_xlat16_2.w<u_xlat16_34;
#endif
        u_xlat16_34 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_7.xyz = u_xlat16_2.xyz * vec3(u_xlat16_34);
        u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_HRRimPower) + u_xlat1.xyz;
        u_xlat16_34 = u_xlat10;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
        u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_34 * _RGRatio;
        u_xlat8.xyz = vec3(u_xlat10) * _RGColor.xyz + (-u_xlat1.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz + u_xlat1.xyz;
        u_xlat16_34 = float(_HRRimIntensity);
        u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat16_7.xyz;
        SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat16_7.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
            u_xlat10 = (-u_xlat0.x) + 1.00100005;
            u_xlat10 = max(u_xlat10, 0.00100000005);
            u_xlat10 = min(u_xlat10, 1.0);
            u_xlat10 = log2(u_xlat10);
            u_xlat10 = u_xlat10 * _RGShininess;
            u_xlat10 = exp2(u_xlat10);
            u_xlat10 = u_xlat10 * _RGScale + _RGBias;
            u_xlat16_7.xyz = vec3(u_xlat10) * _RGColor.xyz;
            u_xlat10 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat10), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb10.xyz = lessThan(vec4(u_xlat10), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb10.x = u_xlatb10.x && u_xlatb2.y;
            u_xlatb10.y = u_xlatb10.y && u_xlatb2.z;
            u_xlatb10.z = u_xlatb10.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb10.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb10.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb10.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_34 = inversesqrt(u_xlat16_34);
            u_xlat16_9.xyz = vec3(u_xlat16_34) * _WorldSpaceLightPos0.xyz;
            u_xlat16_10 = dot(u_xlat16_4.xyz, u_xlat16_9.xyz);
            u_xlat16_4.x = u_xlat16_10 + 0.5;
            u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_4.x);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_4.x;
#endif
            u_xlat16_4.x = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_HRRimPower);
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_4.xyz = u_xlat1.xyz + u_xlat16_4.xyz;
            u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_7.xyz = u_xlat1.xyz + u_xlat16_7.xyz;
            u_xlat16_34 = float(_HRRimIntensity);
            u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_7.xyz);
            SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz + u_xlat16_7.xyz;
        } else {
            SV_Target0.xyz = u_xlat1.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
ivec2 u_xlati5;
bvec3 u_xlatb5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
lowp vec3 u_xlat10_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_10;
int u_xlati10;
bvec3 u_xlatb10;
mediump vec3 u_xlat16_12;
vec2 u_xlat13;
int u_xlati13;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
bvec2 u_xlatb20;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_34;
bool u_xlatb35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat3.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
    u_xlat16_12.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_12.x = u_xlat16_12.x * 0.5 + (-_SecondShadow);
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = floor(u_xlat16_12.x);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlati13 = int(u_xlat16_12.x);
    u_xlat16_12.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_12.xyz = (int(u_xlati13) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat10 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10 = floor(u_xlat10);
    u_xlat10 = max(u_xlat10, 0.0);
    u_xlati10 = int(u_xlat10);
    u_xlat13.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati10 != 0) ? u_xlat13.y : u_xlat13.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati10 = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (int(u_xlati10) != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_4.xyz = vec3(u_xlat16_32) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat3.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat5.xyz = u_xlat1.xyz * vec3(u_xlat10) + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_32 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_7.xyz = vec3(u_xlat16_32) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb35)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_32 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_32 = max(u_xlat16_32, 0.0);
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat16_32 = u_xlat16_32 * _Shininess;
    u_xlat16_32 = exp2(u_xlat16_32);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_7.xyz;
    u_xlat16_2.w = u_xlat10_1.w * vs_COLOR1.y;
    u_xlat10_5 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_5.w * _SPOpaqueness;
    u_xlat10_8.xyz = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat0.x = u_xlat10_8.x * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + (-_WorldSpaceCameraPos.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat8.xyz = u_xlat10_8.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat8.xyz;
    u_xlat1.xyz = u_xlat1.xyz + _SPCubeMapOffset.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat16_4.xyz);
    u_xlat10 = u_xlat10 + u_xlat10;
    u_xlat1.xyz = u_xlat16_4.xyz * (-vec3(u_xlat10)) + u_xlat1.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_7.xyz;
    u_xlat10 = _SPNoiseScaler * _SPTransition;
    u_xlat5.xy = vec2(u_xlat10) * vec2(1.70000005, 1.5) + (-u_xlat0.xx);
    u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
    u_xlat5.xy = floor(u_xlat5.xy);
    u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
    u_xlati5.xy = ivec2(u_xlat5.xy);
    u_xlat0.x = u_xlat10 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat8.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz + u_xlat1.xyz;
    u_xlat16_7.xyz = (u_xlati5.y != 0) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat0.x = (u_xlati5.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati5.x != 0) ? u_xlat16_7.xyz : u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_6;
    u_xlat1 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_2;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
        u_xlat10 = (-u_xlat0.x) + 1.00100005;
        u_xlat10 = max(u_xlat10, 0.00100000005);
        u_xlat10 = min(u_xlat10, 1.0);
        u_xlat10 = log2(u_xlat10);
        u_xlat10 = u_xlat10 * _RGShininess;
        u_xlat10 = exp2(u_xlat10);
        u_xlat10 = u_xlat10 * _RGScale + _RGBias;
        u_xlat20 = u_xlat10_0.w + 0.100000001;
        u_xlatb2 = greaterThanEqual(vec4(u_xlat20), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb5.xyz = lessThan(vec4(u_xlat20), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb5.x = u_xlatb2.y && u_xlatb5.x;
        u_xlatb5.y = u_xlatb2.z && u_xlatb5.y;
        u_xlatb5.z = u_xlatb2.w && u_xlatb5.z;
        u_xlat16_6 = (u_xlatb5.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb5.y) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_5 = (u_xlatb5.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_5;
        u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_34 = inversesqrt(u_xlat16_34);
        u_xlat16_7.xyz = vec3(u_xlat16_34) * _WorldSpaceLightPos0.xyz;
        u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
        u_xlat16_34 = u_xlat16_20 + 0.5;
        u_xlat16_34 = u_xlat0.x * u_xlat16_34;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_34);
#else
        u_xlatb0 = u_xlat16_2.w<u_xlat16_34;
#endif
        u_xlat16_34 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_7.xyz = u_xlat16_2.xyz * vec3(u_xlat16_34);
        u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_HRRimPower) + u_xlat1.xyz;
        u_xlat16_34 = u_xlat10;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
        u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_34 * _RGRatio;
        u_xlat8.xyz = vec3(u_xlat10) * _RGColor.xyz + (-u_xlat1.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz + u_xlat1.xyz;
        u_xlat16_34 = float(_HRRimIntensity);
        u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat16_7.xyz;
        SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat16_7.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
            u_xlat10 = (-u_xlat0.x) + 1.00100005;
            u_xlat10 = max(u_xlat10, 0.00100000005);
            u_xlat10 = min(u_xlat10, 1.0);
            u_xlat10 = log2(u_xlat10);
            u_xlat10 = u_xlat10 * _RGShininess;
            u_xlat10 = exp2(u_xlat10);
            u_xlat10 = u_xlat10 * _RGScale + _RGBias;
            u_xlat16_7.xyz = vec3(u_xlat10) * _RGColor.xyz;
            u_xlat10 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat10), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb10.xyz = lessThan(vec4(u_xlat10), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb10.x = u_xlatb10.x && u_xlatb2.y;
            u_xlatb10.y = u_xlatb10.y && u_xlatb2.z;
            u_xlatb10.z = u_xlatb10.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb10.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb10.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb10.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_34 = inversesqrt(u_xlat16_34);
            u_xlat16_9.xyz = vec3(u_xlat16_34) * _WorldSpaceLightPos0.xyz;
            u_xlat16_10 = dot(u_xlat16_4.xyz, u_xlat16_9.xyz);
            u_xlat16_4.x = u_xlat16_10 + 0.5;
            u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_4.x);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_4.x;
#endif
            u_xlat16_4.x = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_HRRimPower);
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_4.xyz = u_xlat1.xyz + u_xlat16_4.xyz;
            u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_7.xyz = u_xlat1.xyz + u_xlat16_7.xyz;
            u_xlat16_34 = float(_HRRimIntensity);
            u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_7.xyz);
            SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz + u_xlat16_7.xyz;
        } else {
            SV_Target0.xyz = u_xlat1.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
ivec2 u_xlati5;
bvec3 u_xlatb5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
lowp vec3 u_xlat10_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_10;
int u_xlati10;
bvec3 u_xlatb10;
mediump vec3 u_xlat16_12;
vec2 u_xlat13;
int u_xlati13;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
bvec2 u_xlatb20;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_34;
bool u_xlatb35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat3.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
    u_xlat16_12.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_12.x = u_xlat16_12.x * 0.5 + (-_SecondShadow);
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = floor(u_xlat16_12.x);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlati13 = int(u_xlat16_12.x);
    u_xlat16_12.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_12.xyz = (int(u_xlati13) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat10 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10 = floor(u_xlat10);
    u_xlat10 = max(u_xlat10, 0.0);
    u_xlati10 = int(u_xlat10);
    u_xlat13.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati10 != 0) ? u_xlat13.y : u_xlat13.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati10 = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (int(u_xlati10) != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_4.xyz = vec3(u_xlat16_32) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat3.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat5.xyz = u_xlat1.xyz * vec3(u_xlat10) + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_32 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_7.xyz = vec3(u_xlat16_32) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb35)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_32 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_32 = max(u_xlat16_32, 0.0);
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat16_32 = u_xlat16_32 * _Shininess;
    u_xlat16_32 = exp2(u_xlat16_32);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_7.xyz;
    u_xlat16_2.w = u_xlat10_1.w * vs_COLOR1.y;
    u_xlat10_5 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_5.w * _SPOpaqueness;
    u_xlat10_8.xyz = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat0.x = u_xlat10_8.x * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + (-_WorldSpaceCameraPos.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat8.xyz = u_xlat10_8.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat8.xyz;
    u_xlat1.xyz = u_xlat1.xyz + _SPCubeMapOffset.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat16_4.xyz);
    u_xlat10 = u_xlat10 + u_xlat10;
    u_xlat1.xyz = u_xlat16_4.xyz * (-vec3(u_xlat10)) + u_xlat1.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_7.xyz;
    u_xlat10 = _SPNoiseScaler * _SPTransition;
    u_xlat5.xy = vec2(u_xlat10) * vec2(1.70000005, 1.5) + (-u_xlat0.xx);
    u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
    u_xlat5.xy = floor(u_xlat5.xy);
    u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
    u_xlati5.xy = ivec2(u_xlat5.xy);
    u_xlat0.x = u_xlat10 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat8.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz + u_xlat1.xyz;
    u_xlat16_7.xyz = (u_xlati5.y != 0) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat0.x = (u_xlati5.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati5.x != 0) ? u_xlat16_7.xyz : u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_6;
    u_xlat1 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_2;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
        u_xlat10 = (-u_xlat0.x) + 1.00100005;
        u_xlat10 = max(u_xlat10, 0.00100000005);
        u_xlat10 = min(u_xlat10, 1.0);
        u_xlat10 = log2(u_xlat10);
        u_xlat10 = u_xlat10 * _RGShininess;
        u_xlat10 = exp2(u_xlat10);
        u_xlat10 = u_xlat10 * _RGScale + _RGBias;
        u_xlat20 = u_xlat10_0.w + 0.100000001;
        u_xlatb2 = greaterThanEqual(vec4(u_xlat20), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb5.xyz = lessThan(vec4(u_xlat20), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb5.x = u_xlatb2.y && u_xlatb5.x;
        u_xlatb5.y = u_xlatb2.z && u_xlatb5.y;
        u_xlatb5.z = u_xlatb2.w && u_xlatb5.z;
        u_xlat16_6 = (u_xlatb5.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb5.y) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_5 = (u_xlatb5.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_5;
        u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_34 = inversesqrt(u_xlat16_34);
        u_xlat16_7.xyz = vec3(u_xlat16_34) * _WorldSpaceLightPos0.xyz;
        u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
        u_xlat16_34 = u_xlat16_20 + 0.5;
        u_xlat16_34 = u_xlat0.x * u_xlat16_34;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_34);
#else
        u_xlatb0 = u_xlat16_2.w<u_xlat16_34;
#endif
        u_xlat16_34 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_7.xyz = u_xlat16_2.xyz * vec3(u_xlat16_34);
        u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_HRRimPower) + u_xlat1.xyz;
        u_xlat16_34 = u_xlat10;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
        u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_34 * _RGRatio;
        u_xlat8.xyz = vec3(u_xlat10) * _RGColor.xyz + (-u_xlat1.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz + u_xlat1.xyz;
        u_xlat16_34 = float(_HRRimIntensity);
        u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat16_7.xyz;
        SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat16_7.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
            u_xlat10 = (-u_xlat0.x) + 1.00100005;
            u_xlat10 = max(u_xlat10, 0.00100000005);
            u_xlat10 = min(u_xlat10, 1.0);
            u_xlat10 = log2(u_xlat10);
            u_xlat10 = u_xlat10 * _RGShininess;
            u_xlat10 = exp2(u_xlat10);
            u_xlat10 = u_xlat10 * _RGScale + _RGBias;
            u_xlat16_7.xyz = vec3(u_xlat10) * _RGColor.xyz;
            u_xlat10 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat10), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb10.xyz = lessThan(vec4(u_xlat10), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb10.x = u_xlatb10.x && u_xlatb2.y;
            u_xlatb10.y = u_xlatb10.y && u_xlatb2.z;
            u_xlatb10.z = u_xlatb10.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb10.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb10.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb10.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_34 = inversesqrt(u_xlat16_34);
            u_xlat16_9.xyz = vec3(u_xlat16_34) * _WorldSpaceLightPos0.xyz;
            u_xlat16_10 = dot(u_xlat16_4.xyz, u_xlat16_9.xyz);
            u_xlat16_4.x = u_xlat16_10 + 0.5;
            u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_4.x);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_4.x;
#endif
            u_xlat16_4.x = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_HRRimPower);
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_4.xyz = u_xlat1.xyz + u_xlat16_4.xyz;
            u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_7.xyz = u_xlat1.xyz + u_xlat16_7.xyz;
            u_xlat16_34 = float(_HRRimIntensity);
            u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_7.xyz);
            SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz + u_xlat16_7.xyz;
        } else {
            SV_Target0.xyz = u_xlat1.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
ivec2 u_xlati5;
bvec3 u_xlatb5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
lowp vec3 u_xlat10_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_10;
int u_xlati10;
bvec3 u_xlatb10;
mediump vec3 u_xlat16_12;
vec2 u_xlat13;
int u_xlati13;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
bvec2 u_xlatb20;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_34;
bool u_xlatb35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat3.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
    u_xlat16_12.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_12.x = u_xlat16_12.x * 0.5 + (-_SecondShadow);
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = floor(u_xlat16_12.x);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlati13 = int(u_xlat16_12.x);
    u_xlat16_12.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_12.xyz = (int(u_xlati13) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat10 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10 = floor(u_xlat10);
    u_xlat10 = max(u_xlat10, 0.0);
    u_xlati10 = int(u_xlat10);
    u_xlat13.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati10 != 0) ? u_xlat13.y : u_xlat13.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati10 = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (int(u_xlati10) != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_4.xyz = vec3(u_xlat16_32) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat3.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat5.xyz = u_xlat1.xyz * vec3(u_xlat10) + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_32 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_7.xyz = vec3(u_xlat16_32) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb35)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_32 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_32 = max(u_xlat16_32, 0.0);
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat16_32 = u_xlat16_32 * _Shininess;
    u_xlat16_32 = exp2(u_xlat16_32);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_7.xyz;
    u_xlat16_2.w = u_xlat10_1.w * vs_COLOR1.y;
    u_xlat10_5 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_5.w * _SPOpaqueness;
    u_xlat10_8.xyz = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat0.x = u_xlat10_8.x * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + (-_WorldSpaceCameraPos.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat8.xyz = u_xlat10_8.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat8.xyz;
    u_xlat1.xyz = u_xlat1.xyz + _SPCubeMapOffset.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat16_4.xyz);
    u_xlat10 = u_xlat10 + u_xlat10;
    u_xlat1.xyz = u_xlat16_4.xyz * (-vec3(u_xlat10)) + u_xlat1.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_7.xyz;
    u_xlat10 = _SPNoiseScaler * _SPTransition;
    u_xlat5.xy = vec2(u_xlat10) * vec2(1.70000005, 1.5) + (-u_xlat0.xx);
    u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
    u_xlat5.xy = floor(u_xlat5.xy);
    u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
    u_xlati5.xy = ivec2(u_xlat5.xy);
    u_xlat0.x = u_xlat10 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat8.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz + u_xlat1.xyz;
    u_xlat16_7.xyz = (u_xlati5.y != 0) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat0.x = (u_xlati5.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati5.x != 0) ? u_xlat16_7.xyz : u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_6;
    u_xlat1 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_2;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
        u_xlat10 = (-u_xlat0.x) + 1.00100005;
        u_xlat10 = max(u_xlat10, 0.00100000005);
        u_xlat10 = min(u_xlat10, 1.0);
        u_xlat10 = log2(u_xlat10);
        u_xlat10 = u_xlat10 * _RGShininess;
        u_xlat10 = exp2(u_xlat10);
        u_xlat10 = u_xlat10 * _RGScale + _RGBias;
        u_xlat20 = u_xlat10_0.w + 0.100000001;
        u_xlatb2 = greaterThanEqual(vec4(u_xlat20), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb5.xyz = lessThan(vec4(u_xlat20), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb5.x = u_xlatb2.y && u_xlatb5.x;
        u_xlatb5.y = u_xlatb2.z && u_xlatb5.y;
        u_xlatb5.z = u_xlatb2.w && u_xlatb5.z;
        u_xlat16_6 = (u_xlatb5.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb5.y) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_5 = (u_xlatb5.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_5;
        u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_34 = inversesqrt(u_xlat16_34);
        u_xlat16_7.xyz = vec3(u_xlat16_34) * _WorldSpaceLightPos0.xyz;
        u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
        u_xlat16_34 = u_xlat16_20 + 0.5;
        u_xlat16_34 = u_xlat0.x * u_xlat16_34;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_34);
#else
        u_xlatb0 = u_xlat16_2.w<u_xlat16_34;
#endif
        u_xlat16_34 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_7.xyz = u_xlat16_2.xyz * vec3(u_xlat16_34);
        u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_HRRimPower) + u_xlat1.xyz;
        u_xlat16_34 = u_xlat10;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
        u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_34 * _RGRatio;
        u_xlat8.xyz = vec3(u_xlat10) * _RGColor.xyz + (-u_xlat1.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz + u_xlat1.xyz;
        u_xlat16_34 = float(_HRRimIntensity);
        u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat16_7.xyz;
        SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat16_7.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
            u_xlat10 = (-u_xlat0.x) + 1.00100005;
            u_xlat10 = max(u_xlat10, 0.00100000005);
            u_xlat10 = min(u_xlat10, 1.0);
            u_xlat10 = log2(u_xlat10);
            u_xlat10 = u_xlat10 * _RGShininess;
            u_xlat10 = exp2(u_xlat10);
            u_xlat10 = u_xlat10 * _RGScale + _RGBias;
            u_xlat16_7.xyz = vec3(u_xlat10) * _RGColor.xyz;
            u_xlat10 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat10), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb10.xyz = lessThan(vec4(u_xlat10), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb10.x = u_xlatb10.x && u_xlatb2.y;
            u_xlatb10.y = u_xlatb10.y && u_xlatb2.z;
            u_xlatb10.z = u_xlatb10.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb10.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb10.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb10.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_34 = inversesqrt(u_xlat16_34);
            u_xlat16_9.xyz = vec3(u_xlat16_34) * _WorldSpaceLightPos0.xyz;
            u_xlat16_10 = dot(u_xlat16_4.xyz, u_xlat16_9.xyz);
            u_xlat16_4.x = u_xlat16_10 + 0.5;
            u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_4.x);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_4.x;
#endif
            u_xlat16_4.x = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_HRRimPower);
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_4.xyz = u_xlat1.xyz + u_xlat16_4.xyz;
            u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_7.xyz = u_xlat1.xyz + u_xlat16_7.xyz;
            u_xlat16_34 = float(_HRRimIntensity);
            u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_7.xyz);
            SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz + u_xlat16_7.xyz;
        } else {
            SV_Target0.xyz = u_xlat1.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
ivec2 u_xlati5;
bvec3 u_xlatb5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
lowp vec3 u_xlat10_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_10;
int u_xlati10;
bvec3 u_xlatb10;
mediump vec3 u_xlat16_12;
vec2 u_xlat13;
int u_xlati13;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
bvec2 u_xlatb20;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_34;
bool u_xlatb35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat3.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
    u_xlat16_12.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_12.x = u_xlat16_12.x * 0.5 + (-_SecondShadow);
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = floor(u_xlat16_12.x);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlati13 = int(u_xlat16_12.x);
    u_xlat16_12.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_12.xyz = (int(u_xlati13) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat10 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10 = floor(u_xlat10);
    u_xlat10 = max(u_xlat10, 0.0);
    u_xlati10 = int(u_xlat10);
    u_xlat13.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati10 != 0) ? u_xlat13.y : u_xlat13.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati10 = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (int(u_xlati10) != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_4.xyz = vec3(u_xlat16_32) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat3.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat5.xyz = u_xlat1.xyz * vec3(u_xlat10) + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_32 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_7.xyz = vec3(u_xlat16_32) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb35)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_32 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_32 = max(u_xlat16_32, 0.0);
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat16_32 = u_xlat16_32 * _Shininess;
    u_xlat16_32 = exp2(u_xlat16_32);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_7.xyz;
    u_xlat16_2.w = u_xlat10_1.w * vs_COLOR1.y;
    u_xlat10_5 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_5.w * _SPOpaqueness;
    u_xlat10_8.xyz = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat0.x = u_xlat10_8.x * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + (-_WorldSpaceCameraPos.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat8.xyz = u_xlat10_8.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat8.xyz;
    u_xlat1.xyz = u_xlat1.xyz + _SPCubeMapOffset.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat16_4.xyz);
    u_xlat10 = u_xlat10 + u_xlat10;
    u_xlat1.xyz = u_xlat16_4.xyz * (-vec3(u_xlat10)) + u_xlat1.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_7.xyz;
    u_xlat10 = _SPNoiseScaler * _SPTransition;
    u_xlat5.xy = vec2(u_xlat10) * vec2(1.70000005, 1.5) + (-u_xlat0.xx);
    u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
    u_xlat5.xy = floor(u_xlat5.xy);
    u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
    u_xlati5.xy = ivec2(u_xlat5.xy);
    u_xlat0.x = u_xlat10 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat8.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz + u_xlat1.xyz;
    u_xlat16_7.xyz = (u_xlati5.y != 0) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat0.x = (u_xlati5.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati5.x != 0) ? u_xlat16_7.xyz : u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_6;
    u_xlat1 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_2;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
        u_xlat10 = (-u_xlat0.x) + 1.00100005;
        u_xlat10 = max(u_xlat10, 0.00100000005);
        u_xlat10 = min(u_xlat10, 1.0);
        u_xlat10 = log2(u_xlat10);
        u_xlat10 = u_xlat10 * _RGShininess;
        u_xlat10 = exp2(u_xlat10);
        u_xlat10 = u_xlat10 * _RGScale + _RGBias;
        u_xlat20 = u_xlat10_0.w + 0.100000001;
        u_xlatb2 = greaterThanEqual(vec4(u_xlat20), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb5.xyz = lessThan(vec4(u_xlat20), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb5.x = u_xlatb2.y && u_xlatb5.x;
        u_xlatb5.y = u_xlatb2.z && u_xlatb5.y;
        u_xlatb5.z = u_xlatb2.w && u_xlatb5.z;
        u_xlat16_6 = (u_xlatb5.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb5.y) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_5 = (u_xlatb5.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_5;
        u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_34 = inversesqrt(u_xlat16_34);
        u_xlat16_7.xyz = vec3(u_xlat16_34) * _WorldSpaceLightPos0.xyz;
        u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
        u_xlat16_34 = u_xlat16_20 + 0.5;
        u_xlat16_34 = u_xlat0.x * u_xlat16_34;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_34);
#else
        u_xlatb0 = u_xlat16_2.w<u_xlat16_34;
#endif
        u_xlat16_34 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_7.xyz = u_xlat16_2.xyz * vec3(u_xlat16_34);
        u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_HRRimPower) + u_xlat1.xyz;
        u_xlat16_34 = u_xlat10;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
        u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_34 * _RGRatio;
        u_xlat8.xyz = vec3(u_xlat10) * _RGColor.xyz + (-u_xlat1.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz + u_xlat1.xyz;
        u_xlat16_34 = float(_HRRimIntensity);
        u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat16_7.xyz;
        SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat16_7.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
            u_xlat10 = (-u_xlat0.x) + 1.00100005;
            u_xlat10 = max(u_xlat10, 0.00100000005);
            u_xlat10 = min(u_xlat10, 1.0);
            u_xlat10 = log2(u_xlat10);
            u_xlat10 = u_xlat10 * _RGShininess;
            u_xlat10 = exp2(u_xlat10);
            u_xlat10 = u_xlat10 * _RGScale + _RGBias;
            u_xlat16_7.xyz = vec3(u_xlat10) * _RGColor.xyz;
            u_xlat10 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat10), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb10.xyz = lessThan(vec4(u_xlat10), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb10.x = u_xlatb10.x && u_xlatb2.y;
            u_xlatb10.y = u_xlatb10.y && u_xlatb2.z;
            u_xlatb10.z = u_xlatb10.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb10.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb10.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb10.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_34 = inversesqrt(u_xlat16_34);
            u_xlat16_9.xyz = vec3(u_xlat16_34) * _WorldSpaceLightPos0.xyz;
            u_xlat16_10 = dot(u_xlat16_4.xyz, u_xlat16_9.xyz);
            u_xlat16_4.x = u_xlat16_10 + 0.5;
            u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_4.x);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_4.x;
#endif
            u_xlat16_4.x = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_HRRimPower);
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_4.xyz = u_xlat1.xyz + u_xlat16_4.xyz;
            u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_7.xyz = u_xlat1.xyz + u_xlat16_7.xyz;
            u_xlat16_34 = float(_HRRimIntensity);
            u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_7.xyz);
            SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz + u_xlat16_7.xyz;
        } else {
            SV_Target0.xyz = u_xlat1.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
int u_xlati1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec3 u_xlat10_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
bvec4 u_xlatb3;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
ivec2 u_xlati7;
bvec3 u_xlatb7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
float u_xlat11;
mediump float u_xlat16_11;
int u_xlati11;
bvec3 u_xlatb11;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
bvec2 u_xlatb22;
vec2 u_xlat23;
int u_xlati23;
float u_xlat35;
bool u_xlatb36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_37 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat1.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati23 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati23) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat11 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11 = floor(u_xlat11);
    u_xlat11 = max(u_xlat11, 0.0);
    u_xlati11 = int(u_xlat11);
    u_xlat23.xy = vec2(u_xlat16_37) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_37 = (u_xlati11 != 0) ? u_xlat23.y : u_xlat23.x;
    u_xlat16_37 = u_xlat16_37 + vs_COLOR1.x;
    u_xlat16_37 = u_xlat16_37 * 0.5 + (-_LightArea);
    u_xlat16_37 = u_xlat16_37 + 1.0;
    u_xlat16_37 = floor(u_xlat16_37);
    u_xlat16_37 = max(u_xlat16_37, 0.0);
    u_xlati11 = int(u_xlat16_37);
    u_xlat16_4.xyz = (int(u_xlati11) != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (int(u_xlati1) != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat16_37 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat16_5.xyz = vec3(u_xlat16_37) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11 = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat1.xzw;
    u_xlat3.xyz = u_xlat1.xzw * vec3(u_xlat11) + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat7.xyz = vec3(u_xlat35) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb36 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat35) + (-_WorldSpaceLightPos0.xyz);
    u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat35) + _CustomLightDir.xyz;
    u_xlat16_37 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat16_6.xyz = vec3(u_xlat16_37) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb36)) ? u_xlat16_6.xyz : u_xlat7.xyz;
    u_xlat16_37 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
    u_xlat16_37 = max(u_xlat16_37, 0.0);
    u_xlat16_37 = log2(u_xlat16_37);
    u_xlat16_37 = u_xlat16_37 * _Shininess;
    u_xlat16_37 = exp2(u_xlat16_37);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_37) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_4.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
    u_xlat16_3.w = u_xlat10_1.y * vs_COLOR1.y;
    u_xlat10_4 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_4.w * _SPOpaqueness;
    u_xlat10_7.xyz = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat0.x = u_xlat10_7.x * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xzw * vec3(u_xlat11) + (-_WorldSpaceCameraPos.xyz);
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat7.xyz = u_xlat10_7.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + u_xlat7.xyz;
    u_xlat1.xyz = u_xlat1.xyz + _SPCubeMapOffset.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat16_5.xyz);
    u_xlat11 = u_xlat11 + u_xlat11;
    u_xlat1.xyz = u_xlat16_5.xyz * (-vec3(u_xlat11)) + u_xlat1.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_8.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_8.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_8.xyz;
    u_xlat11 = _SPNoiseScaler * _SPTransition;
    u_xlat7.xy = vec2(u_xlat11) * vec2(1.70000005, 1.5) + (-u_xlat0.xx);
    u_xlat7.xy = u_xlat7.xy + vec2(1.0, 1.0);
    u_xlat7.xy = floor(u_xlat7.xy);
    u_xlat7.xy = max(u_xlat7.xy, vec2(0.0, 0.0));
    u_xlati7.xy = ivec2(u_xlat7.xy);
    u_xlat0.x = u_xlat11 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + u_xlat1.xyz;
    u_xlat16_8.xyz = (u_xlati7.y != 0) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat0.x = (u_xlati7.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_8.xyz = (u_xlati7.x != 0) ? u_xlat16_8.xyz : u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_8.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_3) + u_xlat16_6;
    u_xlat1 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_5.xyz);
        u_xlat11 = (-u_xlat0.x) + 1.00100005;
        u_xlat11 = max(u_xlat11, 0.00100000005);
        u_xlat11 = min(u_xlat11, 1.0);
        u_xlat11 = log2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGShininess;
        u_xlat11 = exp2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGScale + _RGBias;
        u_xlat22 = u_xlat10_0.w + 0.100000001;
        u_xlatb3 = greaterThanEqual(vec4(u_xlat22), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb7.xyz = lessThan(vec4(u_xlat22), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb7.x = u_xlatb3.y && u_xlatb7.x;
        u_xlatb7.y = u_xlatb3.z && u_xlatb7.y;
        u_xlatb7.z = u_xlatb3.w && u_xlatb7.z;
        u_xlat16_4 = (u_xlatb7.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_4 = (u_xlatb7.y) ? _HRRimColor2 : u_xlat16_4;
        u_xlat16_4 = (u_xlatb7.x) ? _HRRimColor3 : u_xlat16_4;
        u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_4;
        u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_38 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_38 = inversesqrt(u_xlat16_38);
        u_xlat16_6.xyz = vec3(u_xlat16_38) * _WorldSpaceLightPos0.xyz;
        u_xlat16_22 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
        u_xlat16_38 = u_xlat16_22 + 0.5;
        u_xlat16_38 = u_xlat0.x * u_xlat16_38;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_38);
#else
        u_xlatb0 = u_xlat16_3.w<u_xlat16_38;
#endif
        u_xlat16_38 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(u_xlat16_38);
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_HRRimPower) + u_xlat1.xyz;
        u_xlat16_38 = u_xlat11;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
        u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_38 * _RGRatio;
        u_xlat7.xyz = vec3(u_xlat11) * _RGColor.xyz + (-u_xlat1.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz + u_xlat1.xyz;
        u_xlat16_38 = float(_HRRimIntensity);
        u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat16_6.xyz;
        SV_Target0.xyz = vec3(u_xlat16_38) * u_xlat16_6.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_5.xyz);
            u_xlat11 = (-u_xlat0.x) + 1.00100005;
            u_xlat11 = max(u_xlat11, 0.00100000005);
            u_xlat11 = min(u_xlat11, 1.0);
            u_xlat11 = log2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGShininess;
            u_xlat11 = exp2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGScale + _RGBias;
            u_xlat16_6.xyz = vec3(u_xlat11) * _RGColor.xyz;
            u_xlat11 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat11), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb11.xyz = lessThan(vec4(u_xlat11), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb11.x = u_xlatb11.x && u_xlatb2.y;
            u_xlatb11.y = u_xlatb11.y && u_xlatb2.z;
            u_xlatb11.z = u_xlatb11.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb11.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb11.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb11.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_38 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_38 = inversesqrt(u_xlat16_38);
            u_xlat16_8.xyz = vec3(u_xlat16_38) * _WorldSpaceLightPos0.xyz;
            u_xlat16_11 = dot(u_xlat16_5.xyz, u_xlat16_8.xyz);
            u_xlat16_5.x = u_xlat16_11 + 0.5;
            u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_5.x);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_5.x;
#endif
            u_xlat16_5.x = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xxx;
            u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_HRRimPower);
            u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_5.xyz = u_xlat1.xyz + u_xlat16_5.xyz;
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_6.xyz = u_xlat1.xyz + u_xlat16_6.xyz;
            u_xlat16_38 = float(_HRRimIntensity);
            u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
            SV_Target0.xyz = vec3(u_xlat16_38) * u_xlat16_5.xyz + u_xlat16_6.xyz;
        } else {
            SV_Target0.xyz = u_xlat1.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
int u_xlati1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec3 u_xlat10_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
bvec4 u_xlatb3;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
ivec2 u_xlati7;
bvec3 u_xlatb7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
float u_xlat11;
mediump float u_xlat16_11;
int u_xlati11;
bvec3 u_xlatb11;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
bvec2 u_xlatb22;
vec2 u_xlat23;
int u_xlati23;
float u_xlat35;
bool u_xlatb36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_37 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat1.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati23 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati23) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat11 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11 = floor(u_xlat11);
    u_xlat11 = max(u_xlat11, 0.0);
    u_xlati11 = int(u_xlat11);
    u_xlat23.xy = vec2(u_xlat16_37) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_37 = (u_xlati11 != 0) ? u_xlat23.y : u_xlat23.x;
    u_xlat16_37 = u_xlat16_37 + vs_COLOR1.x;
    u_xlat16_37 = u_xlat16_37 * 0.5 + (-_LightArea);
    u_xlat16_37 = u_xlat16_37 + 1.0;
    u_xlat16_37 = floor(u_xlat16_37);
    u_xlat16_37 = max(u_xlat16_37, 0.0);
    u_xlati11 = int(u_xlat16_37);
    u_xlat16_4.xyz = (int(u_xlati11) != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (int(u_xlati1) != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat16_37 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat16_5.xyz = vec3(u_xlat16_37) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11 = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat1.xzw;
    u_xlat3.xyz = u_xlat1.xzw * vec3(u_xlat11) + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat7.xyz = vec3(u_xlat35) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb36 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat35) + (-_WorldSpaceLightPos0.xyz);
    u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat35) + _CustomLightDir.xyz;
    u_xlat16_37 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat16_6.xyz = vec3(u_xlat16_37) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb36)) ? u_xlat16_6.xyz : u_xlat7.xyz;
    u_xlat16_37 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
    u_xlat16_37 = max(u_xlat16_37, 0.0);
    u_xlat16_37 = log2(u_xlat16_37);
    u_xlat16_37 = u_xlat16_37 * _Shininess;
    u_xlat16_37 = exp2(u_xlat16_37);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_37) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_4.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
    u_xlat16_3.w = u_xlat10_1.y * vs_COLOR1.y;
    u_xlat10_4 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_4.w * _SPOpaqueness;
    u_xlat10_7.xyz = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat0.x = u_xlat10_7.x * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xzw * vec3(u_xlat11) + (-_WorldSpaceCameraPos.xyz);
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat7.xyz = u_xlat10_7.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + u_xlat7.xyz;
    u_xlat1.xyz = u_xlat1.xyz + _SPCubeMapOffset.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat16_5.xyz);
    u_xlat11 = u_xlat11 + u_xlat11;
    u_xlat1.xyz = u_xlat16_5.xyz * (-vec3(u_xlat11)) + u_xlat1.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_8.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_8.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_8.xyz;
    u_xlat11 = _SPNoiseScaler * _SPTransition;
    u_xlat7.xy = vec2(u_xlat11) * vec2(1.70000005, 1.5) + (-u_xlat0.xx);
    u_xlat7.xy = u_xlat7.xy + vec2(1.0, 1.0);
    u_xlat7.xy = floor(u_xlat7.xy);
    u_xlat7.xy = max(u_xlat7.xy, vec2(0.0, 0.0));
    u_xlati7.xy = ivec2(u_xlat7.xy);
    u_xlat0.x = u_xlat11 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + u_xlat1.xyz;
    u_xlat16_8.xyz = (u_xlati7.y != 0) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat0.x = (u_xlati7.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_8.xyz = (u_xlati7.x != 0) ? u_xlat16_8.xyz : u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_8.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_3) + u_xlat16_6;
    u_xlat1 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_5.xyz);
        u_xlat11 = (-u_xlat0.x) + 1.00100005;
        u_xlat11 = max(u_xlat11, 0.00100000005);
        u_xlat11 = min(u_xlat11, 1.0);
        u_xlat11 = log2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGShininess;
        u_xlat11 = exp2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGScale + _RGBias;
        u_xlat22 = u_xlat10_0.w + 0.100000001;
        u_xlatb3 = greaterThanEqual(vec4(u_xlat22), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb7.xyz = lessThan(vec4(u_xlat22), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb7.x = u_xlatb3.y && u_xlatb7.x;
        u_xlatb7.y = u_xlatb3.z && u_xlatb7.y;
        u_xlatb7.z = u_xlatb3.w && u_xlatb7.z;
        u_xlat16_4 = (u_xlatb7.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_4 = (u_xlatb7.y) ? _HRRimColor2 : u_xlat16_4;
        u_xlat16_4 = (u_xlatb7.x) ? _HRRimColor3 : u_xlat16_4;
        u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_4;
        u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_38 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_38 = inversesqrt(u_xlat16_38);
        u_xlat16_6.xyz = vec3(u_xlat16_38) * _WorldSpaceLightPos0.xyz;
        u_xlat16_22 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
        u_xlat16_38 = u_xlat16_22 + 0.5;
        u_xlat16_38 = u_xlat0.x * u_xlat16_38;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_38);
#else
        u_xlatb0 = u_xlat16_3.w<u_xlat16_38;
#endif
        u_xlat16_38 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(u_xlat16_38);
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_HRRimPower) + u_xlat1.xyz;
        u_xlat16_38 = u_xlat11;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
        u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_38 * _RGRatio;
        u_xlat7.xyz = vec3(u_xlat11) * _RGColor.xyz + (-u_xlat1.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz + u_xlat1.xyz;
        u_xlat16_38 = float(_HRRimIntensity);
        u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat16_6.xyz;
        SV_Target0.xyz = vec3(u_xlat16_38) * u_xlat16_6.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_5.xyz);
            u_xlat11 = (-u_xlat0.x) + 1.00100005;
            u_xlat11 = max(u_xlat11, 0.00100000005);
            u_xlat11 = min(u_xlat11, 1.0);
            u_xlat11 = log2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGShininess;
            u_xlat11 = exp2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGScale + _RGBias;
            u_xlat16_6.xyz = vec3(u_xlat11) * _RGColor.xyz;
            u_xlat11 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat11), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb11.xyz = lessThan(vec4(u_xlat11), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb11.x = u_xlatb11.x && u_xlatb2.y;
            u_xlatb11.y = u_xlatb11.y && u_xlatb2.z;
            u_xlatb11.z = u_xlatb11.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb11.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb11.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb11.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_38 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_38 = inversesqrt(u_xlat16_38);
            u_xlat16_8.xyz = vec3(u_xlat16_38) * _WorldSpaceLightPos0.xyz;
            u_xlat16_11 = dot(u_xlat16_5.xyz, u_xlat16_8.xyz);
            u_xlat16_5.x = u_xlat16_11 + 0.5;
            u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_5.x);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_5.x;
#endif
            u_xlat16_5.x = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xxx;
            u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_HRRimPower);
            u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_5.xyz = u_xlat1.xyz + u_xlat16_5.xyz;
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_6.xyz = u_xlat1.xyz + u_xlat16_6.xyz;
            u_xlat16_38 = float(_HRRimIntensity);
            u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
            SV_Target0.xyz = vec3(u_xlat16_38) * u_xlat16_5.xyz + u_xlat16_6.xyz;
        } else {
            SV_Target0.xyz = u_xlat1.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
int u_xlati1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec3 u_xlat10_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
bvec4 u_xlatb3;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
ivec2 u_xlati7;
bvec3 u_xlatb7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
float u_xlat11;
mediump float u_xlat16_11;
int u_xlati11;
bvec3 u_xlatb11;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
bvec2 u_xlatb22;
vec2 u_xlat23;
int u_xlati23;
float u_xlat35;
bool u_xlatb36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_37 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat1.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati23 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati23) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat11 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11 = floor(u_xlat11);
    u_xlat11 = max(u_xlat11, 0.0);
    u_xlati11 = int(u_xlat11);
    u_xlat23.xy = vec2(u_xlat16_37) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_37 = (u_xlati11 != 0) ? u_xlat23.y : u_xlat23.x;
    u_xlat16_37 = u_xlat16_37 + vs_COLOR1.x;
    u_xlat16_37 = u_xlat16_37 * 0.5 + (-_LightArea);
    u_xlat16_37 = u_xlat16_37 + 1.0;
    u_xlat16_37 = floor(u_xlat16_37);
    u_xlat16_37 = max(u_xlat16_37, 0.0);
    u_xlati11 = int(u_xlat16_37);
    u_xlat16_4.xyz = (int(u_xlati11) != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (int(u_xlati1) != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat16_37 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat16_5.xyz = vec3(u_xlat16_37) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11 = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat1.xzw;
    u_xlat3.xyz = u_xlat1.xzw * vec3(u_xlat11) + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat7.xyz = vec3(u_xlat35) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb36 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat35) + (-_WorldSpaceLightPos0.xyz);
    u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat35) + _CustomLightDir.xyz;
    u_xlat16_37 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat16_6.xyz = vec3(u_xlat16_37) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb36)) ? u_xlat16_6.xyz : u_xlat7.xyz;
    u_xlat16_37 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
    u_xlat16_37 = max(u_xlat16_37, 0.0);
    u_xlat16_37 = log2(u_xlat16_37);
    u_xlat16_37 = u_xlat16_37 * _Shininess;
    u_xlat16_37 = exp2(u_xlat16_37);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_37) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_4.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
    u_xlat16_3.w = u_xlat10_1.y * vs_COLOR1.y;
    u_xlat10_4 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_4.w * _SPOpaqueness;
    u_xlat10_7.xyz = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat0.x = u_xlat10_7.x * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xzw * vec3(u_xlat11) + (-_WorldSpaceCameraPos.xyz);
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat7.xyz = u_xlat10_7.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + u_xlat7.xyz;
    u_xlat1.xyz = u_xlat1.xyz + _SPCubeMapOffset.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat16_5.xyz);
    u_xlat11 = u_xlat11 + u_xlat11;
    u_xlat1.xyz = u_xlat16_5.xyz * (-vec3(u_xlat11)) + u_xlat1.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_8.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_8.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_8.xyz;
    u_xlat11 = _SPNoiseScaler * _SPTransition;
    u_xlat7.xy = vec2(u_xlat11) * vec2(1.70000005, 1.5) + (-u_xlat0.xx);
    u_xlat7.xy = u_xlat7.xy + vec2(1.0, 1.0);
    u_xlat7.xy = floor(u_xlat7.xy);
    u_xlat7.xy = max(u_xlat7.xy, vec2(0.0, 0.0));
    u_xlati7.xy = ivec2(u_xlat7.xy);
    u_xlat0.x = u_xlat11 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + u_xlat1.xyz;
    u_xlat16_8.xyz = (u_xlati7.y != 0) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat0.x = (u_xlati7.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_8.xyz = (u_xlati7.x != 0) ? u_xlat16_8.xyz : u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_8.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_3) + u_xlat16_6;
    u_xlat1 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_5.xyz);
        u_xlat11 = (-u_xlat0.x) + 1.00100005;
        u_xlat11 = max(u_xlat11, 0.00100000005);
        u_xlat11 = min(u_xlat11, 1.0);
        u_xlat11 = log2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGShininess;
        u_xlat11 = exp2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGScale + _RGBias;
        u_xlat22 = u_xlat10_0.w + 0.100000001;
        u_xlatb3 = greaterThanEqual(vec4(u_xlat22), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb7.xyz = lessThan(vec4(u_xlat22), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb7.x = u_xlatb3.y && u_xlatb7.x;
        u_xlatb7.y = u_xlatb3.z && u_xlatb7.y;
        u_xlatb7.z = u_xlatb3.w && u_xlatb7.z;
        u_xlat16_4 = (u_xlatb7.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_4 = (u_xlatb7.y) ? _HRRimColor2 : u_xlat16_4;
        u_xlat16_4 = (u_xlatb7.x) ? _HRRimColor3 : u_xlat16_4;
        u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_4;
        u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_38 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_38 = inversesqrt(u_xlat16_38);
        u_xlat16_6.xyz = vec3(u_xlat16_38) * _WorldSpaceLightPos0.xyz;
        u_xlat16_22 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
        u_xlat16_38 = u_xlat16_22 + 0.5;
        u_xlat16_38 = u_xlat0.x * u_xlat16_38;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_38);
#else
        u_xlatb0 = u_xlat16_3.w<u_xlat16_38;
#endif
        u_xlat16_38 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(u_xlat16_38);
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_HRRimPower) + u_xlat1.xyz;
        u_xlat16_38 = u_xlat11;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
        u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_38 * _RGRatio;
        u_xlat7.xyz = vec3(u_xlat11) * _RGColor.xyz + (-u_xlat1.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz + u_xlat1.xyz;
        u_xlat16_38 = float(_HRRimIntensity);
        u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat16_6.xyz;
        SV_Target0.xyz = vec3(u_xlat16_38) * u_xlat16_6.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_5.xyz);
            u_xlat11 = (-u_xlat0.x) + 1.00100005;
            u_xlat11 = max(u_xlat11, 0.00100000005);
            u_xlat11 = min(u_xlat11, 1.0);
            u_xlat11 = log2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGShininess;
            u_xlat11 = exp2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGScale + _RGBias;
            u_xlat16_6.xyz = vec3(u_xlat11) * _RGColor.xyz;
            u_xlat11 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat11), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb11.xyz = lessThan(vec4(u_xlat11), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb11.x = u_xlatb11.x && u_xlatb2.y;
            u_xlatb11.y = u_xlatb11.y && u_xlatb2.z;
            u_xlatb11.z = u_xlatb11.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb11.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb11.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb11.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_38 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_38 = inversesqrt(u_xlat16_38);
            u_xlat16_8.xyz = vec3(u_xlat16_38) * _WorldSpaceLightPos0.xyz;
            u_xlat16_11 = dot(u_xlat16_5.xyz, u_xlat16_8.xyz);
            u_xlat16_5.x = u_xlat16_11 + 0.5;
            u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_5.x);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_5.x;
#endif
            u_xlat16_5.x = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xxx;
            u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_HRRimPower);
            u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_5.xyz = u_xlat1.xyz + u_xlat16_5.xyz;
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_6.xyz = u_xlat1.xyz + u_xlat16_6.xyz;
            u_xlat16_38 = float(_HRRimIntensity);
            u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
            SV_Target0.xyz = vec3(u_xlat16_38) * u_xlat16_5.xyz + u_xlat16_6.xyz;
        } else {
            SV_Target0.xyz = u_xlat1.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
int u_xlati2;
bvec4 u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
ivec2 u_xlati4;
bvec3 u_xlatb4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec3 u_xlat10_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
float u_xlat11;
mediump float u_xlat16_11;
int u_xlati11;
bvec3 u_xlatb11;
mediump float u_xlat16_12;
vec2 u_xlat13;
int u_xlati13;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
bvec2 u_xlatb22;
mediump float u_xlat16_24;
lowp vec2 u_xlat10_24;
float u_xlat35;
bool u_xlatb36;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_24 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_24 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_12 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat5.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat5.w = u_xlat2.x * u_xlat16_12 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat5;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat2.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat2.x = max(u_xlat2.x, 0.0);
    u_xlati2 = int(u_xlat2.x);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati13 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati13) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11 = floor(u_xlat11);
    u_xlat11 = max(u_xlat11, 0.0);
    u_xlati11 = int(u_xlat11);
    u_xlat13.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11 != 0) ? u_xlat13.y : u_xlat13.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11 = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (int(u_xlati11) != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat11) + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat4.xyz = vec3(u_xlat35) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb36 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat35) + (-_WorldSpaceLightPos0.xyz);
    u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat16_9.xyz = u_xlat3.xyz * vec3(u_xlat35) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb36)) ? u_xlat16_9.xyz : u_xlat4.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_40) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_7.xyz * _EnvColor.xyz + u_xlat16_9.xyz;
    u_xlat16_3.w = u_xlat1.w * vs_COLOR1.y;
    u_xlat10_4 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_4.w * _SPOpaqueness;
    u_xlat10_6.xyz = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat0.x = u_xlat10_6.x * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + (-_WorldSpaceCameraPos.xyz);
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat6.xyz = u_xlat10_6.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + u_xlat6.xyz;
    u_xlat1.xyz = u_xlat1.xyz + _SPCubeMapOffset.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat16_8.xyz);
    u_xlat11 = u_xlat11 + u_xlat11;
    u_xlat1.xyz = u_xlat16_8.xyz * (-vec3(u_xlat11)) + u_xlat1.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_7.xyz;
    u_xlat11 = _SPNoiseScaler * _SPTransition;
    u_xlat4.xy = vec2(u_xlat11) * vec2(1.70000005, 1.5) + (-u_xlat0.xx);
    u_xlat4.xy = u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
    u_xlati4.xy = ivec2(u_xlat4.xy);
    u_xlat0.x = u_xlat11 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat1.xyz;
    u_xlat16_7.xyz = (u_xlati4.y != 0) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat0.x = (u_xlati4.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati4.x != 0) ? u_xlat16_7.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_3) + u_xlat16_5;
    u_xlat1 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_8.xyz);
        u_xlat11 = (-u_xlat0.x) + 1.00100005;
        u_xlat11 = max(u_xlat11, 0.00100000005);
        u_xlat11 = min(u_xlat11, 1.0);
        u_xlat11 = log2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGShininess;
        u_xlat11 = exp2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGScale + _RGBias;
        u_xlat22 = u_xlat10_0.w + 0.100000001;
        u_xlatb3 = greaterThanEqual(vec4(u_xlat22), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb4.xyz = lessThan(vec4(u_xlat22), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb4.x = u_xlatb3.y && u_xlatb4.x;
        u_xlatb4.y = u_xlatb3.z && u_xlatb4.y;
        u_xlatb4.z = u_xlatb3.w && u_xlatb4.z;
        u_xlat16_5 = (u_xlatb4.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_5 = (u_xlatb4.y) ? _HRRimColor2 : u_xlat16_5;
        u_xlat16_4 = (u_xlatb4.x) ? _HRRimColor3 : u_xlat16_5;
        u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_4;
        u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_7.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_7.x = inversesqrt(u_xlat16_7.x);
        u_xlat16_7.xyz = u_xlat16_7.xxx * _WorldSpaceLightPos0.xyz;
        u_xlat16_22 = dot(u_xlat16_8.xyz, u_xlat16_7.xyz);
        u_xlat16_7.x = u_xlat16_22 + 0.5;
        u_xlat16_7.x = u_xlat0.x * u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_7.x);
#else
        u_xlatb0 = u_xlat16_3.w<u_xlat16_7.x;
#endif
        u_xlat16_7.x = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_7.xyz = u_xlat16_3.xyz * u_xlat16_7.xxx;
        u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_HRRimPower) + u_xlat1.xyz;
        u_xlat16_40 = u_xlat11;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_40 = min(max(u_xlat16_40, 0.0), 1.0);
#else
        u_xlat16_40 = clamp(u_xlat16_40, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_40 * _RGRatio;
        u_xlat6.xyz = vec3(u_xlat11) * _RGColor.xyz + (-u_xlat1.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat1.xyz;
        u_xlat16_40 = float(_HRRimIntensity);
        u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat16_7.xyz;
        SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat16_7.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_8.xyz);
            u_xlat11 = (-u_xlat0.x) + 1.00100005;
            u_xlat11 = max(u_xlat11, 0.00100000005);
            u_xlat11 = min(u_xlat11, 1.0);
            u_xlat11 = log2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGShininess;
            u_xlat11 = exp2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGScale + _RGBias;
            u_xlat16_7.xyz = vec3(u_xlat11) * _RGColor.xyz;
            u_xlat11 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat11), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb11.xyz = lessThan(vec4(u_xlat11), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb11.x = u_xlatb11.x && u_xlatb2.y;
            u_xlatb11.y = u_xlatb11.y && u_xlatb2.z;
            u_xlatb11.z = u_xlatb11.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb11.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb11.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb11.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_40 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_40 = inversesqrt(u_xlat16_40);
            u_xlat16_9.xyz = vec3(u_xlat16_40) * _WorldSpaceLightPos0.xyz;
            u_xlat16_11 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
            u_xlat16_40 = u_xlat16_11 + 0.5;
            u_xlat16_40 = u_xlat0.x * u_xlat16_40;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_40);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_40;
#endif
            u_xlat16_40 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_8.xyz = u_xlat16_2.xyz * vec3(u_xlat16_40);
            u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_HRRimPower);
            u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_8.xyz = u_xlat1.xyz + u_xlat16_8.xyz;
            u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_7.xyz = u_xlat1.xyz + u_xlat16_7.xyz;
            u_xlat16_40 = float(_HRRimIntensity);
            u_xlat16_8.xyz = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
            SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat16_8.xyz + u_xlat16_7.xyz;
        } else {
            SV_Target0.xyz = u_xlat1.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
int u_xlati2;
bvec4 u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
ivec2 u_xlati4;
bvec3 u_xlatb4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec3 u_xlat10_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
float u_xlat11;
mediump float u_xlat16_11;
int u_xlati11;
bvec3 u_xlatb11;
mediump float u_xlat16_12;
vec2 u_xlat13;
int u_xlati13;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
bvec2 u_xlatb22;
mediump float u_xlat16_24;
lowp vec2 u_xlat10_24;
float u_xlat35;
bool u_xlatb36;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_24 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_24 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_12 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat5.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat5.w = u_xlat2.x * u_xlat16_12 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat5;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat2.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat2.x = max(u_xlat2.x, 0.0);
    u_xlati2 = int(u_xlat2.x);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati13 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati13) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11 = floor(u_xlat11);
    u_xlat11 = max(u_xlat11, 0.0);
    u_xlati11 = int(u_xlat11);
    u_xlat13.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11 != 0) ? u_xlat13.y : u_xlat13.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11 = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (int(u_xlati11) != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat11) + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat4.xyz = vec3(u_xlat35) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb36 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat35) + (-_WorldSpaceLightPos0.xyz);
    u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat16_9.xyz = u_xlat3.xyz * vec3(u_xlat35) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb36)) ? u_xlat16_9.xyz : u_xlat4.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_40) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_7.xyz * _EnvColor.xyz + u_xlat16_9.xyz;
    u_xlat16_3.w = u_xlat1.w * vs_COLOR1.y;
    u_xlat10_4 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_4.w * _SPOpaqueness;
    u_xlat10_6.xyz = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat0.x = u_xlat10_6.x * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + (-_WorldSpaceCameraPos.xyz);
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat6.xyz = u_xlat10_6.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + u_xlat6.xyz;
    u_xlat1.xyz = u_xlat1.xyz + _SPCubeMapOffset.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat16_8.xyz);
    u_xlat11 = u_xlat11 + u_xlat11;
    u_xlat1.xyz = u_xlat16_8.xyz * (-vec3(u_xlat11)) + u_xlat1.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_7.xyz;
    u_xlat11 = _SPNoiseScaler * _SPTransition;
    u_xlat4.xy = vec2(u_xlat11) * vec2(1.70000005, 1.5) + (-u_xlat0.xx);
    u_xlat4.xy = u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
    u_xlati4.xy = ivec2(u_xlat4.xy);
    u_xlat0.x = u_xlat11 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat1.xyz;
    u_xlat16_7.xyz = (u_xlati4.y != 0) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat0.x = (u_xlati4.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati4.x != 0) ? u_xlat16_7.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_3) + u_xlat16_5;
    u_xlat1 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_8.xyz);
        u_xlat11 = (-u_xlat0.x) + 1.00100005;
        u_xlat11 = max(u_xlat11, 0.00100000005);
        u_xlat11 = min(u_xlat11, 1.0);
        u_xlat11 = log2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGShininess;
        u_xlat11 = exp2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGScale + _RGBias;
        u_xlat22 = u_xlat10_0.w + 0.100000001;
        u_xlatb3 = greaterThanEqual(vec4(u_xlat22), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb4.xyz = lessThan(vec4(u_xlat22), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb4.x = u_xlatb3.y && u_xlatb4.x;
        u_xlatb4.y = u_xlatb3.z && u_xlatb4.y;
        u_xlatb4.z = u_xlatb3.w && u_xlatb4.z;
        u_xlat16_5 = (u_xlatb4.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_5 = (u_xlatb4.y) ? _HRRimColor2 : u_xlat16_5;
        u_xlat16_4 = (u_xlatb4.x) ? _HRRimColor3 : u_xlat16_5;
        u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_4;
        u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_7.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_7.x = inversesqrt(u_xlat16_7.x);
        u_xlat16_7.xyz = u_xlat16_7.xxx * _WorldSpaceLightPos0.xyz;
        u_xlat16_22 = dot(u_xlat16_8.xyz, u_xlat16_7.xyz);
        u_xlat16_7.x = u_xlat16_22 + 0.5;
        u_xlat16_7.x = u_xlat0.x * u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_7.x);
#else
        u_xlatb0 = u_xlat16_3.w<u_xlat16_7.x;
#endif
        u_xlat16_7.x = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_7.xyz = u_xlat16_3.xyz * u_xlat16_7.xxx;
        u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_HRRimPower) + u_xlat1.xyz;
        u_xlat16_40 = u_xlat11;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_40 = min(max(u_xlat16_40, 0.0), 1.0);
#else
        u_xlat16_40 = clamp(u_xlat16_40, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_40 * _RGRatio;
        u_xlat6.xyz = vec3(u_xlat11) * _RGColor.xyz + (-u_xlat1.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat1.xyz;
        u_xlat16_40 = float(_HRRimIntensity);
        u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat16_7.xyz;
        SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat16_7.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_8.xyz);
            u_xlat11 = (-u_xlat0.x) + 1.00100005;
            u_xlat11 = max(u_xlat11, 0.00100000005);
            u_xlat11 = min(u_xlat11, 1.0);
            u_xlat11 = log2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGShininess;
            u_xlat11 = exp2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGScale + _RGBias;
            u_xlat16_7.xyz = vec3(u_xlat11) * _RGColor.xyz;
            u_xlat11 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat11), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb11.xyz = lessThan(vec4(u_xlat11), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb11.x = u_xlatb11.x && u_xlatb2.y;
            u_xlatb11.y = u_xlatb11.y && u_xlatb2.z;
            u_xlatb11.z = u_xlatb11.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb11.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb11.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb11.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_40 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_40 = inversesqrt(u_xlat16_40);
            u_xlat16_9.xyz = vec3(u_xlat16_40) * _WorldSpaceLightPos0.xyz;
            u_xlat16_11 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
            u_xlat16_40 = u_xlat16_11 + 0.5;
            u_xlat16_40 = u_xlat0.x * u_xlat16_40;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_40);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_40;
#endif
            u_xlat16_40 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_8.xyz = u_xlat16_2.xyz * vec3(u_xlat16_40);
            u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_HRRimPower);
            u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_8.xyz = u_xlat1.xyz + u_xlat16_8.xyz;
            u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_7.xyz = u_xlat1.xyz + u_xlat16_7.xyz;
            u_xlat16_40 = float(_HRRimIntensity);
            u_xlat16_8.xyz = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
            SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat16_8.xyz + u_xlat16_7.xyz;
        } else {
            SV_Target0.xyz = u_xlat1.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
int u_xlati2;
bvec4 u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
ivec2 u_xlati4;
bvec3 u_xlatb4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec3 u_xlat10_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
float u_xlat11;
mediump float u_xlat16_11;
int u_xlati11;
bvec3 u_xlatb11;
mediump float u_xlat16_12;
vec2 u_xlat13;
int u_xlati13;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
bvec2 u_xlatb22;
mediump float u_xlat16_24;
lowp vec2 u_xlat10_24;
float u_xlat35;
bool u_xlatb36;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_24 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_24 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_12 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat5.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat5.w = u_xlat2.x * u_xlat16_12 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat5;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat2.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat2.x = max(u_xlat2.x, 0.0);
    u_xlati2 = int(u_xlat2.x);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati13 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati13) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11 = floor(u_xlat11);
    u_xlat11 = max(u_xlat11, 0.0);
    u_xlati11 = int(u_xlat11);
    u_xlat13.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11 != 0) ? u_xlat13.y : u_xlat13.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11 = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (int(u_xlati11) != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat11) + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat4.xyz = vec3(u_xlat35) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb36 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat35) + (-_WorldSpaceLightPos0.xyz);
    u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat16_9.xyz = u_xlat3.xyz * vec3(u_xlat35) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb36)) ? u_xlat16_9.xyz : u_xlat4.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_40) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_7.xyz * _EnvColor.xyz + u_xlat16_9.xyz;
    u_xlat16_3.w = u_xlat1.w * vs_COLOR1.y;
    u_xlat10_4 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_4.w * _SPOpaqueness;
    u_xlat10_6.xyz = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat0.x = u_xlat10_6.x * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + (-_WorldSpaceCameraPos.xyz);
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat6.xyz = u_xlat10_6.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + u_xlat6.xyz;
    u_xlat1.xyz = u_xlat1.xyz + _SPCubeMapOffset.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat16_8.xyz);
    u_xlat11 = u_xlat11 + u_xlat11;
    u_xlat1.xyz = u_xlat16_8.xyz * (-vec3(u_xlat11)) + u_xlat1.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_7.xyz;
    u_xlat11 = _SPNoiseScaler * _SPTransition;
    u_xlat4.xy = vec2(u_xlat11) * vec2(1.70000005, 1.5) + (-u_xlat0.xx);
    u_xlat4.xy = u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
    u_xlati4.xy = ivec2(u_xlat4.xy);
    u_xlat0.x = u_xlat11 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat1.xyz;
    u_xlat16_7.xyz = (u_xlati4.y != 0) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat0.x = (u_xlati4.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati4.x != 0) ? u_xlat16_7.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_3) + u_xlat16_5;
    u_xlat1 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_8.xyz);
        u_xlat11 = (-u_xlat0.x) + 1.00100005;
        u_xlat11 = max(u_xlat11, 0.00100000005);
        u_xlat11 = min(u_xlat11, 1.0);
        u_xlat11 = log2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGShininess;
        u_xlat11 = exp2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGScale + _RGBias;
        u_xlat22 = u_xlat10_0.w + 0.100000001;
        u_xlatb3 = greaterThanEqual(vec4(u_xlat22), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb4.xyz = lessThan(vec4(u_xlat22), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb4.x = u_xlatb3.y && u_xlatb4.x;
        u_xlatb4.y = u_xlatb3.z && u_xlatb4.y;
        u_xlatb4.z = u_xlatb3.w && u_xlatb4.z;
        u_xlat16_5 = (u_xlatb4.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_5 = (u_xlatb4.y) ? _HRRimColor2 : u_xlat16_5;
        u_xlat16_4 = (u_xlatb4.x) ? _HRRimColor3 : u_xlat16_5;
        u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_4;
        u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_7.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_7.x = inversesqrt(u_xlat16_7.x);
        u_xlat16_7.xyz = u_xlat16_7.xxx * _WorldSpaceLightPos0.xyz;
        u_xlat16_22 = dot(u_xlat16_8.xyz, u_xlat16_7.xyz);
        u_xlat16_7.x = u_xlat16_22 + 0.5;
        u_xlat16_7.x = u_xlat0.x * u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_7.x);
#else
        u_xlatb0 = u_xlat16_3.w<u_xlat16_7.x;
#endif
        u_xlat16_7.x = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_7.xyz = u_xlat16_3.xyz * u_xlat16_7.xxx;
        u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_HRRimPower) + u_xlat1.xyz;
        u_xlat16_40 = u_xlat11;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_40 = min(max(u_xlat16_40, 0.0), 1.0);
#else
        u_xlat16_40 = clamp(u_xlat16_40, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_40 * _RGRatio;
        u_xlat6.xyz = vec3(u_xlat11) * _RGColor.xyz + (-u_xlat1.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat1.xyz;
        u_xlat16_40 = float(_HRRimIntensity);
        u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat16_7.xyz;
        SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat16_7.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_8.xyz);
            u_xlat11 = (-u_xlat0.x) + 1.00100005;
            u_xlat11 = max(u_xlat11, 0.00100000005);
            u_xlat11 = min(u_xlat11, 1.0);
            u_xlat11 = log2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGShininess;
            u_xlat11 = exp2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGScale + _RGBias;
            u_xlat16_7.xyz = vec3(u_xlat11) * _RGColor.xyz;
            u_xlat11 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat11), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb11.xyz = lessThan(vec4(u_xlat11), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb11.x = u_xlatb11.x && u_xlatb2.y;
            u_xlatb11.y = u_xlatb11.y && u_xlatb2.z;
            u_xlatb11.z = u_xlatb11.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb11.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb11.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb11.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_40 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_40 = inversesqrt(u_xlat16_40);
            u_xlat16_9.xyz = vec3(u_xlat16_40) * _WorldSpaceLightPos0.xyz;
            u_xlat16_11 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
            u_xlat16_40 = u_xlat16_11 + 0.5;
            u_xlat16_40 = u_xlat0.x * u_xlat16_40;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_40);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_40;
#endif
            u_xlat16_40 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_8.xyz = u_xlat16_2.xyz * vec3(u_xlat16_40);
            u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_HRRimPower);
            u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_8.xyz = u_xlat1.xyz + u_xlat16_8.xyz;
            u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_7.xyz = u_xlat1.xyz + u_xlat16_7.xyz;
            u_xlat16_40 = float(_HRRimIntensity);
            u_xlat16_8.xyz = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
            SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat16_8.xyz + u_xlat16_7.xyz;
        } else {
            SV_Target0.xyz = u_xlat1.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump float u_xlat16_6;
ivec3 u_xlati6;
mediump vec3 u_xlat16_8;
bvec2 u_xlatb12;
float u_xlat18;
bool u_xlatb18;
mediump float u_xlat16_20;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat18 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat18 = floor(u_xlat18);
    u_xlat6.z = max(u_xlat18, 0.0);
    u_xlat16_8.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_8.x = u_xlat16_8.x * 0.5 + (-_SecondShadow);
    u_xlat16_8.x = u_xlat16_8.x + 1.0;
    u_xlat16_8.x = floor(u_xlat16_8.x);
    u_xlat16_8.x = max(u_xlat16_8.x, 0.0);
    u_xlati3 = int(u_xlat16_8.x);
    u_xlat16_8.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_8.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_8.xyz;
    u_xlat6.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlati6.xz = ivec2(u_xlat6.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati6.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati6.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati6.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati6.z != 0) ? u_xlat16_4.xyz : u_xlat16_8.xyz;
    u_xlat16_20 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_4.xyz = vec3(u_xlat16_20) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat3.xyz = u_xlat6.xxx * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb18 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat16_5.xyz = u_xlat1.xyz * u_xlat6.xxx + _CustomLightDir.xyz;
    u_xlat16_20 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_5.xyz = vec3(u_xlat16_20) * u_xlat16_5.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb18)) ? u_xlat16_5.xyz : u_xlat3.xyz;
    u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
    u_xlat16_20 = max(u_xlat16_20, 0.0);
    u_xlat16_20 = log2(u_xlat16_20);
    u_xlat16_20 = u_xlat16_20 * _Shininess;
    u_xlat16_20 = exp2(u_xlat16_20);
    u_xlat16_6 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_6 = (-u_xlat16_20) + u_xlat16_6;
    u_xlat6.x = u_xlat16_6 + 1.0;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlati6.x = int(u_xlat6.x);
    u_xlat16_4.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlati6.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_4.xyz;
    SV_Target0.w = u_xlat10_1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump float u_xlat16_6;
ivec3 u_xlati6;
mediump vec3 u_xlat16_8;
bvec2 u_xlatb12;
float u_xlat18;
bool u_xlatb18;
mediump float u_xlat16_20;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat18 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat18 = floor(u_xlat18);
    u_xlat6.z = max(u_xlat18, 0.0);
    u_xlat16_8.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_8.x = u_xlat16_8.x * 0.5 + (-_SecondShadow);
    u_xlat16_8.x = u_xlat16_8.x + 1.0;
    u_xlat16_8.x = floor(u_xlat16_8.x);
    u_xlat16_8.x = max(u_xlat16_8.x, 0.0);
    u_xlati3 = int(u_xlat16_8.x);
    u_xlat16_8.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_8.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_8.xyz;
    u_xlat6.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlati6.xz = ivec2(u_xlat6.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati6.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati6.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati6.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati6.z != 0) ? u_xlat16_4.xyz : u_xlat16_8.xyz;
    u_xlat16_20 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_4.xyz = vec3(u_xlat16_20) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat3.xyz = u_xlat6.xxx * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb18 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat16_5.xyz = u_xlat1.xyz * u_xlat6.xxx + _CustomLightDir.xyz;
    u_xlat16_20 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_5.xyz = vec3(u_xlat16_20) * u_xlat16_5.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb18)) ? u_xlat16_5.xyz : u_xlat3.xyz;
    u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
    u_xlat16_20 = max(u_xlat16_20, 0.0);
    u_xlat16_20 = log2(u_xlat16_20);
    u_xlat16_20 = u_xlat16_20 * _Shininess;
    u_xlat16_20 = exp2(u_xlat16_20);
    u_xlat16_6 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_6 = (-u_xlat16_20) + u_xlat16_6;
    u_xlat6.x = u_xlat16_6 + 1.0;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlati6.x = int(u_xlat6.x);
    u_xlat16_4.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlati6.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_4.xyz;
    SV_Target0.w = u_xlat10_1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump float u_xlat16_6;
ivec3 u_xlati6;
mediump vec3 u_xlat16_8;
bvec2 u_xlatb12;
float u_xlat18;
bool u_xlatb18;
mediump float u_xlat16_20;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat18 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat18 = floor(u_xlat18);
    u_xlat6.z = max(u_xlat18, 0.0);
    u_xlat16_8.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_8.x = u_xlat16_8.x * 0.5 + (-_SecondShadow);
    u_xlat16_8.x = u_xlat16_8.x + 1.0;
    u_xlat16_8.x = floor(u_xlat16_8.x);
    u_xlat16_8.x = max(u_xlat16_8.x, 0.0);
    u_xlati3 = int(u_xlat16_8.x);
    u_xlat16_8.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_8.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_8.xyz;
    u_xlat6.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlati6.xz = ivec2(u_xlat6.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati6.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati6.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati6.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati6.z != 0) ? u_xlat16_4.xyz : u_xlat16_8.xyz;
    u_xlat16_20 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_4.xyz = vec3(u_xlat16_20) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat3.xyz = u_xlat6.xxx * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb18 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat16_5.xyz = u_xlat1.xyz * u_xlat6.xxx + _CustomLightDir.xyz;
    u_xlat16_20 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_5.xyz = vec3(u_xlat16_20) * u_xlat16_5.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb18)) ? u_xlat16_5.xyz : u_xlat3.xyz;
    u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
    u_xlat16_20 = max(u_xlat16_20, 0.0);
    u_xlat16_20 = log2(u_xlat16_20);
    u_xlat16_20 = u_xlat16_20 * _Shininess;
    u_xlat16_20 = exp2(u_xlat16_20);
    u_xlat16_6 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_6 = (-u_xlat16_20) + u_xlat16_6;
    u_xlat6.x = u_xlat16_6 + 1.0;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlati6.x = int(u_xlat6.x);
    u_xlat16_4.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlati6.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_4.xyz;
    SV_Target0.w = u_xlat10_1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump float u_xlat16_6;
ivec3 u_xlati6;
mediump vec3 u_xlat16_8;
bvec2 u_xlatb12;
float u_xlat18;
bool u_xlatb18;
mediump float u_xlat16_20;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat18 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat18 = floor(u_xlat18);
    u_xlat6.z = max(u_xlat18, 0.0);
    u_xlat16_8.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_8.x = u_xlat16_8.x * 0.5 + (-_SecondShadow);
    u_xlat16_8.x = u_xlat16_8.x + 1.0;
    u_xlat16_8.x = floor(u_xlat16_8.x);
    u_xlat16_8.x = max(u_xlat16_8.x, 0.0);
    u_xlati3 = int(u_xlat16_8.x);
    u_xlat16_8.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_8.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_8.xyz;
    u_xlat6.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlati6.xz = ivec2(u_xlat6.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati6.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati6.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati6.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati6.z != 0) ? u_xlat16_4.xyz : u_xlat16_8.xyz;
    u_xlat16_20 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_4.xyz = vec3(u_xlat16_20) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat3.xyz = u_xlat6.xxx * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb18 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat16_5.xyz = u_xlat1.xyz * u_xlat6.xxx + _CustomLightDir.xyz;
    u_xlat16_20 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_5.xyz = vec3(u_xlat16_20) * u_xlat16_5.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb18)) ? u_xlat16_5.xyz : u_xlat3.xyz;
    u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
    u_xlat16_20 = max(u_xlat16_20, 0.0);
    u_xlat16_20 = log2(u_xlat16_20);
    u_xlat16_20 = u_xlat16_20 * _Shininess;
    u_xlat16_20 = exp2(u_xlat16_20);
    u_xlat16_6 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_6 = (-u_xlat16_20) + u_xlat16_6;
    u_xlat6.x = u_xlat16_6 + 1.0;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlati6.x = int(u_xlat6.x);
    u_xlat16_4.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlati6.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_4.xyz;
    SV_Target0.w = u_xlat10_1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump float u_xlat16_6;
ivec3 u_xlati6;
mediump vec3 u_xlat16_8;
bvec2 u_xlatb12;
float u_xlat18;
bool u_xlatb18;
mediump float u_xlat16_20;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat18 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat18 = floor(u_xlat18);
    u_xlat6.z = max(u_xlat18, 0.0);
    u_xlat16_8.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_8.x = u_xlat16_8.x * 0.5 + (-_SecondShadow);
    u_xlat16_8.x = u_xlat16_8.x + 1.0;
    u_xlat16_8.x = floor(u_xlat16_8.x);
    u_xlat16_8.x = max(u_xlat16_8.x, 0.0);
    u_xlati3 = int(u_xlat16_8.x);
    u_xlat16_8.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_8.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_8.xyz;
    u_xlat6.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlati6.xz = ivec2(u_xlat6.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati6.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati6.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati6.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati6.z != 0) ? u_xlat16_4.xyz : u_xlat16_8.xyz;
    u_xlat16_20 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_4.xyz = vec3(u_xlat16_20) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat3.xyz = u_xlat6.xxx * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb18 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat16_5.xyz = u_xlat1.xyz * u_xlat6.xxx + _CustomLightDir.xyz;
    u_xlat16_20 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_5.xyz = vec3(u_xlat16_20) * u_xlat16_5.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb18)) ? u_xlat16_5.xyz : u_xlat3.xyz;
    u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
    u_xlat16_20 = max(u_xlat16_20, 0.0);
    u_xlat16_20 = log2(u_xlat16_20);
    u_xlat16_20 = u_xlat16_20 * _Shininess;
    u_xlat16_20 = exp2(u_xlat16_20);
    u_xlat16_6 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_6 = (-u_xlat16_20) + u_xlat16_6;
    u_xlat6.x = u_xlat16_6 + 1.0;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlati6.x = int(u_xlat6.x);
    u_xlat16_4.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlati6.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_4.xyz;
    SV_Target0.w = u_xlat10_1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump float u_xlat16_6;
ivec3 u_xlati6;
mediump vec3 u_xlat16_8;
bvec2 u_xlatb12;
float u_xlat18;
bool u_xlatb18;
mediump float u_xlat16_20;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat18 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat18 = floor(u_xlat18);
    u_xlat6.z = max(u_xlat18, 0.0);
    u_xlat16_8.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_8.x = u_xlat16_8.x * 0.5 + (-_SecondShadow);
    u_xlat16_8.x = u_xlat16_8.x + 1.0;
    u_xlat16_8.x = floor(u_xlat16_8.x);
    u_xlat16_8.x = max(u_xlat16_8.x, 0.0);
    u_xlati3 = int(u_xlat16_8.x);
    u_xlat16_8.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_8.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_8.xyz;
    u_xlat6.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlati6.xz = ivec2(u_xlat6.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati6.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati6.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati6.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati6.z != 0) ? u_xlat16_4.xyz : u_xlat16_8.xyz;
    u_xlat16_20 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_4.xyz = vec3(u_xlat16_20) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat3.xyz = u_xlat6.xxx * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb18 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat16_5.xyz = u_xlat1.xyz * u_xlat6.xxx + _CustomLightDir.xyz;
    u_xlat16_20 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_5.xyz = vec3(u_xlat16_20) * u_xlat16_5.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb18)) ? u_xlat16_5.xyz : u_xlat3.xyz;
    u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
    u_xlat16_20 = max(u_xlat16_20, 0.0);
    u_xlat16_20 = log2(u_xlat16_20);
    u_xlat16_20 = u_xlat16_20 * _Shininess;
    u_xlat16_20 = exp2(u_xlat16_20);
    u_xlat16_6 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_6 = (-u_xlat16_20) + u_xlat16_6;
    u_xlat6.x = u_xlat16_6 + 1.0;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlati6.x = int(u_xlat6.x);
    u_xlat16_4.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlati6.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_4.xyz;
    SV_Target0.w = u_xlat10_1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
int u_xlati1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
ivec3 u_xlati7;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_25 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati1) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat1.xz = vec2(u_xlat16_25) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_25 = (u_xlati7.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_25 = u_xlat16_25 + vs_COLOR1.x;
    u_xlat16_25 = u_xlat16_25 * 0.5 + (-_LightArea);
    u_xlat16_25 = u_xlat16_25 + 1.0;
    u_xlat16_25 = floor(u_xlat16_25);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlati7.x = int(u_xlat16_25);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat1.xzw = u_xlat1.xzw * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat2.xyz = u_xlat7.xxx * u_xlat1.xzw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb21 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xzw = u_xlat1.xzw * u_xlat7.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat16_6.xyz = u_xlat1.xzw * u_xlat7.xxx + _CustomLightDir.xyz;
    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb21)) ? u_xlat16_6.xyz : u_xlat2.xyz;
    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_25 = log2(u_xlat16_25);
    u_xlat16_25 = u_xlat16_25 * _Shininess;
    u_xlat16_25 = exp2(u_xlat16_25);
    u_xlat16_7 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_7 = (-u_xlat16_25) + u_xlat16_7;
    u_xlat7.x = u_xlat16_7 + 1.0;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.x = int(u_xlat7.x);
    u_xlat16_5.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_5.xyz = u_xlat10_0.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = (u_xlati7.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_4.xyz * _EnvColor.xyz + u_xlat16_5.xyz;
    SV_Target0.w = u_xlat10_1.y * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
int u_xlati1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
ivec3 u_xlati7;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_25 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati1) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat1.xz = vec2(u_xlat16_25) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_25 = (u_xlati7.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_25 = u_xlat16_25 + vs_COLOR1.x;
    u_xlat16_25 = u_xlat16_25 * 0.5 + (-_LightArea);
    u_xlat16_25 = u_xlat16_25 + 1.0;
    u_xlat16_25 = floor(u_xlat16_25);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlati7.x = int(u_xlat16_25);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat1.xzw = u_xlat1.xzw * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat2.xyz = u_xlat7.xxx * u_xlat1.xzw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb21 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xzw = u_xlat1.xzw * u_xlat7.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat16_6.xyz = u_xlat1.xzw * u_xlat7.xxx + _CustomLightDir.xyz;
    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb21)) ? u_xlat16_6.xyz : u_xlat2.xyz;
    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_25 = log2(u_xlat16_25);
    u_xlat16_25 = u_xlat16_25 * _Shininess;
    u_xlat16_25 = exp2(u_xlat16_25);
    u_xlat16_7 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_7 = (-u_xlat16_25) + u_xlat16_7;
    u_xlat7.x = u_xlat16_7 + 1.0;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.x = int(u_xlat7.x);
    u_xlat16_5.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_5.xyz = u_xlat10_0.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = (u_xlati7.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_4.xyz * _EnvColor.xyz + u_xlat16_5.xyz;
    SV_Target0.w = u_xlat10_1.y * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
int u_xlati1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
ivec3 u_xlati7;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_25 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati1) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat1.xz = vec2(u_xlat16_25) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_25 = (u_xlati7.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_25 = u_xlat16_25 + vs_COLOR1.x;
    u_xlat16_25 = u_xlat16_25 * 0.5 + (-_LightArea);
    u_xlat16_25 = u_xlat16_25 + 1.0;
    u_xlat16_25 = floor(u_xlat16_25);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlati7.x = int(u_xlat16_25);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat1.xzw = u_xlat1.xzw * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat2.xyz = u_xlat7.xxx * u_xlat1.xzw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb21 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xzw = u_xlat1.xzw * u_xlat7.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat16_6.xyz = u_xlat1.xzw * u_xlat7.xxx + _CustomLightDir.xyz;
    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb21)) ? u_xlat16_6.xyz : u_xlat2.xyz;
    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_25 = log2(u_xlat16_25);
    u_xlat16_25 = u_xlat16_25 * _Shininess;
    u_xlat16_25 = exp2(u_xlat16_25);
    u_xlat16_7 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_7 = (-u_xlat16_25) + u_xlat16_7;
    u_xlat7.x = u_xlat16_7 + 1.0;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.x = int(u_xlat7.x);
    u_xlat16_5.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_5.xyz = u_xlat10_0.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = (u_xlati7.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_4.xyz * _EnvColor.xyz + u_xlat16_5.xyz;
    SV_Target0.w = u_xlat10_1.y * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump float u_xlat16_11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
bvec2 u_xlatb22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
bool u_xlatb33;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat2.xyz = u_xlat11.xxx * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * u_xlat11.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat11.xxx + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb33)) ? u_xlat16_9.xyz : u_xlat2.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_11 = (-u_xlat16_40) + u_xlat16_11;
    u_xlat11.x = u_xlat16_11 + 1.0;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.x = int(u_xlat11.x);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_7.xyz * _EnvColor.xyz + u_xlat16_8.xyz;
    SV_Target0.w = u_xlat1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump float u_xlat16_11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
bvec2 u_xlatb22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
bool u_xlatb33;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat2.xyz = u_xlat11.xxx * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * u_xlat11.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat11.xxx + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb33)) ? u_xlat16_9.xyz : u_xlat2.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_11 = (-u_xlat16_40) + u_xlat16_11;
    u_xlat11.x = u_xlat16_11 + 1.0;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.x = int(u_xlat11.x);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_7.xyz * _EnvColor.xyz + u_xlat16_8.xyz;
    SV_Target0.w = u_xlat1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump float u_xlat16_11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
bvec2 u_xlatb22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
bool u_xlatb33;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat2.xyz = u_xlat11.xxx * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * u_xlat11.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat11.xxx + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb33)) ? u_xlat16_9.xyz : u_xlat2.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_11 = (-u_xlat16_40) + u_xlat16_11;
    u_xlat11.x = u_xlat16_11 + 1.0;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.x = int(u_xlat11.x);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_7.xyz * _EnvColor.xyz + u_xlat16_8.xyz;
    SV_Target0.w = u_xlat1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
int u_xlati3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
mediump float u_xlat16_8;
int u_xlati8;
bvec3 u_xlatb8;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
int u_xlati11;
float u_xlat16;
mediump float u_xlat16_16;
bvec2 u_xlatb16;
mediump float u_xlat16_26;
bool u_xlatb27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat3.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati11 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati11) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat11.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8 != 0) ? u_xlat11.y : u_xlat11.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8 = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (int(u_xlati8) != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat3.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + _WorldSpaceLightPos0.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat5.xyz = vec3(u_xlat8) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb27 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + (-_WorldSpaceLightPos0.xyz);
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat16_6.xyz = u_xlat1.xyz * vec3(u_xlat8) + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb27)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_26) + u_xlat16_8;
    u_xlat8 = u_xlat16_8 + 1.0;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati8) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
        u_xlat8 = (-u_xlat0.x) + 1.00100005;
        u_xlat8 = max(u_xlat8, 0.00100000005);
        u_xlat8 = min(u_xlat8, 1.0);
        u_xlat8 = log2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGShininess;
        u_xlat8 = exp2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGScale + _RGBias;
        u_xlat16 = u_xlat10_0.w + 0.100000001;
        u_xlatb5 = greaterThanEqual(vec4(u_xlat16), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb1.xyz = lessThan(vec4(u_xlat16), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb1.x = u_xlatb1.x && u_xlatb5.y;
        u_xlatb1.y = u_xlatb1.y && u_xlatb5.z;
        u_xlatb1.z = u_xlatb1.z && u_xlatb5.w;
        u_xlat16_6 = (u_xlatb1.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb1.y) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_6 = (u_xlatb1.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_5 = (u_xlatb5.x) ? _HRRimColor5 : u_xlat16_6;
        u_xlat16_5 = (int(_MoreHardRimColor) != 0) ? u_xlat16_5 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_26 = inversesqrt(u_xlat16_26);
        u_xlat16_6.xyz = vec3(u_xlat16_26) * _WorldSpaceLightPos0.xyz;
        u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
        u_xlat16_26 = u_xlat16_16 + 0.5;
        u_xlat16_26 = u_xlat0.x * u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_5.w<u_xlat16_26);
#else
        u_xlatb0 = u_xlat16_5.w<u_xlat16_26;
#endif
        u_xlat16_26 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_5.xyz;
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_HRRimPower) + u_xlat16_2.xyz;
        u_xlat16_26 = u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_26 * _RGRatio;
        u_xlat1.xyz = vec3(u_xlat8) * _RGColor.xyz + (-u_xlat16_2.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat16_2.xyz;
        u_xlat16_26 = float(_HRRimIntensity);
        u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat16_6.xyz;
        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
            u_xlat8 = (-u_xlat0.x) + 1.00100005;
            u_xlat8 = max(u_xlat8, 0.00100000005);
            u_xlat8 = min(u_xlat8, 1.0);
            u_xlat8 = log2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGShininess;
            u_xlat8 = exp2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGScale + _RGBias;
            u_xlat16_6.xyz = vec3(u_xlat8) * _RGColor.xyz;
            u_xlat8 = u_xlat10_0.w + 0.100000001;
            u_xlatb3 = greaterThanEqual(vec4(u_xlat8), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb8.xyz = lessThan(vec4(u_xlat8), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb8.x = u_xlatb8.x && u_xlatb3.y;
            u_xlatb8.y = u_xlatb8.y && u_xlatb3.z;
            u_xlatb8.z = u_xlatb8.z && u_xlatb3.w;
            u_xlat16_5 = (u_xlatb8.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_5 = (u_xlatb8.y) ? _HRRimColor2 : u_xlat16_5;
            u_xlat16_5 = (u_xlatb8.x) ? _HRRimColor3 : u_xlat16_5;
            u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_5;
            u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_26 = inversesqrt(u_xlat16_26);
            u_xlat16_7.xyz = vec3(u_xlat16_26) * _WorldSpaceLightPos0.xyz;
            u_xlat16_8 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
            u_xlat16_26 = u_xlat16_8 + 0.5;
            u_xlat16_26 = u_xlat0.x * u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_26);
#else
            u_xlatb0 = u_xlat16_3.w<u_xlat16_26;
#endif
            u_xlat16_26 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz;
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_HRRimPower);
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_6.xyz = u_xlat16_2.xyz + u_xlat16_6.xyz;
            u_xlat16_26 = float(_HRRimIntensity);
            u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_6.xyz);
            SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_6.xyz;
        } else {
            SV_Target0.xyz = u_xlat16_2.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat10_1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
int u_xlati3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
mediump float u_xlat16_8;
int u_xlati8;
bvec3 u_xlatb8;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
int u_xlati11;
float u_xlat16;
mediump float u_xlat16_16;
bvec2 u_xlatb16;
mediump float u_xlat16_26;
bool u_xlatb27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat3.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati11 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati11) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat11.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8 != 0) ? u_xlat11.y : u_xlat11.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8 = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (int(u_xlati8) != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat3.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + _WorldSpaceLightPos0.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat5.xyz = vec3(u_xlat8) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb27 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + (-_WorldSpaceLightPos0.xyz);
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat16_6.xyz = u_xlat1.xyz * vec3(u_xlat8) + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb27)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_26) + u_xlat16_8;
    u_xlat8 = u_xlat16_8 + 1.0;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati8) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
        u_xlat8 = (-u_xlat0.x) + 1.00100005;
        u_xlat8 = max(u_xlat8, 0.00100000005);
        u_xlat8 = min(u_xlat8, 1.0);
        u_xlat8 = log2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGShininess;
        u_xlat8 = exp2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGScale + _RGBias;
        u_xlat16 = u_xlat10_0.w + 0.100000001;
        u_xlatb5 = greaterThanEqual(vec4(u_xlat16), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb1.xyz = lessThan(vec4(u_xlat16), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb1.x = u_xlatb1.x && u_xlatb5.y;
        u_xlatb1.y = u_xlatb1.y && u_xlatb5.z;
        u_xlatb1.z = u_xlatb1.z && u_xlatb5.w;
        u_xlat16_6 = (u_xlatb1.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb1.y) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_6 = (u_xlatb1.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_5 = (u_xlatb5.x) ? _HRRimColor5 : u_xlat16_6;
        u_xlat16_5 = (int(_MoreHardRimColor) != 0) ? u_xlat16_5 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_26 = inversesqrt(u_xlat16_26);
        u_xlat16_6.xyz = vec3(u_xlat16_26) * _WorldSpaceLightPos0.xyz;
        u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
        u_xlat16_26 = u_xlat16_16 + 0.5;
        u_xlat16_26 = u_xlat0.x * u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_5.w<u_xlat16_26);
#else
        u_xlatb0 = u_xlat16_5.w<u_xlat16_26;
#endif
        u_xlat16_26 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_5.xyz;
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_HRRimPower) + u_xlat16_2.xyz;
        u_xlat16_26 = u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_26 * _RGRatio;
        u_xlat1.xyz = vec3(u_xlat8) * _RGColor.xyz + (-u_xlat16_2.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat16_2.xyz;
        u_xlat16_26 = float(_HRRimIntensity);
        u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat16_6.xyz;
        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
            u_xlat8 = (-u_xlat0.x) + 1.00100005;
            u_xlat8 = max(u_xlat8, 0.00100000005);
            u_xlat8 = min(u_xlat8, 1.0);
            u_xlat8 = log2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGShininess;
            u_xlat8 = exp2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGScale + _RGBias;
            u_xlat16_6.xyz = vec3(u_xlat8) * _RGColor.xyz;
            u_xlat8 = u_xlat10_0.w + 0.100000001;
            u_xlatb3 = greaterThanEqual(vec4(u_xlat8), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb8.xyz = lessThan(vec4(u_xlat8), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb8.x = u_xlatb8.x && u_xlatb3.y;
            u_xlatb8.y = u_xlatb8.y && u_xlatb3.z;
            u_xlatb8.z = u_xlatb8.z && u_xlatb3.w;
            u_xlat16_5 = (u_xlatb8.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_5 = (u_xlatb8.y) ? _HRRimColor2 : u_xlat16_5;
            u_xlat16_5 = (u_xlatb8.x) ? _HRRimColor3 : u_xlat16_5;
            u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_5;
            u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_26 = inversesqrt(u_xlat16_26);
            u_xlat16_7.xyz = vec3(u_xlat16_26) * _WorldSpaceLightPos0.xyz;
            u_xlat16_8 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
            u_xlat16_26 = u_xlat16_8 + 0.5;
            u_xlat16_26 = u_xlat0.x * u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_26);
#else
            u_xlatb0 = u_xlat16_3.w<u_xlat16_26;
#endif
            u_xlat16_26 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz;
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_HRRimPower);
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_6.xyz = u_xlat16_2.xyz + u_xlat16_6.xyz;
            u_xlat16_26 = float(_HRRimIntensity);
            u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_6.xyz);
            SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_6.xyz;
        } else {
            SV_Target0.xyz = u_xlat16_2.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat10_1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
int u_xlati3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
mediump float u_xlat16_8;
int u_xlati8;
bvec3 u_xlatb8;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
int u_xlati11;
float u_xlat16;
mediump float u_xlat16_16;
bvec2 u_xlatb16;
mediump float u_xlat16_26;
bool u_xlatb27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat3.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati11 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati11) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat11.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8 != 0) ? u_xlat11.y : u_xlat11.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8 = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (int(u_xlati8) != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat3.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + _WorldSpaceLightPos0.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat5.xyz = vec3(u_xlat8) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb27 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + (-_WorldSpaceLightPos0.xyz);
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat16_6.xyz = u_xlat1.xyz * vec3(u_xlat8) + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb27)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_26) + u_xlat16_8;
    u_xlat8 = u_xlat16_8 + 1.0;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati8) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
        u_xlat8 = (-u_xlat0.x) + 1.00100005;
        u_xlat8 = max(u_xlat8, 0.00100000005);
        u_xlat8 = min(u_xlat8, 1.0);
        u_xlat8 = log2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGShininess;
        u_xlat8 = exp2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGScale + _RGBias;
        u_xlat16 = u_xlat10_0.w + 0.100000001;
        u_xlatb5 = greaterThanEqual(vec4(u_xlat16), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb1.xyz = lessThan(vec4(u_xlat16), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb1.x = u_xlatb1.x && u_xlatb5.y;
        u_xlatb1.y = u_xlatb1.y && u_xlatb5.z;
        u_xlatb1.z = u_xlatb1.z && u_xlatb5.w;
        u_xlat16_6 = (u_xlatb1.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb1.y) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_6 = (u_xlatb1.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_5 = (u_xlatb5.x) ? _HRRimColor5 : u_xlat16_6;
        u_xlat16_5 = (int(_MoreHardRimColor) != 0) ? u_xlat16_5 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_26 = inversesqrt(u_xlat16_26);
        u_xlat16_6.xyz = vec3(u_xlat16_26) * _WorldSpaceLightPos0.xyz;
        u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
        u_xlat16_26 = u_xlat16_16 + 0.5;
        u_xlat16_26 = u_xlat0.x * u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_5.w<u_xlat16_26);
#else
        u_xlatb0 = u_xlat16_5.w<u_xlat16_26;
#endif
        u_xlat16_26 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_5.xyz;
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_HRRimPower) + u_xlat16_2.xyz;
        u_xlat16_26 = u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_26 * _RGRatio;
        u_xlat1.xyz = vec3(u_xlat8) * _RGColor.xyz + (-u_xlat16_2.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat16_2.xyz;
        u_xlat16_26 = float(_HRRimIntensity);
        u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat16_6.xyz;
        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
            u_xlat8 = (-u_xlat0.x) + 1.00100005;
            u_xlat8 = max(u_xlat8, 0.00100000005);
            u_xlat8 = min(u_xlat8, 1.0);
            u_xlat8 = log2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGShininess;
            u_xlat8 = exp2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGScale + _RGBias;
            u_xlat16_6.xyz = vec3(u_xlat8) * _RGColor.xyz;
            u_xlat8 = u_xlat10_0.w + 0.100000001;
            u_xlatb3 = greaterThanEqual(vec4(u_xlat8), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb8.xyz = lessThan(vec4(u_xlat8), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb8.x = u_xlatb8.x && u_xlatb3.y;
            u_xlatb8.y = u_xlatb8.y && u_xlatb3.z;
            u_xlatb8.z = u_xlatb8.z && u_xlatb3.w;
            u_xlat16_5 = (u_xlatb8.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_5 = (u_xlatb8.y) ? _HRRimColor2 : u_xlat16_5;
            u_xlat16_5 = (u_xlatb8.x) ? _HRRimColor3 : u_xlat16_5;
            u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_5;
            u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_26 = inversesqrt(u_xlat16_26);
            u_xlat16_7.xyz = vec3(u_xlat16_26) * _WorldSpaceLightPos0.xyz;
            u_xlat16_8 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
            u_xlat16_26 = u_xlat16_8 + 0.5;
            u_xlat16_26 = u_xlat0.x * u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_26);
#else
            u_xlatb0 = u_xlat16_3.w<u_xlat16_26;
#endif
            u_xlat16_26 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz;
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_HRRimPower);
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_6.xyz = u_xlat16_2.xyz + u_xlat16_6.xyz;
            u_xlat16_26 = float(_HRRimIntensity);
            u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_6.xyz);
            SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_6.xyz;
        } else {
            SV_Target0.xyz = u_xlat16_2.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat10_1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
int u_xlati3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
mediump float u_xlat16_8;
int u_xlati8;
bvec3 u_xlatb8;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
int u_xlati11;
float u_xlat16;
mediump float u_xlat16_16;
bvec2 u_xlatb16;
mediump float u_xlat16_26;
bool u_xlatb27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat3.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati11 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati11) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat11.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8 != 0) ? u_xlat11.y : u_xlat11.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8 = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (int(u_xlati8) != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat3.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + _WorldSpaceLightPos0.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat5.xyz = vec3(u_xlat8) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb27 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + (-_WorldSpaceLightPos0.xyz);
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat16_6.xyz = u_xlat1.xyz * vec3(u_xlat8) + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb27)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_26) + u_xlat16_8;
    u_xlat8 = u_xlat16_8 + 1.0;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati8) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
        u_xlat8 = (-u_xlat0.x) + 1.00100005;
        u_xlat8 = max(u_xlat8, 0.00100000005);
        u_xlat8 = min(u_xlat8, 1.0);
        u_xlat8 = log2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGShininess;
        u_xlat8 = exp2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGScale + _RGBias;
        u_xlat16 = u_xlat10_0.w + 0.100000001;
        u_xlatb5 = greaterThanEqual(vec4(u_xlat16), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb1.xyz = lessThan(vec4(u_xlat16), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb1.x = u_xlatb1.x && u_xlatb5.y;
        u_xlatb1.y = u_xlatb1.y && u_xlatb5.z;
        u_xlatb1.z = u_xlatb1.z && u_xlatb5.w;
        u_xlat16_6 = (u_xlatb1.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb1.y) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_6 = (u_xlatb1.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_5 = (u_xlatb5.x) ? _HRRimColor5 : u_xlat16_6;
        u_xlat16_5 = (int(_MoreHardRimColor) != 0) ? u_xlat16_5 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_26 = inversesqrt(u_xlat16_26);
        u_xlat16_6.xyz = vec3(u_xlat16_26) * _WorldSpaceLightPos0.xyz;
        u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
        u_xlat16_26 = u_xlat16_16 + 0.5;
        u_xlat16_26 = u_xlat0.x * u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_5.w<u_xlat16_26);
#else
        u_xlatb0 = u_xlat16_5.w<u_xlat16_26;
#endif
        u_xlat16_26 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_5.xyz;
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_HRRimPower) + u_xlat16_2.xyz;
        u_xlat16_26 = u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_26 * _RGRatio;
        u_xlat1.xyz = vec3(u_xlat8) * _RGColor.xyz + (-u_xlat16_2.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat16_2.xyz;
        u_xlat16_26 = float(_HRRimIntensity);
        u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat16_6.xyz;
        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
            u_xlat8 = (-u_xlat0.x) + 1.00100005;
            u_xlat8 = max(u_xlat8, 0.00100000005);
            u_xlat8 = min(u_xlat8, 1.0);
            u_xlat8 = log2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGShininess;
            u_xlat8 = exp2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGScale + _RGBias;
            u_xlat16_6.xyz = vec3(u_xlat8) * _RGColor.xyz;
            u_xlat8 = u_xlat10_0.w + 0.100000001;
            u_xlatb3 = greaterThanEqual(vec4(u_xlat8), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb8.xyz = lessThan(vec4(u_xlat8), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb8.x = u_xlatb8.x && u_xlatb3.y;
            u_xlatb8.y = u_xlatb8.y && u_xlatb3.z;
            u_xlatb8.z = u_xlatb8.z && u_xlatb3.w;
            u_xlat16_5 = (u_xlatb8.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_5 = (u_xlatb8.y) ? _HRRimColor2 : u_xlat16_5;
            u_xlat16_5 = (u_xlatb8.x) ? _HRRimColor3 : u_xlat16_5;
            u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_5;
            u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_26 = inversesqrt(u_xlat16_26);
            u_xlat16_7.xyz = vec3(u_xlat16_26) * _WorldSpaceLightPos0.xyz;
            u_xlat16_8 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
            u_xlat16_26 = u_xlat16_8 + 0.5;
            u_xlat16_26 = u_xlat0.x * u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_26);
#else
            u_xlatb0 = u_xlat16_3.w<u_xlat16_26;
#endif
            u_xlat16_26 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz;
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_HRRimPower);
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_6.xyz = u_xlat16_2.xyz + u_xlat16_6.xyz;
            u_xlat16_26 = float(_HRRimIntensity);
            u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_6.xyz);
            SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_6.xyz;
        } else {
            SV_Target0.xyz = u_xlat16_2.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat10_1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
int u_xlati3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
mediump float u_xlat16_8;
int u_xlati8;
bvec3 u_xlatb8;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
int u_xlati11;
float u_xlat16;
mediump float u_xlat16_16;
bvec2 u_xlatb16;
mediump float u_xlat16_26;
bool u_xlatb27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat3.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati11 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati11) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat11.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8 != 0) ? u_xlat11.y : u_xlat11.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8 = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (int(u_xlati8) != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat3.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + _WorldSpaceLightPos0.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat5.xyz = vec3(u_xlat8) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb27 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + (-_WorldSpaceLightPos0.xyz);
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat16_6.xyz = u_xlat1.xyz * vec3(u_xlat8) + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb27)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_26) + u_xlat16_8;
    u_xlat8 = u_xlat16_8 + 1.0;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati8) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
        u_xlat8 = (-u_xlat0.x) + 1.00100005;
        u_xlat8 = max(u_xlat8, 0.00100000005);
        u_xlat8 = min(u_xlat8, 1.0);
        u_xlat8 = log2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGShininess;
        u_xlat8 = exp2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGScale + _RGBias;
        u_xlat16 = u_xlat10_0.w + 0.100000001;
        u_xlatb5 = greaterThanEqual(vec4(u_xlat16), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb1.xyz = lessThan(vec4(u_xlat16), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb1.x = u_xlatb1.x && u_xlatb5.y;
        u_xlatb1.y = u_xlatb1.y && u_xlatb5.z;
        u_xlatb1.z = u_xlatb1.z && u_xlatb5.w;
        u_xlat16_6 = (u_xlatb1.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb1.y) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_6 = (u_xlatb1.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_5 = (u_xlatb5.x) ? _HRRimColor5 : u_xlat16_6;
        u_xlat16_5 = (int(_MoreHardRimColor) != 0) ? u_xlat16_5 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_26 = inversesqrt(u_xlat16_26);
        u_xlat16_6.xyz = vec3(u_xlat16_26) * _WorldSpaceLightPos0.xyz;
        u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
        u_xlat16_26 = u_xlat16_16 + 0.5;
        u_xlat16_26 = u_xlat0.x * u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_5.w<u_xlat16_26);
#else
        u_xlatb0 = u_xlat16_5.w<u_xlat16_26;
#endif
        u_xlat16_26 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_5.xyz;
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_HRRimPower) + u_xlat16_2.xyz;
        u_xlat16_26 = u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_26 * _RGRatio;
        u_xlat1.xyz = vec3(u_xlat8) * _RGColor.xyz + (-u_xlat16_2.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat16_2.xyz;
        u_xlat16_26 = float(_HRRimIntensity);
        u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat16_6.xyz;
        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
            u_xlat8 = (-u_xlat0.x) + 1.00100005;
            u_xlat8 = max(u_xlat8, 0.00100000005);
            u_xlat8 = min(u_xlat8, 1.0);
            u_xlat8 = log2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGShininess;
            u_xlat8 = exp2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGScale + _RGBias;
            u_xlat16_6.xyz = vec3(u_xlat8) * _RGColor.xyz;
            u_xlat8 = u_xlat10_0.w + 0.100000001;
            u_xlatb3 = greaterThanEqual(vec4(u_xlat8), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb8.xyz = lessThan(vec4(u_xlat8), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb8.x = u_xlatb8.x && u_xlatb3.y;
            u_xlatb8.y = u_xlatb8.y && u_xlatb3.z;
            u_xlatb8.z = u_xlatb8.z && u_xlatb3.w;
            u_xlat16_5 = (u_xlatb8.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_5 = (u_xlatb8.y) ? _HRRimColor2 : u_xlat16_5;
            u_xlat16_5 = (u_xlatb8.x) ? _HRRimColor3 : u_xlat16_5;
            u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_5;
            u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_26 = inversesqrt(u_xlat16_26);
            u_xlat16_7.xyz = vec3(u_xlat16_26) * _WorldSpaceLightPos0.xyz;
            u_xlat16_8 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
            u_xlat16_26 = u_xlat16_8 + 0.5;
            u_xlat16_26 = u_xlat0.x * u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_26);
#else
            u_xlatb0 = u_xlat16_3.w<u_xlat16_26;
#endif
            u_xlat16_26 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz;
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_HRRimPower);
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_6.xyz = u_xlat16_2.xyz + u_xlat16_6.xyz;
            u_xlat16_26 = float(_HRRimIntensity);
            u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_6.xyz);
            SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_6.xyz;
        } else {
            SV_Target0.xyz = u_xlat16_2.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat10_1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
int u_xlati3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
mediump float u_xlat16_8;
int u_xlati8;
bvec3 u_xlatb8;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
int u_xlati11;
float u_xlat16;
mediump float u_xlat16_16;
bvec2 u_xlatb16;
mediump float u_xlat16_26;
bool u_xlatb27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat3.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati11 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati11) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat11.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8 != 0) ? u_xlat11.y : u_xlat11.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8 = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (int(u_xlati8) != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat3.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + _WorldSpaceLightPos0.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat5.xyz = vec3(u_xlat8) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb27 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + (-_WorldSpaceLightPos0.xyz);
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat16_6.xyz = u_xlat1.xyz * vec3(u_xlat8) + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb27)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_26) + u_xlat16_8;
    u_xlat8 = u_xlat16_8 + 1.0;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati8) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
        u_xlat8 = (-u_xlat0.x) + 1.00100005;
        u_xlat8 = max(u_xlat8, 0.00100000005);
        u_xlat8 = min(u_xlat8, 1.0);
        u_xlat8 = log2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGShininess;
        u_xlat8 = exp2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGScale + _RGBias;
        u_xlat16 = u_xlat10_0.w + 0.100000001;
        u_xlatb5 = greaterThanEqual(vec4(u_xlat16), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb1.xyz = lessThan(vec4(u_xlat16), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb1.x = u_xlatb1.x && u_xlatb5.y;
        u_xlatb1.y = u_xlatb1.y && u_xlatb5.z;
        u_xlatb1.z = u_xlatb1.z && u_xlatb5.w;
        u_xlat16_6 = (u_xlatb1.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb1.y) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_6 = (u_xlatb1.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_5 = (u_xlatb5.x) ? _HRRimColor5 : u_xlat16_6;
        u_xlat16_5 = (int(_MoreHardRimColor) != 0) ? u_xlat16_5 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_26 = inversesqrt(u_xlat16_26);
        u_xlat16_6.xyz = vec3(u_xlat16_26) * _WorldSpaceLightPos0.xyz;
        u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
        u_xlat16_26 = u_xlat16_16 + 0.5;
        u_xlat16_26 = u_xlat0.x * u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_5.w<u_xlat16_26);
#else
        u_xlatb0 = u_xlat16_5.w<u_xlat16_26;
#endif
        u_xlat16_26 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_5.xyz;
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_HRRimPower) + u_xlat16_2.xyz;
        u_xlat16_26 = u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_26 * _RGRatio;
        u_xlat1.xyz = vec3(u_xlat8) * _RGColor.xyz + (-u_xlat16_2.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat16_2.xyz;
        u_xlat16_26 = float(_HRRimIntensity);
        u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat16_6.xyz;
        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
            u_xlat8 = (-u_xlat0.x) + 1.00100005;
            u_xlat8 = max(u_xlat8, 0.00100000005);
            u_xlat8 = min(u_xlat8, 1.0);
            u_xlat8 = log2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGShininess;
            u_xlat8 = exp2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGScale + _RGBias;
            u_xlat16_6.xyz = vec3(u_xlat8) * _RGColor.xyz;
            u_xlat8 = u_xlat10_0.w + 0.100000001;
            u_xlatb3 = greaterThanEqual(vec4(u_xlat8), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb8.xyz = lessThan(vec4(u_xlat8), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb8.x = u_xlatb8.x && u_xlatb3.y;
            u_xlatb8.y = u_xlatb8.y && u_xlatb3.z;
            u_xlatb8.z = u_xlatb8.z && u_xlatb3.w;
            u_xlat16_5 = (u_xlatb8.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_5 = (u_xlatb8.y) ? _HRRimColor2 : u_xlat16_5;
            u_xlat16_5 = (u_xlatb8.x) ? _HRRimColor3 : u_xlat16_5;
            u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_5;
            u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_26 = inversesqrt(u_xlat16_26);
            u_xlat16_7.xyz = vec3(u_xlat16_26) * _WorldSpaceLightPos0.xyz;
            u_xlat16_8 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
            u_xlat16_26 = u_xlat16_8 + 0.5;
            u_xlat16_26 = u_xlat0.x * u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_26);
#else
            u_xlatb0 = u_xlat16_3.w<u_xlat16_26;
#endif
            u_xlat16_26 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz;
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_HRRimPower);
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_6.xyz = u_xlat16_2.xyz + u_xlat16_6.xyz;
            u_xlat16_26 = float(_HRRimIntensity);
            u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_6.xyz);
            SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_6.xyz;
        } else {
            SV_Target0.xyz = u_xlat16_2.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat10_1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
int u_xlati1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec3 u_xlat10_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
mediump float u_xlat16_8;
int u_xlati8;
bvec3 u_xlatb8;
float u_xlat16;
mediump float u_xlat16_16;
bvec2 u_xlatb16;
vec2 u_xlat17;
int u_xlati17;
bool u_xlatb26;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_28 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat1.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati17 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati17) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat17.xy = vec2(u_xlat16_28) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_28 = (u_xlati8 != 0) ? u_xlat17.y : u_xlat17.x;
    u_xlat16_28 = u_xlat16_28 + vs_COLOR1.x;
    u_xlat16_28 = u_xlat16_28 * 0.5 + (-_LightArea);
    u_xlat16_28 = u_xlat16_28 + 1.0;
    u_xlat16_28 = floor(u_xlat16_28);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlati8 = int(u_xlat16_28);
    u_xlat16_4.xyz = (int(u_xlati8) != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (int(u_xlati1) != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_5.xyz = vec3(u_xlat16_28) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8 = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xzw;
    u_xlat1.xzw = u_xlat1.xzw * vec3(u_xlat8) + _WorldSpaceLightPos0.xyz;
    u_xlat8 = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat3.xyz = vec3(u_xlat8) * u_xlat1.xzw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb26 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xzw = u_xlat1.xzw * vec3(u_xlat8) + (-_WorldSpaceLightPos0.xyz);
    u_xlat8 = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat16_6.xyz = u_xlat1.xzw * vec3(u_xlat8) + _CustomLightDir.xyz;
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb26)) ? u_xlat16_6.xyz : u_xlat3.xyz;
    u_xlat16_28 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = log2(u_xlat16_28);
    u_xlat16_28 = u_xlat16_28 * _Shininess;
    u_xlat16_28 = exp2(u_xlat16_28);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_28) + u_xlat16_8;
    u_xlat8 = u_xlat16_8 + 1.0;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati8) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_5.xyz);
        u_xlat8 = (-u_xlat0.x) + 1.00100005;
        u_xlat8 = max(u_xlat8, 0.00100000005);
        u_xlat8 = min(u_xlat8, 1.0);
        u_xlat8 = log2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGShininess;
        u_xlat8 = exp2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGScale + _RGBias;
        u_xlat16 = u_xlat10_0.w + 0.100000001;
        u_xlatb3 = greaterThanEqual(vec4(u_xlat16), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb1.xzw = lessThan(vec4(u_xlat16), vec4(0.600000024, 0.0, 0.400000006, 0.800000012)).xzw;
        u_xlatb1.x = u_xlatb1.x && u_xlatb3.y;
        u_xlatb1.z = u_xlatb1.z && u_xlatb3.z;
        u_xlatb1.w = u_xlatb1.w && u_xlatb3.w;
        u_xlat16_6 = (u_xlatb1.w) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb1.z) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_6 = (u_xlatb1.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_6;
        u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_28 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_28 = inversesqrt(u_xlat16_28);
        u_xlat16_6.xyz = vec3(u_xlat16_28) * _WorldSpaceLightPos0.xyz;
        u_xlat16_16 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
        u_xlat16_28 = u_xlat16_16 + 0.5;
        u_xlat16_28 = u_xlat0.x * u_xlat16_28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_28);
#else
        u_xlatb0 = u_xlat16_3.w<u_xlat16_28;
#endif
        u_xlat16_28 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(u_xlat16_28);
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_HRRimPower) + u_xlat16_4.xyz;
        u_xlat16_28 = u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
        u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_28 * _RGRatio;
        u_xlat1.xzw = vec3(u_xlat8) * _RGColor.xyz + (-u_xlat16_4.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xzw + u_xlat16_4.xyz;
        u_xlat16_28 = float(_HRRimIntensity);
        u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat16_6.xyz;
        SV_Target0.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_5.xyz);
            u_xlat8 = (-u_xlat0.x) + 1.00100005;
            u_xlat8 = max(u_xlat8, 0.00100000005);
            u_xlat8 = min(u_xlat8, 1.0);
            u_xlat8 = log2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGShininess;
            u_xlat8 = exp2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGScale + _RGBias;
            u_xlat16_6.xyz = vec3(u_xlat8) * _RGColor.xyz;
            u_xlat8 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat8), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb8.xyz = lessThan(vec4(u_xlat8), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb8.x = u_xlatb8.x && u_xlatb2.y;
            u_xlatb8.y = u_xlatb8.y && u_xlatb2.z;
            u_xlatb8.z = u_xlatb8.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb8.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb8.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb8.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_28 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_28 = inversesqrt(u_xlat16_28);
            u_xlat16_7.xyz = vec3(u_xlat16_28) * _WorldSpaceLightPos0.xyz;
            u_xlat16_8 = dot(u_xlat16_5.xyz, u_xlat16_7.xyz);
            u_xlat16_28 = u_xlat16_8 + 0.5;
            u_xlat16_28 = u_xlat0.x * u_xlat16_28;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_28);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_28;
#endif
            u_xlat16_28 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(u_xlat16_28);
            u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_HRRimPower);
            u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_5.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
            u_xlat16_28 = float(_HRRimIntensity);
            u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
            SV_Target0.xyz = vec3(u_xlat16_28) * u_xlat16_5.xyz + u_xlat16_6.xyz;
        } else {
            SV_Target0.xyz = u_xlat16_4.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat10_1.y * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
int u_xlati1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec3 u_xlat10_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
mediump float u_xlat16_8;
int u_xlati8;
bvec3 u_xlatb8;
float u_xlat16;
mediump float u_xlat16_16;
bvec2 u_xlatb16;
vec2 u_xlat17;
int u_xlati17;
bool u_xlatb26;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_28 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat1.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati17 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati17) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat17.xy = vec2(u_xlat16_28) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_28 = (u_xlati8 != 0) ? u_xlat17.y : u_xlat17.x;
    u_xlat16_28 = u_xlat16_28 + vs_COLOR1.x;
    u_xlat16_28 = u_xlat16_28 * 0.5 + (-_LightArea);
    u_xlat16_28 = u_xlat16_28 + 1.0;
    u_xlat16_28 = floor(u_xlat16_28);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlati8 = int(u_xlat16_28);
    u_xlat16_4.xyz = (int(u_xlati8) != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (int(u_xlati1) != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_5.xyz = vec3(u_xlat16_28) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8 = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xzw;
    u_xlat1.xzw = u_xlat1.xzw * vec3(u_xlat8) + _WorldSpaceLightPos0.xyz;
    u_xlat8 = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat3.xyz = vec3(u_xlat8) * u_xlat1.xzw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb26 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xzw = u_xlat1.xzw * vec3(u_xlat8) + (-_WorldSpaceLightPos0.xyz);
    u_xlat8 = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat16_6.xyz = u_xlat1.xzw * vec3(u_xlat8) + _CustomLightDir.xyz;
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb26)) ? u_xlat16_6.xyz : u_xlat3.xyz;
    u_xlat16_28 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = log2(u_xlat16_28);
    u_xlat16_28 = u_xlat16_28 * _Shininess;
    u_xlat16_28 = exp2(u_xlat16_28);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_28) + u_xlat16_8;
    u_xlat8 = u_xlat16_8 + 1.0;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati8) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_5.xyz);
        u_xlat8 = (-u_xlat0.x) + 1.00100005;
        u_xlat8 = max(u_xlat8, 0.00100000005);
        u_xlat8 = min(u_xlat8, 1.0);
        u_xlat8 = log2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGShininess;
        u_xlat8 = exp2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGScale + _RGBias;
        u_xlat16 = u_xlat10_0.w + 0.100000001;
        u_xlatb3 = greaterThanEqual(vec4(u_xlat16), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb1.xzw = lessThan(vec4(u_xlat16), vec4(0.600000024, 0.0, 0.400000006, 0.800000012)).xzw;
        u_xlatb1.x = u_xlatb1.x && u_xlatb3.y;
        u_xlatb1.z = u_xlatb1.z && u_xlatb3.z;
        u_xlatb1.w = u_xlatb1.w && u_xlatb3.w;
        u_xlat16_6 = (u_xlatb1.w) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb1.z) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_6 = (u_xlatb1.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_6;
        u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_28 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_28 = inversesqrt(u_xlat16_28);
        u_xlat16_6.xyz = vec3(u_xlat16_28) * _WorldSpaceLightPos0.xyz;
        u_xlat16_16 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
        u_xlat16_28 = u_xlat16_16 + 0.5;
        u_xlat16_28 = u_xlat0.x * u_xlat16_28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_28);
#else
        u_xlatb0 = u_xlat16_3.w<u_xlat16_28;
#endif
        u_xlat16_28 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(u_xlat16_28);
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_HRRimPower) + u_xlat16_4.xyz;
        u_xlat16_28 = u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
        u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_28 * _RGRatio;
        u_xlat1.xzw = vec3(u_xlat8) * _RGColor.xyz + (-u_xlat16_4.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xzw + u_xlat16_4.xyz;
        u_xlat16_28 = float(_HRRimIntensity);
        u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat16_6.xyz;
        SV_Target0.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_5.xyz);
            u_xlat8 = (-u_xlat0.x) + 1.00100005;
            u_xlat8 = max(u_xlat8, 0.00100000005);
            u_xlat8 = min(u_xlat8, 1.0);
            u_xlat8 = log2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGShininess;
            u_xlat8 = exp2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGScale + _RGBias;
            u_xlat16_6.xyz = vec3(u_xlat8) * _RGColor.xyz;
            u_xlat8 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat8), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb8.xyz = lessThan(vec4(u_xlat8), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb8.x = u_xlatb8.x && u_xlatb2.y;
            u_xlatb8.y = u_xlatb8.y && u_xlatb2.z;
            u_xlatb8.z = u_xlatb8.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb8.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb8.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb8.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_28 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_28 = inversesqrt(u_xlat16_28);
            u_xlat16_7.xyz = vec3(u_xlat16_28) * _WorldSpaceLightPos0.xyz;
            u_xlat16_8 = dot(u_xlat16_5.xyz, u_xlat16_7.xyz);
            u_xlat16_28 = u_xlat16_8 + 0.5;
            u_xlat16_28 = u_xlat0.x * u_xlat16_28;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_28);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_28;
#endif
            u_xlat16_28 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(u_xlat16_28);
            u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_HRRimPower);
            u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_5.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
            u_xlat16_28 = float(_HRRimIntensity);
            u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
            SV_Target0.xyz = vec3(u_xlat16_28) * u_xlat16_5.xyz + u_xlat16_6.xyz;
        } else {
            SV_Target0.xyz = u_xlat16_4.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat10_1.y * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
int u_xlati1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec3 u_xlat10_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
mediump float u_xlat16_8;
int u_xlati8;
bvec3 u_xlatb8;
float u_xlat16;
mediump float u_xlat16_16;
bvec2 u_xlatb16;
vec2 u_xlat17;
int u_xlati17;
bool u_xlatb26;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_28 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat1.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati17 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati17) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat17.xy = vec2(u_xlat16_28) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_28 = (u_xlati8 != 0) ? u_xlat17.y : u_xlat17.x;
    u_xlat16_28 = u_xlat16_28 + vs_COLOR1.x;
    u_xlat16_28 = u_xlat16_28 * 0.5 + (-_LightArea);
    u_xlat16_28 = u_xlat16_28 + 1.0;
    u_xlat16_28 = floor(u_xlat16_28);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlati8 = int(u_xlat16_28);
    u_xlat16_4.xyz = (int(u_xlati8) != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (int(u_xlati1) != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_5.xyz = vec3(u_xlat16_28) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8 = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xzw;
    u_xlat1.xzw = u_xlat1.xzw * vec3(u_xlat8) + _WorldSpaceLightPos0.xyz;
    u_xlat8 = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat3.xyz = vec3(u_xlat8) * u_xlat1.xzw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb26 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xzw = u_xlat1.xzw * vec3(u_xlat8) + (-_WorldSpaceLightPos0.xyz);
    u_xlat8 = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat16_6.xyz = u_xlat1.xzw * vec3(u_xlat8) + _CustomLightDir.xyz;
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb26)) ? u_xlat16_6.xyz : u_xlat3.xyz;
    u_xlat16_28 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = log2(u_xlat16_28);
    u_xlat16_28 = u_xlat16_28 * _Shininess;
    u_xlat16_28 = exp2(u_xlat16_28);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_28) + u_xlat16_8;
    u_xlat8 = u_xlat16_8 + 1.0;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati8) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_5.xyz);
        u_xlat8 = (-u_xlat0.x) + 1.00100005;
        u_xlat8 = max(u_xlat8, 0.00100000005);
        u_xlat8 = min(u_xlat8, 1.0);
        u_xlat8 = log2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGShininess;
        u_xlat8 = exp2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGScale + _RGBias;
        u_xlat16 = u_xlat10_0.w + 0.100000001;
        u_xlatb3 = greaterThanEqual(vec4(u_xlat16), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb1.xzw = lessThan(vec4(u_xlat16), vec4(0.600000024, 0.0, 0.400000006, 0.800000012)).xzw;
        u_xlatb1.x = u_xlatb1.x && u_xlatb3.y;
        u_xlatb1.z = u_xlatb1.z && u_xlatb3.z;
        u_xlatb1.w = u_xlatb1.w && u_xlatb3.w;
        u_xlat16_6 = (u_xlatb1.w) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb1.z) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_6 = (u_xlatb1.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_6;
        u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_28 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_28 = inversesqrt(u_xlat16_28);
        u_xlat16_6.xyz = vec3(u_xlat16_28) * _WorldSpaceLightPos0.xyz;
        u_xlat16_16 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
        u_xlat16_28 = u_xlat16_16 + 0.5;
        u_xlat16_28 = u_xlat0.x * u_xlat16_28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_28);
#else
        u_xlatb0 = u_xlat16_3.w<u_xlat16_28;
#endif
        u_xlat16_28 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(u_xlat16_28);
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_HRRimPower) + u_xlat16_4.xyz;
        u_xlat16_28 = u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
        u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_28 * _RGRatio;
        u_xlat1.xzw = vec3(u_xlat8) * _RGColor.xyz + (-u_xlat16_4.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xzw + u_xlat16_4.xyz;
        u_xlat16_28 = float(_HRRimIntensity);
        u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat16_6.xyz;
        SV_Target0.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_5.xyz);
            u_xlat8 = (-u_xlat0.x) + 1.00100005;
            u_xlat8 = max(u_xlat8, 0.00100000005);
            u_xlat8 = min(u_xlat8, 1.0);
            u_xlat8 = log2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGShininess;
            u_xlat8 = exp2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGScale + _RGBias;
            u_xlat16_6.xyz = vec3(u_xlat8) * _RGColor.xyz;
            u_xlat8 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat8), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb8.xyz = lessThan(vec4(u_xlat8), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb8.x = u_xlatb8.x && u_xlatb2.y;
            u_xlatb8.y = u_xlatb8.y && u_xlatb2.z;
            u_xlatb8.z = u_xlatb8.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb8.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb8.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb8.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_28 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_28 = inversesqrt(u_xlat16_28);
            u_xlat16_7.xyz = vec3(u_xlat16_28) * _WorldSpaceLightPos0.xyz;
            u_xlat16_8 = dot(u_xlat16_5.xyz, u_xlat16_7.xyz);
            u_xlat16_28 = u_xlat16_8 + 0.5;
            u_xlat16_28 = u_xlat0.x * u_xlat16_28;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_28);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_28;
#endif
            u_xlat16_28 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(u_xlat16_28);
            u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_HRRimPower);
            u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_5.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
            u_xlat16_28 = float(_HRRimIntensity);
            u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
            SV_Target0.xyz = vec3(u_xlat16_28) * u_xlat16_5.xyz + u_xlat16_6.xyz;
        } else {
            SV_Target0.xyz = u_xlat16_4.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat10_1.y * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
int u_xlati2;
bvec4 u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec4 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
float u_xlat11;
mediump float u_xlat16_11;
int u_xlati11;
bvec3 u_xlatb11;
mediump float u_xlat16_12;
vec2 u_xlat13;
int u_xlati13;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
bvec2 u_xlatb22;
mediump float u_xlat16_24;
lowp vec2 u_xlat10_24;
bool u_xlatb35;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_24 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_24 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_12 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat5.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat5.w = u_xlat2.x * u_xlat16_12 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat5;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat2.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat2.x = max(u_xlat2.x, 0.0);
    u_xlati2 = int(u_xlat2.x);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati13 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati13) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11 = floor(u_xlat11);
    u_xlat11 = max(u_xlat11, 0.0);
    u_xlati11 = int(u_xlat11);
    u_xlat13.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11 != 0) ? u_xlat13.y : u_xlat13.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11 = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (int(u_xlati11) != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + _WorldSpaceLightPos0.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat3.xyz = vec3(u_xlat11) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + (-_WorldSpaceLightPos0.xyz);
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat16_9.xyz = u_xlat1.xyz * vec3(u_xlat11) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb35)) ? u_xlat16_9.xyz : u_xlat3.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_11 = (-u_xlat16_40) + u_xlat16_11;
    u_xlat11 = u_xlat16_11 + 1.0;
    u_xlat11 = floor(u_xlat11);
    u_xlat11 = max(u_xlat11, 0.0);
    u_xlati11 = int(u_xlat11);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati11) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz + u_xlat16_9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_8.xyz);
        u_xlat11 = (-u_xlat0.x) + 1.00100005;
        u_xlat11 = max(u_xlat11, 0.00100000005);
        u_xlat11 = min(u_xlat11, 1.0);
        u_xlat11 = log2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGShininess;
        u_xlat11 = exp2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGScale + _RGBias;
        u_xlat22 = u_xlat10_0.w + 0.100000001;
        u_xlatb3 = greaterThanEqual(vec4(u_xlat22), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb1.xyz = lessThan(vec4(u_xlat22), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb1.x = u_xlatb1.x && u_xlatb3.y;
        u_xlatb1.y = u_xlatb1.y && u_xlatb3.z;
        u_xlatb1.z = u_xlatb1.z && u_xlatb3.w;
        u_xlat16_4 = (u_xlatb1.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_4 = (u_xlatb1.y) ? _HRRimColor2 : u_xlat16_4;
        u_xlat16_4 = (u_xlatb1.x) ? _HRRimColor3 : u_xlat16_4;
        u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_4;
        u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_40 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_40 = inversesqrt(u_xlat16_40);
        u_xlat16_9.xyz = vec3(u_xlat16_40) * _WorldSpaceLightPos0.xyz;
        u_xlat16_22 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
        u_xlat16_40 = u_xlat16_22 + 0.5;
        u_xlat16_40 = u_xlat0.x * u_xlat16_40;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_40);
#else
        u_xlatb0 = u_xlat16_3.w<u_xlat16_40;
#endif
        u_xlat16_40 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_9.xyz = u_xlat16_3.xyz * vec3(u_xlat16_40);
        u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(_HRRimPower) + u_xlat16_7.xyz;
        u_xlat16_40 = u_xlat11;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_40 = min(max(u_xlat16_40, 0.0), 1.0);
#else
        u_xlat16_40 = clamp(u_xlat16_40, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_40 * _RGRatio;
        u_xlat1.xyz = vec3(u_xlat11) * _RGColor.xyz + (-u_xlat16_7.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat16_7.xyz;
        u_xlat16_40 = float(_HRRimIntensity);
        u_xlat16_9.xyz = (-u_xlat0.xyz) + u_xlat16_9.xyz;
        SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_8.xyz);
            u_xlat11 = (-u_xlat0.x) + 1.00100005;
            u_xlat11 = max(u_xlat11, 0.00100000005);
            u_xlat11 = min(u_xlat11, 1.0);
            u_xlat11 = log2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGShininess;
            u_xlat11 = exp2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGScale + _RGBias;
            u_xlat16_9.xyz = vec3(u_xlat11) * _RGColor.xyz;
            u_xlat11 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat11), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb11.xyz = lessThan(vec4(u_xlat11), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb11.x = u_xlatb11.x && u_xlatb2.y;
            u_xlatb11.y = u_xlatb11.y && u_xlatb2.z;
            u_xlatb11.z = u_xlatb11.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb11.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb11.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb11.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_40 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_40 = inversesqrt(u_xlat16_40);
            u_xlat16_10.xyz = vec3(u_xlat16_40) * _WorldSpaceLightPos0.xyz;
            u_xlat16_11 = dot(u_xlat16_8.xyz, u_xlat16_10.xyz);
            u_xlat16_40 = u_xlat16_11 + 0.5;
            u_xlat16_40 = u_xlat0.x * u_xlat16_40;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_40);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_40;
#endif
            u_xlat16_40 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_8.xyz = u_xlat16_2.xyz * vec3(u_xlat16_40);
            u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_HRRimPower);
            u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_8.xyz = u_xlat16_7.xyz + u_xlat16_8.xyz;
            u_xlat16_9.xyz = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_9.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
            u_xlat16_40 = float(_HRRimIntensity);
            u_xlat16_8.xyz = u_xlat16_8.xyz + (-u_xlat16_9.xyz);
            SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat16_8.xyz + u_xlat16_9.xyz;
        } else {
            SV_Target0.xyz = u_xlat16_7.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
int u_xlati2;
bvec4 u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec4 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
float u_xlat11;
mediump float u_xlat16_11;
int u_xlati11;
bvec3 u_xlatb11;
mediump float u_xlat16_12;
vec2 u_xlat13;
int u_xlati13;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
bvec2 u_xlatb22;
mediump float u_xlat16_24;
lowp vec2 u_xlat10_24;
bool u_xlatb35;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_24 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_24 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_12 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat5.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat5.w = u_xlat2.x * u_xlat16_12 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat5;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat2.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat2.x = max(u_xlat2.x, 0.0);
    u_xlati2 = int(u_xlat2.x);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati13 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati13) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11 = floor(u_xlat11);
    u_xlat11 = max(u_xlat11, 0.0);
    u_xlati11 = int(u_xlat11);
    u_xlat13.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11 != 0) ? u_xlat13.y : u_xlat13.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11 = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (int(u_xlati11) != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + _WorldSpaceLightPos0.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat3.xyz = vec3(u_xlat11) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + (-_WorldSpaceLightPos0.xyz);
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat16_9.xyz = u_xlat1.xyz * vec3(u_xlat11) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb35)) ? u_xlat16_9.xyz : u_xlat3.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_11 = (-u_xlat16_40) + u_xlat16_11;
    u_xlat11 = u_xlat16_11 + 1.0;
    u_xlat11 = floor(u_xlat11);
    u_xlat11 = max(u_xlat11, 0.0);
    u_xlati11 = int(u_xlat11);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati11) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz + u_xlat16_9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_8.xyz);
        u_xlat11 = (-u_xlat0.x) + 1.00100005;
        u_xlat11 = max(u_xlat11, 0.00100000005);
        u_xlat11 = min(u_xlat11, 1.0);
        u_xlat11 = log2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGShininess;
        u_xlat11 = exp2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGScale + _RGBias;
        u_xlat22 = u_xlat10_0.w + 0.100000001;
        u_xlatb3 = greaterThanEqual(vec4(u_xlat22), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb1.xyz = lessThan(vec4(u_xlat22), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb1.x = u_xlatb1.x && u_xlatb3.y;
        u_xlatb1.y = u_xlatb1.y && u_xlatb3.z;
        u_xlatb1.z = u_xlatb1.z && u_xlatb3.w;
        u_xlat16_4 = (u_xlatb1.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_4 = (u_xlatb1.y) ? _HRRimColor2 : u_xlat16_4;
        u_xlat16_4 = (u_xlatb1.x) ? _HRRimColor3 : u_xlat16_4;
        u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_4;
        u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_40 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_40 = inversesqrt(u_xlat16_40);
        u_xlat16_9.xyz = vec3(u_xlat16_40) * _WorldSpaceLightPos0.xyz;
        u_xlat16_22 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
        u_xlat16_40 = u_xlat16_22 + 0.5;
        u_xlat16_40 = u_xlat0.x * u_xlat16_40;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_40);
#else
        u_xlatb0 = u_xlat16_3.w<u_xlat16_40;
#endif
        u_xlat16_40 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_9.xyz = u_xlat16_3.xyz * vec3(u_xlat16_40);
        u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(_HRRimPower) + u_xlat16_7.xyz;
        u_xlat16_40 = u_xlat11;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_40 = min(max(u_xlat16_40, 0.0), 1.0);
#else
        u_xlat16_40 = clamp(u_xlat16_40, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_40 * _RGRatio;
        u_xlat1.xyz = vec3(u_xlat11) * _RGColor.xyz + (-u_xlat16_7.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat16_7.xyz;
        u_xlat16_40 = float(_HRRimIntensity);
        u_xlat16_9.xyz = (-u_xlat0.xyz) + u_xlat16_9.xyz;
        SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_8.xyz);
            u_xlat11 = (-u_xlat0.x) + 1.00100005;
            u_xlat11 = max(u_xlat11, 0.00100000005);
            u_xlat11 = min(u_xlat11, 1.0);
            u_xlat11 = log2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGShininess;
            u_xlat11 = exp2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGScale + _RGBias;
            u_xlat16_9.xyz = vec3(u_xlat11) * _RGColor.xyz;
            u_xlat11 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat11), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb11.xyz = lessThan(vec4(u_xlat11), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb11.x = u_xlatb11.x && u_xlatb2.y;
            u_xlatb11.y = u_xlatb11.y && u_xlatb2.z;
            u_xlatb11.z = u_xlatb11.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb11.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb11.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb11.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_40 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_40 = inversesqrt(u_xlat16_40);
            u_xlat16_10.xyz = vec3(u_xlat16_40) * _WorldSpaceLightPos0.xyz;
            u_xlat16_11 = dot(u_xlat16_8.xyz, u_xlat16_10.xyz);
            u_xlat16_40 = u_xlat16_11 + 0.5;
            u_xlat16_40 = u_xlat0.x * u_xlat16_40;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_40);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_40;
#endif
            u_xlat16_40 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_8.xyz = u_xlat16_2.xyz * vec3(u_xlat16_40);
            u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_HRRimPower);
            u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_8.xyz = u_xlat16_7.xyz + u_xlat16_8.xyz;
            u_xlat16_9.xyz = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_9.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
            u_xlat16_40 = float(_HRRimIntensity);
            u_xlat16_8.xyz = u_xlat16_8.xyz + (-u_xlat16_9.xyz);
            SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat16_8.xyz + u_xlat16_9.xyz;
        } else {
            SV_Target0.xyz = u_xlat16_7.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
int u_xlati2;
bvec4 u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec4 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
float u_xlat11;
mediump float u_xlat16_11;
int u_xlati11;
bvec3 u_xlatb11;
mediump float u_xlat16_12;
vec2 u_xlat13;
int u_xlati13;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
bvec2 u_xlatb22;
mediump float u_xlat16_24;
lowp vec2 u_xlat10_24;
bool u_xlatb35;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_24 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_24 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_12 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat5.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat5.w = u_xlat2.x * u_xlat16_12 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat5;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat2.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat2.x = max(u_xlat2.x, 0.0);
    u_xlati2 = int(u_xlat2.x);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati13 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati13) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11 = floor(u_xlat11);
    u_xlat11 = max(u_xlat11, 0.0);
    u_xlati11 = int(u_xlat11);
    u_xlat13.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11 != 0) ? u_xlat13.y : u_xlat13.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11 = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (int(u_xlati11) != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + _WorldSpaceLightPos0.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat3.xyz = vec3(u_xlat11) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + (-_WorldSpaceLightPos0.xyz);
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat16_9.xyz = u_xlat1.xyz * vec3(u_xlat11) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb35)) ? u_xlat16_9.xyz : u_xlat3.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_11 = (-u_xlat16_40) + u_xlat16_11;
    u_xlat11 = u_xlat16_11 + 1.0;
    u_xlat11 = floor(u_xlat11);
    u_xlat11 = max(u_xlat11, 0.0);
    u_xlati11 = int(u_xlat11);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati11) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz + u_xlat16_9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_8.xyz);
        u_xlat11 = (-u_xlat0.x) + 1.00100005;
        u_xlat11 = max(u_xlat11, 0.00100000005);
        u_xlat11 = min(u_xlat11, 1.0);
        u_xlat11 = log2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGShininess;
        u_xlat11 = exp2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGScale + _RGBias;
        u_xlat22 = u_xlat10_0.w + 0.100000001;
        u_xlatb3 = greaterThanEqual(vec4(u_xlat22), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb1.xyz = lessThan(vec4(u_xlat22), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb1.x = u_xlatb1.x && u_xlatb3.y;
        u_xlatb1.y = u_xlatb1.y && u_xlatb3.z;
        u_xlatb1.z = u_xlatb1.z && u_xlatb3.w;
        u_xlat16_4 = (u_xlatb1.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_4 = (u_xlatb1.y) ? _HRRimColor2 : u_xlat16_4;
        u_xlat16_4 = (u_xlatb1.x) ? _HRRimColor3 : u_xlat16_4;
        u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_4;
        u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_40 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_40 = inversesqrt(u_xlat16_40);
        u_xlat16_9.xyz = vec3(u_xlat16_40) * _WorldSpaceLightPos0.xyz;
        u_xlat16_22 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
        u_xlat16_40 = u_xlat16_22 + 0.5;
        u_xlat16_40 = u_xlat0.x * u_xlat16_40;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_40);
#else
        u_xlatb0 = u_xlat16_3.w<u_xlat16_40;
#endif
        u_xlat16_40 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_9.xyz = u_xlat16_3.xyz * vec3(u_xlat16_40);
        u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(_HRRimPower) + u_xlat16_7.xyz;
        u_xlat16_40 = u_xlat11;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_40 = min(max(u_xlat16_40, 0.0), 1.0);
#else
        u_xlat16_40 = clamp(u_xlat16_40, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_40 * _RGRatio;
        u_xlat1.xyz = vec3(u_xlat11) * _RGColor.xyz + (-u_xlat16_7.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat16_7.xyz;
        u_xlat16_40 = float(_HRRimIntensity);
        u_xlat16_9.xyz = (-u_xlat0.xyz) + u_xlat16_9.xyz;
        SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_8.xyz);
            u_xlat11 = (-u_xlat0.x) + 1.00100005;
            u_xlat11 = max(u_xlat11, 0.00100000005);
            u_xlat11 = min(u_xlat11, 1.0);
            u_xlat11 = log2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGShininess;
            u_xlat11 = exp2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGScale + _RGBias;
            u_xlat16_9.xyz = vec3(u_xlat11) * _RGColor.xyz;
            u_xlat11 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat11), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb11.xyz = lessThan(vec4(u_xlat11), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb11.x = u_xlatb11.x && u_xlatb2.y;
            u_xlatb11.y = u_xlatb11.y && u_xlatb2.z;
            u_xlatb11.z = u_xlatb11.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb11.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb11.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb11.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_40 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_40 = inversesqrt(u_xlat16_40);
            u_xlat16_10.xyz = vec3(u_xlat16_40) * _WorldSpaceLightPos0.xyz;
            u_xlat16_11 = dot(u_xlat16_8.xyz, u_xlat16_10.xyz);
            u_xlat16_40 = u_xlat16_11 + 0.5;
            u_xlat16_40 = u_xlat0.x * u_xlat16_40;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_40);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_40;
#endif
            u_xlat16_40 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_8.xyz = u_xlat16_2.xyz * vec3(u_xlat16_40);
            u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_HRRimPower);
            u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_8.xyz = u_xlat16_7.xyz + u_xlat16_8.xyz;
            u_xlat16_9.xyz = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_9.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
            u_xlat16_40 = float(_HRRimIntensity);
            u_xlat16_8.xyz = u_xlat16_8.xyz + (-u_xlat16_9.xyz);
            SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat16_8.xyz + u_xlat16_9.xyz;
        } else {
            SV_Target0.xyz = u_xlat16_7.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
ivec3 u_xlati7;
mediump vec3 u_xlat16_9;
float u_xlat14;
mediump float u_xlat16_14;
int u_xlati14;
bvec2 u_xlatb14;
float u_xlat21;
float u_xlat22;
mediump float u_xlat16_23;
bool u_xlatb24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_9.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_9.x = u_xlat16_9.x * 0.5 + (-_SecondShadow);
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = floor(u_xlat16_9.x);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlati3 = int(u_xlat16_9.x);
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_9.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati7.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati7.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_4.xyz = vec3(u_xlat16_23) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat1.xyz * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = vec3(u_xlat21) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + (-_WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat21) + _CustomLightDir.xyz;
    u_xlat16_23 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb24)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_23 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = log2(u_xlat16_23);
    u_xlat16_23 = u_xlat16_23 * _Shininess;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_14 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_14 = (-u_xlat16_23) + u_xlat16_14;
    u_xlat14 = u_xlat16_14 + 1.0;
    u_xlat14 = floor(u_xlat14);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlati14 = int(u_xlat14);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati14) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
    u_xlat16_2.w = u_xlat10_1.w * vs_COLOR1.y;
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat22 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat22 = u_xlat22 * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xyz * u_xlat7.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat21)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_4.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat21 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat21) * vec2(1.70000005, 1.5) + (-vec2(u_xlat22));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat21 = u_xlat21 * 1.70000005 + (-u_xlat22);
    u_xlat21 = u_xlat21 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat21 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_4.xyz = (u_xlati1.x != 0) ? u_xlat16_4.xyz : u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat21) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
ivec3 u_xlati7;
mediump vec3 u_xlat16_9;
float u_xlat14;
mediump float u_xlat16_14;
int u_xlati14;
bvec2 u_xlatb14;
float u_xlat21;
float u_xlat22;
mediump float u_xlat16_23;
bool u_xlatb24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_9.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_9.x = u_xlat16_9.x * 0.5 + (-_SecondShadow);
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = floor(u_xlat16_9.x);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlati3 = int(u_xlat16_9.x);
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_9.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati7.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati7.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_4.xyz = vec3(u_xlat16_23) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat1.xyz * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = vec3(u_xlat21) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + (-_WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat21) + _CustomLightDir.xyz;
    u_xlat16_23 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb24)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_23 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = log2(u_xlat16_23);
    u_xlat16_23 = u_xlat16_23 * _Shininess;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_14 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_14 = (-u_xlat16_23) + u_xlat16_14;
    u_xlat14 = u_xlat16_14 + 1.0;
    u_xlat14 = floor(u_xlat14);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlati14 = int(u_xlat14);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati14) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
    u_xlat16_2.w = u_xlat10_1.w * vs_COLOR1.y;
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat22 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat22 = u_xlat22 * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xyz * u_xlat7.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat21)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_4.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat21 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat21) * vec2(1.70000005, 1.5) + (-vec2(u_xlat22));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat21 = u_xlat21 * 1.70000005 + (-u_xlat22);
    u_xlat21 = u_xlat21 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat21 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_4.xyz = (u_xlati1.x != 0) ? u_xlat16_4.xyz : u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat21) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
ivec3 u_xlati7;
mediump vec3 u_xlat16_9;
float u_xlat14;
mediump float u_xlat16_14;
int u_xlati14;
bvec2 u_xlatb14;
float u_xlat21;
float u_xlat22;
mediump float u_xlat16_23;
bool u_xlatb24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_9.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_9.x = u_xlat16_9.x * 0.5 + (-_SecondShadow);
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = floor(u_xlat16_9.x);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlati3 = int(u_xlat16_9.x);
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_9.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati7.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati7.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_4.xyz = vec3(u_xlat16_23) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat1.xyz * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = vec3(u_xlat21) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + (-_WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat21) + _CustomLightDir.xyz;
    u_xlat16_23 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb24)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_23 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = log2(u_xlat16_23);
    u_xlat16_23 = u_xlat16_23 * _Shininess;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_14 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_14 = (-u_xlat16_23) + u_xlat16_14;
    u_xlat14 = u_xlat16_14 + 1.0;
    u_xlat14 = floor(u_xlat14);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlati14 = int(u_xlat14);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati14) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
    u_xlat16_2.w = u_xlat10_1.w * vs_COLOR1.y;
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat22 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat22 = u_xlat22 * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xyz * u_xlat7.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat21)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_4.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat21 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat21) * vec2(1.70000005, 1.5) + (-vec2(u_xlat22));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat21 = u_xlat21 * 1.70000005 + (-u_xlat22);
    u_xlat21 = u_xlat21 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat21 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_4.xyz = (u_xlati1.x != 0) ? u_xlat16_4.xyz : u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat21) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
ivec3 u_xlati7;
mediump vec3 u_xlat16_9;
float u_xlat14;
mediump float u_xlat16_14;
int u_xlati14;
bvec2 u_xlatb14;
float u_xlat21;
float u_xlat22;
mediump float u_xlat16_23;
bool u_xlatb24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_9.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_9.x = u_xlat16_9.x * 0.5 + (-_SecondShadow);
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = floor(u_xlat16_9.x);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlati3 = int(u_xlat16_9.x);
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_9.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati7.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati7.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_4.xyz = vec3(u_xlat16_23) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat1.xyz * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = vec3(u_xlat21) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + (-_WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat21) + _CustomLightDir.xyz;
    u_xlat16_23 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb24)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_23 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = log2(u_xlat16_23);
    u_xlat16_23 = u_xlat16_23 * _Shininess;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_14 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_14 = (-u_xlat16_23) + u_xlat16_14;
    u_xlat14 = u_xlat16_14 + 1.0;
    u_xlat14 = floor(u_xlat14);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlati14 = int(u_xlat14);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati14) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
    u_xlat16_2.w = u_xlat10_1.w * vs_COLOR1.y;
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat22 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat22 = u_xlat22 * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xyz * u_xlat7.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat21)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_4.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat21 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat21) * vec2(1.70000005, 1.5) + (-vec2(u_xlat22));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat21 = u_xlat21 * 1.70000005 + (-u_xlat22);
    u_xlat21 = u_xlat21 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat21 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_4.xyz = (u_xlati1.x != 0) ? u_xlat16_4.xyz : u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat21) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
ivec3 u_xlati7;
mediump vec3 u_xlat16_9;
float u_xlat14;
mediump float u_xlat16_14;
int u_xlati14;
bvec2 u_xlatb14;
float u_xlat21;
float u_xlat22;
mediump float u_xlat16_23;
bool u_xlatb24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_9.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_9.x = u_xlat16_9.x * 0.5 + (-_SecondShadow);
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = floor(u_xlat16_9.x);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlati3 = int(u_xlat16_9.x);
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_9.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati7.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati7.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_4.xyz = vec3(u_xlat16_23) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat1.xyz * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = vec3(u_xlat21) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + (-_WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat21) + _CustomLightDir.xyz;
    u_xlat16_23 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb24)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_23 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = log2(u_xlat16_23);
    u_xlat16_23 = u_xlat16_23 * _Shininess;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_14 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_14 = (-u_xlat16_23) + u_xlat16_14;
    u_xlat14 = u_xlat16_14 + 1.0;
    u_xlat14 = floor(u_xlat14);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlati14 = int(u_xlat14);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati14) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
    u_xlat16_2.w = u_xlat10_1.w * vs_COLOR1.y;
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat22 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat22 = u_xlat22 * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xyz * u_xlat7.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat21)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_4.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat21 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat21) * vec2(1.70000005, 1.5) + (-vec2(u_xlat22));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat21 = u_xlat21 * 1.70000005 + (-u_xlat22);
    u_xlat21 = u_xlat21 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat21 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_4.xyz = (u_xlati1.x != 0) ? u_xlat16_4.xyz : u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat21) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
ivec3 u_xlati7;
mediump vec3 u_xlat16_9;
float u_xlat14;
mediump float u_xlat16_14;
int u_xlati14;
bvec2 u_xlatb14;
float u_xlat21;
float u_xlat22;
mediump float u_xlat16_23;
bool u_xlatb24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_9.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_9.x = u_xlat16_9.x * 0.5 + (-_SecondShadow);
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = floor(u_xlat16_9.x);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlati3 = int(u_xlat16_9.x);
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_9.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati7.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati7.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_4.xyz = vec3(u_xlat16_23) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat1.xyz * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = vec3(u_xlat21) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + (-_WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat21) + _CustomLightDir.xyz;
    u_xlat16_23 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb24)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_23 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = log2(u_xlat16_23);
    u_xlat16_23 = u_xlat16_23 * _Shininess;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_14 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_14 = (-u_xlat16_23) + u_xlat16_14;
    u_xlat14 = u_xlat16_14 + 1.0;
    u_xlat14 = floor(u_xlat14);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlati14 = int(u_xlat14);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati14) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
    u_xlat16_2.w = u_xlat10_1.w * vs_COLOR1.y;
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat22 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat22 = u_xlat22 * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xyz * u_xlat7.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat21)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_4.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat21 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat21) * vec2(1.70000005, 1.5) + (-vec2(u_xlat22));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat21 = u_xlat21 * 1.70000005 + (-u_xlat22);
    u_xlat21 = u_xlat21 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat21 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_4.xyz = (u_xlati1.x != 0) ? u_xlat16_4.xyz : u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat21) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
ivec3 u_xlati1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
ivec3 u_xlati7;
float u_xlat8;
float u_xlat14;
mediump float u_xlat16_14;
int u_xlati14;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb23;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_25 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1.x = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat1.xz = vec2(u_xlat16_25) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_25 = (u_xlati7.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_25 = u_xlat16_25 + vs_COLOR1.x;
    u_xlat16_25 = u_xlat16_25 * 0.5 + (-_LightArea);
    u_xlat16_25 = u_xlat16_25 + 1.0;
    u_xlat16_25 = floor(u_xlat16_25);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlati7.x = int(u_xlat16_25);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat2.xyz = u_xlat1.xzw * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb23 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat21) + (-_WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat2.xyz * vec3(u_xlat21) + _CustomLightDir.xyz;
    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb23)) ? u_xlat16_6.xyz : u_xlat3.xyz;
    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_25 = log2(u_xlat16_25);
    u_xlat16_25 = u_xlat16_25 * _Shininess;
    u_xlat16_25 = exp2(u_xlat16_25);
    u_xlat16_14 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_14 = (-u_xlat16_25) + u_xlat16_14;
    u_xlat14 = u_xlat16_14 + 1.0;
    u_xlat14 = floor(u_xlat14);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlati14 = int(u_xlat14);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati14) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_4.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
    u_xlat16_2.w = u_xlat10_1.y * vs_COLOR1.y;
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_4.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat8 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat8 = u_xlat8 * 1.99000001 + -1.0;
    u_xlat1.xzw = u_xlat1.xzw * u_xlat7.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xzw * u_xlat7.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat16_5.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat0.xyz = u_xlat16_5.xyz * (-vec3(u_xlat21)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_5.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_5.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_5.xyz;
    u_xlat21 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xz = vec2(u_xlat21) * vec2(1.70000005, 1.5) + (-vec2(u_xlat8));
    u_xlat1.xz = u_xlat1.xz + vec2(1.0, 1.0);
    u_xlat1.xz = floor(u_xlat1.xz);
    u_xlat1.xz = max(u_xlat1.xz, vec2(0.0, 0.0));
    u_xlati1.xz = ivec2(u_xlat1.xz);
    u_xlat21 = u_xlat21 * 1.70000005 + (-u_xlat8);
    u_xlat21 = u_xlat21 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_5.xyz = (u_xlati1.z != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat21 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_5.xyz : u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_4;
    u_xlat0 = vec4(u_xlat21) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
ivec3 u_xlati1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
ivec3 u_xlati7;
float u_xlat8;
float u_xlat14;
mediump float u_xlat16_14;
int u_xlati14;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb23;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_25 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1.x = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat1.xz = vec2(u_xlat16_25) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_25 = (u_xlati7.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_25 = u_xlat16_25 + vs_COLOR1.x;
    u_xlat16_25 = u_xlat16_25 * 0.5 + (-_LightArea);
    u_xlat16_25 = u_xlat16_25 + 1.0;
    u_xlat16_25 = floor(u_xlat16_25);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlati7.x = int(u_xlat16_25);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat2.xyz = u_xlat1.xzw * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb23 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat21) + (-_WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat2.xyz * vec3(u_xlat21) + _CustomLightDir.xyz;
    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb23)) ? u_xlat16_6.xyz : u_xlat3.xyz;
    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_25 = log2(u_xlat16_25);
    u_xlat16_25 = u_xlat16_25 * _Shininess;
    u_xlat16_25 = exp2(u_xlat16_25);
    u_xlat16_14 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_14 = (-u_xlat16_25) + u_xlat16_14;
    u_xlat14 = u_xlat16_14 + 1.0;
    u_xlat14 = floor(u_xlat14);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlati14 = int(u_xlat14);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati14) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_4.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
    u_xlat16_2.w = u_xlat10_1.y * vs_COLOR1.y;
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_4.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat8 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat8 = u_xlat8 * 1.99000001 + -1.0;
    u_xlat1.xzw = u_xlat1.xzw * u_xlat7.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xzw * u_xlat7.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat16_5.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat0.xyz = u_xlat16_5.xyz * (-vec3(u_xlat21)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_5.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_5.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_5.xyz;
    u_xlat21 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xz = vec2(u_xlat21) * vec2(1.70000005, 1.5) + (-vec2(u_xlat8));
    u_xlat1.xz = u_xlat1.xz + vec2(1.0, 1.0);
    u_xlat1.xz = floor(u_xlat1.xz);
    u_xlat1.xz = max(u_xlat1.xz, vec2(0.0, 0.0));
    u_xlati1.xz = ivec2(u_xlat1.xz);
    u_xlat21 = u_xlat21 * 1.70000005 + (-u_xlat8);
    u_xlat21 = u_xlat21 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_5.xyz = (u_xlati1.z != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat21 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_5.xyz : u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_4;
    u_xlat0 = vec4(u_xlat21) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
ivec3 u_xlati1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
ivec3 u_xlati7;
float u_xlat8;
float u_xlat14;
mediump float u_xlat16_14;
int u_xlati14;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb23;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_25 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1.x = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat1.xz = vec2(u_xlat16_25) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_25 = (u_xlati7.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_25 = u_xlat16_25 + vs_COLOR1.x;
    u_xlat16_25 = u_xlat16_25 * 0.5 + (-_LightArea);
    u_xlat16_25 = u_xlat16_25 + 1.0;
    u_xlat16_25 = floor(u_xlat16_25);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlati7.x = int(u_xlat16_25);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat2.xyz = u_xlat1.xzw * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb23 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat21) + (-_WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat2.xyz * vec3(u_xlat21) + _CustomLightDir.xyz;
    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb23)) ? u_xlat16_6.xyz : u_xlat3.xyz;
    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_25 = log2(u_xlat16_25);
    u_xlat16_25 = u_xlat16_25 * _Shininess;
    u_xlat16_25 = exp2(u_xlat16_25);
    u_xlat16_14 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_14 = (-u_xlat16_25) + u_xlat16_14;
    u_xlat14 = u_xlat16_14 + 1.0;
    u_xlat14 = floor(u_xlat14);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlati14 = int(u_xlat14);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati14) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_4.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
    u_xlat16_2.w = u_xlat10_1.y * vs_COLOR1.y;
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_4.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat8 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat8 = u_xlat8 * 1.99000001 + -1.0;
    u_xlat1.xzw = u_xlat1.xzw * u_xlat7.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xzw * u_xlat7.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat16_5.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat0.xyz = u_xlat16_5.xyz * (-vec3(u_xlat21)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_5.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_5.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_5.xyz;
    u_xlat21 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xz = vec2(u_xlat21) * vec2(1.70000005, 1.5) + (-vec2(u_xlat8));
    u_xlat1.xz = u_xlat1.xz + vec2(1.0, 1.0);
    u_xlat1.xz = floor(u_xlat1.xz);
    u_xlat1.xz = max(u_xlat1.xz, vec2(0.0, 0.0));
    u_xlati1.xz = ivec2(u_xlat1.xz);
    u_xlat21 = u_xlat21 * 1.70000005 + (-u_xlat8);
    u_xlat21 = u_xlat21 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_5.xyz = (u_xlati1.z != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat21 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_5.xyz : u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_4;
    u_xlat0 = vec4(u_xlat21) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
ivec2 u_xlati1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
bvec2 u_xlatb22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
bool u_xlatb35;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat2.xyz = u_xlat1.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_9.xyz = u_xlat2.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb35)) ? u_xlat16_9.xyz : u_xlat3.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_40) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_7.xyz * _EnvColor.xyz + u_xlat16_9.xyz;
    u_xlat16_2.w = u_xlat1.w * vs_COLOR1.y;
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_4.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat34 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat34 = u_xlat34 * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat11.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xyz * u_xlat11.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat16_8.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat16_8.xyz * (-vec3(u_xlat33)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat33 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat33) * vec2(1.70000005, 1.5) + (-vec2(u_xlat34));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat33 = u_xlat33 * 1.70000005 + (-u_xlat34);
    u_xlat33 = u_xlat33 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_7.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat33 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati1.x != 0) ? u_xlat16_7.xyz : u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_4;
    u_xlat0 = vec4(u_xlat33) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
ivec2 u_xlati1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
bvec2 u_xlatb22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
bool u_xlatb35;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat2.xyz = u_xlat1.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_9.xyz = u_xlat2.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb35)) ? u_xlat16_9.xyz : u_xlat3.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_40) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_7.xyz * _EnvColor.xyz + u_xlat16_9.xyz;
    u_xlat16_2.w = u_xlat1.w * vs_COLOR1.y;
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_4.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat34 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat34 = u_xlat34 * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat11.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xyz * u_xlat11.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat16_8.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat16_8.xyz * (-vec3(u_xlat33)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat33 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat33) * vec2(1.70000005, 1.5) + (-vec2(u_xlat34));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat33 = u_xlat33 * 1.70000005 + (-u_xlat34);
    u_xlat33 = u_xlat33 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_7.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat33 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati1.x != 0) ? u_xlat16_7.xyz : u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_4;
    u_xlat0 = vec4(u_xlat33) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
ivec2 u_xlati1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
bvec2 u_xlatb22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
bool u_xlatb35;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat2.xyz = u_xlat1.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_9.xyz = u_xlat2.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb35)) ? u_xlat16_9.xyz : u_xlat3.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_40) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_7.xyz * _EnvColor.xyz + u_xlat16_9.xyz;
    u_xlat16_2.w = u_xlat1.w * vs_COLOR1.y;
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_4.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat34 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat34 = u_xlat34 * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat11.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xyz * u_xlat11.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat16_8.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat16_8.xyz * (-vec3(u_xlat33)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat33 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat33) * vec2(1.70000005, 1.5) + (-vec2(u_xlat34));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat33 = u_xlat33 * 1.70000005 + (-u_xlat34);
    u_xlat33 = u_xlat33 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_7.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat33 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati1.x != 0) ? u_xlat16_7.xyz : u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_4;
    u_xlat0 = vec4(u_xlat33) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
ivec2 u_xlati5;
bvec3 u_xlatb5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
lowp vec3 u_xlat10_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_10;
int u_xlati10;
bvec3 u_xlatb10;
mediump vec3 u_xlat16_12;
vec2 u_xlat13;
int u_xlati13;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
bvec2 u_xlatb20;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_34;
bool u_xlatb35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat3.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
    u_xlat16_12.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_12.x = u_xlat16_12.x * 0.5 + (-_SecondShadow);
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = floor(u_xlat16_12.x);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlati13 = int(u_xlat16_12.x);
    u_xlat16_12.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_12.xyz = (int(u_xlati13) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat10 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10 = floor(u_xlat10);
    u_xlat10 = max(u_xlat10, 0.0);
    u_xlati10 = int(u_xlat10);
    u_xlat13.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati10 != 0) ? u_xlat13.y : u_xlat13.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati10 = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (int(u_xlati10) != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_4.xyz = vec3(u_xlat16_32) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat3.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat5.xyz = u_xlat1.xyz * vec3(u_xlat10) + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_32 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_7.xyz = vec3(u_xlat16_32) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb35)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_32 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_32 = max(u_xlat16_32, 0.0);
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat16_32 = u_xlat16_32 * _Shininess;
    u_xlat16_32 = exp2(u_xlat16_32);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_7.xyz;
    u_xlat16_2.w = u_xlat10_1.w * vs_COLOR1.y;
    u_xlat10_5 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_5.w * _SPOpaqueness;
    u_xlat10_8.xyz = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat0.x = u_xlat10_8.x * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + (-_WorldSpaceCameraPos.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat8.xyz = u_xlat10_8.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat8.xyz;
    u_xlat1.xyz = u_xlat1.xyz + _SPCubeMapOffset.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat16_4.xyz);
    u_xlat10 = u_xlat10 + u_xlat10;
    u_xlat1.xyz = u_xlat16_4.xyz * (-vec3(u_xlat10)) + u_xlat1.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_7.xyz;
    u_xlat10 = _SPNoiseScaler * _SPTransition;
    u_xlat5.xy = vec2(u_xlat10) * vec2(1.70000005, 1.5) + (-u_xlat0.xx);
    u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
    u_xlat5.xy = floor(u_xlat5.xy);
    u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
    u_xlati5.xy = ivec2(u_xlat5.xy);
    u_xlat0.x = u_xlat10 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat8.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz + u_xlat1.xyz;
    u_xlat16_7.xyz = (u_xlati5.y != 0) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat0.x = (u_xlati5.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati5.x != 0) ? u_xlat16_7.xyz : u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_6;
    u_xlat1 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_2;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
        u_xlat10 = (-u_xlat0.x) + 1.00100005;
        u_xlat10 = max(u_xlat10, 0.00100000005);
        u_xlat10 = min(u_xlat10, 1.0);
        u_xlat10 = log2(u_xlat10);
        u_xlat10 = u_xlat10 * _RGShininess;
        u_xlat10 = exp2(u_xlat10);
        u_xlat10 = u_xlat10 * _RGScale + _RGBias;
        u_xlat20 = u_xlat10_0.w + 0.100000001;
        u_xlatb2 = greaterThanEqual(vec4(u_xlat20), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb5.xyz = lessThan(vec4(u_xlat20), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb5.x = u_xlatb2.y && u_xlatb5.x;
        u_xlatb5.y = u_xlatb2.z && u_xlatb5.y;
        u_xlatb5.z = u_xlatb2.w && u_xlatb5.z;
        u_xlat16_6 = (u_xlatb5.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb5.y) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_5 = (u_xlatb5.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_5;
        u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_34 = inversesqrt(u_xlat16_34);
        u_xlat16_7.xyz = vec3(u_xlat16_34) * _WorldSpaceLightPos0.xyz;
        u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
        u_xlat16_34 = u_xlat16_20 + 0.5;
        u_xlat16_34 = u_xlat0.x * u_xlat16_34;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_34);
#else
        u_xlatb0 = u_xlat16_2.w<u_xlat16_34;
#endif
        u_xlat16_34 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_7.xyz = u_xlat16_2.xyz * vec3(u_xlat16_34);
        u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_HRRimPower) + u_xlat1.xyz;
        u_xlat16_34 = u_xlat10;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
        u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_34 * _RGRatio;
        u_xlat8.xyz = vec3(u_xlat10) * _RGColor.xyz + (-u_xlat1.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz + u_xlat1.xyz;
        u_xlat16_34 = float(_HRRimIntensity);
        u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat16_7.xyz;
        SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat16_7.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
            u_xlat10 = (-u_xlat0.x) + 1.00100005;
            u_xlat10 = max(u_xlat10, 0.00100000005);
            u_xlat10 = min(u_xlat10, 1.0);
            u_xlat10 = log2(u_xlat10);
            u_xlat10 = u_xlat10 * _RGShininess;
            u_xlat10 = exp2(u_xlat10);
            u_xlat10 = u_xlat10 * _RGScale + _RGBias;
            u_xlat16_7.xyz = vec3(u_xlat10) * _RGColor.xyz;
            u_xlat10 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat10), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb10.xyz = lessThan(vec4(u_xlat10), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb10.x = u_xlatb10.x && u_xlatb2.y;
            u_xlatb10.y = u_xlatb10.y && u_xlatb2.z;
            u_xlatb10.z = u_xlatb10.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb10.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb10.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb10.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_34 = inversesqrt(u_xlat16_34);
            u_xlat16_9.xyz = vec3(u_xlat16_34) * _WorldSpaceLightPos0.xyz;
            u_xlat16_10 = dot(u_xlat16_4.xyz, u_xlat16_9.xyz);
            u_xlat16_4.x = u_xlat16_10 + 0.5;
            u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_4.x);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_4.x;
#endif
            u_xlat16_4.x = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_HRRimPower);
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_4.xyz = u_xlat1.xyz + u_xlat16_4.xyz;
            u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_7.xyz = u_xlat1.xyz + u_xlat16_7.xyz;
            u_xlat16_34 = float(_HRRimIntensity);
            u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_7.xyz);
            SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz + u_xlat16_7.xyz;
        } else {
            SV_Target0.xyz = u_xlat1.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
ivec2 u_xlati5;
bvec3 u_xlatb5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
lowp vec3 u_xlat10_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_10;
int u_xlati10;
bvec3 u_xlatb10;
mediump vec3 u_xlat16_12;
vec2 u_xlat13;
int u_xlati13;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
bvec2 u_xlatb20;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_34;
bool u_xlatb35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat3.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
    u_xlat16_12.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_12.x = u_xlat16_12.x * 0.5 + (-_SecondShadow);
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = floor(u_xlat16_12.x);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlati13 = int(u_xlat16_12.x);
    u_xlat16_12.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_12.xyz = (int(u_xlati13) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat10 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10 = floor(u_xlat10);
    u_xlat10 = max(u_xlat10, 0.0);
    u_xlati10 = int(u_xlat10);
    u_xlat13.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati10 != 0) ? u_xlat13.y : u_xlat13.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati10 = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (int(u_xlati10) != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_4.xyz = vec3(u_xlat16_32) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat3.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat5.xyz = u_xlat1.xyz * vec3(u_xlat10) + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_32 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_7.xyz = vec3(u_xlat16_32) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb35)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_32 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_32 = max(u_xlat16_32, 0.0);
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat16_32 = u_xlat16_32 * _Shininess;
    u_xlat16_32 = exp2(u_xlat16_32);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_7.xyz;
    u_xlat16_2.w = u_xlat10_1.w * vs_COLOR1.y;
    u_xlat10_5 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_5.w * _SPOpaqueness;
    u_xlat10_8.xyz = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat0.x = u_xlat10_8.x * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + (-_WorldSpaceCameraPos.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat8.xyz = u_xlat10_8.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat8.xyz;
    u_xlat1.xyz = u_xlat1.xyz + _SPCubeMapOffset.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat16_4.xyz);
    u_xlat10 = u_xlat10 + u_xlat10;
    u_xlat1.xyz = u_xlat16_4.xyz * (-vec3(u_xlat10)) + u_xlat1.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_7.xyz;
    u_xlat10 = _SPNoiseScaler * _SPTransition;
    u_xlat5.xy = vec2(u_xlat10) * vec2(1.70000005, 1.5) + (-u_xlat0.xx);
    u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
    u_xlat5.xy = floor(u_xlat5.xy);
    u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
    u_xlati5.xy = ivec2(u_xlat5.xy);
    u_xlat0.x = u_xlat10 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat8.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz + u_xlat1.xyz;
    u_xlat16_7.xyz = (u_xlati5.y != 0) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat0.x = (u_xlati5.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati5.x != 0) ? u_xlat16_7.xyz : u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_6;
    u_xlat1 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_2;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
        u_xlat10 = (-u_xlat0.x) + 1.00100005;
        u_xlat10 = max(u_xlat10, 0.00100000005);
        u_xlat10 = min(u_xlat10, 1.0);
        u_xlat10 = log2(u_xlat10);
        u_xlat10 = u_xlat10 * _RGShininess;
        u_xlat10 = exp2(u_xlat10);
        u_xlat10 = u_xlat10 * _RGScale + _RGBias;
        u_xlat20 = u_xlat10_0.w + 0.100000001;
        u_xlatb2 = greaterThanEqual(vec4(u_xlat20), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb5.xyz = lessThan(vec4(u_xlat20), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb5.x = u_xlatb2.y && u_xlatb5.x;
        u_xlatb5.y = u_xlatb2.z && u_xlatb5.y;
        u_xlatb5.z = u_xlatb2.w && u_xlatb5.z;
        u_xlat16_6 = (u_xlatb5.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb5.y) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_5 = (u_xlatb5.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_5;
        u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_34 = inversesqrt(u_xlat16_34);
        u_xlat16_7.xyz = vec3(u_xlat16_34) * _WorldSpaceLightPos0.xyz;
        u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
        u_xlat16_34 = u_xlat16_20 + 0.5;
        u_xlat16_34 = u_xlat0.x * u_xlat16_34;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_34);
#else
        u_xlatb0 = u_xlat16_2.w<u_xlat16_34;
#endif
        u_xlat16_34 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_7.xyz = u_xlat16_2.xyz * vec3(u_xlat16_34);
        u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_HRRimPower) + u_xlat1.xyz;
        u_xlat16_34 = u_xlat10;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
        u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_34 * _RGRatio;
        u_xlat8.xyz = vec3(u_xlat10) * _RGColor.xyz + (-u_xlat1.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz + u_xlat1.xyz;
        u_xlat16_34 = float(_HRRimIntensity);
        u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat16_7.xyz;
        SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat16_7.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
            u_xlat10 = (-u_xlat0.x) + 1.00100005;
            u_xlat10 = max(u_xlat10, 0.00100000005);
            u_xlat10 = min(u_xlat10, 1.0);
            u_xlat10 = log2(u_xlat10);
            u_xlat10 = u_xlat10 * _RGShininess;
            u_xlat10 = exp2(u_xlat10);
            u_xlat10 = u_xlat10 * _RGScale + _RGBias;
            u_xlat16_7.xyz = vec3(u_xlat10) * _RGColor.xyz;
            u_xlat10 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat10), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb10.xyz = lessThan(vec4(u_xlat10), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb10.x = u_xlatb10.x && u_xlatb2.y;
            u_xlatb10.y = u_xlatb10.y && u_xlatb2.z;
            u_xlatb10.z = u_xlatb10.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb10.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb10.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb10.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_34 = inversesqrt(u_xlat16_34);
            u_xlat16_9.xyz = vec3(u_xlat16_34) * _WorldSpaceLightPos0.xyz;
            u_xlat16_10 = dot(u_xlat16_4.xyz, u_xlat16_9.xyz);
            u_xlat16_4.x = u_xlat16_10 + 0.5;
            u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_4.x);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_4.x;
#endif
            u_xlat16_4.x = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_HRRimPower);
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_4.xyz = u_xlat1.xyz + u_xlat16_4.xyz;
            u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_7.xyz = u_xlat1.xyz + u_xlat16_7.xyz;
            u_xlat16_34 = float(_HRRimIntensity);
            u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_7.xyz);
            SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz + u_xlat16_7.xyz;
        } else {
            SV_Target0.xyz = u_xlat1.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
ivec2 u_xlati5;
bvec3 u_xlatb5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
lowp vec3 u_xlat10_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_10;
int u_xlati10;
bvec3 u_xlatb10;
mediump vec3 u_xlat16_12;
vec2 u_xlat13;
int u_xlati13;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
bvec2 u_xlatb20;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_34;
bool u_xlatb35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat3.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
    u_xlat16_12.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_12.x = u_xlat16_12.x * 0.5 + (-_SecondShadow);
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = floor(u_xlat16_12.x);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlati13 = int(u_xlat16_12.x);
    u_xlat16_12.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_12.xyz = (int(u_xlati13) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat10 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10 = floor(u_xlat10);
    u_xlat10 = max(u_xlat10, 0.0);
    u_xlati10 = int(u_xlat10);
    u_xlat13.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati10 != 0) ? u_xlat13.y : u_xlat13.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati10 = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (int(u_xlati10) != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_4.xyz = vec3(u_xlat16_32) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat3.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat5.xyz = u_xlat1.xyz * vec3(u_xlat10) + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_32 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_7.xyz = vec3(u_xlat16_32) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb35)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_32 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_32 = max(u_xlat16_32, 0.0);
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat16_32 = u_xlat16_32 * _Shininess;
    u_xlat16_32 = exp2(u_xlat16_32);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_7.xyz;
    u_xlat16_2.w = u_xlat10_1.w * vs_COLOR1.y;
    u_xlat10_5 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_5.w * _SPOpaqueness;
    u_xlat10_8.xyz = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat0.x = u_xlat10_8.x * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + (-_WorldSpaceCameraPos.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat8.xyz = u_xlat10_8.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat8.xyz;
    u_xlat1.xyz = u_xlat1.xyz + _SPCubeMapOffset.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat16_4.xyz);
    u_xlat10 = u_xlat10 + u_xlat10;
    u_xlat1.xyz = u_xlat16_4.xyz * (-vec3(u_xlat10)) + u_xlat1.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_7.xyz;
    u_xlat10 = _SPNoiseScaler * _SPTransition;
    u_xlat5.xy = vec2(u_xlat10) * vec2(1.70000005, 1.5) + (-u_xlat0.xx);
    u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
    u_xlat5.xy = floor(u_xlat5.xy);
    u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
    u_xlati5.xy = ivec2(u_xlat5.xy);
    u_xlat0.x = u_xlat10 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat8.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz + u_xlat1.xyz;
    u_xlat16_7.xyz = (u_xlati5.y != 0) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat0.x = (u_xlati5.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati5.x != 0) ? u_xlat16_7.xyz : u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_6;
    u_xlat1 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_2;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
        u_xlat10 = (-u_xlat0.x) + 1.00100005;
        u_xlat10 = max(u_xlat10, 0.00100000005);
        u_xlat10 = min(u_xlat10, 1.0);
        u_xlat10 = log2(u_xlat10);
        u_xlat10 = u_xlat10 * _RGShininess;
        u_xlat10 = exp2(u_xlat10);
        u_xlat10 = u_xlat10 * _RGScale + _RGBias;
        u_xlat20 = u_xlat10_0.w + 0.100000001;
        u_xlatb2 = greaterThanEqual(vec4(u_xlat20), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb5.xyz = lessThan(vec4(u_xlat20), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb5.x = u_xlatb2.y && u_xlatb5.x;
        u_xlatb5.y = u_xlatb2.z && u_xlatb5.y;
        u_xlatb5.z = u_xlatb2.w && u_xlatb5.z;
        u_xlat16_6 = (u_xlatb5.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb5.y) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_5 = (u_xlatb5.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_5;
        u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_34 = inversesqrt(u_xlat16_34);
        u_xlat16_7.xyz = vec3(u_xlat16_34) * _WorldSpaceLightPos0.xyz;
        u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
        u_xlat16_34 = u_xlat16_20 + 0.5;
        u_xlat16_34 = u_xlat0.x * u_xlat16_34;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_34);
#else
        u_xlatb0 = u_xlat16_2.w<u_xlat16_34;
#endif
        u_xlat16_34 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_7.xyz = u_xlat16_2.xyz * vec3(u_xlat16_34);
        u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_HRRimPower) + u_xlat1.xyz;
        u_xlat16_34 = u_xlat10;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
        u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_34 * _RGRatio;
        u_xlat8.xyz = vec3(u_xlat10) * _RGColor.xyz + (-u_xlat1.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz + u_xlat1.xyz;
        u_xlat16_34 = float(_HRRimIntensity);
        u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat16_7.xyz;
        SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat16_7.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
            u_xlat10 = (-u_xlat0.x) + 1.00100005;
            u_xlat10 = max(u_xlat10, 0.00100000005);
            u_xlat10 = min(u_xlat10, 1.0);
            u_xlat10 = log2(u_xlat10);
            u_xlat10 = u_xlat10 * _RGShininess;
            u_xlat10 = exp2(u_xlat10);
            u_xlat10 = u_xlat10 * _RGScale + _RGBias;
            u_xlat16_7.xyz = vec3(u_xlat10) * _RGColor.xyz;
            u_xlat10 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat10), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb10.xyz = lessThan(vec4(u_xlat10), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb10.x = u_xlatb10.x && u_xlatb2.y;
            u_xlatb10.y = u_xlatb10.y && u_xlatb2.z;
            u_xlatb10.z = u_xlatb10.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb10.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb10.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb10.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_34 = inversesqrt(u_xlat16_34);
            u_xlat16_9.xyz = vec3(u_xlat16_34) * _WorldSpaceLightPos0.xyz;
            u_xlat16_10 = dot(u_xlat16_4.xyz, u_xlat16_9.xyz);
            u_xlat16_4.x = u_xlat16_10 + 0.5;
            u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_4.x);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_4.x;
#endif
            u_xlat16_4.x = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_HRRimPower);
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_4.xyz = u_xlat1.xyz + u_xlat16_4.xyz;
            u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_7.xyz = u_xlat1.xyz + u_xlat16_7.xyz;
            u_xlat16_34 = float(_HRRimIntensity);
            u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_7.xyz);
            SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz + u_xlat16_7.xyz;
        } else {
            SV_Target0.xyz = u_xlat1.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
ivec2 u_xlati5;
bvec3 u_xlatb5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
lowp vec3 u_xlat10_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_10;
int u_xlati10;
bvec3 u_xlatb10;
mediump vec3 u_xlat16_12;
vec2 u_xlat13;
int u_xlati13;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
bvec2 u_xlatb20;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_34;
bool u_xlatb35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat3.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
    u_xlat16_12.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_12.x = u_xlat16_12.x * 0.5 + (-_SecondShadow);
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = floor(u_xlat16_12.x);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlati13 = int(u_xlat16_12.x);
    u_xlat16_12.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_12.xyz = (int(u_xlati13) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat10 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10 = floor(u_xlat10);
    u_xlat10 = max(u_xlat10, 0.0);
    u_xlati10 = int(u_xlat10);
    u_xlat13.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati10 != 0) ? u_xlat13.y : u_xlat13.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati10 = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (int(u_xlati10) != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_4.xyz = vec3(u_xlat16_32) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat3.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat5.xyz = u_xlat1.xyz * vec3(u_xlat10) + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_32 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_7.xyz = vec3(u_xlat16_32) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb35)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_32 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_32 = max(u_xlat16_32, 0.0);
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat16_32 = u_xlat16_32 * _Shininess;
    u_xlat16_32 = exp2(u_xlat16_32);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_7.xyz;
    u_xlat16_2.w = u_xlat10_1.w * vs_COLOR1.y;
    u_xlat10_5 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_5.w * _SPOpaqueness;
    u_xlat10_8.xyz = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat0.x = u_xlat10_8.x * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + (-_WorldSpaceCameraPos.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat8.xyz = u_xlat10_8.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat8.xyz;
    u_xlat1.xyz = u_xlat1.xyz + _SPCubeMapOffset.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat16_4.xyz);
    u_xlat10 = u_xlat10 + u_xlat10;
    u_xlat1.xyz = u_xlat16_4.xyz * (-vec3(u_xlat10)) + u_xlat1.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_7.xyz;
    u_xlat10 = _SPNoiseScaler * _SPTransition;
    u_xlat5.xy = vec2(u_xlat10) * vec2(1.70000005, 1.5) + (-u_xlat0.xx);
    u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
    u_xlat5.xy = floor(u_xlat5.xy);
    u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
    u_xlati5.xy = ivec2(u_xlat5.xy);
    u_xlat0.x = u_xlat10 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat8.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz + u_xlat1.xyz;
    u_xlat16_7.xyz = (u_xlati5.y != 0) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat0.x = (u_xlati5.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati5.x != 0) ? u_xlat16_7.xyz : u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_6;
    u_xlat1 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_2;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
        u_xlat10 = (-u_xlat0.x) + 1.00100005;
        u_xlat10 = max(u_xlat10, 0.00100000005);
        u_xlat10 = min(u_xlat10, 1.0);
        u_xlat10 = log2(u_xlat10);
        u_xlat10 = u_xlat10 * _RGShininess;
        u_xlat10 = exp2(u_xlat10);
        u_xlat10 = u_xlat10 * _RGScale + _RGBias;
        u_xlat20 = u_xlat10_0.w + 0.100000001;
        u_xlatb2 = greaterThanEqual(vec4(u_xlat20), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb5.xyz = lessThan(vec4(u_xlat20), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb5.x = u_xlatb2.y && u_xlatb5.x;
        u_xlatb5.y = u_xlatb2.z && u_xlatb5.y;
        u_xlatb5.z = u_xlatb2.w && u_xlatb5.z;
        u_xlat16_6 = (u_xlatb5.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb5.y) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_5 = (u_xlatb5.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_5;
        u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_34 = inversesqrt(u_xlat16_34);
        u_xlat16_7.xyz = vec3(u_xlat16_34) * _WorldSpaceLightPos0.xyz;
        u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
        u_xlat16_34 = u_xlat16_20 + 0.5;
        u_xlat16_34 = u_xlat0.x * u_xlat16_34;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_34);
#else
        u_xlatb0 = u_xlat16_2.w<u_xlat16_34;
#endif
        u_xlat16_34 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_7.xyz = u_xlat16_2.xyz * vec3(u_xlat16_34);
        u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_HRRimPower) + u_xlat1.xyz;
        u_xlat16_34 = u_xlat10;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
        u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_34 * _RGRatio;
        u_xlat8.xyz = vec3(u_xlat10) * _RGColor.xyz + (-u_xlat1.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz + u_xlat1.xyz;
        u_xlat16_34 = float(_HRRimIntensity);
        u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat16_7.xyz;
        SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat16_7.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
            u_xlat10 = (-u_xlat0.x) + 1.00100005;
            u_xlat10 = max(u_xlat10, 0.00100000005);
            u_xlat10 = min(u_xlat10, 1.0);
            u_xlat10 = log2(u_xlat10);
            u_xlat10 = u_xlat10 * _RGShininess;
            u_xlat10 = exp2(u_xlat10);
            u_xlat10 = u_xlat10 * _RGScale + _RGBias;
            u_xlat16_7.xyz = vec3(u_xlat10) * _RGColor.xyz;
            u_xlat10 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat10), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb10.xyz = lessThan(vec4(u_xlat10), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb10.x = u_xlatb10.x && u_xlatb2.y;
            u_xlatb10.y = u_xlatb10.y && u_xlatb2.z;
            u_xlatb10.z = u_xlatb10.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb10.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb10.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb10.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_34 = inversesqrt(u_xlat16_34);
            u_xlat16_9.xyz = vec3(u_xlat16_34) * _WorldSpaceLightPos0.xyz;
            u_xlat16_10 = dot(u_xlat16_4.xyz, u_xlat16_9.xyz);
            u_xlat16_4.x = u_xlat16_10 + 0.5;
            u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_4.x);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_4.x;
#endif
            u_xlat16_4.x = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_HRRimPower);
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_4.xyz = u_xlat1.xyz + u_xlat16_4.xyz;
            u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_7.xyz = u_xlat1.xyz + u_xlat16_7.xyz;
            u_xlat16_34 = float(_HRRimIntensity);
            u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_7.xyz);
            SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz + u_xlat16_7.xyz;
        } else {
            SV_Target0.xyz = u_xlat1.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
ivec2 u_xlati5;
bvec3 u_xlatb5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
lowp vec3 u_xlat10_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_10;
int u_xlati10;
bvec3 u_xlatb10;
mediump vec3 u_xlat16_12;
vec2 u_xlat13;
int u_xlati13;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
bvec2 u_xlatb20;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_34;
bool u_xlatb35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat3.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
    u_xlat16_12.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_12.x = u_xlat16_12.x * 0.5 + (-_SecondShadow);
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = floor(u_xlat16_12.x);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlati13 = int(u_xlat16_12.x);
    u_xlat16_12.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_12.xyz = (int(u_xlati13) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat10 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10 = floor(u_xlat10);
    u_xlat10 = max(u_xlat10, 0.0);
    u_xlati10 = int(u_xlat10);
    u_xlat13.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati10 != 0) ? u_xlat13.y : u_xlat13.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati10 = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (int(u_xlati10) != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_4.xyz = vec3(u_xlat16_32) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat3.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat5.xyz = u_xlat1.xyz * vec3(u_xlat10) + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_32 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_7.xyz = vec3(u_xlat16_32) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb35)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_32 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_32 = max(u_xlat16_32, 0.0);
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat16_32 = u_xlat16_32 * _Shininess;
    u_xlat16_32 = exp2(u_xlat16_32);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_7.xyz;
    u_xlat16_2.w = u_xlat10_1.w * vs_COLOR1.y;
    u_xlat10_5 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_5.w * _SPOpaqueness;
    u_xlat10_8.xyz = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat0.x = u_xlat10_8.x * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + (-_WorldSpaceCameraPos.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat8.xyz = u_xlat10_8.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat8.xyz;
    u_xlat1.xyz = u_xlat1.xyz + _SPCubeMapOffset.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat16_4.xyz);
    u_xlat10 = u_xlat10 + u_xlat10;
    u_xlat1.xyz = u_xlat16_4.xyz * (-vec3(u_xlat10)) + u_xlat1.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_7.xyz;
    u_xlat10 = _SPNoiseScaler * _SPTransition;
    u_xlat5.xy = vec2(u_xlat10) * vec2(1.70000005, 1.5) + (-u_xlat0.xx);
    u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
    u_xlat5.xy = floor(u_xlat5.xy);
    u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
    u_xlati5.xy = ivec2(u_xlat5.xy);
    u_xlat0.x = u_xlat10 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat8.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz + u_xlat1.xyz;
    u_xlat16_7.xyz = (u_xlati5.y != 0) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat0.x = (u_xlati5.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati5.x != 0) ? u_xlat16_7.xyz : u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_6;
    u_xlat1 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_2;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
        u_xlat10 = (-u_xlat0.x) + 1.00100005;
        u_xlat10 = max(u_xlat10, 0.00100000005);
        u_xlat10 = min(u_xlat10, 1.0);
        u_xlat10 = log2(u_xlat10);
        u_xlat10 = u_xlat10 * _RGShininess;
        u_xlat10 = exp2(u_xlat10);
        u_xlat10 = u_xlat10 * _RGScale + _RGBias;
        u_xlat20 = u_xlat10_0.w + 0.100000001;
        u_xlatb2 = greaterThanEqual(vec4(u_xlat20), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb5.xyz = lessThan(vec4(u_xlat20), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb5.x = u_xlatb2.y && u_xlatb5.x;
        u_xlatb5.y = u_xlatb2.z && u_xlatb5.y;
        u_xlatb5.z = u_xlatb2.w && u_xlatb5.z;
        u_xlat16_6 = (u_xlatb5.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb5.y) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_5 = (u_xlatb5.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_5;
        u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_34 = inversesqrt(u_xlat16_34);
        u_xlat16_7.xyz = vec3(u_xlat16_34) * _WorldSpaceLightPos0.xyz;
        u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
        u_xlat16_34 = u_xlat16_20 + 0.5;
        u_xlat16_34 = u_xlat0.x * u_xlat16_34;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_34);
#else
        u_xlatb0 = u_xlat16_2.w<u_xlat16_34;
#endif
        u_xlat16_34 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_7.xyz = u_xlat16_2.xyz * vec3(u_xlat16_34);
        u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_HRRimPower) + u_xlat1.xyz;
        u_xlat16_34 = u_xlat10;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
        u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_34 * _RGRatio;
        u_xlat8.xyz = vec3(u_xlat10) * _RGColor.xyz + (-u_xlat1.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz + u_xlat1.xyz;
        u_xlat16_34 = float(_HRRimIntensity);
        u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat16_7.xyz;
        SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat16_7.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
            u_xlat10 = (-u_xlat0.x) + 1.00100005;
            u_xlat10 = max(u_xlat10, 0.00100000005);
            u_xlat10 = min(u_xlat10, 1.0);
            u_xlat10 = log2(u_xlat10);
            u_xlat10 = u_xlat10 * _RGShininess;
            u_xlat10 = exp2(u_xlat10);
            u_xlat10 = u_xlat10 * _RGScale + _RGBias;
            u_xlat16_7.xyz = vec3(u_xlat10) * _RGColor.xyz;
            u_xlat10 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat10), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb10.xyz = lessThan(vec4(u_xlat10), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb10.x = u_xlatb10.x && u_xlatb2.y;
            u_xlatb10.y = u_xlatb10.y && u_xlatb2.z;
            u_xlatb10.z = u_xlatb10.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb10.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb10.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb10.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_34 = inversesqrt(u_xlat16_34);
            u_xlat16_9.xyz = vec3(u_xlat16_34) * _WorldSpaceLightPos0.xyz;
            u_xlat16_10 = dot(u_xlat16_4.xyz, u_xlat16_9.xyz);
            u_xlat16_4.x = u_xlat16_10 + 0.5;
            u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_4.x);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_4.x;
#endif
            u_xlat16_4.x = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_HRRimPower);
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_4.xyz = u_xlat1.xyz + u_xlat16_4.xyz;
            u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_7.xyz = u_xlat1.xyz + u_xlat16_7.xyz;
            u_xlat16_34 = float(_HRRimIntensity);
            u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_7.xyz);
            SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz + u_xlat16_7.xyz;
        } else {
            SV_Target0.xyz = u_xlat1.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
ivec2 u_xlati5;
bvec3 u_xlatb5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
lowp vec3 u_xlat10_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_10;
int u_xlati10;
bvec3 u_xlatb10;
mediump vec3 u_xlat16_12;
vec2 u_xlat13;
int u_xlati13;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
bvec2 u_xlatb20;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_34;
bool u_xlatb35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat3.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
    u_xlat16_12.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_12.x = u_xlat16_12.x * 0.5 + (-_SecondShadow);
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = floor(u_xlat16_12.x);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlati13 = int(u_xlat16_12.x);
    u_xlat16_12.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_12.xyz = (int(u_xlati13) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat10 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10 = floor(u_xlat10);
    u_xlat10 = max(u_xlat10, 0.0);
    u_xlati10 = int(u_xlat10);
    u_xlat13.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati10 != 0) ? u_xlat13.y : u_xlat13.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati10 = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (int(u_xlati10) != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_4.xyz = vec3(u_xlat16_32) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat3.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat5.xyz = u_xlat1.xyz * vec3(u_xlat10) + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_32 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_7.xyz = vec3(u_xlat16_32) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb35)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_32 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_32 = max(u_xlat16_32, 0.0);
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat16_32 = u_xlat16_32 * _Shininess;
    u_xlat16_32 = exp2(u_xlat16_32);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_7.xyz;
    u_xlat16_2.w = u_xlat10_1.w * vs_COLOR1.y;
    u_xlat10_5 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_5.w * _SPOpaqueness;
    u_xlat10_8.xyz = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat0.x = u_xlat10_8.x * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + (-_WorldSpaceCameraPos.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat8.xyz = u_xlat10_8.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat8.xyz;
    u_xlat1.xyz = u_xlat1.xyz + _SPCubeMapOffset.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat16_4.xyz);
    u_xlat10 = u_xlat10 + u_xlat10;
    u_xlat1.xyz = u_xlat16_4.xyz * (-vec3(u_xlat10)) + u_xlat1.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_7.xyz;
    u_xlat10 = _SPNoiseScaler * _SPTransition;
    u_xlat5.xy = vec2(u_xlat10) * vec2(1.70000005, 1.5) + (-u_xlat0.xx);
    u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
    u_xlat5.xy = floor(u_xlat5.xy);
    u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
    u_xlati5.xy = ivec2(u_xlat5.xy);
    u_xlat0.x = u_xlat10 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat8.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz + u_xlat1.xyz;
    u_xlat16_7.xyz = (u_xlati5.y != 0) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat0.x = (u_xlati5.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati5.x != 0) ? u_xlat16_7.xyz : u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_6;
    u_xlat1 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_2;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
        u_xlat10 = (-u_xlat0.x) + 1.00100005;
        u_xlat10 = max(u_xlat10, 0.00100000005);
        u_xlat10 = min(u_xlat10, 1.0);
        u_xlat10 = log2(u_xlat10);
        u_xlat10 = u_xlat10 * _RGShininess;
        u_xlat10 = exp2(u_xlat10);
        u_xlat10 = u_xlat10 * _RGScale + _RGBias;
        u_xlat20 = u_xlat10_0.w + 0.100000001;
        u_xlatb2 = greaterThanEqual(vec4(u_xlat20), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb5.xyz = lessThan(vec4(u_xlat20), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb5.x = u_xlatb2.y && u_xlatb5.x;
        u_xlatb5.y = u_xlatb2.z && u_xlatb5.y;
        u_xlatb5.z = u_xlatb2.w && u_xlatb5.z;
        u_xlat16_6 = (u_xlatb5.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb5.y) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_5 = (u_xlatb5.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_5;
        u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_34 = inversesqrt(u_xlat16_34);
        u_xlat16_7.xyz = vec3(u_xlat16_34) * _WorldSpaceLightPos0.xyz;
        u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
        u_xlat16_34 = u_xlat16_20 + 0.5;
        u_xlat16_34 = u_xlat0.x * u_xlat16_34;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_34);
#else
        u_xlatb0 = u_xlat16_2.w<u_xlat16_34;
#endif
        u_xlat16_34 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_7.xyz = u_xlat16_2.xyz * vec3(u_xlat16_34);
        u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_HRRimPower) + u_xlat1.xyz;
        u_xlat16_34 = u_xlat10;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
        u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_34 * _RGRatio;
        u_xlat8.xyz = vec3(u_xlat10) * _RGColor.xyz + (-u_xlat1.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz + u_xlat1.xyz;
        u_xlat16_34 = float(_HRRimIntensity);
        u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat16_7.xyz;
        SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat16_7.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
            u_xlat10 = (-u_xlat0.x) + 1.00100005;
            u_xlat10 = max(u_xlat10, 0.00100000005);
            u_xlat10 = min(u_xlat10, 1.0);
            u_xlat10 = log2(u_xlat10);
            u_xlat10 = u_xlat10 * _RGShininess;
            u_xlat10 = exp2(u_xlat10);
            u_xlat10 = u_xlat10 * _RGScale + _RGBias;
            u_xlat16_7.xyz = vec3(u_xlat10) * _RGColor.xyz;
            u_xlat10 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat10), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb10.xyz = lessThan(vec4(u_xlat10), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb10.x = u_xlatb10.x && u_xlatb2.y;
            u_xlatb10.y = u_xlatb10.y && u_xlatb2.z;
            u_xlatb10.z = u_xlatb10.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb10.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb10.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb10.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_34 = inversesqrt(u_xlat16_34);
            u_xlat16_9.xyz = vec3(u_xlat16_34) * _WorldSpaceLightPos0.xyz;
            u_xlat16_10 = dot(u_xlat16_4.xyz, u_xlat16_9.xyz);
            u_xlat16_4.x = u_xlat16_10 + 0.5;
            u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_4.x);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_4.x;
#endif
            u_xlat16_4.x = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_HRRimPower);
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_4.xyz = u_xlat1.xyz + u_xlat16_4.xyz;
            u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_7.xyz = u_xlat1.xyz + u_xlat16_7.xyz;
            u_xlat16_34 = float(_HRRimIntensity);
            u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_7.xyz);
            SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz + u_xlat16_7.xyz;
        } else {
            SV_Target0.xyz = u_xlat1.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
int u_xlati1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec3 u_xlat10_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
bvec4 u_xlatb3;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
ivec2 u_xlati7;
bvec3 u_xlatb7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
float u_xlat11;
mediump float u_xlat16_11;
int u_xlati11;
bvec3 u_xlatb11;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
bvec2 u_xlatb22;
vec2 u_xlat23;
int u_xlati23;
float u_xlat35;
bool u_xlatb36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_37 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat1.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati23 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati23) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat11 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11 = floor(u_xlat11);
    u_xlat11 = max(u_xlat11, 0.0);
    u_xlati11 = int(u_xlat11);
    u_xlat23.xy = vec2(u_xlat16_37) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_37 = (u_xlati11 != 0) ? u_xlat23.y : u_xlat23.x;
    u_xlat16_37 = u_xlat16_37 + vs_COLOR1.x;
    u_xlat16_37 = u_xlat16_37 * 0.5 + (-_LightArea);
    u_xlat16_37 = u_xlat16_37 + 1.0;
    u_xlat16_37 = floor(u_xlat16_37);
    u_xlat16_37 = max(u_xlat16_37, 0.0);
    u_xlati11 = int(u_xlat16_37);
    u_xlat16_4.xyz = (int(u_xlati11) != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (int(u_xlati1) != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat16_37 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat16_5.xyz = vec3(u_xlat16_37) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11 = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat1.xzw;
    u_xlat3.xyz = u_xlat1.xzw * vec3(u_xlat11) + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat7.xyz = vec3(u_xlat35) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb36 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat35) + (-_WorldSpaceLightPos0.xyz);
    u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat35) + _CustomLightDir.xyz;
    u_xlat16_37 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat16_6.xyz = vec3(u_xlat16_37) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb36)) ? u_xlat16_6.xyz : u_xlat7.xyz;
    u_xlat16_37 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
    u_xlat16_37 = max(u_xlat16_37, 0.0);
    u_xlat16_37 = log2(u_xlat16_37);
    u_xlat16_37 = u_xlat16_37 * _Shininess;
    u_xlat16_37 = exp2(u_xlat16_37);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_37) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_4.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
    u_xlat16_3.w = u_xlat10_1.y * vs_COLOR1.y;
    u_xlat10_4 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_4.w * _SPOpaqueness;
    u_xlat10_7.xyz = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat0.x = u_xlat10_7.x * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xzw * vec3(u_xlat11) + (-_WorldSpaceCameraPos.xyz);
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat7.xyz = u_xlat10_7.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + u_xlat7.xyz;
    u_xlat1.xyz = u_xlat1.xyz + _SPCubeMapOffset.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat16_5.xyz);
    u_xlat11 = u_xlat11 + u_xlat11;
    u_xlat1.xyz = u_xlat16_5.xyz * (-vec3(u_xlat11)) + u_xlat1.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_8.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_8.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_8.xyz;
    u_xlat11 = _SPNoiseScaler * _SPTransition;
    u_xlat7.xy = vec2(u_xlat11) * vec2(1.70000005, 1.5) + (-u_xlat0.xx);
    u_xlat7.xy = u_xlat7.xy + vec2(1.0, 1.0);
    u_xlat7.xy = floor(u_xlat7.xy);
    u_xlat7.xy = max(u_xlat7.xy, vec2(0.0, 0.0));
    u_xlati7.xy = ivec2(u_xlat7.xy);
    u_xlat0.x = u_xlat11 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + u_xlat1.xyz;
    u_xlat16_8.xyz = (u_xlati7.y != 0) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat0.x = (u_xlati7.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_8.xyz = (u_xlati7.x != 0) ? u_xlat16_8.xyz : u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_8.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_3) + u_xlat16_6;
    u_xlat1 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_5.xyz);
        u_xlat11 = (-u_xlat0.x) + 1.00100005;
        u_xlat11 = max(u_xlat11, 0.00100000005);
        u_xlat11 = min(u_xlat11, 1.0);
        u_xlat11 = log2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGShininess;
        u_xlat11 = exp2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGScale + _RGBias;
        u_xlat22 = u_xlat10_0.w + 0.100000001;
        u_xlatb3 = greaterThanEqual(vec4(u_xlat22), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb7.xyz = lessThan(vec4(u_xlat22), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb7.x = u_xlatb3.y && u_xlatb7.x;
        u_xlatb7.y = u_xlatb3.z && u_xlatb7.y;
        u_xlatb7.z = u_xlatb3.w && u_xlatb7.z;
        u_xlat16_4 = (u_xlatb7.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_4 = (u_xlatb7.y) ? _HRRimColor2 : u_xlat16_4;
        u_xlat16_4 = (u_xlatb7.x) ? _HRRimColor3 : u_xlat16_4;
        u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_4;
        u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_38 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_38 = inversesqrt(u_xlat16_38);
        u_xlat16_6.xyz = vec3(u_xlat16_38) * _WorldSpaceLightPos0.xyz;
        u_xlat16_22 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
        u_xlat16_38 = u_xlat16_22 + 0.5;
        u_xlat16_38 = u_xlat0.x * u_xlat16_38;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_38);
#else
        u_xlatb0 = u_xlat16_3.w<u_xlat16_38;
#endif
        u_xlat16_38 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(u_xlat16_38);
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_HRRimPower) + u_xlat1.xyz;
        u_xlat16_38 = u_xlat11;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
        u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_38 * _RGRatio;
        u_xlat7.xyz = vec3(u_xlat11) * _RGColor.xyz + (-u_xlat1.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz + u_xlat1.xyz;
        u_xlat16_38 = float(_HRRimIntensity);
        u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat16_6.xyz;
        SV_Target0.xyz = vec3(u_xlat16_38) * u_xlat16_6.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_5.xyz);
            u_xlat11 = (-u_xlat0.x) + 1.00100005;
            u_xlat11 = max(u_xlat11, 0.00100000005);
            u_xlat11 = min(u_xlat11, 1.0);
            u_xlat11 = log2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGShininess;
            u_xlat11 = exp2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGScale + _RGBias;
            u_xlat16_6.xyz = vec3(u_xlat11) * _RGColor.xyz;
            u_xlat11 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat11), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb11.xyz = lessThan(vec4(u_xlat11), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb11.x = u_xlatb11.x && u_xlatb2.y;
            u_xlatb11.y = u_xlatb11.y && u_xlatb2.z;
            u_xlatb11.z = u_xlatb11.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb11.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb11.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb11.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_38 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_38 = inversesqrt(u_xlat16_38);
            u_xlat16_8.xyz = vec3(u_xlat16_38) * _WorldSpaceLightPos0.xyz;
            u_xlat16_11 = dot(u_xlat16_5.xyz, u_xlat16_8.xyz);
            u_xlat16_5.x = u_xlat16_11 + 0.5;
            u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_5.x);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_5.x;
#endif
            u_xlat16_5.x = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xxx;
            u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_HRRimPower);
            u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_5.xyz = u_xlat1.xyz + u_xlat16_5.xyz;
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_6.xyz = u_xlat1.xyz + u_xlat16_6.xyz;
            u_xlat16_38 = float(_HRRimIntensity);
            u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
            SV_Target0.xyz = vec3(u_xlat16_38) * u_xlat16_5.xyz + u_xlat16_6.xyz;
        } else {
            SV_Target0.xyz = u_xlat1.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
int u_xlati1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec3 u_xlat10_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
bvec4 u_xlatb3;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
ivec2 u_xlati7;
bvec3 u_xlatb7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
float u_xlat11;
mediump float u_xlat16_11;
int u_xlati11;
bvec3 u_xlatb11;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
bvec2 u_xlatb22;
vec2 u_xlat23;
int u_xlati23;
float u_xlat35;
bool u_xlatb36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_37 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat1.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati23 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati23) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat11 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11 = floor(u_xlat11);
    u_xlat11 = max(u_xlat11, 0.0);
    u_xlati11 = int(u_xlat11);
    u_xlat23.xy = vec2(u_xlat16_37) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_37 = (u_xlati11 != 0) ? u_xlat23.y : u_xlat23.x;
    u_xlat16_37 = u_xlat16_37 + vs_COLOR1.x;
    u_xlat16_37 = u_xlat16_37 * 0.5 + (-_LightArea);
    u_xlat16_37 = u_xlat16_37 + 1.0;
    u_xlat16_37 = floor(u_xlat16_37);
    u_xlat16_37 = max(u_xlat16_37, 0.0);
    u_xlati11 = int(u_xlat16_37);
    u_xlat16_4.xyz = (int(u_xlati11) != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (int(u_xlati1) != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat16_37 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat16_5.xyz = vec3(u_xlat16_37) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11 = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat1.xzw;
    u_xlat3.xyz = u_xlat1.xzw * vec3(u_xlat11) + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat7.xyz = vec3(u_xlat35) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb36 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat35) + (-_WorldSpaceLightPos0.xyz);
    u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat35) + _CustomLightDir.xyz;
    u_xlat16_37 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat16_6.xyz = vec3(u_xlat16_37) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb36)) ? u_xlat16_6.xyz : u_xlat7.xyz;
    u_xlat16_37 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
    u_xlat16_37 = max(u_xlat16_37, 0.0);
    u_xlat16_37 = log2(u_xlat16_37);
    u_xlat16_37 = u_xlat16_37 * _Shininess;
    u_xlat16_37 = exp2(u_xlat16_37);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_37) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_4.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
    u_xlat16_3.w = u_xlat10_1.y * vs_COLOR1.y;
    u_xlat10_4 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_4.w * _SPOpaqueness;
    u_xlat10_7.xyz = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat0.x = u_xlat10_7.x * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xzw * vec3(u_xlat11) + (-_WorldSpaceCameraPos.xyz);
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat7.xyz = u_xlat10_7.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + u_xlat7.xyz;
    u_xlat1.xyz = u_xlat1.xyz + _SPCubeMapOffset.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat16_5.xyz);
    u_xlat11 = u_xlat11 + u_xlat11;
    u_xlat1.xyz = u_xlat16_5.xyz * (-vec3(u_xlat11)) + u_xlat1.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_8.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_8.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_8.xyz;
    u_xlat11 = _SPNoiseScaler * _SPTransition;
    u_xlat7.xy = vec2(u_xlat11) * vec2(1.70000005, 1.5) + (-u_xlat0.xx);
    u_xlat7.xy = u_xlat7.xy + vec2(1.0, 1.0);
    u_xlat7.xy = floor(u_xlat7.xy);
    u_xlat7.xy = max(u_xlat7.xy, vec2(0.0, 0.0));
    u_xlati7.xy = ivec2(u_xlat7.xy);
    u_xlat0.x = u_xlat11 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + u_xlat1.xyz;
    u_xlat16_8.xyz = (u_xlati7.y != 0) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat0.x = (u_xlati7.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_8.xyz = (u_xlati7.x != 0) ? u_xlat16_8.xyz : u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_8.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_3) + u_xlat16_6;
    u_xlat1 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_5.xyz);
        u_xlat11 = (-u_xlat0.x) + 1.00100005;
        u_xlat11 = max(u_xlat11, 0.00100000005);
        u_xlat11 = min(u_xlat11, 1.0);
        u_xlat11 = log2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGShininess;
        u_xlat11 = exp2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGScale + _RGBias;
        u_xlat22 = u_xlat10_0.w + 0.100000001;
        u_xlatb3 = greaterThanEqual(vec4(u_xlat22), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb7.xyz = lessThan(vec4(u_xlat22), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb7.x = u_xlatb3.y && u_xlatb7.x;
        u_xlatb7.y = u_xlatb3.z && u_xlatb7.y;
        u_xlatb7.z = u_xlatb3.w && u_xlatb7.z;
        u_xlat16_4 = (u_xlatb7.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_4 = (u_xlatb7.y) ? _HRRimColor2 : u_xlat16_4;
        u_xlat16_4 = (u_xlatb7.x) ? _HRRimColor3 : u_xlat16_4;
        u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_4;
        u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_38 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_38 = inversesqrt(u_xlat16_38);
        u_xlat16_6.xyz = vec3(u_xlat16_38) * _WorldSpaceLightPos0.xyz;
        u_xlat16_22 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
        u_xlat16_38 = u_xlat16_22 + 0.5;
        u_xlat16_38 = u_xlat0.x * u_xlat16_38;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_38);
#else
        u_xlatb0 = u_xlat16_3.w<u_xlat16_38;
#endif
        u_xlat16_38 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(u_xlat16_38);
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_HRRimPower) + u_xlat1.xyz;
        u_xlat16_38 = u_xlat11;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
        u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_38 * _RGRatio;
        u_xlat7.xyz = vec3(u_xlat11) * _RGColor.xyz + (-u_xlat1.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz + u_xlat1.xyz;
        u_xlat16_38 = float(_HRRimIntensity);
        u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat16_6.xyz;
        SV_Target0.xyz = vec3(u_xlat16_38) * u_xlat16_6.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_5.xyz);
            u_xlat11 = (-u_xlat0.x) + 1.00100005;
            u_xlat11 = max(u_xlat11, 0.00100000005);
            u_xlat11 = min(u_xlat11, 1.0);
            u_xlat11 = log2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGShininess;
            u_xlat11 = exp2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGScale + _RGBias;
            u_xlat16_6.xyz = vec3(u_xlat11) * _RGColor.xyz;
            u_xlat11 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat11), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb11.xyz = lessThan(vec4(u_xlat11), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb11.x = u_xlatb11.x && u_xlatb2.y;
            u_xlatb11.y = u_xlatb11.y && u_xlatb2.z;
            u_xlatb11.z = u_xlatb11.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb11.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb11.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb11.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_38 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_38 = inversesqrt(u_xlat16_38);
            u_xlat16_8.xyz = vec3(u_xlat16_38) * _WorldSpaceLightPos0.xyz;
            u_xlat16_11 = dot(u_xlat16_5.xyz, u_xlat16_8.xyz);
            u_xlat16_5.x = u_xlat16_11 + 0.5;
            u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_5.x);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_5.x;
#endif
            u_xlat16_5.x = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xxx;
            u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_HRRimPower);
            u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_5.xyz = u_xlat1.xyz + u_xlat16_5.xyz;
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_6.xyz = u_xlat1.xyz + u_xlat16_6.xyz;
            u_xlat16_38 = float(_HRRimIntensity);
            u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
            SV_Target0.xyz = vec3(u_xlat16_38) * u_xlat16_5.xyz + u_xlat16_6.xyz;
        } else {
            SV_Target0.xyz = u_xlat1.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
int u_xlati1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec3 u_xlat10_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
bvec4 u_xlatb3;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
ivec2 u_xlati7;
bvec3 u_xlatb7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
float u_xlat11;
mediump float u_xlat16_11;
int u_xlati11;
bvec3 u_xlatb11;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
bvec2 u_xlatb22;
vec2 u_xlat23;
int u_xlati23;
float u_xlat35;
bool u_xlatb36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_37 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat1.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati23 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati23) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat11 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11 = floor(u_xlat11);
    u_xlat11 = max(u_xlat11, 0.0);
    u_xlati11 = int(u_xlat11);
    u_xlat23.xy = vec2(u_xlat16_37) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_37 = (u_xlati11 != 0) ? u_xlat23.y : u_xlat23.x;
    u_xlat16_37 = u_xlat16_37 + vs_COLOR1.x;
    u_xlat16_37 = u_xlat16_37 * 0.5 + (-_LightArea);
    u_xlat16_37 = u_xlat16_37 + 1.0;
    u_xlat16_37 = floor(u_xlat16_37);
    u_xlat16_37 = max(u_xlat16_37, 0.0);
    u_xlati11 = int(u_xlat16_37);
    u_xlat16_4.xyz = (int(u_xlati11) != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (int(u_xlati1) != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat16_37 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat16_5.xyz = vec3(u_xlat16_37) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11 = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat1.xzw;
    u_xlat3.xyz = u_xlat1.xzw * vec3(u_xlat11) + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat7.xyz = vec3(u_xlat35) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb36 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat35) + (-_WorldSpaceLightPos0.xyz);
    u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat35) + _CustomLightDir.xyz;
    u_xlat16_37 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat16_6.xyz = vec3(u_xlat16_37) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb36)) ? u_xlat16_6.xyz : u_xlat7.xyz;
    u_xlat16_37 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
    u_xlat16_37 = max(u_xlat16_37, 0.0);
    u_xlat16_37 = log2(u_xlat16_37);
    u_xlat16_37 = u_xlat16_37 * _Shininess;
    u_xlat16_37 = exp2(u_xlat16_37);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_37) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_4.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
    u_xlat16_3.w = u_xlat10_1.y * vs_COLOR1.y;
    u_xlat10_4 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_4.w * _SPOpaqueness;
    u_xlat10_7.xyz = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat0.x = u_xlat10_7.x * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xzw * vec3(u_xlat11) + (-_WorldSpaceCameraPos.xyz);
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat7.xyz = u_xlat10_7.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + u_xlat7.xyz;
    u_xlat1.xyz = u_xlat1.xyz + _SPCubeMapOffset.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat16_5.xyz);
    u_xlat11 = u_xlat11 + u_xlat11;
    u_xlat1.xyz = u_xlat16_5.xyz * (-vec3(u_xlat11)) + u_xlat1.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_8.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_8.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_8.xyz;
    u_xlat11 = _SPNoiseScaler * _SPTransition;
    u_xlat7.xy = vec2(u_xlat11) * vec2(1.70000005, 1.5) + (-u_xlat0.xx);
    u_xlat7.xy = u_xlat7.xy + vec2(1.0, 1.0);
    u_xlat7.xy = floor(u_xlat7.xy);
    u_xlat7.xy = max(u_xlat7.xy, vec2(0.0, 0.0));
    u_xlati7.xy = ivec2(u_xlat7.xy);
    u_xlat0.x = u_xlat11 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + u_xlat1.xyz;
    u_xlat16_8.xyz = (u_xlati7.y != 0) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat0.x = (u_xlati7.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_8.xyz = (u_xlati7.x != 0) ? u_xlat16_8.xyz : u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_8.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_3) + u_xlat16_6;
    u_xlat1 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_5.xyz);
        u_xlat11 = (-u_xlat0.x) + 1.00100005;
        u_xlat11 = max(u_xlat11, 0.00100000005);
        u_xlat11 = min(u_xlat11, 1.0);
        u_xlat11 = log2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGShininess;
        u_xlat11 = exp2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGScale + _RGBias;
        u_xlat22 = u_xlat10_0.w + 0.100000001;
        u_xlatb3 = greaterThanEqual(vec4(u_xlat22), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb7.xyz = lessThan(vec4(u_xlat22), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb7.x = u_xlatb3.y && u_xlatb7.x;
        u_xlatb7.y = u_xlatb3.z && u_xlatb7.y;
        u_xlatb7.z = u_xlatb3.w && u_xlatb7.z;
        u_xlat16_4 = (u_xlatb7.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_4 = (u_xlatb7.y) ? _HRRimColor2 : u_xlat16_4;
        u_xlat16_4 = (u_xlatb7.x) ? _HRRimColor3 : u_xlat16_4;
        u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_4;
        u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_38 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_38 = inversesqrt(u_xlat16_38);
        u_xlat16_6.xyz = vec3(u_xlat16_38) * _WorldSpaceLightPos0.xyz;
        u_xlat16_22 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
        u_xlat16_38 = u_xlat16_22 + 0.5;
        u_xlat16_38 = u_xlat0.x * u_xlat16_38;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_38);
#else
        u_xlatb0 = u_xlat16_3.w<u_xlat16_38;
#endif
        u_xlat16_38 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(u_xlat16_38);
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_HRRimPower) + u_xlat1.xyz;
        u_xlat16_38 = u_xlat11;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
        u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_38 * _RGRatio;
        u_xlat7.xyz = vec3(u_xlat11) * _RGColor.xyz + (-u_xlat1.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz + u_xlat1.xyz;
        u_xlat16_38 = float(_HRRimIntensity);
        u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat16_6.xyz;
        SV_Target0.xyz = vec3(u_xlat16_38) * u_xlat16_6.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_5.xyz);
            u_xlat11 = (-u_xlat0.x) + 1.00100005;
            u_xlat11 = max(u_xlat11, 0.00100000005);
            u_xlat11 = min(u_xlat11, 1.0);
            u_xlat11 = log2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGShininess;
            u_xlat11 = exp2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGScale + _RGBias;
            u_xlat16_6.xyz = vec3(u_xlat11) * _RGColor.xyz;
            u_xlat11 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat11), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb11.xyz = lessThan(vec4(u_xlat11), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb11.x = u_xlatb11.x && u_xlatb2.y;
            u_xlatb11.y = u_xlatb11.y && u_xlatb2.z;
            u_xlatb11.z = u_xlatb11.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb11.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb11.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb11.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_38 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_38 = inversesqrt(u_xlat16_38);
            u_xlat16_8.xyz = vec3(u_xlat16_38) * _WorldSpaceLightPos0.xyz;
            u_xlat16_11 = dot(u_xlat16_5.xyz, u_xlat16_8.xyz);
            u_xlat16_5.x = u_xlat16_11 + 0.5;
            u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_5.x);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_5.x;
#endif
            u_xlat16_5.x = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xxx;
            u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_HRRimPower);
            u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_5.xyz = u_xlat1.xyz + u_xlat16_5.xyz;
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_6.xyz = u_xlat1.xyz + u_xlat16_6.xyz;
            u_xlat16_38 = float(_HRRimIntensity);
            u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
            SV_Target0.xyz = vec3(u_xlat16_38) * u_xlat16_5.xyz + u_xlat16_6.xyz;
        } else {
            SV_Target0.xyz = u_xlat1.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
int u_xlati2;
bvec4 u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
ivec2 u_xlati4;
bvec3 u_xlatb4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec3 u_xlat10_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
float u_xlat11;
mediump float u_xlat16_11;
int u_xlati11;
bvec3 u_xlatb11;
mediump float u_xlat16_12;
vec2 u_xlat13;
int u_xlati13;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
bvec2 u_xlatb22;
mediump float u_xlat16_24;
lowp vec2 u_xlat10_24;
float u_xlat35;
bool u_xlatb36;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_24 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_24 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_12 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat5.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat5.w = u_xlat2.x * u_xlat16_12 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat5;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat2.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat2.x = max(u_xlat2.x, 0.0);
    u_xlati2 = int(u_xlat2.x);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati13 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati13) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11 = floor(u_xlat11);
    u_xlat11 = max(u_xlat11, 0.0);
    u_xlati11 = int(u_xlat11);
    u_xlat13.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11 != 0) ? u_xlat13.y : u_xlat13.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11 = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (int(u_xlati11) != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat11) + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat4.xyz = vec3(u_xlat35) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb36 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat35) + (-_WorldSpaceLightPos0.xyz);
    u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat16_9.xyz = u_xlat3.xyz * vec3(u_xlat35) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb36)) ? u_xlat16_9.xyz : u_xlat4.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_40) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_7.xyz * _EnvColor.xyz + u_xlat16_9.xyz;
    u_xlat16_3.w = u_xlat1.w * vs_COLOR1.y;
    u_xlat10_4 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_4.w * _SPOpaqueness;
    u_xlat10_6.xyz = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat0.x = u_xlat10_6.x * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + (-_WorldSpaceCameraPos.xyz);
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat6.xyz = u_xlat10_6.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + u_xlat6.xyz;
    u_xlat1.xyz = u_xlat1.xyz + _SPCubeMapOffset.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat16_8.xyz);
    u_xlat11 = u_xlat11 + u_xlat11;
    u_xlat1.xyz = u_xlat16_8.xyz * (-vec3(u_xlat11)) + u_xlat1.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_7.xyz;
    u_xlat11 = _SPNoiseScaler * _SPTransition;
    u_xlat4.xy = vec2(u_xlat11) * vec2(1.70000005, 1.5) + (-u_xlat0.xx);
    u_xlat4.xy = u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
    u_xlati4.xy = ivec2(u_xlat4.xy);
    u_xlat0.x = u_xlat11 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat1.xyz;
    u_xlat16_7.xyz = (u_xlati4.y != 0) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat0.x = (u_xlati4.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati4.x != 0) ? u_xlat16_7.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_3) + u_xlat16_5;
    u_xlat1 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_8.xyz);
        u_xlat11 = (-u_xlat0.x) + 1.00100005;
        u_xlat11 = max(u_xlat11, 0.00100000005);
        u_xlat11 = min(u_xlat11, 1.0);
        u_xlat11 = log2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGShininess;
        u_xlat11 = exp2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGScale + _RGBias;
        u_xlat22 = u_xlat10_0.w + 0.100000001;
        u_xlatb3 = greaterThanEqual(vec4(u_xlat22), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb4.xyz = lessThan(vec4(u_xlat22), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb4.x = u_xlatb3.y && u_xlatb4.x;
        u_xlatb4.y = u_xlatb3.z && u_xlatb4.y;
        u_xlatb4.z = u_xlatb3.w && u_xlatb4.z;
        u_xlat16_5 = (u_xlatb4.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_5 = (u_xlatb4.y) ? _HRRimColor2 : u_xlat16_5;
        u_xlat16_4 = (u_xlatb4.x) ? _HRRimColor3 : u_xlat16_5;
        u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_4;
        u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_7.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_7.x = inversesqrt(u_xlat16_7.x);
        u_xlat16_7.xyz = u_xlat16_7.xxx * _WorldSpaceLightPos0.xyz;
        u_xlat16_22 = dot(u_xlat16_8.xyz, u_xlat16_7.xyz);
        u_xlat16_7.x = u_xlat16_22 + 0.5;
        u_xlat16_7.x = u_xlat0.x * u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_7.x);
#else
        u_xlatb0 = u_xlat16_3.w<u_xlat16_7.x;
#endif
        u_xlat16_7.x = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_7.xyz = u_xlat16_3.xyz * u_xlat16_7.xxx;
        u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_HRRimPower) + u_xlat1.xyz;
        u_xlat16_40 = u_xlat11;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_40 = min(max(u_xlat16_40, 0.0), 1.0);
#else
        u_xlat16_40 = clamp(u_xlat16_40, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_40 * _RGRatio;
        u_xlat6.xyz = vec3(u_xlat11) * _RGColor.xyz + (-u_xlat1.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat1.xyz;
        u_xlat16_40 = float(_HRRimIntensity);
        u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat16_7.xyz;
        SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat16_7.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_8.xyz);
            u_xlat11 = (-u_xlat0.x) + 1.00100005;
            u_xlat11 = max(u_xlat11, 0.00100000005);
            u_xlat11 = min(u_xlat11, 1.0);
            u_xlat11 = log2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGShininess;
            u_xlat11 = exp2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGScale + _RGBias;
            u_xlat16_7.xyz = vec3(u_xlat11) * _RGColor.xyz;
            u_xlat11 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat11), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb11.xyz = lessThan(vec4(u_xlat11), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb11.x = u_xlatb11.x && u_xlatb2.y;
            u_xlatb11.y = u_xlatb11.y && u_xlatb2.z;
            u_xlatb11.z = u_xlatb11.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb11.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb11.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb11.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_40 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_40 = inversesqrt(u_xlat16_40);
            u_xlat16_9.xyz = vec3(u_xlat16_40) * _WorldSpaceLightPos0.xyz;
            u_xlat16_11 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
            u_xlat16_40 = u_xlat16_11 + 0.5;
            u_xlat16_40 = u_xlat0.x * u_xlat16_40;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_40);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_40;
#endif
            u_xlat16_40 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_8.xyz = u_xlat16_2.xyz * vec3(u_xlat16_40);
            u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_HRRimPower);
            u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_8.xyz = u_xlat1.xyz + u_xlat16_8.xyz;
            u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_7.xyz = u_xlat1.xyz + u_xlat16_7.xyz;
            u_xlat16_40 = float(_HRRimIntensity);
            u_xlat16_8.xyz = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
            SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat16_8.xyz + u_xlat16_7.xyz;
        } else {
            SV_Target0.xyz = u_xlat1.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
int u_xlati2;
bvec4 u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
ivec2 u_xlati4;
bvec3 u_xlatb4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec3 u_xlat10_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
float u_xlat11;
mediump float u_xlat16_11;
int u_xlati11;
bvec3 u_xlatb11;
mediump float u_xlat16_12;
vec2 u_xlat13;
int u_xlati13;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
bvec2 u_xlatb22;
mediump float u_xlat16_24;
lowp vec2 u_xlat10_24;
float u_xlat35;
bool u_xlatb36;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_24 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_24 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_12 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat5.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat5.w = u_xlat2.x * u_xlat16_12 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat5;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat2.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat2.x = max(u_xlat2.x, 0.0);
    u_xlati2 = int(u_xlat2.x);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati13 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati13) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11 = floor(u_xlat11);
    u_xlat11 = max(u_xlat11, 0.0);
    u_xlati11 = int(u_xlat11);
    u_xlat13.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11 != 0) ? u_xlat13.y : u_xlat13.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11 = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (int(u_xlati11) != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat11) + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat4.xyz = vec3(u_xlat35) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb36 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat35) + (-_WorldSpaceLightPos0.xyz);
    u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat16_9.xyz = u_xlat3.xyz * vec3(u_xlat35) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb36)) ? u_xlat16_9.xyz : u_xlat4.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_40) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_7.xyz * _EnvColor.xyz + u_xlat16_9.xyz;
    u_xlat16_3.w = u_xlat1.w * vs_COLOR1.y;
    u_xlat10_4 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_4.w * _SPOpaqueness;
    u_xlat10_6.xyz = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat0.x = u_xlat10_6.x * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + (-_WorldSpaceCameraPos.xyz);
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat6.xyz = u_xlat10_6.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + u_xlat6.xyz;
    u_xlat1.xyz = u_xlat1.xyz + _SPCubeMapOffset.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat16_8.xyz);
    u_xlat11 = u_xlat11 + u_xlat11;
    u_xlat1.xyz = u_xlat16_8.xyz * (-vec3(u_xlat11)) + u_xlat1.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_7.xyz;
    u_xlat11 = _SPNoiseScaler * _SPTransition;
    u_xlat4.xy = vec2(u_xlat11) * vec2(1.70000005, 1.5) + (-u_xlat0.xx);
    u_xlat4.xy = u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
    u_xlati4.xy = ivec2(u_xlat4.xy);
    u_xlat0.x = u_xlat11 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat1.xyz;
    u_xlat16_7.xyz = (u_xlati4.y != 0) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat0.x = (u_xlati4.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati4.x != 0) ? u_xlat16_7.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_3) + u_xlat16_5;
    u_xlat1 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_8.xyz);
        u_xlat11 = (-u_xlat0.x) + 1.00100005;
        u_xlat11 = max(u_xlat11, 0.00100000005);
        u_xlat11 = min(u_xlat11, 1.0);
        u_xlat11 = log2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGShininess;
        u_xlat11 = exp2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGScale + _RGBias;
        u_xlat22 = u_xlat10_0.w + 0.100000001;
        u_xlatb3 = greaterThanEqual(vec4(u_xlat22), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb4.xyz = lessThan(vec4(u_xlat22), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb4.x = u_xlatb3.y && u_xlatb4.x;
        u_xlatb4.y = u_xlatb3.z && u_xlatb4.y;
        u_xlatb4.z = u_xlatb3.w && u_xlatb4.z;
        u_xlat16_5 = (u_xlatb4.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_5 = (u_xlatb4.y) ? _HRRimColor2 : u_xlat16_5;
        u_xlat16_4 = (u_xlatb4.x) ? _HRRimColor3 : u_xlat16_5;
        u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_4;
        u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_7.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_7.x = inversesqrt(u_xlat16_7.x);
        u_xlat16_7.xyz = u_xlat16_7.xxx * _WorldSpaceLightPos0.xyz;
        u_xlat16_22 = dot(u_xlat16_8.xyz, u_xlat16_7.xyz);
        u_xlat16_7.x = u_xlat16_22 + 0.5;
        u_xlat16_7.x = u_xlat0.x * u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_7.x);
#else
        u_xlatb0 = u_xlat16_3.w<u_xlat16_7.x;
#endif
        u_xlat16_7.x = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_7.xyz = u_xlat16_3.xyz * u_xlat16_7.xxx;
        u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_HRRimPower) + u_xlat1.xyz;
        u_xlat16_40 = u_xlat11;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_40 = min(max(u_xlat16_40, 0.0), 1.0);
#else
        u_xlat16_40 = clamp(u_xlat16_40, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_40 * _RGRatio;
        u_xlat6.xyz = vec3(u_xlat11) * _RGColor.xyz + (-u_xlat1.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat1.xyz;
        u_xlat16_40 = float(_HRRimIntensity);
        u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat16_7.xyz;
        SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat16_7.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_8.xyz);
            u_xlat11 = (-u_xlat0.x) + 1.00100005;
            u_xlat11 = max(u_xlat11, 0.00100000005);
            u_xlat11 = min(u_xlat11, 1.0);
            u_xlat11 = log2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGShininess;
            u_xlat11 = exp2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGScale + _RGBias;
            u_xlat16_7.xyz = vec3(u_xlat11) * _RGColor.xyz;
            u_xlat11 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat11), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb11.xyz = lessThan(vec4(u_xlat11), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb11.x = u_xlatb11.x && u_xlatb2.y;
            u_xlatb11.y = u_xlatb11.y && u_xlatb2.z;
            u_xlatb11.z = u_xlatb11.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb11.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb11.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb11.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_40 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_40 = inversesqrt(u_xlat16_40);
            u_xlat16_9.xyz = vec3(u_xlat16_40) * _WorldSpaceLightPos0.xyz;
            u_xlat16_11 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
            u_xlat16_40 = u_xlat16_11 + 0.5;
            u_xlat16_40 = u_xlat0.x * u_xlat16_40;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_40);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_40;
#endif
            u_xlat16_40 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_8.xyz = u_xlat16_2.xyz * vec3(u_xlat16_40);
            u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_HRRimPower);
            u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_8.xyz = u_xlat1.xyz + u_xlat16_8.xyz;
            u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_7.xyz = u_xlat1.xyz + u_xlat16_7.xyz;
            u_xlat16_40 = float(_HRRimIntensity);
            u_xlat16_8.xyz = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
            SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat16_8.xyz + u_xlat16_7.xyz;
        } else {
            SV_Target0.xyz = u_xlat1.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
int u_xlati2;
bvec4 u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
ivec2 u_xlati4;
bvec3 u_xlatb4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec3 u_xlat10_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
float u_xlat11;
mediump float u_xlat16_11;
int u_xlati11;
bvec3 u_xlatb11;
mediump float u_xlat16_12;
vec2 u_xlat13;
int u_xlati13;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
bvec2 u_xlatb22;
mediump float u_xlat16_24;
lowp vec2 u_xlat10_24;
float u_xlat35;
bool u_xlatb36;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_24 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_24 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_12 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat5.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat5.w = u_xlat2.x * u_xlat16_12 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat5;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat2.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat2.x = max(u_xlat2.x, 0.0);
    u_xlati2 = int(u_xlat2.x);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati13 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati13) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11 = floor(u_xlat11);
    u_xlat11 = max(u_xlat11, 0.0);
    u_xlati11 = int(u_xlat11);
    u_xlat13.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11 != 0) ? u_xlat13.y : u_xlat13.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11 = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (int(u_xlati11) != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat11) + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat4.xyz = vec3(u_xlat35) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb36 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat35) + (-_WorldSpaceLightPos0.xyz);
    u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat16_9.xyz = u_xlat3.xyz * vec3(u_xlat35) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb36)) ? u_xlat16_9.xyz : u_xlat4.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_40) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_7.xyz * _EnvColor.xyz + u_xlat16_9.xyz;
    u_xlat16_3.w = u_xlat1.w * vs_COLOR1.y;
    u_xlat10_4 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_4.w * _SPOpaqueness;
    u_xlat10_6.xyz = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat0.x = u_xlat10_6.x * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + (-_WorldSpaceCameraPos.xyz);
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat6.xyz = u_xlat10_6.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + u_xlat6.xyz;
    u_xlat1.xyz = u_xlat1.xyz + _SPCubeMapOffset.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat16_8.xyz);
    u_xlat11 = u_xlat11 + u_xlat11;
    u_xlat1.xyz = u_xlat16_8.xyz * (-vec3(u_xlat11)) + u_xlat1.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_7.xyz;
    u_xlat11 = _SPNoiseScaler * _SPTransition;
    u_xlat4.xy = vec2(u_xlat11) * vec2(1.70000005, 1.5) + (-u_xlat0.xx);
    u_xlat4.xy = u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
    u_xlati4.xy = ivec2(u_xlat4.xy);
    u_xlat0.x = u_xlat11 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat1.xyz;
    u_xlat16_7.xyz = (u_xlati4.y != 0) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat0.x = (u_xlati4.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati4.x != 0) ? u_xlat16_7.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_3) + u_xlat16_5;
    u_xlat1 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_8.xyz);
        u_xlat11 = (-u_xlat0.x) + 1.00100005;
        u_xlat11 = max(u_xlat11, 0.00100000005);
        u_xlat11 = min(u_xlat11, 1.0);
        u_xlat11 = log2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGShininess;
        u_xlat11 = exp2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGScale + _RGBias;
        u_xlat22 = u_xlat10_0.w + 0.100000001;
        u_xlatb3 = greaterThanEqual(vec4(u_xlat22), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb4.xyz = lessThan(vec4(u_xlat22), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb4.x = u_xlatb3.y && u_xlatb4.x;
        u_xlatb4.y = u_xlatb3.z && u_xlatb4.y;
        u_xlatb4.z = u_xlatb3.w && u_xlatb4.z;
        u_xlat16_5 = (u_xlatb4.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_5 = (u_xlatb4.y) ? _HRRimColor2 : u_xlat16_5;
        u_xlat16_4 = (u_xlatb4.x) ? _HRRimColor3 : u_xlat16_5;
        u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_4;
        u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_7.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_7.x = inversesqrt(u_xlat16_7.x);
        u_xlat16_7.xyz = u_xlat16_7.xxx * _WorldSpaceLightPos0.xyz;
        u_xlat16_22 = dot(u_xlat16_8.xyz, u_xlat16_7.xyz);
        u_xlat16_7.x = u_xlat16_22 + 0.5;
        u_xlat16_7.x = u_xlat0.x * u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_7.x);
#else
        u_xlatb0 = u_xlat16_3.w<u_xlat16_7.x;
#endif
        u_xlat16_7.x = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_7.xyz = u_xlat16_3.xyz * u_xlat16_7.xxx;
        u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_HRRimPower) + u_xlat1.xyz;
        u_xlat16_40 = u_xlat11;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_40 = min(max(u_xlat16_40, 0.0), 1.0);
#else
        u_xlat16_40 = clamp(u_xlat16_40, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_40 * _RGRatio;
        u_xlat6.xyz = vec3(u_xlat11) * _RGColor.xyz + (-u_xlat1.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat1.xyz;
        u_xlat16_40 = float(_HRRimIntensity);
        u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat16_7.xyz;
        SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat16_7.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_8.xyz);
            u_xlat11 = (-u_xlat0.x) + 1.00100005;
            u_xlat11 = max(u_xlat11, 0.00100000005);
            u_xlat11 = min(u_xlat11, 1.0);
            u_xlat11 = log2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGShininess;
            u_xlat11 = exp2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGScale + _RGBias;
            u_xlat16_7.xyz = vec3(u_xlat11) * _RGColor.xyz;
            u_xlat11 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat11), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb11.xyz = lessThan(vec4(u_xlat11), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb11.x = u_xlatb11.x && u_xlatb2.y;
            u_xlatb11.y = u_xlatb11.y && u_xlatb2.z;
            u_xlatb11.z = u_xlatb11.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb11.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb11.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb11.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_40 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_40 = inversesqrt(u_xlat16_40);
            u_xlat16_9.xyz = vec3(u_xlat16_40) * _WorldSpaceLightPos0.xyz;
            u_xlat16_11 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
            u_xlat16_40 = u_xlat16_11 + 0.5;
            u_xlat16_40 = u_xlat0.x * u_xlat16_40;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_40);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_40;
#endif
            u_xlat16_40 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_8.xyz = u_xlat16_2.xyz * vec3(u_xlat16_40);
            u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_HRRimPower);
            u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_8.xyz = u_xlat1.xyz + u_xlat16_8.xyz;
            u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_7.xyz = u_xlat1.xyz + u_xlat16_7.xyz;
            u_xlat16_40 = float(_HRRimIntensity);
            u_xlat16_8.xyz = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
            SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat16_8.xyz + u_xlat16_7.xyz;
        } else {
            SV_Target0.xyz = u_xlat1.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump float u_xlat16_6;
ivec3 u_xlati6;
mediump vec3 u_xlat16_8;
bvec2 u_xlatb12;
float u_xlat18;
bool u_xlatb18;
mediump float u_xlat16_20;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat18 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat18 = floor(u_xlat18);
    u_xlat6.z = max(u_xlat18, 0.0);
    u_xlat16_8.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_8.x = u_xlat16_8.x * 0.5 + (-_SecondShadow);
    u_xlat16_8.x = u_xlat16_8.x + 1.0;
    u_xlat16_8.x = floor(u_xlat16_8.x);
    u_xlat16_8.x = max(u_xlat16_8.x, 0.0);
    u_xlati3 = int(u_xlat16_8.x);
    u_xlat16_8.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_8.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_8.xyz;
    u_xlat6.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlati6.xz = ivec2(u_xlat6.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati6.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati6.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati6.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati6.z != 0) ? u_xlat16_4.xyz : u_xlat16_8.xyz;
    u_xlat16_20 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_4.xyz = vec3(u_xlat16_20) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat3.xyz = u_xlat6.xxx * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb18 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat16_5.xyz = u_xlat1.xyz * u_xlat6.xxx + _CustomLightDir.xyz;
    u_xlat16_20 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_5.xyz = vec3(u_xlat16_20) * u_xlat16_5.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb18)) ? u_xlat16_5.xyz : u_xlat3.xyz;
    u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
    u_xlat16_20 = max(u_xlat16_20, 0.0);
    u_xlat16_20 = log2(u_xlat16_20);
    u_xlat16_20 = u_xlat16_20 * _Shininess;
    u_xlat16_20 = exp2(u_xlat16_20);
    u_xlat16_6 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_6 = (-u_xlat16_20) + u_xlat16_6;
    u_xlat6.x = u_xlat16_6 + 1.0;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlati6.x = int(u_xlat6.x);
    u_xlat16_4.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlati6.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_4.xyz;
    SV_Target0.w = u_xlat10_1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump float u_xlat16_6;
ivec3 u_xlati6;
mediump vec3 u_xlat16_8;
bvec2 u_xlatb12;
float u_xlat18;
bool u_xlatb18;
mediump float u_xlat16_20;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat18 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat18 = floor(u_xlat18);
    u_xlat6.z = max(u_xlat18, 0.0);
    u_xlat16_8.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_8.x = u_xlat16_8.x * 0.5 + (-_SecondShadow);
    u_xlat16_8.x = u_xlat16_8.x + 1.0;
    u_xlat16_8.x = floor(u_xlat16_8.x);
    u_xlat16_8.x = max(u_xlat16_8.x, 0.0);
    u_xlati3 = int(u_xlat16_8.x);
    u_xlat16_8.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_8.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_8.xyz;
    u_xlat6.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlati6.xz = ivec2(u_xlat6.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati6.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati6.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati6.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati6.z != 0) ? u_xlat16_4.xyz : u_xlat16_8.xyz;
    u_xlat16_20 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_4.xyz = vec3(u_xlat16_20) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat3.xyz = u_xlat6.xxx * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb18 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat16_5.xyz = u_xlat1.xyz * u_xlat6.xxx + _CustomLightDir.xyz;
    u_xlat16_20 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_5.xyz = vec3(u_xlat16_20) * u_xlat16_5.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb18)) ? u_xlat16_5.xyz : u_xlat3.xyz;
    u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
    u_xlat16_20 = max(u_xlat16_20, 0.0);
    u_xlat16_20 = log2(u_xlat16_20);
    u_xlat16_20 = u_xlat16_20 * _Shininess;
    u_xlat16_20 = exp2(u_xlat16_20);
    u_xlat16_6 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_6 = (-u_xlat16_20) + u_xlat16_6;
    u_xlat6.x = u_xlat16_6 + 1.0;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlati6.x = int(u_xlat6.x);
    u_xlat16_4.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlati6.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_4.xyz;
    SV_Target0.w = u_xlat10_1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump float u_xlat16_6;
ivec3 u_xlati6;
mediump vec3 u_xlat16_8;
bvec2 u_xlatb12;
float u_xlat18;
bool u_xlatb18;
mediump float u_xlat16_20;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat18 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat18 = floor(u_xlat18);
    u_xlat6.z = max(u_xlat18, 0.0);
    u_xlat16_8.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_8.x = u_xlat16_8.x * 0.5 + (-_SecondShadow);
    u_xlat16_8.x = u_xlat16_8.x + 1.0;
    u_xlat16_8.x = floor(u_xlat16_8.x);
    u_xlat16_8.x = max(u_xlat16_8.x, 0.0);
    u_xlati3 = int(u_xlat16_8.x);
    u_xlat16_8.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_8.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_8.xyz;
    u_xlat6.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlati6.xz = ivec2(u_xlat6.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati6.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati6.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati6.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati6.z != 0) ? u_xlat16_4.xyz : u_xlat16_8.xyz;
    u_xlat16_20 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_4.xyz = vec3(u_xlat16_20) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat3.xyz = u_xlat6.xxx * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb18 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat16_5.xyz = u_xlat1.xyz * u_xlat6.xxx + _CustomLightDir.xyz;
    u_xlat16_20 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_5.xyz = vec3(u_xlat16_20) * u_xlat16_5.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb18)) ? u_xlat16_5.xyz : u_xlat3.xyz;
    u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
    u_xlat16_20 = max(u_xlat16_20, 0.0);
    u_xlat16_20 = log2(u_xlat16_20);
    u_xlat16_20 = u_xlat16_20 * _Shininess;
    u_xlat16_20 = exp2(u_xlat16_20);
    u_xlat16_6 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_6 = (-u_xlat16_20) + u_xlat16_6;
    u_xlat6.x = u_xlat16_6 + 1.0;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlati6.x = int(u_xlat6.x);
    u_xlat16_4.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlati6.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_4.xyz;
    SV_Target0.w = u_xlat10_1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump float u_xlat16_6;
ivec3 u_xlati6;
mediump vec3 u_xlat16_8;
bvec2 u_xlatb12;
float u_xlat18;
bool u_xlatb18;
mediump float u_xlat16_20;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat18 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat18 = floor(u_xlat18);
    u_xlat6.z = max(u_xlat18, 0.0);
    u_xlat16_8.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_8.x = u_xlat16_8.x * 0.5 + (-_SecondShadow);
    u_xlat16_8.x = u_xlat16_8.x + 1.0;
    u_xlat16_8.x = floor(u_xlat16_8.x);
    u_xlat16_8.x = max(u_xlat16_8.x, 0.0);
    u_xlati3 = int(u_xlat16_8.x);
    u_xlat16_8.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_8.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_8.xyz;
    u_xlat6.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlati6.xz = ivec2(u_xlat6.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati6.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati6.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati6.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati6.z != 0) ? u_xlat16_4.xyz : u_xlat16_8.xyz;
    u_xlat16_20 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_4.xyz = vec3(u_xlat16_20) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat3.xyz = u_xlat6.xxx * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb18 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat16_5.xyz = u_xlat1.xyz * u_xlat6.xxx + _CustomLightDir.xyz;
    u_xlat16_20 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_5.xyz = vec3(u_xlat16_20) * u_xlat16_5.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb18)) ? u_xlat16_5.xyz : u_xlat3.xyz;
    u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
    u_xlat16_20 = max(u_xlat16_20, 0.0);
    u_xlat16_20 = log2(u_xlat16_20);
    u_xlat16_20 = u_xlat16_20 * _Shininess;
    u_xlat16_20 = exp2(u_xlat16_20);
    u_xlat16_6 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_6 = (-u_xlat16_20) + u_xlat16_6;
    u_xlat6.x = u_xlat16_6 + 1.0;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlati6.x = int(u_xlat6.x);
    u_xlat16_4.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlati6.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_4.xyz;
    SV_Target0.w = u_xlat10_1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump float u_xlat16_6;
ivec3 u_xlati6;
mediump vec3 u_xlat16_8;
bvec2 u_xlatb12;
float u_xlat18;
bool u_xlatb18;
mediump float u_xlat16_20;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat18 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat18 = floor(u_xlat18);
    u_xlat6.z = max(u_xlat18, 0.0);
    u_xlat16_8.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_8.x = u_xlat16_8.x * 0.5 + (-_SecondShadow);
    u_xlat16_8.x = u_xlat16_8.x + 1.0;
    u_xlat16_8.x = floor(u_xlat16_8.x);
    u_xlat16_8.x = max(u_xlat16_8.x, 0.0);
    u_xlati3 = int(u_xlat16_8.x);
    u_xlat16_8.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_8.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_8.xyz;
    u_xlat6.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlati6.xz = ivec2(u_xlat6.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati6.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati6.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati6.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati6.z != 0) ? u_xlat16_4.xyz : u_xlat16_8.xyz;
    u_xlat16_20 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_4.xyz = vec3(u_xlat16_20) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat3.xyz = u_xlat6.xxx * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb18 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat16_5.xyz = u_xlat1.xyz * u_xlat6.xxx + _CustomLightDir.xyz;
    u_xlat16_20 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_5.xyz = vec3(u_xlat16_20) * u_xlat16_5.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb18)) ? u_xlat16_5.xyz : u_xlat3.xyz;
    u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
    u_xlat16_20 = max(u_xlat16_20, 0.0);
    u_xlat16_20 = log2(u_xlat16_20);
    u_xlat16_20 = u_xlat16_20 * _Shininess;
    u_xlat16_20 = exp2(u_xlat16_20);
    u_xlat16_6 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_6 = (-u_xlat16_20) + u_xlat16_6;
    u_xlat6.x = u_xlat16_6 + 1.0;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlati6.x = int(u_xlat6.x);
    u_xlat16_4.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlati6.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_4.xyz;
    SV_Target0.w = u_xlat10_1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
int u_xlati3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump float u_xlat16_6;
ivec3 u_xlati6;
mediump vec3 u_xlat16_8;
bvec2 u_xlatb12;
float u_xlat18;
bool u_xlatb18;
mediump float u_xlat16_20;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb12.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb12.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb12.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat18 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat18 = floor(u_xlat18);
    u_xlat6.z = max(u_xlat18, 0.0);
    u_xlat16_8.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_8.x = u_xlat16_8.x * 0.5 + (-_SecondShadow);
    u_xlat16_8.x = u_xlat16_8.x + 1.0;
    u_xlat16_8.x = floor(u_xlat16_8.x);
    u_xlat16_8.x = max(u_xlat16_8.x, 0.0);
    u_xlati3 = int(u_xlat16_8.x);
    u_xlat16_8.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_8.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_8.xyz;
    u_xlat6.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlati6.xz = ivec2(u_xlat6.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati6.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati6.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati6.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati6.z != 0) ? u_xlat16_4.xyz : u_xlat16_8.xyz;
    u_xlat16_20 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_4.xyz = vec3(u_xlat16_20) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat3.xyz = u_xlat6.xxx * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb18 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * u_xlat6.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat16_5.xyz = u_xlat1.xyz * u_xlat6.xxx + _CustomLightDir.xyz;
    u_xlat16_20 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_20 = inversesqrt(u_xlat16_20);
    u_xlat16_5.xyz = vec3(u_xlat16_20) * u_xlat16_5.xyz;
    u_xlat16_5.xyz = (bool(u_xlatb18)) ? u_xlat16_5.xyz : u_xlat3.xyz;
    u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_5.xyz);
    u_xlat16_20 = max(u_xlat16_20, 0.0);
    u_xlat16_20 = log2(u_xlat16_20);
    u_xlat16_20 = u_xlat16_20 * _Shininess;
    u_xlat16_20 = exp2(u_xlat16_20);
    u_xlat16_6 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_6 = (-u_xlat16_20) + u_xlat16_6;
    u_xlat6.x = u_xlat16_6 + 1.0;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat6.x = max(u_xlat6.x, 0.0);
    u_xlati6.x = int(u_xlat6.x);
    u_xlat16_4.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_4.xyz = u_xlat10_0.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlati6.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_4.xyz;
    SV_Target0.w = u_xlat10_1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
int u_xlati1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
ivec3 u_xlati7;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_25 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati1) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat1.xz = vec2(u_xlat16_25) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_25 = (u_xlati7.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_25 = u_xlat16_25 + vs_COLOR1.x;
    u_xlat16_25 = u_xlat16_25 * 0.5 + (-_LightArea);
    u_xlat16_25 = u_xlat16_25 + 1.0;
    u_xlat16_25 = floor(u_xlat16_25);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlati7.x = int(u_xlat16_25);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat1.xzw = u_xlat1.xzw * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat2.xyz = u_xlat7.xxx * u_xlat1.xzw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb21 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xzw = u_xlat1.xzw * u_xlat7.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat16_6.xyz = u_xlat1.xzw * u_xlat7.xxx + _CustomLightDir.xyz;
    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb21)) ? u_xlat16_6.xyz : u_xlat2.xyz;
    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_25 = log2(u_xlat16_25);
    u_xlat16_25 = u_xlat16_25 * _Shininess;
    u_xlat16_25 = exp2(u_xlat16_25);
    u_xlat16_7 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_7 = (-u_xlat16_25) + u_xlat16_7;
    u_xlat7.x = u_xlat16_7 + 1.0;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.x = int(u_xlat7.x);
    u_xlat16_5.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_5.xyz = u_xlat10_0.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = (u_xlati7.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_4.xyz * _EnvColor.xyz + u_xlat16_5.xyz;
    SV_Target0.w = u_xlat10_1.y * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
int u_xlati1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
ivec3 u_xlati7;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_25 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati1) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat1.xz = vec2(u_xlat16_25) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_25 = (u_xlati7.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_25 = u_xlat16_25 + vs_COLOR1.x;
    u_xlat16_25 = u_xlat16_25 * 0.5 + (-_LightArea);
    u_xlat16_25 = u_xlat16_25 + 1.0;
    u_xlat16_25 = floor(u_xlat16_25);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlati7.x = int(u_xlat16_25);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat1.xzw = u_xlat1.xzw * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat2.xyz = u_xlat7.xxx * u_xlat1.xzw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb21 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xzw = u_xlat1.xzw * u_xlat7.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat16_6.xyz = u_xlat1.xzw * u_xlat7.xxx + _CustomLightDir.xyz;
    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb21)) ? u_xlat16_6.xyz : u_xlat2.xyz;
    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_25 = log2(u_xlat16_25);
    u_xlat16_25 = u_xlat16_25 * _Shininess;
    u_xlat16_25 = exp2(u_xlat16_25);
    u_xlat16_7 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_7 = (-u_xlat16_25) + u_xlat16_7;
    u_xlat7.x = u_xlat16_7 + 1.0;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.x = int(u_xlat7.x);
    u_xlat16_5.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_5.xyz = u_xlat10_0.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = (u_xlati7.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_4.xyz * _EnvColor.xyz + u_xlat16_5.xyz;
    SV_Target0.w = u_xlat10_1.y * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
int u_xlati1;
vec3 u_xlat2;
lowp vec3 u_xlat10_2;
lowp vec3 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump float u_xlat16_7;
ivec3 u_xlati7;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb21;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_25 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati1) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat1.xz = vec2(u_xlat16_25) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_25 = (u_xlati7.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_25 = u_xlat16_25 + vs_COLOR1.x;
    u_xlat16_25 = u_xlat16_25 * 0.5 + (-_LightArea);
    u_xlat16_25 = u_xlat16_25 + 1.0;
    u_xlat16_25 = floor(u_xlat16_25);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlati7.x = int(u_xlat16_25);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat1.xzw = u_xlat1.xzw * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat2.xyz = u_xlat7.xxx * u_xlat1.xzw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb21 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xzw = u_xlat1.xzw * u_xlat7.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat16_6.xyz = u_xlat1.xzw * u_xlat7.xxx + _CustomLightDir.xyz;
    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb21)) ? u_xlat16_6.xyz : u_xlat2.xyz;
    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_25 = log2(u_xlat16_25);
    u_xlat16_25 = u_xlat16_25 * _Shininess;
    u_xlat16_25 = exp2(u_xlat16_25);
    u_xlat16_7 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_7 = (-u_xlat16_25) + u_xlat16_7;
    u_xlat7.x = u_xlat16_7 + 1.0;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.x = int(u_xlat7.x);
    u_xlat16_5.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_5.xyz = u_xlat10_0.xxx * u_xlat16_5.xyz;
    u_xlat16_5.xyz = (u_xlati7.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_4.xyz * _EnvColor.xyz + u_xlat16_5.xyz;
    SV_Target0.w = u_xlat10_1.y * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump float u_xlat16_11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
bvec2 u_xlatb22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
bool u_xlatb33;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat2.xyz = u_xlat11.xxx * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * u_xlat11.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat11.xxx + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb33)) ? u_xlat16_9.xyz : u_xlat2.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_11 = (-u_xlat16_40) + u_xlat16_11;
    u_xlat11.x = u_xlat16_11 + 1.0;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.x = int(u_xlat11.x);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_7.xyz * _EnvColor.xyz + u_xlat16_8.xyz;
    SV_Target0.w = u_xlat1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump float u_xlat16_11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
bvec2 u_xlatb22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
bool u_xlatb33;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat2.xyz = u_xlat11.xxx * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * u_xlat11.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat11.xxx + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb33)) ? u_xlat16_9.xyz : u_xlat2.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_11 = (-u_xlat16_40) + u_xlat16_11;
    u_xlat11.x = u_xlat16_11 + 1.0;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.x = int(u_xlat11.x);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_7.xyz * _EnvColor.xyz + u_xlat16_8.xyz;
    SV_Target0.w = u_xlat1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
lowp vec3 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
vec3 u_xlat2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump float u_xlat16_11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
bvec2 u_xlatb22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
bool u_xlatb33;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat1.xyz = u_xlat1.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat2.xyz = u_xlat11.xxx * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb33 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * u_xlat11.xxx + (-_WorldSpaceLightPos0.xyz);
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat11.xxx + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb33)) ? u_xlat16_9.xyz : u_xlat2.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_11 = (-u_xlat16_40) + u_xlat16_11;
    u_xlat11.x = u_xlat16_11 + 1.0;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.x = int(u_xlat11.x);
    u_xlat16_8.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xxx * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_8.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    SV_Target0.xyz = u_xlat16_7.xyz * _EnvColor.xyz + u_xlat16_8.xyz;
    SV_Target0.w = u_xlat1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
int u_xlati3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
mediump float u_xlat16_8;
int u_xlati8;
bvec3 u_xlatb8;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
int u_xlati11;
float u_xlat16;
mediump float u_xlat16_16;
bvec2 u_xlatb16;
mediump float u_xlat16_26;
bool u_xlatb27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat3.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati11 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati11) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat11.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8 != 0) ? u_xlat11.y : u_xlat11.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8 = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (int(u_xlati8) != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat3.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + _WorldSpaceLightPos0.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat5.xyz = vec3(u_xlat8) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb27 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + (-_WorldSpaceLightPos0.xyz);
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat16_6.xyz = u_xlat1.xyz * vec3(u_xlat8) + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb27)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_26) + u_xlat16_8;
    u_xlat8 = u_xlat16_8 + 1.0;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati8) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
        u_xlat8 = (-u_xlat0.x) + 1.00100005;
        u_xlat8 = max(u_xlat8, 0.00100000005);
        u_xlat8 = min(u_xlat8, 1.0);
        u_xlat8 = log2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGShininess;
        u_xlat8 = exp2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGScale + _RGBias;
        u_xlat16 = u_xlat10_0.w + 0.100000001;
        u_xlatb5 = greaterThanEqual(vec4(u_xlat16), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb1.xyz = lessThan(vec4(u_xlat16), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb1.x = u_xlatb1.x && u_xlatb5.y;
        u_xlatb1.y = u_xlatb1.y && u_xlatb5.z;
        u_xlatb1.z = u_xlatb1.z && u_xlatb5.w;
        u_xlat16_6 = (u_xlatb1.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb1.y) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_6 = (u_xlatb1.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_5 = (u_xlatb5.x) ? _HRRimColor5 : u_xlat16_6;
        u_xlat16_5 = (int(_MoreHardRimColor) != 0) ? u_xlat16_5 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_26 = inversesqrt(u_xlat16_26);
        u_xlat16_6.xyz = vec3(u_xlat16_26) * _WorldSpaceLightPos0.xyz;
        u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
        u_xlat16_26 = u_xlat16_16 + 0.5;
        u_xlat16_26 = u_xlat0.x * u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_5.w<u_xlat16_26);
#else
        u_xlatb0 = u_xlat16_5.w<u_xlat16_26;
#endif
        u_xlat16_26 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_5.xyz;
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_HRRimPower) + u_xlat16_2.xyz;
        u_xlat16_26 = u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_26 * _RGRatio;
        u_xlat1.xyz = vec3(u_xlat8) * _RGColor.xyz + (-u_xlat16_2.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat16_2.xyz;
        u_xlat16_26 = float(_HRRimIntensity);
        u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat16_6.xyz;
        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
            u_xlat8 = (-u_xlat0.x) + 1.00100005;
            u_xlat8 = max(u_xlat8, 0.00100000005);
            u_xlat8 = min(u_xlat8, 1.0);
            u_xlat8 = log2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGShininess;
            u_xlat8 = exp2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGScale + _RGBias;
            u_xlat16_6.xyz = vec3(u_xlat8) * _RGColor.xyz;
            u_xlat8 = u_xlat10_0.w + 0.100000001;
            u_xlatb3 = greaterThanEqual(vec4(u_xlat8), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb8.xyz = lessThan(vec4(u_xlat8), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb8.x = u_xlatb8.x && u_xlatb3.y;
            u_xlatb8.y = u_xlatb8.y && u_xlatb3.z;
            u_xlatb8.z = u_xlatb8.z && u_xlatb3.w;
            u_xlat16_5 = (u_xlatb8.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_5 = (u_xlatb8.y) ? _HRRimColor2 : u_xlat16_5;
            u_xlat16_5 = (u_xlatb8.x) ? _HRRimColor3 : u_xlat16_5;
            u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_5;
            u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_26 = inversesqrt(u_xlat16_26);
            u_xlat16_7.xyz = vec3(u_xlat16_26) * _WorldSpaceLightPos0.xyz;
            u_xlat16_8 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
            u_xlat16_26 = u_xlat16_8 + 0.5;
            u_xlat16_26 = u_xlat0.x * u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_26);
#else
            u_xlatb0 = u_xlat16_3.w<u_xlat16_26;
#endif
            u_xlat16_26 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz;
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_HRRimPower);
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_6.xyz = u_xlat16_2.xyz + u_xlat16_6.xyz;
            u_xlat16_26 = float(_HRRimIntensity);
            u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_6.xyz);
            SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_6.xyz;
        } else {
            SV_Target0.xyz = u_xlat16_2.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat10_1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
int u_xlati3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
mediump float u_xlat16_8;
int u_xlati8;
bvec3 u_xlatb8;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
int u_xlati11;
float u_xlat16;
mediump float u_xlat16_16;
bvec2 u_xlatb16;
mediump float u_xlat16_26;
bool u_xlatb27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat3.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati11 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati11) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat11.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8 != 0) ? u_xlat11.y : u_xlat11.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8 = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (int(u_xlati8) != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat3.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + _WorldSpaceLightPos0.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat5.xyz = vec3(u_xlat8) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb27 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + (-_WorldSpaceLightPos0.xyz);
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat16_6.xyz = u_xlat1.xyz * vec3(u_xlat8) + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb27)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_26) + u_xlat16_8;
    u_xlat8 = u_xlat16_8 + 1.0;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati8) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
        u_xlat8 = (-u_xlat0.x) + 1.00100005;
        u_xlat8 = max(u_xlat8, 0.00100000005);
        u_xlat8 = min(u_xlat8, 1.0);
        u_xlat8 = log2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGShininess;
        u_xlat8 = exp2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGScale + _RGBias;
        u_xlat16 = u_xlat10_0.w + 0.100000001;
        u_xlatb5 = greaterThanEqual(vec4(u_xlat16), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb1.xyz = lessThan(vec4(u_xlat16), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb1.x = u_xlatb1.x && u_xlatb5.y;
        u_xlatb1.y = u_xlatb1.y && u_xlatb5.z;
        u_xlatb1.z = u_xlatb1.z && u_xlatb5.w;
        u_xlat16_6 = (u_xlatb1.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb1.y) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_6 = (u_xlatb1.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_5 = (u_xlatb5.x) ? _HRRimColor5 : u_xlat16_6;
        u_xlat16_5 = (int(_MoreHardRimColor) != 0) ? u_xlat16_5 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_26 = inversesqrt(u_xlat16_26);
        u_xlat16_6.xyz = vec3(u_xlat16_26) * _WorldSpaceLightPos0.xyz;
        u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
        u_xlat16_26 = u_xlat16_16 + 0.5;
        u_xlat16_26 = u_xlat0.x * u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_5.w<u_xlat16_26);
#else
        u_xlatb0 = u_xlat16_5.w<u_xlat16_26;
#endif
        u_xlat16_26 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_5.xyz;
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_HRRimPower) + u_xlat16_2.xyz;
        u_xlat16_26 = u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_26 * _RGRatio;
        u_xlat1.xyz = vec3(u_xlat8) * _RGColor.xyz + (-u_xlat16_2.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat16_2.xyz;
        u_xlat16_26 = float(_HRRimIntensity);
        u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat16_6.xyz;
        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
            u_xlat8 = (-u_xlat0.x) + 1.00100005;
            u_xlat8 = max(u_xlat8, 0.00100000005);
            u_xlat8 = min(u_xlat8, 1.0);
            u_xlat8 = log2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGShininess;
            u_xlat8 = exp2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGScale + _RGBias;
            u_xlat16_6.xyz = vec3(u_xlat8) * _RGColor.xyz;
            u_xlat8 = u_xlat10_0.w + 0.100000001;
            u_xlatb3 = greaterThanEqual(vec4(u_xlat8), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb8.xyz = lessThan(vec4(u_xlat8), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb8.x = u_xlatb8.x && u_xlatb3.y;
            u_xlatb8.y = u_xlatb8.y && u_xlatb3.z;
            u_xlatb8.z = u_xlatb8.z && u_xlatb3.w;
            u_xlat16_5 = (u_xlatb8.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_5 = (u_xlatb8.y) ? _HRRimColor2 : u_xlat16_5;
            u_xlat16_5 = (u_xlatb8.x) ? _HRRimColor3 : u_xlat16_5;
            u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_5;
            u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_26 = inversesqrt(u_xlat16_26);
            u_xlat16_7.xyz = vec3(u_xlat16_26) * _WorldSpaceLightPos0.xyz;
            u_xlat16_8 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
            u_xlat16_26 = u_xlat16_8 + 0.5;
            u_xlat16_26 = u_xlat0.x * u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_26);
#else
            u_xlatb0 = u_xlat16_3.w<u_xlat16_26;
#endif
            u_xlat16_26 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz;
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_HRRimPower);
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_6.xyz = u_xlat16_2.xyz + u_xlat16_6.xyz;
            u_xlat16_26 = float(_HRRimIntensity);
            u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_6.xyz);
            SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_6.xyz;
        } else {
            SV_Target0.xyz = u_xlat16_2.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat10_1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
int u_xlati3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
mediump float u_xlat16_8;
int u_xlati8;
bvec3 u_xlatb8;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
int u_xlati11;
float u_xlat16;
mediump float u_xlat16_16;
bvec2 u_xlatb16;
mediump float u_xlat16_26;
bool u_xlatb27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat3.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati11 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati11) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat11.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8 != 0) ? u_xlat11.y : u_xlat11.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8 = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (int(u_xlati8) != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat3.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + _WorldSpaceLightPos0.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat5.xyz = vec3(u_xlat8) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb27 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + (-_WorldSpaceLightPos0.xyz);
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat16_6.xyz = u_xlat1.xyz * vec3(u_xlat8) + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb27)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_26) + u_xlat16_8;
    u_xlat8 = u_xlat16_8 + 1.0;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati8) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
        u_xlat8 = (-u_xlat0.x) + 1.00100005;
        u_xlat8 = max(u_xlat8, 0.00100000005);
        u_xlat8 = min(u_xlat8, 1.0);
        u_xlat8 = log2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGShininess;
        u_xlat8 = exp2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGScale + _RGBias;
        u_xlat16 = u_xlat10_0.w + 0.100000001;
        u_xlatb5 = greaterThanEqual(vec4(u_xlat16), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb1.xyz = lessThan(vec4(u_xlat16), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb1.x = u_xlatb1.x && u_xlatb5.y;
        u_xlatb1.y = u_xlatb1.y && u_xlatb5.z;
        u_xlatb1.z = u_xlatb1.z && u_xlatb5.w;
        u_xlat16_6 = (u_xlatb1.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb1.y) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_6 = (u_xlatb1.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_5 = (u_xlatb5.x) ? _HRRimColor5 : u_xlat16_6;
        u_xlat16_5 = (int(_MoreHardRimColor) != 0) ? u_xlat16_5 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_26 = inversesqrt(u_xlat16_26);
        u_xlat16_6.xyz = vec3(u_xlat16_26) * _WorldSpaceLightPos0.xyz;
        u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
        u_xlat16_26 = u_xlat16_16 + 0.5;
        u_xlat16_26 = u_xlat0.x * u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_5.w<u_xlat16_26);
#else
        u_xlatb0 = u_xlat16_5.w<u_xlat16_26;
#endif
        u_xlat16_26 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_5.xyz;
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_HRRimPower) + u_xlat16_2.xyz;
        u_xlat16_26 = u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_26 * _RGRatio;
        u_xlat1.xyz = vec3(u_xlat8) * _RGColor.xyz + (-u_xlat16_2.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat16_2.xyz;
        u_xlat16_26 = float(_HRRimIntensity);
        u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat16_6.xyz;
        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
            u_xlat8 = (-u_xlat0.x) + 1.00100005;
            u_xlat8 = max(u_xlat8, 0.00100000005);
            u_xlat8 = min(u_xlat8, 1.0);
            u_xlat8 = log2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGShininess;
            u_xlat8 = exp2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGScale + _RGBias;
            u_xlat16_6.xyz = vec3(u_xlat8) * _RGColor.xyz;
            u_xlat8 = u_xlat10_0.w + 0.100000001;
            u_xlatb3 = greaterThanEqual(vec4(u_xlat8), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb8.xyz = lessThan(vec4(u_xlat8), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb8.x = u_xlatb8.x && u_xlatb3.y;
            u_xlatb8.y = u_xlatb8.y && u_xlatb3.z;
            u_xlatb8.z = u_xlatb8.z && u_xlatb3.w;
            u_xlat16_5 = (u_xlatb8.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_5 = (u_xlatb8.y) ? _HRRimColor2 : u_xlat16_5;
            u_xlat16_5 = (u_xlatb8.x) ? _HRRimColor3 : u_xlat16_5;
            u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_5;
            u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_26 = inversesqrt(u_xlat16_26);
            u_xlat16_7.xyz = vec3(u_xlat16_26) * _WorldSpaceLightPos0.xyz;
            u_xlat16_8 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
            u_xlat16_26 = u_xlat16_8 + 0.5;
            u_xlat16_26 = u_xlat0.x * u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_26);
#else
            u_xlatb0 = u_xlat16_3.w<u_xlat16_26;
#endif
            u_xlat16_26 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz;
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_HRRimPower);
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_6.xyz = u_xlat16_2.xyz + u_xlat16_6.xyz;
            u_xlat16_26 = float(_HRRimIntensity);
            u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_6.xyz);
            SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_6.xyz;
        } else {
            SV_Target0.xyz = u_xlat16_2.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat10_1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
int u_xlati3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
mediump float u_xlat16_8;
int u_xlati8;
bvec3 u_xlatb8;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
int u_xlati11;
float u_xlat16;
mediump float u_xlat16_16;
bvec2 u_xlatb16;
mediump float u_xlat16_26;
bool u_xlatb27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat3.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati11 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati11) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat11.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8 != 0) ? u_xlat11.y : u_xlat11.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8 = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (int(u_xlati8) != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat3.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + _WorldSpaceLightPos0.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat5.xyz = vec3(u_xlat8) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb27 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + (-_WorldSpaceLightPos0.xyz);
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat16_6.xyz = u_xlat1.xyz * vec3(u_xlat8) + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb27)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_26) + u_xlat16_8;
    u_xlat8 = u_xlat16_8 + 1.0;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati8) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
        u_xlat8 = (-u_xlat0.x) + 1.00100005;
        u_xlat8 = max(u_xlat8, 0.00100000005);
        u_xlat8 = min(u_xlat8, 1.0);
        u_xlat8 = log2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGShininess;
        u_xlat8 = exp2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGScale + _RGBias;
        u_xlat16 = u_xlat10_0.w + 0.100000001;
        u_xlatb5 = greaterThanEqual(vec4(u_xlat16), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb1.xyz = lessThan(vec4(u_xlat16), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb1.x = u_xlatb1.x && u_xlatb5.y;
        u_xlatb1.y = u_xlatb1.y && u_xlatb5.z;
        u_xlatb1.z = u_xlatb1.z && u_xlatb5.w;
        u_xlat16_6 = (u_xlatb1.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb1.y) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_6 = (u_xlatb1.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_5 = (u_xlatb5.x) ? _HRRimColor5 : u_xlat16_6;
        u_xlat16_5 = (int(_MoreHardRimColor) != 0) ? u_xlat16_5 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_26 = inversesqrt(u_xlat16_26);
        u_xlat16_6.xyz = vec3(u_xlat16_26) * _WorldSpaceLightPos0.xyz;
        u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
        u_xlat16_26 = u_xlat16_16 + 0.5;
        u_xlat16_26 = u_xlat0.x * u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_5.w<u_xlat16_26);
#else
        u_xlatb0 = u_xlat16_5.w<u_xlat16_26;
#endif
        u_xlat16_26 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_5.xyz;
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_HRRimPower) + u_xlat16_2.xyz;
        u_xlat16_26 = u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_26 * _RGRatio;
        u_xlat1.xyz = vec3(u_xlat8) * _RGColor.xyz + (-u_xlat16_2.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat16_2.xyz;
        u_xlat16_26 = float(_HRRimIntensity);
        u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat16_6.xyz;
        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
            u_xlat8 = (-u_xlat0.x) + 1.00100005;
            u_xlat8 = max(u_xlat8, 0.00100000005);
            u_xlat8 = min(u_xlat8, 1.0);
            u_xlat8 = log2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGShininess;
            u_xlat8 = exp2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGScale + _RGBias;
            u_xlat16_6.xyz = vec3(u_xlat8) * _RGColor.xyz;
            u_xlat8 = u_xlat10_0.w + 0.100000001;
            u_xlatb3 = greaterThanEqual(vec4(u_xlat8), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb8.xyz = lessThan(vec4(u_xlat8), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb8.x = u_xlatb8.x && u_xlatb3.y;
            u_xlatb8.y = u_xlatb8.y && u_xlatb3.z;
            u_xlatb8.z = u_xlatb8.z && u_xlatb3.w;
            u_xlat16_5 = (u_xlatb8.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_5 = (u_xlatb8.y) ? _HRRimColor2 : u_xlat16_5;
            u_xlat16_5 = (u_xlatb8.x) ? _HRRimColor3 : u_xlat16_5;
            u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_5;
            u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_26 = inversesqrt(u_xlat16_26);
            u_xlat16_7.xyz = vec3(u_xlat16_26) * _WorldSpaceLightPos0.xyz;
            u_xlat16_8 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
            u_xlat16_26 = u_xlat16_8 + 0.5;
            u_xlat16_26 = u_xlat0.x * u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_26);
#else
            u_xlatb0 = u_xlat16_3.w<u_xlat16_26;
#endif
            u_xlat16_26 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz;
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_HRRimPower);
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_6.xyz = u_xlat16_2.xyz + u_xlat16_6.xyz;
            u_xlat16_26 = float(_HRRimIntensity);
            u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_6.xyz);
            SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_6.xyz;
        } else {
            SV_Target0.xyz = u_xlat16_2.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat10_1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
int u_xlati3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
mediump float u_xlat16_8;
int u_xlati8;
bvec3 u_xlatb8;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
int u_xlati11;
float u_xlat16;
mediump float u_xlat16_16;
bvec2 u_xlatb16;
mediump float u_xlat16_26;
bool u_xlatb27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat3.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati11 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati11) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat11.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8 != 0) ? u_xlat11.y : u_xlat11.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8 = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (int(u_xlati8) != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat3.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + _WorldSpaceLightPos0.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat5.xyz = vec3(u_xlat8) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb27 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + (-_WorldSpaceLightPos0.xyz);
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat16_6.xyz = u_xlat1.xyz * vec3(u_xlat8) + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb27)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_26) + u_xlat16_8;
    u_xlat8 = u_xlat16_8 + 1.0;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati8) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
        u_xlat8 = (-u_xlat0.x) + 1.00100005;
        u_xlat8 = max(u_xlat8, 0.00100000005);
        u_xlat8 = min(u_xlat8, 1.0);
        u_xlat8 = log2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGShininess;
        u_xlat8 = exp2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGScale + _RGBias;
        u_xlat16 = u_xlat10_0.w + 0.100000001;
        u_xlatb5 = greaterThanEqual(vec4(u_xlat16), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb1.xyz = lessThan(vec4(u_xlat16), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb1.x = u_xlatb1.x && u_xlatb5.y;
        u_xlatb1.y = u_xlatb1.y && u_xlatb5.z;
        u_xlatb1.z = u_xlatb1.z && u_xlatb5.w;
        u_xlat16_6 = (u_xlatb1.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb1.y) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_6 = (u_xlatb1.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_5 = (u_xlatb5.x) ? _HRRimColor5 : u_xlat16_6;
        u_xlat16_5 = (int(_MoreHardRimColor) != 0) ? u_xlat16_5 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_26 = inversesqrt(u_xlat16_26);
        u_xlat16_6.xyz = vec3(u_xlat16_26) * _WorldSpaceLightPos0.xyz;
        u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
        u_xlat16_26 = u_xlat16_16 + 0.5;
        u_xlat16_26 = u_xlat0.x * u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_5.w<u_xlat16_26);
#else
        u_xlatb0 = u_xlat16_5.w<u_xlat16_26;
#endif
        u_xlat16_26 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_5.xyz;
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_HRRimPower) + u_xlat16_2.xyz;
        u_xlat16_26 = u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_26 * _RGRatio;
        u_xlat1.xyz = vec3(u_xlat8) * _RGColor.xyz + (-u_xlat16_2.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat16_2.xyz;
        u_xlat16_26 = float(_HRRimIntensity);
        u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat16_6.xyz;
        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
            u_xlat8 = (-u_xlat0.x) + 1.00100005;
            u_xlat8 = max(u_xlat8, 0.00100000005);
            u_xlat8 = min(u_xlat8, 1.0);
            u_xlat8 = log2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGShininess;
            u_xlat8 = exp2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGScale + _RGBias;
            u_xlat16_6.xyz = vec3(u_xlat8) * _RGColor.xyz;
            u_xlat8 = u_xlat10_0.w + 0.100000001;
            u_xlatb3 = greaterThanEqual(vec4(u_xlat8), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb8.xyz = lessThan(vec4(u_xlat8), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb8.x = u_xlatb8.x && u_xlatb3.y;
            u_xlatb8.y = u_xlatb8.y && u_xlatb3.z;
            u_xlatb8.z = u_xlatb8.z && u_xlatb3.w;
            u_xlat16_5 = (u_xlatb8.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_5 = (u_xlatb8.y) ? _HRRimColor2 : u_xlat16_5;
            u_xlat16_5 = (u_xlatb8.x) ? _HRRimColor3 : u_xlat16_5;
            u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_5;
            u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_26 = inversesqrt(u_xlat16_26);
            u_xlat16_7.xyz = vec3(u_xlat16_26) * _WorldSpaceLightPos0.xyz;
            u_xlat16_8 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
            u_xlat16_26 = u_xlat16_8 + 0.5;
            u_xlat16_26 = u_xlat0.x * u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_26);
#else
            u_xlatb0 = u_xlat16_3.w<u_xlat16_26;
#endif
            u_xlat16_26 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz;
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_HRRimPower);
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_6.xyz = u_xlat16_2.xyz + u_xlat16_6.xyz;
            u_xlat16_26 = float(_HRRimIntensity);
            u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_6.xyz);
            SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_6.xyz;
        } else {
            SV_Target0.xyz = u_xlat16_2.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat10_1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
int u_xlati3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
bvec4 u_xlatb5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
mediump float u_xlat16_8;
int u_xlati8;
bvec3 u_xlatb8;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
int u_xlati11;
float u_xlat16;
mediump float u_xlat16_16;
bvec2 u_xlatb16;
mediump float u_xlat16_26;
bool u_xlatb27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat3.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
    u_xlat16_10.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_10.x = u_xlat16_10.x * 0.5 + (-_SecondShadow);
    u_xlat16_10.x = u_xlat16_10.x + 1.0;
    u_xlat16_10.x = floor(u_xlat16_10.x);
    u_xlat16_10.x = max(u_xlat16_10.x, 0.0);
    u_xlati11 = int(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_10.xyz = (int(u_xlati11) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat8 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat11.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati8 != 0) ? u_xlat11.y : u_xlat11.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati8 = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (int(u_xlati8) != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_10.xyz;
    u_xlat16_26 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_4.xyz = vec3(u_xlat16_26) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat3.xyz = vec3(u_xlat8) * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + _WorldSpaceLightPos0.xyz;
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat5.xyz = vec3(u_xlat8) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb27 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat8) + (-_WorldSpaceLightPos0.xyz);
    u_xlat8 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat16_6.xyz = u_xlat1.xyz * vec3(u_xlat8) + _CustomLightDir.xyz;
    u_xlat16_26 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = inversesqrt(u_xlat16_26);
    u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb27)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_26 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_26 = max(u_xlat16_26, 0.0);
    u_xlat16_26 = log2(u_xlat16_26);
    u_xlat16_26 = u_xlat16_26 * _Shininess;
    u_xlat16_26 = exp2(u_xlat16_26);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_26) + u_xlat16_8;
    u_xlat8 = u_xlat16_8 + 1.0;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati8) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
        u_xlat8 = (-u_xlat0.x) + 1.00100005;
        u_xlat8 = max(u_xlat8, 0.00100000005);
        u_xlat8 = min(u_xlat8, 1.0);
        u_xlat8 = log2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGShininess;
        u_xlat8 = exp2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGScale + _RGBias;
        u_xlat16 = u_xlat10_0.w + 0.100000001;
        u_xlatb5 = greaterThanEqual(vec4(u_xlat16), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb1.xyz = lessThan(vec4(u_xlat16), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb1.x = u_xlatb1.x && u_xlatb5.y;
        u_xlatb1.y = u_xlatb1.y && u_xlatb5.z;
        u_xlatb1.z = u_xlatb1.z && u_xlatb5.w;
        u_xlat16_6 = (u_xlatb1.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb1.y) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_6 = (u_xlatb1.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_5 = (u_xlatb5.x) ? _HRRimColor5 : u_xlat16_6;
        u_xlat16_5 = (int(_MoreHardRimColor) != 0) ? u_xlat16_5 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_26 = inversesqrt(u_xlat16_26);
        u_xlat16_6.xyz = vec3(u_xlat16_26) * _WorldSpaceLightPos0.xyz;
        u_xlat16_16 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
        u_xlat16_26 = u_xlat16_16 + 0.5;
        u_xlat16_26 = u_xlat0.x * u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_5.w<u_xlat16_26);
#else
        u_xlatb0 = u_xlat16_5.w<u_xlat16_26;
#endif
        u_xlat16_26 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_6.xyz = vec3(u_xlat16_26) * u_xlat16_5.xyz;
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_HRRimPower) + u_xlat16_2.xyz;
        u_xlat16_26 = u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_26 = min(max(u_xlat16_26, 0.0), 1.0);
#else
        u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_26 * _RGRatio;
        u_xlat1.xyz = vec3(u_xlat8) * _RGColor.xyz + (-u_xlat16_2.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat16_2.xyz;
        u_xlat16_26 = float(_HRRimIntensity);
        u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat16_6.xyz;
        SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_6.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
            u_xlat8 = (-u_xlat0.x) + 1.00100005;
            u_xlat8 = max(u_xlat8, 0.00100000005);
            u_xlat8 = min(u_xlat8, 1.0);
            u_xlat8 = log2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGShininess;
            u_xlat8 = exp2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGScale + _RGBias;
            u_xlat16_6.xyz = vec3(u_xlat8) * _RGColor.xyz;
            u_xlat8 = u_xlat10_0.w + 0.100000001;
            u_xlatb3 = greaterThanEqual(vec4(u_xlat8), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb8.xyz = lessThan(vec4(u_xlat8), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb8.x = u_xlatb8.x && u_xlatb3.y;
            u_xlatb8.y = u_xlatb8.y && u_xlatb3.z;
            u_xlatb8.z = u_xlatb8.z && u_xlatb3.w;
            u_xlat16_5 = (u_xlatb8.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_5 = (u_xlatb8.y) ? _HRRimColor2 : u_xlat16_5;
            u_xlat16_5 = (u_xlatb8.x) ? _HRRimColor3 : u_xlat16_5;
            u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_5;
            u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_26 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_26 = inversesqrt(u_xlat16_26);
            u_xlat16_7.xyz = vec3(u_xlat16_26) * _WorldSpaceLightPos0.xyz;
            u_xlat16_8 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
            u_xlat16_26 = u_xlat16_8 + 0.5;
            u_xlat16_26 = u_xlat0.x * u_xlat16_26;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_26);
#else
            u_xlatb0 = u_xlat16_3.w<u_xlat16_26;
#endif
            u_xlat16_26 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_4.xyz = vec3(u_xlat16_26) * u_xlat16_3.xyz;
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_HRRimPower);
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_4.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_6.xyz = u_xlat16_2.xyz + u_xlat16_6.xyz;
            u_xlat16_26 = float(_HRRimIntensity);
            u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_6.xyz);
            SV_Target0.xyz = vec3(u_xlat16_26) * u_xlat16_4.xyz + u_xlat16_6.xyz;
        } else {
            SV_Target0.xyz = u_xlat16_2.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat10_1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
int u_xlati1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec3 u_xlat10_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
mediump float u_xlat16_8;
int u_xlati8;
bvec3 u_xlatb8;
float u_xlat16;
mediump float u_xlat16_16;
bvec2 u_xlatb16;
vec2 u_xlat17;
int u_xlati17;
bool u_xlatb26;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_28 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat1.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati17 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati17) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat17.xy = vec2(u_xlat16_28) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_28 = (u_xlati8 != 0) ? u_xlat17.y : u_xlat17.x;
    u_xlat16_28 = u_xlat16_28 + vs_COLOR1.x;
    u_xlat16_28 = u_xlat16_28 * 0.5 + (-_LightArea);
    u_xlat16_28 = u_xlat16_28 + 1.0;
    u_xlat16_28 = floor(u_xlat16_28);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlati8 = int(u_xlat16_28);
    u_xlat16_4.xyz = (int(u_xlati8) != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (int(u_xlati1) != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_5.xyz = vec3(u_xlat16_28) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8 = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xzw;
    u_xlat1.xzw = u_xlat1.xzw * vec3(u_xlat8) + _WorldSpaceLightPos0.xyz;
    u_xlat8 = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat3.xyz = vec3(u_xlat8) * u_xlat1.xzw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb26 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xzw = u_xlat1.xzw * vec3(u_xlat8) + (-_WorldSpaceLightPos0.xyz);
    u_xlat8 = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat16_6.xyz = u_xlat1.xzw * vec3(u_xlat8) + _CustomLightDir.xyz;
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb26)) ? u_xlat16_6.xyz : u_xlat3.xyz;
    u_xlat16_28 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = log2(u_xlat16_28);
    u_xlat16_28 = u_xlat16_28 * _Shininess;
    u_xlat16_28 = exp2(u_xlat16_28);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_28) + u_xlat16_8;
    u_xlat8 = u_xlat16_8 + 1.0;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati8) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_5.xyz);
        u_xlat8 = (-u_xlat0.x) + 1.00100005;
        u_xlat8 = max(u_xlat8, 0.00100000005);
        u_xlat8 = min(u_xlat8, 1.0);
        u_xlat8 = log2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGShininess;
        u_xlat8 = exp2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGScale + _RGBias;
        u_xlat16 = u_xlat10_0.w + 0.100000001;
        u_xlatb3 = greaterThanEqual(vec4(u_xlat16), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb1.xzw = lessThan(vec4(u_xlat16), vec4(0.600000024, 0.0, 0.400000006, 0.800000012)).xzw;
        u_xlatb1.x = u_xlatb1.x && u_xlatb3.y;
        u_xlatb1.z = u_xlatb1.z && u_xlatb3.z;
        u_xlatb1.w = u_xlatb1.w && u_xlatb3.w;
        u_xlat16_6 = (u_xlatb1.w) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb1.z) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_6 = (u_xlatb1.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_6;
        u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_28 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_28 = inversesqrt(u_xlat16_28);
        u_xlat16_6.xyz = vec3(u_xlat16_28) * _WorldSpaceLightPos0.xyz;
        u_xlat16_16 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
        u_xlat16_28 = u_xlat16_16 + 0.5;
        u_xlat16_28 = u_xlat0.x * u_xlat16_28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_28);
#else
        u_xlatb0 = u_xlat16_3.w<u_xlat16_28;
#endif
        u_xlat16_28 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(u_xlat16_28);
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_HRRimPower) + u_xlat16_4.xyz;
        u_xlat16_28 = u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
        u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_28 * _RGRatio;
        u_xlat1.xzw = vec3(u_xlat8) * _RGColor.xyz + (-u_xlat16_4.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xzw + u_xlat16_4.xyz;
        u_xlat16_28 = float(_HRRimIntensity);
        u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat16_6.xyz;
        SV_Target0.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_5.xyz);
            u_xlat8 = (-u_xlat0.x) + 1.00100005;
            u_xlat8 = max(u_xlat8, 0.00100000005);
            u_xlat8 = min(u_xlat8, 1.0);
            u_xlat8 = log2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGShininess;
            u_xlat8 = exp2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGScale + _RGBias;
            u_xlat16_6.xyz = vec3(u_xlat8) * _RGColor.xyz;
            u_xlat8 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat8), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb8.xyz = lessThan(vec4(u_xlat8), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb8.x = u_xlatb8.x && u_xlatb2.y;
            u_xlatb8.y = u_xlatb8.y && u_xlatb2.z;
            u_xlatb8.z = u_xlatb8.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb8.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb8.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb8.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_28 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_28 = inversesqrt(u_xlat16_28);
            u_xlat16_7.xyz = vec3(u_xlat16_28) * _WorldSpaceLightPos0.xyz;
            u_xlat16_8 = dot(u_xlat16_5.xyz, u_xlat16_7.xyz);
            u_xlat16_28 = u_xlat16_8 + 0.5;
            u_xlat16_28 = u_xlat0.x * u_xlat16_28;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_28);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_28;
#endif
            u_xlat16_28 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(u_xlat16_28);
            u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_HRRimPower);
            u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_5.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
            u_xlat16_28 = float(_HRRimIntensity);
            u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
            SV_Target0.xyz = vec3(u_xlat16_28) * u_xlat16_5.xyz + u_xlat16_6.xyz;
        } else {
            SV_Target0.xyz = u_xlat16_4.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat10_1.y * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
int u_xlati1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec3 u_xlat10_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
mediump float u_xlat16_8;
int u_xlati8;
bvec3 u_xlatb8;
float u_xlat16;
mediump float u_xlat16_16;
bvec2 u_xlatb16;
vec2 u_xlat17;
int u_xlati17;
bool u_xlatb26;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_28 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat1.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati17 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati17) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat17.xy = vec2(u_xlat16_28) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_28 = (u_xlati8 != 0) ? u_xlat17.y : u_xlat17.x;
    u_xlat16_28 = u_xlat16_28 + vs_COLOR1.x;
    u_xlat16_28 = u_xlat16_28 * 0.5 + (-_LightArea);
    u_xlat16_28 = u_xlat16_28 + 1.0;
    u_xlat16_28 = floor(u_xlat16_28);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlati8 = int(u_xlat16_28);
    u_xlat16_4.xyz = (int(u_xlati8) != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (int(u_xlati1) != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_5.xyz = vec3(u_xlat16_28) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8 = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xzw;
    u_xlat1.xzw = u_xlat1.xzw * vec3(u_xlat8) + _WorldSpaceLightPos0.xyz;
    u_xlat8 = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat3.xyz = vec3(u_xlat8) * u_xlat1.xzw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb26 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xzw = u_xlat1.xzw * vec3(u_xlat8) + (-_WorldSpaceLightPos0.xyz);
    u_xlat8 = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat16_6.xyz = u_xlat1.xzw * vec3(u_xlat8) + _CustomLightDir.xyz;
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb26)) ? u_xlat16_6.xyz : u_xlat3.xyz;
    u_xlat16_28 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = log2(u_xlat16_28);
    u_xlat16_28 = u_xlat16_28 * _Shininess;
    u_xlat16_28 = exp2(u_xlat16_28);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_28) + u_xlat16_8;
    u_xlat8 = u_xlat16_8 + 1.0;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati8) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_5.xyz);
        u_xlat8 = (-u_xlat0.x) + 1.00100005;
        u_xlat8 = max(u_xlat8, 0.00100000005);
        u_xlat8 = min(u_xlat8, 1.0);
        u_xlat8 = log2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGShininess;
        u_xlat8 = exp2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGScale + _RGBias;
        u_xlat16 = u_xlat10_0.w + 0.100000001;
        u_xlatb3 = greaterThanEqual(vec4(u_xlat16), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb1.xzw = lessThan(vec4(u_xlat16), vec4(0.600000024, 0.0, 0.400000006, 0.800000012)).xzw;
        u_xlatb1.x = u_xlatb1.x && u_xlatb3.y;
        u_xlatb1.z = u_xlatb1.z && u_xlatb3.z;
        u_xlatb1.w = u_xlatb1.w && u_xlatb3.w;
        u_xlat16_6 = (u_xlatb1.w) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb1.z) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_6 = (u_xlatb1.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_6;
        u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_28 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_28 = inversesqrt(u_xlat16_28);
        u_xlat16_6.xyz = vec3(u_xlat16_28) * _WorldSpaceLightPos0.xyz;
        u_xlat16_16 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
        u_xlat16_28 = u_xlat16_16 + 0.5;
        u_xlat16_28 = u_xlat0.x * u_xlat16_28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_28);
#else
        u_xlatb0 = u_xlat16_3.w<u_xlat16_28;
#endif
        u_xlat16_28 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(u_xlat16_28);
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_HRRimPower) + u_xlat16_4.xyz;
        u_xlat16_28 = u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
        u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_28 * _RGRatio;
        u_xlat1.xzw = vec3(u_xlat8) * _RGColor.xyz + (-u_xlat16_4.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xzw + u_xlat16_4.xyz;
        u_xlat16_28 = float(_HRRimIntensity);
        u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat16_6.xyz;
        SV_Target0.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_5.xyz);
            u_xlat8 = (-u_xlat0.x) + 1.00100005;
            u_xlat8 = max(u_xlat8, 0.00100000005);
            u_xlat8 = min(u_xlat8, 1.0);
            u_xlat8 = log2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGShininess;
            u_xlat8 = exp2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGScale + _RGBias;
            u_xlat16_6.xyz = vec3(u_xlat8) * _RGColor.xyz;
            u_xlat8 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat8), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb8.xyz = lessThan(vec4(u_xlat8), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb8.x = u_xlatb8.x && u_xlatb2.y;
            u_xlatb8.y = u_xlatb8.y && u_xlatb2.z;
            u_xlatb8.z = u_xlatb8.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb8.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb8.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb8.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_28 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_28 = inversesqrt(u_xlat16_28);
            u_xlat16_7.xyz = vec3(u_xlat16_28) * _WorldSpaceLightPos0.xyz;
            u_xlat16_8 = dot(u_xlat16_5.xyz, u_xlat16_7.xyz);
            u_xlat16_28 = u_xlat16_8 + 0.5;
            u_xlat16_28 = u_xlat0.x * u_xlat16_28;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_28);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_28;
#endif
            u_xlat16_28 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(u_xlat16_28);
            u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_HRRimPower);
            u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_5.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
            u_xlat16_28 = float(_HRRimIntensity);
            u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
            SV_Target0.xyz = vec3(u_xlat16_28) * u_xlat16_5.xyz + u_xlat16_6.xyz;
        } else {
            SV_Target0.xyz = u_xlat16_4.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat10_1.y * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
int u_xlati1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec3 u_xlat10_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
mediump float u_xlat16_8;
int u_xlati8;
bvec3 u_xlatb8;
float u_xlat16;
mediump float u_xlat16_16;
bvec2 u_xlatb16;
vec2 u_xlat17;
int u_xlati17;
bool u_xlatb26;
mediump float u_xlat16_28;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_28 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat1.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati17 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati17) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat8 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat17.xy = vec2(u_xlat16_28) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_28 = (u_xlati8 != 0) ? u_xlat17.y : u_xlat17.x;
    u_xlat16_28 = u_xlat16_28 + vs_COLOR1.x;
    u_xlat16_28 = u_xlat16_28 * 0.5 + (-_LightArea);
    u_xlat16_28 = u_xlat16_28 + 1.0;
    u_xlat16_28 = floor(u_xlat16_28);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlati8 = int(u_xlat16_28);
    u_xlat16_4.xyz = (int(u_xlati8) != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (int(u_xlati1) != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat16_28 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_5.xyz = vec3(u_xlat16_28) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat8 = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat2.xyz = vec3(u_xlat8) * u_xlat1.xzw;
    u_xlat1.xzw = u_xlat1.xzw * vec3(u_xlat8) + _WorldSpaceLightPos0.xyz;
    u_xlat8 = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat3.xyz = vec3(u_xlat8) * u_xlat1.xzw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb26 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb26 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xzw = u_xlat1.xzw * vec3(u_xlat8) + (-_WorldSpaceLightPos0.xyz);
    u_xlat8 = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat8 = inversesqrt(u_xlat8);
    u_xlat16_6.xyz = u_xlat1.xzw * vec3(u_xlat8) + _CustomLightDir.xyz;
    u_xlat16_28 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_28 = inversesqrt(u_xlat16_28);
    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb26)) ? u_xlat16_6.xyz : u_xlat3.xyz;
    u_xlat16_28 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
    u_xlat16_28 = max(u_xlat16_28, 0.0);
    u_xlat16_28 = log2(u_xlat16_28);
    u_xlat16_28 = u_xlat16_28 * _Shininess;
    u_xlat16_28 = exp2(u_xlat16_28);
    u_xlat16_8 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_8 = (-u_xlat16_28) + u_xlat16_8;
    u_xlat8 = u_xlat16_8 + 1.0;
    u_xlat8 = floor(u_xlat8);
    u_xlat8 = max(u_xlat8, 0.0);
    u_xlati8 = int(u_xlat8);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati8) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_5.xyz);
        u_xlat8 = (-u_xlat0.x) + 1.00100005;
        u_xlat8 = max(u_xlat8, 0.00100000005);
        u_xlat8 = min(u_xlat8, 1.0);
        u_xlat8 = log2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGShininess;
        u_xlat8 = exp2(u_xlat8);
        u_xlat8 = u_xlat8 * _RGScale + _RGBias;
        u_xlat16 = u_xlat10_0.w + 0.100000001;
        u_xlatb3 = greaterThanEqual(vec4(u_xlat16), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb1.xzw = lessThan(vec4(u_xlat16), vec4(0.600000024, 0.0, 0.400000006, 0.800000012)).xzw;
        u_xlatb1.x = u_xlatb1.x && u_xlatb3.y;
        u_xlatb1.z = u_xlatb1.z && u_xlatb3.z;
        u_xlatb1.w = u_xlatb1.w && u_xlatb3.w;
        u_xlat16_6 = (u_xlatb1.w) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb1.z) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_6 = (u_xlatb1.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_6;
        u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_28 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_28 = inversesqrt(u_xlat16_28);
        u_xlat16_6.xyz = vec3(u_xlat16_28) * _WorldSpaceLightPos0.xyz;
        u_xlat16_16 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
        u_xlat16_28 = u_xlat16_16 + 0.5;
        u_xlat16_28 = u_xlat0.x * u_xlat16_28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_28);
#else
        u_xlatb0 = u_xlat16_3.w<u_xlat16_28;
#endif
        u_xlat16_28 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(u_xlat16_28);
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_HRRimPower) + u_xlat16_4.xyz;
        u_xlat16_28 = u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_28 = min(max(u_xlat16_28, 0.0), 1.0);
#else
        u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_28 * _RGRatio;
        u_xlat1.xzw = vec3(u_xlat8) * _RGColor.xyz + (-u_xlat16_4.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xzw + u_xlat16_4.xyz;
        u_xlat16_28 = float(_HRRimIntensity);
        u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat16_6.xyz;
        SV_Target0.xyz = vec3(u_xlat16_28) * u_xlat16_6.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_5.xyz);
            u_xlat8 = (-u_xlat0.x) + 1.00100005;
            u_xlat8 = max(u_xlat8, 0.00100000005);
            u_xlat8 = min(u_xlat8, 1.0);
            u_xlat8 = log2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGShininess;
            u_xlat8 = exp2(u_xlat8);
            u_xlat8 = u_xlat8 * _RGScale + _RGBias;
            u_xlat16_6.xyz = vec3(u_xlat8) * _RGColor.xyz;
            u_xlat8 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat8), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb8.xyz = lessThan(vec4(u_xlat8), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb8.x = u_xlatb8.x && u_xlatb2.y;
            u_xlatb8.y = u_xlatb8.y && u_xlatb2.z;
            u_xlatb8.z = u_xlatb8.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb8.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb8.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb8.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_28 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_28 = inversesqrt(u_xlat16_28);
            u_xlat16_7.xyz = vec3(u_xlat16_28) * _WorldSpaceLightPos0.xyz;
            u_xlat16_8 = dot(u_xlat16_5.xyz, u_xlat16_7.xyz);
            u_xlat16_28 = u_xlat16_8 + 0.5;
            u_xlat16_28 = u_xlat0.x * u_xlat16_28;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_28);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_28;
#endif
            u_xlat16_28 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(u_xlat16_28);
            u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_HRRimPower);
            u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_5.xyz = u_xlat16_4.xyz + u_xlat16_5.xyz;
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_6.xyz = u_xlat16_4.xyz + u_xlat16_6.xyz;
            u_xlat16_28 = float(_HRRimIntensity);
            u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
            SV_Target0.xyz = vec3(u_xlat16_28) * u_xlat16_5.xyz + u_xlat16_6.xyz;
        } else {
            SV_Target0.xyz = u_xlat16_4.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb16.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb16.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb16.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat10_1.y * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
int u_xlati2;
bvec4 u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec4 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
float u_xlat11;
mediump float u_xlat16_11;
int u_xlati11;
bvec3 u_xlatb11;
mediump float u_xlat16_12;
vec2 u_xlat13;
int u_xlati13;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
bvec2 u_xlatb22;
mediump float u_xlat16_24;
lowp vec2 u_xlat10_24;
bool u_xlatb35;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_24 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_24 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_12 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat5.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat5.w = u_xlat2.x * u_xlat16_12 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat5;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat2.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat2.x = max(u_xlat2.x, 0.0);
    u_xlati2 = int(u_xlat2.x);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati13 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati13) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11 = floor(u_xlat11);
    u_xlat11 = max(u_xlat11, 0.0);
    u_xlati11 = int(u_xlat11);
    u_xlat13.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11 != 0) ? u_xlat13.y : u_xlat13.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11 = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (int(u_xlati11) != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + _WorldSpaceLightPos0.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat3.xyz = vec3(u_xlat11) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + (-_WorldSpaceLightPos0.xyz);
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat16_9.xyz = u_xlat1.xyz * vec3(u_xlat11) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb35)) ? u_xlat16_9.xyz : u_xlat3.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_11 = (-u_xlat16_40) + u_xlat16_11;
    u_xlat11 = u_xlat16_11 + 1.0;
    u_xlat11 = floor(u_xlat11);
    u_xlat11 = max(u_xlat11, 0.0);
    u_xlati11 = int(u_xlat11);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati11) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz + u_xlat16_9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_8.xyz);
        u_xlat11 = (-u_xlat0.x) + 1.00100005;
        u_xlat11 = max(u_xlat11, 0.00100000005);
        u_xlat11 = min(u_xlat11, 1.0);
        u_xlat11 = log2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGShininess;
        u_xlat11 = exp2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGScale + _RGBias;
        u_xlat22 = u_xlat10_0.w + 0.100000001;
        u_xlatb3 = greaterThanEqual(vec4(u_xlat22), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb1.xyz = lessThan(vec4(u_xlat22), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb1.x = u_xlatb1.x && u_xlatb3.y;
        u_xlatb1.y = u_xlatb1.y && u_xlatb3.z;
        u_xlatb1.z = u_xlatb1.z && u_xlatb3.w;
        u_xlat16_4 = (u_xlatb1.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_4 = (u_xlatb1.y) ? _HRRimColor2 : u_xlat16_4;
        u_xlat16_4 = (u_xlatb1.x) ? _HRRimColor3 : u_xlat16_4;
        u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_4;
        u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_40 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_40 = inversesqrt(u_xlat16_40);
        u_xlat16_9.xyz = vec3(u_xlat16_40) * _WorldSpaceLightPos0.xyz;
        u_xlat16_22 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
        u_xlat16_40 = u_xlat16_22 + 0.5;
        u_xlat16_40 = u_xlat0.x * u_xlat16_40;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_40);
#else
        u_xlatb0 = u_xlat16_3.w<u_xlat16_40;
#endif
        u_xlat16_40 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_9.xyz = u_xlat16_3.xyz * vec3(u_xlat16_40);
        u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(_HRRimPower) + u_xlat16_7.xyz;
        u_xlat16_40 = u_xlat11;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_40 = min(max(u_xlat16_40, 0.0), 1.0);
#else
        u_xlat16_40 = clamp(u_xlat16_40, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_40 * _RGRatio;
        u_xlat1.xyz = vec3(u_xlat11) * _RGColor.xyz + (-u_xlat16_7.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat16_7.xyz;
        u_xlat16_40 = float(_HRRimIntensity);
        u_xlat16_9.xyz = (-u_xlat0.xyz) + u_xlat16_9.xyz;
        SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_8.xyz);
            u_xlat11 = (-u_xlat0.x) + 1.00100005;
            u_xlat11 = max(u_xlat11, 0.00100000005);
            u_xlat11 = min(u_xlat11, 1.0);
            u_xlat11 = log2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGShininess;
            u_xlat11 = exp2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGScale + _RGBias;
            u_xlat16_9.xyz = vec3(u_xlat11) * _RGColor.xyz;
            u_xlat11 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat11), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb11.xyz = lessThan(vec4(u_xlat11), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb11.x = u_xlatb11.x && u_xlatb2.y;
            u_xlatb11.y = u_xlatb11.y && u_xlatb2.z;
            u_xlatb11.z = u_xlatb11.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb11.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb11.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb11.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_40 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_40 = inversesqrt(u_xlat16_40);
            u_xlat16_10.xyz = vec3(u_xlat16_40) * _WorldSpaceLightPos0.xyz;
            u_xlat16_11 = dot(u_xlat16_8.xyz, u_xlat16_10.xyz);
            u_xlat16_40 = u_xlat16_11 + 0.5;
            u_xlat16_40 = u_xlat0.x * u_xlat16_40;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_40);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_40;
#endif
            u_xlat16_40 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_8.xyz = u_xlat16_2.xyz * vec3(u_xlat16_40);
            u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_HRRimPower);
            u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_8.xyz = u_xlat16_7.xyz + u_xlat16_8.xyz;
            u_xlat16_9.xyz = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_9.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
            u_xlat16_40 = float(_HRRimIntensity);
            u_xlat16_8.xyz = u_xlat16_8.xyz + (-u_xlat16_9.xyz);
            SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat16_8.xyz + u_xlat16_9.xyz;
        } else {
            SV_Target0.xyz = u_xlat16_7.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
int u_xlati2;
bvec4 u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec4 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
float u_xlat11;
mediump float u_xlat16_11;
int u_xlati11;
bvec3 u_xlatb11;
mediump float u_xlat16_12;
vec2 u_xlat13;
int u_xlati13;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
bvec2 u_xlatb22;
mediump float u_xlat16_24;
lowp vec2 u_xlat10_24;
bool u_xlatb35;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_24 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_24 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_12 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat5.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat5.w = u_xlat2.x * u_xlat16_12 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat5;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat2.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat2.x = max(u_xlat2.x, 0.0);
    u_xlati2 = int(u_xlat2.x);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati13 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati13) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11 = floor(u_xlat11);
    u_xlat11 = max(u_xlat11, 0.0);
    u_xlati11 = int(u_xlat11);
    u_xlat13.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11 != 0) ? u_xlat13.y : u_xlat13.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11 = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (int(u_xlati11) != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + _WorldSpaceLightPos0.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat3.xyz = vec3(u_xlat11) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + (-_WorldSpaceLightPos0.xyz);
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat16_9.xyz = u_xlat1.xyz * vec3(u_xlat11) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb35)) ? u_xlat16_9.xyz : u_xlat3.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_11 = (-u_xlat16_40) + u_xlat16_11;
    u_xlat11 = u_xlat16_11 + 1.0;
    u_xlat11 = floor(u_xlat11);
    u_xlat11 = max(u_xlat11, 0.0);
    u_xlati11 = int(u_xlat11);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati11) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz + u_xlat16_9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_8.xyz);
        u_xlat11 = (-u_xlat0.x) + 1.00100005;
        u_xlat11 = max(u_xlat11, 0.00100000005);
        u_xlat11 = min(u_xlat11, 1.0);
        u_xlat11 = log2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGShininess;
        u_xlat11 = exp2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGScale + _RGBias;
        u_xlat22 = u_xlat10_0.w + 0.100000001;
        u_xlatb3 = greaterThanEqual(vec4(u_xlat22), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb1.xyz = lessThan(vec4(u_xlat22), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb1.x = u_xlatb1.x && u_xlatb3.y;
        u_xlatb1.y = u_xlatb1.y && u_xlatb3.z;
        u_xlatb1.z = u_xlatb1.z && u_xlatb3.w;
        u_xlat16_4 = (u_xlatb1.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_4 = (u_xlatb1.y) ? _HRRimColor2 : u_xlat16_4;
        u_xlat16_4 = (u_xlatb1.x) ? _HRRimColor3 : u_xlat16_4;
        u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_4;
        u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_40 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_40 = inversesqrt(u_xlat16_40);
        u_xlat16_9.xyz = vec3(u_xlat16_40) * _WorldSpaceLightPos0.xyz;
        u_xlat16_22 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
        u_xlat16_40 = u_xlat16_22 + 0.5;
        u_xlat16_40 = u_xlat0.x * u_xlat16_40;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_40);
#else
        u_xlatb0 = u_xlat16_3.w<u_xlat16_40;
#endif
        u_xlat16_40 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_9.xyz = u_xlat16_3.xyz * vec3(u_xlat16_40);
        u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(_HRRimPower) + u_xlat16_7.xyz;
        u_xlat16_40 = u_xlat11;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_40 = min(max(u_xlat16_40, 0.0), 1.0);
#else
        u_xlat16_40 = clamp(u_xlat16_40, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_40 * _RGRatio;
        u_xlat1.xyz = vec3(u_xlat11) * _RGColor.xyz + (-u_xlat16_7.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat16_7.xyz;
        u_xlat16_40 = float(_HRRimIntensity);
        u_xlat16_9.xyz = (-u_xlat0.xyz) + u_xlat16_9.xyz;
        SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_8.xyz);
            u_xlat11 = (-u_xlat0.x) + 1.00100005;
            u_xlat11 = max(u_xlat11, 0.00100000005);
            u_xlat11 = min(u_xlat11, 1.0);
            u_xlat11 = log2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGShininess;
            u_xlat11 = exp2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGScale + _RGBias;
            u_xlat16_9.xyz = vec3(u_xlat11) * _RGColor.xyz;
            u_xlat11 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat11), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb11.xyz = lessThan(vec4(u_xlat11), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb11.x = u_xlatb11.x && u_xlatb2.y;
            u_xlatb11.y = u_xlatb11.y && u_xlatb2.z;
            u_xlatb11.z = u_xlatb11.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb11.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb11.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb11.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_40 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_40 = inversesqrt(u_xlat16_40);
            u_xlat16_10.xyz = vec3(u_xlat16_40) * _WorldSpaceLightPos0.xyz;
            u_xlat16_11 = dot(u_xlat16_8.xyz, u_xlat16_10.xyz);
            u_xlat16_40 = u_xlat16_11 + 0.5;
            u_xlat16_40 = u_xlat0.x * u_xlat16_40;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_40);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_40;
#endif
            u_xlat16_40 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_8.xyz = u_xlat16_2.xyz * vec3(u_xlat16_40);
            u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_HRRimPower);
            u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_8.xyz = u_xlat16_7.xyz + u_xlat16_8.xyz;
            u_xlat16_9.xyz = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_9.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
            u_xlat16_40 = float(_HRRimIntensity);
            u_xlat16_8.xyz = u_xlat16_8.xyz + (-u_xlat16_9.xyz);
            SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat16_8.xyz + u_xlat16_9.xyz;
        } else {
            SV_Target0.xyz = u_xlat16_7.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat6;
bool u_xlatb6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
bvec3 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
int u_xlati2;
bvec4 u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec4 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
float u_xlat11;
mediump float u_xlat16_11;
int u_xlati11;
bvec3 u_xlatb11;
mediump float u_xlat16_12;
vec2 u_xlat13;
int u_xlati13;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
bvec2 u_xlatb22;
mediump float u_xlat16_24;
lowp vec2 u_xlat10_24;
bool u_xlatb35;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_24 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_24 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_12 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat5.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat5.w = u_xlat2.x * u_xlat16_12 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat5;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat2.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat2.x = max(u_xlat2.x, 0.0);
    u_xlati2 = int(u_xlat2.x);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati13 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati13) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11 = floor(u_xlat11);
    u_xlat11 = max(u_xlat11, 0.0);
    u_xlati11 = int(u_xlat11);
    u_xlat13.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11 != 0) ? u_xlat13.y : u_xlat13.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11 = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (int(u_xlati11) != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + _WorldSpaceLightPos0.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat3.xyz = vec3(u_xlat11) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + (-_WorldSpaceLightPos0.xyz);
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat16_9.xyz = u_xlat1.xyz * vec3(u_xlat11) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb35)) ? u_xlat16_9.xyz : u_xlat3.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_11 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_11 = (-u_xlat16_40) + u_xlat16_11;
    u_xlat11 = u_xlat16_11 + 1.0;
    u_xlat11 = floor(u_xlat11);
    u_xlat11 = max(u_xlat11, 0.0);
    u_xlati11 = int(u_xlat11);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati11) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _EnvColor.xyz + u_xlat16_9.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_8.xyz);
        u_xlat11 = (-u_xlat0.x) + 1.00100005;
        u_xlat11 = max(u_xlat11, 0.00100000005);
        u_xlat11 = min(u_xlat11, 1.0);
        u_xlat11 = log2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGShininess;
        u_xlat11 = exp2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGScale + _RGBias;
        u_xlat22 = u_xlat10_0.w + 0.100000001;
        u_xlatb3 = greaterThanEqual(vec4(u_xlat22), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb1.xyz = lessThan(vec4(u_xlat22), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb1.x = u_xlatb1.x && u_xlatb3.y;
        u_xlatb1.y = u_xlatb1.y && u_xlatb3.z;
        u_xlatb1.z = u_xlatb1.z && u_xlatb3.w;
        u_xlat16_4 = (u_xlatb1.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_4 = (u_xlatb1.y) ? _HRRimColor2 : u_xlat16_4;
        u_xlat16_4 = (u_xlatb1.x) ? _HRRimColor3 : u_xlat16_4;
        u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_4;
        u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_40 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_40 = inversesqrt(u_xlat16_40);
        u_xlat16_9.xyz = vec3(u_xlat16_40) * _WorldSpaceLightPos0.xyz;
        u_xlat16_22 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
        u_xlat16_40 = u_xlat16_22 + 0.5;
        u_xlat16_40 = u_xlat0.x * u_xlat16_40;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_40);
#else
        u_xlatb0 = u_xlat16_3.w<u_xlat16_40;
#endif
        u_xlat16_40 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_9.xyz = u_xlat16_3.xyz * vec3(u_xlat16_40);
        u_xlat16_9.xyz = u_xlat16_9.xyz * vec3(_HRRimPower) + u_xlat16_7.xyz;
        u_xlat16_40 = u_xlat11;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_40 = min(max(u_xlat16_40, 0.0), 1.0);
#else
        u_xlat16_40 = clamp(u_xlat16_40, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_40 * _RGRatio;
        u_xlat1.xyz = vec3(u_xlat11) * _RGColor.xyz + (-u_xlat16_7.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat1.xyz + u_xlat16_7.xyz;
        u_xlat16_40 = float(_HRRimIntensity);
        u_xlat16_9.xyz = (-u_xlat0.xyz) + u_xlat16_9.xyz;
        SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_8.xyz);
            u_xlat11 = (-u_xlat0.x) + 1.00100005;
            u_xlat11 = max(u_xlat11, 0.00100000005);
            u_xlat11 = min(u_xlat11, 1.0);
            u_xlat11 = log2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGShininess;
            u_xlat11 = exp2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGScale + _RGBias;
            u_xlat16_9.xyz = vec3(u_xlat11) * _RGColor.xyz;
            u_xlat11 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat11), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb11.xyz = lessThan(vec4(u_xlat11), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb11.x = u_xlatb11.x && u_xlatb2.y;
            u_xlatb11.y = u_xlatb11.y && u_xlatb2.z;
            u_xlatb11.z = u_xlatb11.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb11.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb11.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb11.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_40 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_40 = inversesqrt(u_xlat16_40);
            u_xlat16_10.xyz = vec3(u_xlat16_40) * _WorldSpaceLightPos0.xyz;
            u_xlat16_11 = dot(u_xlat16_8.xyz, u_xlat16_10.xyz);
            u_xlat16_40 = u_xlat16_11 + 0.5;
            u_xlat16_40 = u_xlat0.x * u_xlat16_40;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_40);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_40;
#endif
            u_xlat16_40 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_8.xyz = u_xlat16_2.xyz * vec3(u_xlat16_40);
            u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_HRRimPower);
            u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_8.xyz = u_xlat16_7.xyz + u_xlat16_8.xyz;
            u_xlat16_9.xyz = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_9.xyz = u_xlat16_7.xyz + u_xlat16_9.xyz;
            u_xlat16_40 = float(_HRRimIntensity);
            u_xlat16_8.xyz = u_xlat16_8.xyz + (-u_xlat16_9.xyz);
            SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat16_8.xyz + u_xlat16_9.xyz;
        } else {
            SV_Target0.xyz = u_xlat16_7.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w * vs_COLOR1.y;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
ivec3 u_xlati7;
mediump vec3 u_xlat16_9;
float u_xlat14;
mediump float u_xlat16_14;
int u_xlati14;
bvec2 u_xlatb14;
float u_xlat21;
float u_xlat22;
mediump float u_xlat16_23;
bool u_xlatb24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_9.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_9.x = u_xlat16_9.x * 0.5 + (-_SecondShadow);
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = floor(u_xlat16_9.x);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlati3 = int(u_xlat16_9.x);
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_9.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati7.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati7.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_4.xyz = vec3(u_xlat16_23) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat1.xyz * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = vec3(u_xlat21) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + (-_WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat21) + _CustomLightDir.xyz;
    u_xlat16_23 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb24)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_23 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = log2(u_xlat16_23);
    u_xlat16_23 = u_xlat16_23 * _Shininess;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_14 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_14 = (-u_xlat16_23) + u_xlat16_14;
    u_xlat14 = u_xlat16_14 + 1.0;
    u_xlat14 = floor(u_xlat14);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlati14 = int(u_xlat14);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati14) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
    u_xlat16_2.w = u_xlat10_1.w * vs_COLOR1.y;
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat22 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat22 = u_xlat22 * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xyz * u_xlat7.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat21)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_4.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat21 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat21) * vec2(1.70000005, 1.5) + (-vec2(u_xlat22));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat21 = u_xlat21 * 1.70000005 + (-u_xlat22);
    u_xlat21 = u_xlat21 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat21 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_4.xyz = (u_xlati1.x != 0) ? u_xlat16_4.xyz : u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat21) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
ivec3 u_xlati7;
mediump vec3 u_xlat16_9;
float u_xlat14;
mediump float u_xlat16_14;
int u_xlati14;
bvec2 u_xlatb14;
float u_xlat21;
float u_xlat22;
mediump float u_xlat16_23;
bool u_xlatb24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_9.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_9.x = u_xlat16_9.x * 0.5 + (-_SecondShadow);
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = floor(u_xlat16_9.x);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlati3 = int(u_xlat16_9.x);
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_9.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati7.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati7.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_4.xyz = vec3(u_xlat16_23) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat1.xyz * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = vec3(u_xlat21) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + (-_WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat21) + _CustomLightDir.xyz;
    u_xlat16_23 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb24)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_23 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = log2(u_xlat16_23);
    u_xlat16_23 = u_xlat16_23 * _Shininess;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_14 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_14 = (-u_xlat16_23) + u_xlat16_14;
    u_xlat14 = u_xlat16_14 + 1.0;
    u_xlat14 = floor(u_xlat14);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlati14 = int(u_xlat14);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati14) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
    u_xlat16_2.w = u_xlat10_1.w * vs_COLOR1.y;
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat22 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat22 = u_xlat22 * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xyz * u_xlat7.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat21)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_4.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat21 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat21) * vec2(1.70000005, 1.5) + (-vec2(u_xlat22));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat21 = u_xlat21 * 1.70000005 + (-u_xlat22);
    u_xlat21 = u_xlat21 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat21 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_4.xyz = (u_xlati1.x != 0) ? u_xlat16_4.xyz : u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat21) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
ivec3 u_xlati7;
mediump vec3 u_xlat16_9;
float u_xlat14;
mediump float u_xlat16_14;
int u_xlati14;
bvec2 u_xlatb14;
float u_xlat21;
float u_xlat22;
mediump float u_xlat16_23;
bool u_xlatb24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_9.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_9.x = u_xlat16_9.x * 0.5 + (-_SecondShadow);
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = floor(u_xlat16_9.x);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlati3 = int(u_xlat16_9.x);
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_9.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati7.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati7.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_4.xyz = vec3(u_xlat16_23) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat1.xyz * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = vec3(u_xlat21) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + (-_WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat21) + _CustomLightDir.xyz;
    u_xlat16_23 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb24)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_23 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = log2(u_xlat16_23);
    u_xlat16_23 = u_xlat16_23 * _Shininess;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_14 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_14 = (-u_xlat16_23) + u_xlat16_14;
    u_xlat14 = u_xlat16_14 + 1.0;
    u_xlat14 = floor(u_xlat14);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlati14 = int(u_xlat14);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati14) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
    u_xlat16_2.w = u_xlat10_1.w * vs_COLOR1.y;
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat22 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat22 = u_xlat22 * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xyz * u_xlat7.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat21)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_4.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat21 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat21) * vec2(1.70000005, 1.5) + (-vec2(u_xlat22));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat21 = u_xlat21 * 1.70000005 + (-u_xlat22);
    u_xlat21 = u_xlat21 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat21 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_4.xyz = (u_xlati1.x != 0) ? u_xlat16_4.xyz : u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat21) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
ivec3 u_xlati7;
mediump vec3 u_xlat16_9;
float u_xlat14;
mediump float u_xlat16_14;
int u_xlati14;
bvec2 u_xlatb14;
float u_xlat21;
float u_xlat22;
mediump float u_xlat16_23;
bool u_xlatb24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_9.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_9.x = u_xlat16_9.x * 0.5 + (-_SecondShadow);
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = floor(u_xlat16_9.x);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlati3 = int(u_xlat16_9.x);
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_9.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati7.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati7.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_4.xyz = vec3(u_xlat16_23) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat1.xyz * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = vec3(u_xlat21) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + (-_WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat21) + _CustomLightDir.xyz;
    u_xlat16_23 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb24)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_23 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = log2(u_xlat16_23);
    u_xlat16_23 = u_xlat16_23 * _Shininess;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_14 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_14 = (-u_xlat16_23) + u_xlat16_14;
    u_xlat14 = u_xlat16_14 + 1.0;
    u_xlat14 = floor(u_xlat14);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlati14 = int(u_xlat14);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati14) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
    u_xlat16_2.w = u_xlat10_1.w * vs_COLOR1.y;
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat22 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat22 = u_xlat22 * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xyz * u_xlat7.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat21)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_4.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat21 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat21) * vec2(1.70000005, 1.5) + (-vec2(u_xlat22));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat21 = u_xlat21 * 1.70000005 + (-u_xlat22);
    u_xlat21 = u_xlat21 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat21 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_4.xyz = (u_xlati1.x != 0) ? u_xlat16_4.xyz : u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat21) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
ivec3 u_xlati7;
mediump vec3 u_xlat16_9;
float u_xlat14;
mediump float u_xlat16_14;
int u_xlati14;
bvec2 u_xlatb14;
float u_xlat21;
float u_xlat22;
mediump float u_xlat16_23;
bool u_xlatb24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_9.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_9.x = u_xlat16_9.x * 0.5 + (-_SecondShadow);
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = floor(u_xlat16_9.x);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlati3 = int(u_xlat16_9.x);
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_9.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati7.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati7.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_4.xyz = vec3(u_xlat16_23) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat1.xyz * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = vec3(u_xlat21) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + (-_WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat21) + _CustomLightDir.xyz;
    u_xlat16_23 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb24)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_23 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = log2(u_xlat16_23);
    u_xlat16_23 = u_xlat16_23 * _Shininess;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_14 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_14 = (-u_xlat16_23) + u_xlat16_14;
    u_xlat14 = u_xlat16_14 + 1.0;
    u_xlat14 = floor(u_xlat14);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlati14 = int(u_xlat14);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati14) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
    u_xlat16_2.w = u_xlat10_1.w * vs_COLOR1.y;
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat22 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat22 = u_xlat22 * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xyz * u_xlat7.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat21)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_4.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat21 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat21) * vec2(1.70000005, 1.5) + (-vec2(u_xlat22));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat21 = u_xlat21 * 1.70000005 + (-u_xlat22);
    u_xlat21 = u_xlat21 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat21 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_4.xyz = (u_xlati1.x != 0) ? u_xlat16_4.xyz : u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat21) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
ivec2 u_xlati1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
ivec3 u_xlati7;
mediump vec3 u_xlat16_9;
float u_xlat14;
mediump float u_xlat16_14;
int u_xlati14;
bvec2 u_xlatb14;
float u_xlat21;
float u_xlat22;
mediump float u_xlat16_23;
bool u_xlatb24;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_9.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_9.x = u_xlat16_9.x * 0.5 + (-_SecondShadow);
    u_xlat16_9.x = u_xlat16_9.x + 1.0;
    u_xlat16_9.x = floor(u_xlat16_9.x);
    u_xlat16_9.x = max(u_xlat16_9.x, 0.0);
    u_xlati3 = int(u_xlat16_9.x);
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_9.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat3.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati7.x != 0) ? u_xlat3.y : u_xlat3.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati7.x = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_9.xyz;
    u_xlat16_23 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_4.xyz = vec3(u_xlat16_23) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat3.xyz = u_xlat1.xyz * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat5.xyz = vec3(u_xlat21) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb24 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat21) + (-_WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat21) + _CustomLightDir.xyz;
    u_xlat16_23 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = inversesqrt(u_xlat16_23);
    u_xlat16_6.xyz = vec3(u_xlat16_23) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb24)) ? u_xlat16_6.xyz : u_xlat5.xyz;
    u_xlat16_23 = dot(u_xlat16_4.xyz, u_xlat16_6.xyz);
    u_xlat16_23 = max(u_xlat16_23, 0.0);
    u_xlat16_23 = log2(u_xlat16_23);
    u_xlat16_23 = u_xlat16_23 * _Shininess;
    u_xlat16_23 = exp2(u_xlat16_23);
    u_xlat16_14 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_14 = (-u_xlat16_23) + u_xlat16_14;
    u_xlat14 = u_xlat16_14 + 1.0;
    u_xlat14 = floor(u_xlat14);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlati14 = int(u_xlat14);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati14) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
    u_xlat16_2.w = u_xlat10_1.w * vs_COLOR1.y;
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat22 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat22 = u_xlat22 * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat7.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xyz * u_xlat7.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat16_4.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat0.xyz = u_xlat16_4.xyz * (-vec3(u_xlat21)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_4.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat21 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat21) * vec2(1.70000005, 1.5) + (-vec2(u_xlat22));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat21 = u_xlat21 * 1.70000005 + (-u_xlat22);
    u_xlat21 = u_xlat21 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_4.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat21 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_4.xyz = (u_xlati1.x != 0) ? u_xlat16_4.xyz : u_xlat0.xyz;
    u_xlat16_5.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_5;
    u_xlat0 = vec4(u_xlat21) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
ivec3 u_xlati1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
ivec3 u_xlati7;
float u_xlat8;
float u_xlat14;
mediump float u_xlat16_14;
int u_xlati14;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb23;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_25 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1.x = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat1.xz = vec2(u_xlat16_25) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_25 = (u_xlati7.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_25 = u_xlat16_25 + vs_COLOR1.x;
    u_xlat16_25 = u_xlat16_25 * 0.5 + (-_LightArea);
    u_xlat16_25 = u_xlat16_25 + 1.0;
    u_xlat16_25 = floor(u_xlat16_25);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlati7.x = int(u_xlat16_25);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat2.xyz = u_xlat1.xzw * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb23 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat21) + (-_WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat2.xyz * vec3(u_xlat21) + _CustomLightDir.xyz;
    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb23)) ? u_xlat16_6.xyz : u_xlat3.xyz;
    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_25 = log2(u_xlat16_25);
    u_xlat16_25 = u_xlat16_25 * _Shininess;
    u_xlat16_25 = exp2(u_xlat16_25);
    u_xlat16_14 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_14 = (-u_xlat16_25) + u_xlat16_14;
    u_xlat14 = u_xlat16_14 + 1.0;
    u_xlat14 = floor(u_xlat14);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlati14 = int(u_xlat14);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati14) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_4.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
    u_xlat16_2.w = u_xlat10_1.y * vs_COLOR1.y;
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_4.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat8 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat8 = u_xlat8 * 1.99000001 + -1.0;
    u_xlat1.xzw = u_xlat1.xzw * u_xlat7.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xzw * u_xlat7.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat16_5.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat0.xyz = u_xlat16_5.xyz * (-vec3(u_xlat21)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_5.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_5.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_5.xyz;
    u_xlat21 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xz = vec2(u_xlat21) * vec2(1.70000005, 1.5) + (-vec2(u_xlat8));
    u_xlat1.xz = u_xlat1.xz + vec2(1.0, 1.0);
    u_xlat1.xz = floor(u_xlat1.xz);
    u_xlat1.xz = max(u_xlat1.xz, vec2(0.0, 0.0));
    u_xlati1.xz = ivec2(u_xlat1.xz);
    u_xlat21 = u_xlat21 * 1.70000005 + (-u_xlat8);
    u_xlat21 = u_xlat21 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_5.xyz = (u_xlati1.z != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat21 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_5.xyz : u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_4;
    u_xlat0 = vec4(u_xlat21) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
ivec3 u_xlati1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
ivec3 u_xlati7;
float u_xlat8;
float u_xlat14;
mediump float u_xlat16_14;
int u_xlati14;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb23;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_25 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1.x = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat1.xz = vec2(u_xlat16_25) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_25 = (u_xlati7.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_25 = u_xlat16_25 + vs_COLOR1.x;
    u_xlat16_25 = u_xlat16_25 * 0.5 + (-_LightArea);
    u_xlat16_25 = u_xlat16_25 + 1.0;
    u_xlat16_25 = floor(u_xlat16_25);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlati7.x = int(u_xlat16_25);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat2.xyz = u_xlat1.xzw * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb23 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat21) + (-_WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat2.xyz * vec3(u_xlat21) + _CustomLightDir.xyz;
    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb23)) ? u_xlat16_6.xyz : u_xlat3.xyz;
    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_25 = log2(u_xlat16_25);
    u_xlat16_25 = u_xlat16_25 * _Shininess;
    u_xlat16_25 = exp2(u_xlat16_25);
    u_xlat16_14 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_14 = (-u_xlat16_25) + u_xlat16_14;
    u_xlat14 = u_xlat16_14 + 1.0;
    u_xlat14 = floor(u_xlat14);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlati14 = int(u_xlat14);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati14) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_4.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
    u_xlat16_2.w = u_xlat10_1.y * vs_COLOR1.y;
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_4.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat8 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat8 = u_xlat8 * 1.99000001 + -1.0;
    u_xlat1.xzw = u_xlat1.xzw * u_xlat7.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xzw * u_xlat7.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat16_5.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat0.xyz = u_xlat16_5.xyz * (-vec3(u_xlat21)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_5.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_5.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_5.xyz;
    u_xlat21 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xz = vec2(u_xlat21) * vec2(1.70000005, 1.5) + (-vec2(u_xlat8));
    u_xlat1.xz = u_xlat1.xz + vec2(1.0, 1.0);
    u_xlat1.xz = floor(u_xlat1.xz);
    u_xlat1.xz = max(u_xlat1.xz, vec2(0.0, 0.0));
    u_xlati1.xz = ivec2(u_xlat1.xz);
    u_xlat21 = u_xlat21 * 1.70000005 + (-u_xlat8);
    u_xlat21 = u_xlat21 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_5.xyz = (u_xlati1.z != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat21 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_5.xyz : u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_4;
    u_xlat0 = vec4(u_xlat21) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
ivec3 u_xlati1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec3 u_xlat10_2;
vec3 u_xlat3;
lowp vec4 u_xlat10_3;
mediump vec4 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
ivec3 u_xlati7;
float u_xlat8;
float u_xlat14;
mediump float u_xlat16_14;
int u_xlati14;
bvec2 u_xlatb14;
float u_xlat21;
bool u_xlatb23;
mediump float u_xlat16_25;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb14.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb14.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb14.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_25 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat21 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat21 = floor(u_xlat21);
    u_xlat7.z = max(u_xlat21, 0.0);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati1.x = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat7.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat7.x = floor(u_xlat7.x);
    u_xlat7.x = max(u_xlat7.x, 0.0);
    u_xlati7.xz = ivec2(u_xlat7.xz);
    u_xlat1.xz = vec2(u_xlat16_25) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_25 = (u_xlati7.x != 0) ? u_xlat1.z : u_xlat1.x;
    u_xlat16_25 = u_xlat16_25 + vs_COLOR1.x;
    u_xlat16_25 = u_xlat16_25 * 0.5 + (-_LightArea);
    u_xlat16_25 = u_xlat16_25 + 1.0;
    u_xlat16_25 = floor(u_xlat16_25);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlati7.x = int(u_xlat16_25);
    u_xlat16_4.xyz = (u_xlati7.x != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (u_xlati7.z != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat16_25 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_5.xyz = vec3(u_xlat16_25) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat2.xyz = u_xlat1.xzw * u_xlat7.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb23 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat21) + (-_WorldSpaceLightPos0.xyz);
    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat16_6.xyz = u_xlat2.xyz * vec3(u_xlat21) + _CustomLightDir.xyz;
    u_xlat16_25 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = inversesqrt(u_xlat16_25);
    u_xlat16_6.xyz = vec3(u_xlat16_25) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb23)) ? u_xlat16_6.xyz : u_xlat3.xyz;
    u_xlat16_25 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
    u_xlat16_25 = max(u_xlat16_25, 0.0);
    u_xlat16_25 = log2(u_xlat16_25);
    u_xlat16_25 = u_xlat16_25 * _Shininess;
    u_xlat16_25 = exp2(u_xlat16_25);
    u_xlat16_14 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_14 = (-u_xlat16_25) + u_xlat16_14;
    u_xlat14 = u_xlat16_14 + 1.0;
    u_xlat14 = floor(u_xlat14);
    u_xlat14 = max(u_xlat14, 0.0);
    u_xlati14 = int(u_xlat14);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati14) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_4.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
    u_xlat16_2.w = u_xlat10_1.y * vs_COLOR1.y;
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_4.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat8 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat8 = u_xlat8 * 1.99000001 + -1.0;
    u_xlat1.xzw = u_xlat1.xzw * u_xlat7.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat7.x = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat7.x = inversesqrt(u_xlat7.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xzw * u_xlat7.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat16_5.xyz);
    u_xlat21 = u_xlat21 + u_xlat21;
    u_xlat0.xyz = u_xlat16_5.xyz * (-vec3(u_xlat21)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_5.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_5.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_5.xyz;
    u_xlat21 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xz = vec2(u_xlat21) * vec2(1.70000005, 1.5) + (-vec2(u_xlat8));
    u_xlat1.xz = u_xlat1.xz + vec2(1.0, 1.0);
    u_xlat1.xz = floor(u_xlat1.xz);
    u_xlat1.xz = max(u_xlat1.xz, vec2(0.0, 0.0));
    u_xlati1.xz = ivec2(u_xlat1.xz);
    u_xlat21 = u_xlat21 * 1.70000005 + (-u_xlat8);
    u_xlat21 = u_xlat21 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_5.xyz = (u_xlati1.z != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat21 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_5.xyz = (u_xlati1.x != 0) ? u_xlat16_5.xyz : u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_4;
    u_xlat0 = vec4(u_xlat21) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
ivec2 u_xlati1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
bvec2 u_xlatb22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
bool u_xlatb35;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat2.xyz = u_xlat1.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_9.xyz = u_xlat2.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb35)) ? u_xlat16_9.xyz : u_xlat3.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_40) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_7.xyz * _EnvColor.xyz + u_xlat16_9.xyz;
    u_xlat16_2.w = u_xlat1.w * vs_COLOR1.y;
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_4.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat34 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat34 = u_xlat34 * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat11.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xyz * u_xlat11.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat16_8.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat16_8.xyz * (-vec3(u_xlat33)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat33 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat33) * vec2(1.70000005, 1.5) + (-vec2(u_xlat34));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat33 = u_xlat33 * 1.70000005 + (-u_xlat34);
    u_xlat33 = u_xlat33 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_7.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat33 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati1.x != 0) ? u_xlat16_7.xyz : u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_4;
    u_xlat0 = vec4(u_xlat33) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
ivec2 u_xlati1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
bvec2 u_xlatb22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
bool u_xlatb35;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat2.xyz = u_xlat1.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_9.xyz = u_xlat2.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb35)) ? u_xlat16_9.xyz : u_xlat3.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_40) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_7.xyz * _EnvColor.xyz + u_xlat16_9.xyz;
    u_xlat16_2.w = u_xlat1.w * vs_COLOR1.y;
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_4.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat34 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat34 = u_xlat34 * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat11.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xyz * u_xlat11.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat16_8.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat16_8.xyz * (-vec3(u_xlat33)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat33 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat33) * vec2(1.70000005, 1.5) + (-vec2(u_xlat34));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat33 = u_xlat33 * 1.70000005 + (-u_xlat34);
    u_xlat33 = u_xlat33 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_7.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat33 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati1.x != 0) ? u_xlat16_7.xyz : u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_4;
    u_xlat0 = vec4(u_xlat33) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec2 u_xlat10_1;
ivec2 u_xlati1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
int u_xlati2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
ivec3 u_xlati11;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
bvec2 u_xlatb22;
lowp vec2 u_xlat10_24;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
bool u_xlatb35;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0.xyz = texture(_LightMapTex, vs_TEXCOORD0.xy).xyz;
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_33 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_33 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_33 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat1.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat1.w = u_xlat2.x * u_xlat16_33 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat1;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat33 = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat33 = floor(u_xlat33);
    u_xlat11.z = max(u_xlat33, 0.0);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati2 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11.x = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11.x = floor(u_xlat11.x);
    u_xlat11.x = max(u_xlat11.x, 0.0);
    u_xlati11.xz = ivec2(u_xlat11.xz);
    u_xlat2.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11.x != 0) ? u_xlat2.y : u_xlat2.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11.x = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (u_xlati11.x != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (u_xlati11.z != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat2.xyz = u_xlat1.xyz * u_xlat11.xxx + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_9.xyz = u_xlat2.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb35)) ? u_xlat16_9.xyz : u_xlat3.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_40) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_7.xyz * _EnvColor.xyz + u_xlat16_9.xyz;
    u_xlat16_2.w = u_xlat1.w * vs_COLOR1.y;
    u_xlat10_3 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_4.w = u_xlat10_3.w * _SPOpaqueness;
    u_xlat10_0.xzw = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat34 = u_xlat10_0.x * _SPNoiseScaler;
    u_xlat34 = u_xlat34 * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat11.xxx + (-_WorldSpaceCameraPos.xyz);
    u_xlat11.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat0.xzw = u_xlat10_0.xzw * vec3(_SPCubeMapNoiseIntensity);
    u_xlat0.xyz = u_xlat1.xyz * u_xlat11.xxx + u_xlat0.xzw;
    u_xlat0.xyz = u_xlat0.xyz + _SPCubeMapOffset.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat16_8.xyz);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat16_8.xyz * (-vec3(u_xlat33)) + u_xlat0.xyz;
    u_xlat10_0.xyz = texture(_SPCubeMap, u_xlat0.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_3.xyz * _SPOldColor.xyz;
    u_xlat16_8.xyz = u_xlat10_0.xyz * _SPCubeMapColor.xyz;
    u_xlat0.xyz = u_xlat16_8.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat0.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat0.xyz + u_xlat16_7.xyz;
    u_xlat33 = _SPNoiseScaler * _SPTransition;
    u_xlat1.xy = vec2(u_xlat33) * vec2(1.70000005, 1.5) + (-vec2(u_xlat34));
    u_xlat1.xy = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = floor(u_xlat1.xy);
    u_xlat1.xy = max(u_xlat1.xy, vec2(0.0, 0.0));
    u_xlati1.xy = ivec2(u_xlat1.xy);
    u_xlat33 = u_xlat33 * 1.70000005 + (-u_xlat34);
    u_xlat33 = u_xlat33 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat3.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat0.xyz);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.xyz + u_xlat0.xyz;
    u_xlat16_7.xyz = (u_xlati1.y != 0) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat33 = (u_xlati1.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati1.x != 0) ? u_xlat16_7.xyz : u_xlat0.xyz;
    u_xlat16_4.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_4;
    u_xlat0 = vec4(u_xlat33) * u_xlat16_1 + u_xlat16_2;
    SV_Target0.w = u_xlat0.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    SV_Target0.xyz = u_xlat0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
ivec2 u_xlati5;
bvec3 u_xlatb5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
lowp vec3 u_xlat10_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_10;
int u_xlati10;
bvec3 u_xlatb10;
mediump vec3 u_xlat16_12;
vec2 u_xlat13;
int u_xlati13;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
bvec2 u_xlatb20;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_34;
bool u_xlatb35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat3.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
    u_xlat16_12.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_12.x = u_xlat16_12.x * 0.5 + (-_SecondShadow);
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = floor(u_xlat16_12.x);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlati13 = int(u_xlat16_12.x);
    u_xlat16_12.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_12.xyz = (int(u_xlati13) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat10 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10 = floor(u_xlat10);
    u_xlat10 = max(u_xlat10, 0.0);
    u_xlati10 = int(u_xlat10);
    u_xlat13.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati10 != 0) ? u_xlat13.y : u_xlat13.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati10 = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (int(u_xlati10) != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_4.xyz = vec3(u_xlat16_32) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat3.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat5.xyz = u_xlat1.xyz * vec3(u_xlat10) + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_32 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_7.xyz = vec3(u_xlat16_32) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb35)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_32 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_32 = max(u_xlat16_32, 0.0);
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat16_32 = u_xlat16_32 * _Shininess;
    u_xlat16_32 = exp2(u_xlat16_32);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_7.xyz;
    u_xlat16_2.w = u_xlat10_1.w * vs_COLOR1.y;
    u_xlat10_5 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_5.w * _SPOpaqueness;
    u_xlat10_8.xyz = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat0.x = u_xlat10_8.x * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + (-_WorldSpaceCameraPos.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat8.xyz = u_xlat10_8.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat8.xyz;
    u_xlat1.xyz = u_xlat1.xyz + _SPCubeMapOffset.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat16_4.xyz);
    u_xlat10 = u_xlat10 + u_xlat10;
    u_xlat1.xyz = u_xlat16_4.xyz * (-vec3(u_xlat10)) + u_xlat1.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_7.xyz;
    u_xlat10 = _SPNoiseScaler * _SPTransition;
    u_xlat5.xy = vec2(u_xlat10) * vec2(1.70000005, 1.5) + (-u_xlat0.xx);
    u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
    u_xlat5.xy = floor(u_xlat5.xy);
    u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
    u_xlati5.xy = ivec2(u_xlat5.xy);
    u_xlat0.x = u_xlat10 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat8.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz + u_xlat1.xyz;
    u_xlat16_7.xyz = (u_xlati5.y != 0) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat0.x = (u_xlati5.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati5.x != 0) ? u_xlat16_7.xyz : u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_6;
    u_xlat1 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_2;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
        u_xlat10 = (-u_xlat0.x) + 1.00100005;
        u_xlat10 = max(u_xlat10, 0.00100000005);
        u_xlat10 = min(u_xlat10, 1.0);
        u_xlat10 = log2(u_xlat10);
        u_xlat10 = u_xlat10 * _RGShininess;
        u_xlat10 = exp2(u_xlat10);
        u_xlat10 = u_xlat10 * _RGScale + _RGBias;
        u_xlat20 = u_xlat10_0.w + 0.100000001;
        u_xlatb2 = greaterThanEqual(vec4(u_xlat20), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb5.xyz = lessThan(vec4(u_xlat20), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb5.x = u_xlatb2.y && u_xlatb5.x;
        u_xlatb5.y = u_xlatb2.z && u_xlatb5.y;
        u_xlatb5.z = u_xlatb2.w && u_xlatb5.z;
        u_xlat16_6 = (u_xlatb5.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb5.y) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_5 = (u_xlatb5.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_5;
        u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_34 = inversesqrt(u_xlat16_34);
        u_xlat16_7.xyz = vec3(u_xlat16_34) * _WorldSpaceLightPos0.xyz;
        u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
        u_xlat16_34 = u_xlat16_20 + 0.5;
        u_xlat16_34 = u_xlat0.x * u_xlat16_34;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_34);
#else
        u_xlatb0 = u_xlat16_2.w<u_xlat16_34;
#endif
        u_xlat16_34 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_7.xyz = u_xlat16_2.xyz * vec3(u_xlat16_34);
        u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_HRRimPower) + u_xlat1.xyz;
        u_xlat16_34 = u_xlat10;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
        u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_34 * _RGRatio;
        u_xlat8.xyz = vec3(u_xlat10) * _RGColor.xyz + (-u_xlat1.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz + u_xlat1.xyz;
        u_xlat16_34 = float(_HRRimIntensity);
        u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat16_7.xyz;
        SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat16_7.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
            u_xlat10 = (-u_xlat0.x) + 1.00100005;
            u_xlat10 = max(u_xlat10, 0.00100000005);
            u_xlat10 = min(u_xlat10, 1.0);
            u_xlat10 = log2(u_xlat10);
            u_xlat10 = u_xlat10 * _RGShininess;
            u_xlat10 = exp2(u_xlat10);
            u_xlat10 = u_xlat10 * _RGScale + _RGBias;
            u_xlat16_7.xyz = vec3(u_xlat10) * _RGColor.xyz;
            u_xlat10 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat10), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb10.xyz = lessThan(vec4(u_xlat10), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb10.x = u_xlatb10.x && u_xlatb2.y;
            u_xlatb10.y = u_xlatb10.y && u_xlatb2.z;
            u_xlatb10.z = u_xlatb10.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb10.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb10.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb10.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_34 = inversesqrt(u_xlat16_34);
            u_xlat16_9.xyz = vec3(u_xlat16_34) * _WorldSpaceLightPos0.xyz;
            u_xlat16_10 = dot(u_xlat16_4.xyz, u_xlat16_9.xyz);
            u_xlat16_4.x = u_xlat16_10 + 0.5;
            u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_4.x);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_4.x;
#endif
            u_xlat16_4.x = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_HRRimPower);
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_4.xyz = u_xlat1.xyz + u_xlat16_4.xyz;
            u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_7.xyz = u_xlat1.xyz + u_xlat16_7.xyz;
            u_xlat16_34 = float(_HRRimIntensity);
            u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_7.xyz);
            SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz + u_xlat16_7.xyz;
        } else {
            SV_Target0.xyz = u_xlat1.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
ivec2 u_xlati5;
bvec3 u_xlatb5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
lowp vec3 u_xlat10_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_10;
int u_xlati10;
bvec3 u_xlatb10;
mediump vec3 u_xlat16_12;
vec2 u_xlat13;
int u_xlati13;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
bvec2 u_xlatb20;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_34;
bool u_xlatb35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat3.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
    u_xlat16_12.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_12.x = u_xlat16_12.x * 0.5 + (-_SecondShadow);
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = floor(u_xlat16_12.x);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlati13 = int(u_xlat16_12.x);
    u_xlat16_12.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_12.xyz = (int(u_xlati13) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat10 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10 = floor(u_xlat10);
    u_xlat10 = max(u_xlat10, 0.0);
    u_xlati10 = int(u_xlat10);
    u_xlat13.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati10 != 0) ? u_xlat13.y : u_xlat13.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati10 = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (int(u_xlati10) != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_4.xyz = vec3(u_xlat16_32) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat3.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat5.xyz = u_xlat1.xyz * vec3(u_xlat10) + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_32 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_7.xyz = vec3(u_xlat16_32) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb35)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_32 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_32 = max(u_xlat16_32, 0.0);
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat16_32 = u_xlat16_32 * _Shininess;
    u_xlat16_32 = exp2(u_xlat16_32);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_7.xyz;
    u_xlat16_2.w = u_xlat10_1.w * vs_COLOR1.y;
    u_xlat10_5 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_5.w * _SPOpaqueness;
    u_xlat10_8.xyz = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat0.x = u_xlat10_8.x * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + (-_WorldSpaceCameraPos.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat8.xyz = u_xlat10_8.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat8.xyz;
    u_xlat1.xyz = u_xlat1.xyz + _SPCubeMapOffset.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat16_4.xyz);
    u_xlat10 = u_xlat10 + u_xlat10;
    u_xlat1.xyz = u_xlat16_4.xyz * (-vec3(u_xlat10)) + u_xlat1.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_7.xyz;
    u_xlat10 = _SPNoiseScaler * _SPTransition;
    u_xlat5.xy = vec2(u_xlat10) * vec2(1.70000005, 1.5) + (-u_xlat0.xx);
    u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
    u_xlat5.xy = floor(u_xlat5.xy);
    u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
    u_xlati5.xy = ivec2(u_xlat5.xy);
    u_xlat0.x = u_xlat10 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat8.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz + u_xlat1.xyz;
    u_xlat16_7.xyz = (u_xlati5.y != 0) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat0.x = (u_xlati5.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati5.x != 0) ? u_xlat16_7.xyz : u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_6;
    u_xlat1 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_2;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
        u_xlat10 = (-u_xlat0.x) + 1.00100005;
        u_xlat10 = max(u_xlat10, 0.00100000005);
        u_xlat10 = min(u_xlat10, 1.0);
        u_xlat10 = log2(u_xlat10);
        u_xlat10 = u_xlat10 * _RGShininess;
        u_xlat10 = exp2(u_xlat10);
        u_xlat10 = u_xlat10 * _RGScale + _RGBias;
        u_xlat20 = u_xlat10_0.w + 0.100000001;
        u_xlatb2 = greaterThanEqual(vec4(u_xlat20), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb5.xyz = lessThan(vec4(u_xlat20), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb5.x = u_xlatb2.y && u_xlatb5.x;
        u_xlatb5.y = u_xlatb2.z && u_xlatb5.y;
        u_xlatb5.z = u_xlatb2.w && u_xlatb5.z;
        u_xlat16_6 = (u_xlatb5.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb5.y) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_5 = (u_xlatb5.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_5;
        u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_34 = inversesqrt(u_xlat16_34);
        u_xlat16_7.xyz = vec3(u_xlat16_34) * _WorldSpaceLightPos0.xyz;
        u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
        u_xlat16_34 = u_xlat16_20 + 0.5;
        u_xlat16_34 = u_xlat0.x * u_xlat16_34;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_34);
#else
        u_xlatb0 = u_xlat16_2.w<u_xlat16_34;
#endif
        u_xlat16_34 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_7.xyz = u_xlat16_2.xyz * vec3(u_xlat16_34);
        u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_HRRimPower) + u_xlat1.xyz;
        u_xlat16_34 = u_xlat10;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
        u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_34 * _RGRatio;
        u_xlat8.xyz = vec3(u_xlat10) * _RGColor.xyz + (-u_xlat1.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz + u_xlat1.xyz;
        u_xlat16_34 = float(_HRRimIntensity);
        u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat16_7.xyz;
        SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat16_7.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
            u_xlat10 = (-u_xlat0.x) + 1.00100005;
            u_xlat10 = max(u_xlat10, 0.00100000005);
            u_xlat10 = min(u_xlat10, 1.0);
            u_xlat10 = log2(u_xlat10);
            u_xlat10 = u_xlat10 * _RGShininess;
            u_xlat10 = exp2(u_xlat10);
            u_xlat10 = u_xlat10 * _RGScale + _RGBias;
            u_xlat16_7.xyz = vec3(u_xlat10) * _RGColor.xyz;
            u_xlat10 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat10), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb10.xyz = lessThan(vec4(u_xlat10), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb10.x = u_xlatb10.x && u_xlatb2.y;
            u_xlatb10.y = u_xlatb10.y && u_xlatb2.z;
            u_xlatb10.z = u_xlatb10.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb10.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb10.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb10.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_34 = inversesqrt(u_xlat16_34);
            u_xlat16_9.xyz = vec3(u_xlat16_34) * _WorldSpaceLightPos0.xyz;
            u_xlat16_10 = dot(u_xlat16_4.xyz, u_xlat16_9.xyz);
            u_xlat16_4.x = u_xlat16_10 + 0.5;
            u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_4.x);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_4.x;
#endif
            u_xlat16_4.x = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_HRRimPower);
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_4.xyz = u_xlat1.xyz + u_xlat16_4.xyz;
            u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_7.xyz = u_xlat1.xyz + u_xlat16_7.xyz;
            u_xlat16_34 = float(_HRRimIntensity);
            u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_7.xyz);
            SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz + u_xlat16_7.xyz;
        } else {
            SV_Target0.xyz = u_xlat1.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
ivec2 u_xlati5;
bvec3 u_xlatb5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
lowp vec3 u_xlat10_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_10;
int u_xlati10;
bvec3 u_xlatb10;
mediump vec3 u_xlat16_12;
vec2 u_xlat13;
int u_xlati13;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
bvec2 u_xlatb20;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_34;
bool u_xlatb35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat3.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
    u_xlat16_12.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_12.x = u_xlat16_12.x * 0.5 + (-_SecondShadow);
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = floor(u_xlat16_12.x);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlati13 = int(u_xlat16_12.x);
    u_xlat16_12.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_12.xyz = (int(u_xlati13) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat10 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10 = floor(u_xlat10);
    u_xlat10 = max(u_xlat10, 0.0);
    u_xlati10 = int(u_xlat10);
    u_xlat13.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati10 != 0) ? u_xlat13.y : u_xlat13.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati10 = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (int(u_xlati10) != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_4.xyz = vec3(u_xlat16_32) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat3.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat5.xyz = u_xlat1.xyz * vec3(u_xlat10) + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_32 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_7.xyz = vec3(u_xlat16_32) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb35)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_32 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_32 = max(u_xlat16_32, 0.0);
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat16_32 = u_xlat16_32 * _Shininess;
    u_xlat16_32 = exp2(u_xlat16_32);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_7.xyz;
    u_xlat16_2.w = u_xlat10_1.w * vs_COLOR1.y;
    u_xlat10_5 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_5.w * _SPOpaqueness;
    u_xlat10_8.xyz = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat0.x = u_xlat10_8.x * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + (-_WorldSpaceCameraPos.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat8.xyz = u_xlat10_8.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat8.xyz;
    u_xlat1.xyz = u_xlat1.xyz + _SPCubeMapOffset.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat16_4.xyz);
    u_xlat10 = u_xlat10 + u_xlat10;
    u_xlat1.xyz = u_xlat16_4.xyz * (-vec3(u_xlat10)) + u_xlat1.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_7.xyz;
    u_xlat10 = _SPNoiseScaler * _SPTransition;
    u_xlat5.xy = vec2(u_xlat10) * vec2(1.70000005, 1.5) + (-u_xlat0.xx);
    u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
    u_xlat5.xy = floor(u_xlat5.xy);
    u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
    u_xlati5.xy = ivec2(u_xlat5.xy);
    u_xlat0.x = u_xlat10 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat8.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz + u_xlat1.xyz;
    u_xlat16_7.xyz = (u_xlati5.y != 0) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat0.x = (u_xlati5.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati5.x != 0) ? u_xlat16_7.xyz : u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_6;
    u_xlat1 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_2;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
        u_xlat10 = (-u_xlat0.x) + 1.00100005;
        u_xlat10 = max(u_xlat10, 0.00100000005);
        u_xlat10 = min(u_xlat10, 1.0);
        u_xlat10 = log2(u_xlat10);
        u_xlat10 = u_xlat10 * _RGShininess;
        u_xlat10 = exp2(u_xlat10);
        u_xlat10 = u_xlat10 * _RGScale + _RGBias;
        u_xlat20 = u_xlat10_0.w + 0.100000001;
        u_xlatb2 = greaterThanEqual(vec4(u_xlat20), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb5.xyz = lessThan(vec4(u_xlat20), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb5.x = u_xlatb2.y && u_xlatb5.x;
        u_xlatb5.y = u_xlatb2.z && u_xlatb5.y;
        u_xlatb5.z = u_xlatb2.w && u_xlatb5.z;
        u_xlat16_6 = (u_xlatb5.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb5.y) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_5 = (u_xlatb5.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_5;
        u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_34 = inversesqrt(u_xlat16_34);
        u_xlat16_7.xyz = vec3(u_xlat16_34) * _WorldSpaceLightPos0.xyz;
        u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
        u_xlat16_34 = u_xlat16_20 + 0.5;
        u_xlat16_34 = u_xlat0.x * u_xlat16_34;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_34);
#else
        u_xlatb0 = u_xlat16_2.w<u_xlat16_34;
#endif
        u_xlat16_34 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_7.xyz = u_xlat16_2.xyz * vec3(u_xlat16_34);
        u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_HRRimPower) + u_xlat1.xyz;
        u_xlat16_34 = u_xlat10;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
        u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_34 * _RGRatio;
        u_xlat8.xyz = vec3(u_xlat10) * _RGColor.xyz + (-u_xlat1.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz + u_xlat1.xyz;
        u_xlat16_34 = float(_HRRimIntensity);
        u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat16_7.xyz;
        SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat16_7.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
            u_xlat10 = (-u_xlat0.x) + 1.00100005;
            u_xlat10 = max(u_xlat10, 0.00100000005);
            u_xlat10 = min(u_xlat10, 1.0);
            u_xlat10 = log2(u_xlat10);
            u_xlat10 = u_xlat10 * _RGShininess;
            u_xlat10 = exp2(u_xlat10);
            u_xlat10 = u_xlat10 * _RGScale + _RGBias;
            u_xlat16_7.xyz = vec3(u_xlat10) * _RGColor.xyz;
            u_xlat10 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat10), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb10.xyz = lessThan(vec4(u_xlat10), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb10.x = u_xlatb10.x && u_xlatb2.y;
            u_xlatb10.y = u_xlatb10.y && u_xlatb2.z;
            u_xlatb10.z = u_xlatb10.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb10.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb10.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb10.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_34 = inversesqrt(u_xlat16_34);
            u_xlat16_9.xyz = vec3(u_xlat16_34) * _WorldSpaceLightPos0.xyz;
            u_xlat16_10 = dot(u_xlat16_4.xyz, u_xlat16_9.xyz);
            u_xlat16_4.x = u_xlat16_10 + 0.5;
            u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_4.x);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_4.x;
#endif
            u_xlat16_4.x = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_HRRimPower);
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_4.xyz = u_xlat1.xyz + u_xlat16_4.xyz;
            u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_7.xyz = u_xlat1.xyz + u_xlat16_7.xyz;
            u_xlat16_34 = float(_HRRimIntensity);
            u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_7.xyz);
            SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz + u_xlat16_7.xyz;
        } else {
            SV_Target0.xyz = u_xlat1.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
ivec2 u_xlati5;
bvec3 u_xlatb5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
lowp vec3 u_xlat10_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_10;
int u_xlati10;
bvec3 u_xlatb10;
mediump vec3 u_xlat16_12;
vec2 u_xlat13;
int u_xlati13;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
bvec2 u_xlatb20;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_34;
bool u_xlatb35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat3.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
    u_xlat16_12.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_12.x = u_xlat16_12.x * 0.5 + (-_SecondShadow);
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = floor(u_xlat16_12.x);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlati13 = int(u_xlat16_12.x);
    u_xlat16_12.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_12.xyz = (int(u_xlati13) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat10 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10 = floor(u_xlat10);
    u_xlat10 = max(u_xlat10, 0.0);
    u_xlati10 = int(u_xlat10);
    u_xlat13.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati10 != 0) ? u_xlat13.y : u_xlat13.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati10 = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (int(u_xlati10) != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_4.xyz = vec3(u_xlat16_32) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat3.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat5.xyz = u_xlat1.xyz * vec3(u_xlat10) + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_32 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_7.xyz = vec3(u_xlat16_32) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb35)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_32 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_32 = max(u_xlat16_32, 0.0);
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat16_32 = u_xlat16_32 * _Shininess;
    u_xlat16_32 = exp2(u_xlat16_32);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_7.xyz;
    u_xlat16_2.w = u_xlat10_1.w * vs_COLOR1.y;
    u_xlat10_5 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_5.w * _SPOpaqueness;
    u_xlat10_8.xyz = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat0.x = u_xlat10_8.x * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + (-_WorldSpaceCameraPos.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat8.xyz = u_xlat10_8.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat8.xyz;
    u_xlat1.xyz = u_xlat1.xyz + _SPCubeMapOffset.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat16_4.xyz);
    u_xlat10 = u_xlat10 + u_xlat10;
    u_xlat1.xyz = u_xlat16_4.xyz * (-vec3(u_xlat10)) + u_xlat1.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_7.xyz;
    u_xlat10 = _SPNoiseScaler * _SPTransition;
    u_xlat5.xy = vec2(u_xlat10) * vec2(1.70000005, 1.5) + (-u_xlat0.xx);
    u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
    u_xlat5.xy = floor(u_xlat5.xy);
    u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
    u_xlati5.xy = ivec2(u_xlat5.xy);
    u_xlat0.x = u_xlat10 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat8.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz + u_xlat1.xyz;
    u_xlat16_7.xyz = (u_xlati5.y != 0) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat0.x = (u_xlati5.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati5.x != 0) ? u_xlat16_7.xyz : u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_6;
    u_xlat1 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_2;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
        u_xlat10 = (-u_xlat0.x) + 1.00100005;
        u_xlat10 = max(u_xlat10, 0.00100000005);
        u_xlat10 = min(u_xlat10, 1.0);
        u_xlat10 = log2(u_xlat10);
        u_xlat10 = u_xlat10 * _RGShininess;
        u_xlat10 = exp2(u_xlat10);
        u_xlat10 = u_xlat10 * _RGScale + _RGBias;
        u_xlat20 = u_xlat10_0.w + 0.100000001;
        u_xlatb2 = greaterThanEqual(vec4(u_xlat20), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb5.xyz = lessThan(vec4(u_xlat20), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb5.x = u_xlatb2.y && u_xlatb5.x;
        u_xlatb5.y = u_xlatb2.z && u_xlatb5.y;
        u_xlatb5.z = u_xlatb2.w && u_xlatb5.z;
        u_xlat16_6 = (u_xlatb5.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb5.y) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_5 = (u_xlatb5.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_5;
        u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_34 = inversesqrt(u_xlat16_34);
        u_xlat16_7.xyz = vec3(u_xlat16_34) * _WorldSpaceLightPos0.xyz;
        u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
        u_xlat16_34 = u_xlat16_20 + 0.5;
        u_xlat16_34 = u_xlat0.x * u_xlat16_34;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_34);
#else
        u_xlatb0 = u_xlat16_2.w<u_xlat16_34;
#endif
        u_xlat16_34 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_7.xyz = u_xlat16_2.xyz * vec3(u_xlat16_34);
        u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_HRRimPower) + u_xlat1.xyz;
        u_xlat16_34 = u_xlat10;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
        u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_34 * _RGRatio;
        u_xlat8.xyz = vec3(u_xlat10) * _RGColor.xyz + (-u_xlat1.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz + u_xlat1.xyz;
        u_xlat16_34 = float(_HRRimIntensity);
        u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat16_7.xyz;
        SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat16_7.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
            u_xlat10 = (-u_xlat0.x) + 1.00100005;
            u_xlat10 = max(u_xlat10, 0.00100000005);
            u_xlat10 = min(u_xlat10, 1.0);
            u_xlat10 = log2(u_xlat10);
            u_xlat10 = u_xlat10 * _RGShininess;
            u_xlat10 = exp2(u_xlat10);
            u_xlat10 = u_xlat10 * _RGScale + _RGBias;
            u_xlat16_7.xyz = vec3(u_xlat10) * _RGColor.xyz;
            u_xlat10 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat10), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb10.xyz = lessThan(vec4(u_xlat10), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb10.x = u_xlatb10.x && u_xlatb2.y;
            u_xlatb10.y = u_xlatb10.y && u_xlatb2.z;
            u_xlatb10.z = u_xlatb10.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb10.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb10.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb10.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_34 = inversesqrt(u_xlat16_34);
            u_xlat16_9.xyz = vec3(u_xlat16_34) * _WorldSpaceLightPos0.xyz;
            u_xlat16_10 = dot(u_xlat16_4.xyz, u_xlat16_9.xyz);
            u_xlat16_4.x = u_xlat16_10 + 0.5;
            u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_4.x);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_4.x;
#endif
            u_xlat16_4.x = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_HRRimPower);
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_4.xyz = u_xlat1.xyz + u_xlat16_4.xyz;
            u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_7.xyz = u_xlat1.xyz + u_xlat16_7.xyz;
            u_xlat16_34 = float(_HRRimIntensity);
            u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_7.xyz);
            SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz + u_xlat16_7.xyz;
        } else {
            SV_Target0.xyz = u_xlat1.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
ivec2 u_xlati5;
bvec3 u_xlatb5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
lowp vec3 u_xlat10_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_10;
int u_xlati10;
bvec3 u_xlatb10;
mediump vec3 u_xlat16_12;
vec2 u_xlat13;
int u_xlati13;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
bvec2 u_xlatb20;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_34;
bool u_xlatb35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat3.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
    u_xlat16_12.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_12.x = u_xlat16_12.x * 0.5 + (-_SecondShadow);
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = floor(u_xlat16_12.x);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlati13 = int(u_xlat16_12.x);
    u_xlat16_12.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_12.xyz = (int(u_xlati13) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat10 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10 = floor(u_xlat10);
    u_xlat10 = max(u_xlat10, 0.0);
    u_xlati10 = int(u_xlat10);
    u_xlat13.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati10 != 0) ? u_xlat13.y : u_xlat13.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati10 = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (int(u_xlati10) != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_4.xyz = vec3(u_xlat16_32) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat3.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat5.xyz = u_xlat1.xyz * vec3(u_xlat10) + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_32 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_7.xyz = vec3(u_xlat16_32) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb35)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_32 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_32 = max(u_xlat16_32, 0.0);
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat16_32 = u_xlat16_32 * _Shininess;
    u_xlat16_32 = exp2(u_xlat16_32);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_7.xyz;
    u_xlat16_2.w = u_xlat10_1.w * vs_COLOR1.y;
    u_xlat10_5 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_5.w * _SPOpaqueness;
    u_xlat10_8.xyz = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat0.x = u_xlat10_8.x * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + (-_WorldSpaceCameraPos.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat8.xyz = u_xlat10_8.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat8.xyz;
    u_xlat1.xyz = u_xlat1.xyz + _SPCubeMapOffset.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat16_4.xyz);
    u_xlat10 = u_xlat10 + u_xlat10;
    u_xlat1.xyz = u_xlat16_4.xyz * (-vec3(u_xlat10)) + u_xlat1.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_7.xyz;
    u_xlat10 = _SPNoiseScaler * _SPTransition;
    u_xlat5.xy = vec2(u_xlat10) * vec2(1.70000005, 1.5) + (-u_xlat0.xx);
    u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
    u_xlat5.xy = floor(u_xlat5.xy);
    u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
    u_xlati5.xy = ivec2(u_xlat5.xy);
    u_xlat0.x = u_xlat10 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat8.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz + u_xlat1.xyz;
    u_xlat16_7.xyz = (u_xlati5.y != 0) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat0.x = (u_xlati5.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati5.x != 0) ? u_xlat16_7.xyz : u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_6;
    u_xlat1 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_2;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
        u_xlat10 = (-u_xlat0.x) + 1.00100005;
        u_xlat10 = max(u_xlat10, 0.00100000005);
        u_xlat10 = min(u_xlat10, 1.0);
        u_xlat10 = log2(u_xlat10);
        u_xlat10 = u_xlat10 * _RGShininess;
        u_xlat10 = exp2(u_xlat10);
        u_xlat10 = u_xlat10 * _RGScale + _RGBias;
        u_xlat20 = u_xlat10_0.w + 0.100000001;
        u_xlatb2 = greaterThanEqual(vec4(u_xlat20), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb5.xyz = lessThan(vec4(u_xlat20), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb5.x = u_xlatb2.y && u_xlatb5.x;
        u_xlatb5.y = u_xlatb2.z && u_xlatb5.y;
        u_xlatb5.z = u_xlatb2.w && u_xlatb5.z;
        u_xlat16_6 = (u_xlatb5.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb5.y) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_5 = (u_xlatb5.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_5;
        u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_34 = inversesqrt(u_xlat16_34);
        u_xlat16_7.xyz = vec3(u_xlat16_34) * _WorldSpaceLightPos0.xyz;
        u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
        u_xlat16_34 = u_xlat16_20 + 0.5;
        u_xlat16_34 = u_xlat0.x * u_xlat16_34;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_34);
#else
        u_xlatb0 = u_xlat16_2.w<u_xlat16_34;
#endif
        u_xlat16_34 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_7.xyz = u_xlat16_2.xyz * vec3(u_xlat16_34);
        u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_HRRimPower) + u_xlat1.xyz;
        u_xlat16_34 = u_xlat10;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
        u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_34 * _RGRatio;
        u_xlat8.xyz = vec3(u_xlat10) * _RGColor.xyz + (-u_xlat1.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz + u_xlat1.xyz;
        u_xlat16_34 = float(_HRRimIntensity);
        u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat16_7.xyz;
        SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat16_7.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
            u_xlat10 = (-u_xlat0.x) + 1.00100005;
            u_xlat10 = max(u_xlat10, 0.00100000005);
            u_xlat10 = min(u_xlat10, 1.0);
            u_xlat10 = log2(u_xlat10);
            u_xlat10 = u_xlat10 * _RGShininess;
            u_xlat10 = exp2(u_xlat10);
            u_xlat10 = u_xlat10 * _RGScale + _RGBias;
            u_xlat16_7.xyz = vec3(u_xlat10) * _RGColor.xyz;
            u_xlat10 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat10), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb10.xyz = lessThan(vec4(u_xlat10), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb10.x = u_xlatb10.x && u_xlatb2.y;
            u_xlatb10.y = u_xlatb10.y && u_xlatb2.z;
            u_xlatb10.z = u_xlatb10.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb10.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb10.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb10.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_34 = inversesqrt(u_xlat16_34);
            u_xlat16_9.xyz = vec3(u_xlat16_34) * _WorldSpaceLightPos0.xyz;
            u_xlat16_10 = dot(u_xlat16_4.xyz, u_xlat16_9.xyz);
            u_xlat16_4.x = u_xlat16_10 + 0.5;
            u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_4.x);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_4.x;
#endif
            u_xlat16_4.x = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_HRRimPower);
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_4.xyz = u_xlat1.xyz + u_xlat16_4.xyz;
            u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_7.xyz = u_xlat1.xyz + u_xlat16_7.xyz;
            u_xlat16_34 = float(_HRRimIntensity);
            u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_7.xyz);
            SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz + u_xlat16_7.xyz;
        } else {
            SV_Target0.xyz = u_xlat1.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
int u_xlati3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec4 u_xlat10_5;
ivec2 u_xlati5;
bvec3 u_xlatb5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
lowp vec3 u_xlat10_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
mediump float u_xlat16_10;
int u_xlati10;
bvec3 u_xlatb10;
mediump vec3 u_xlat16_12;
vec2 u_xlat13;
int u_xlati13;
float u_xlat20;
mediump float u_xlat16_20;
int u_xlati20;
bvec2 u_xlatb20;
mediump float u_xlat16_32;
float u_xlat33;
mediump float u_xlat16_34;
bool u_xlatb35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_2.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat3.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat3.x = max(u_xlat3.x, 0.0);
    u_xlati3 = int(u_xlat3.x);
    u_xlat16_12.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_12.x = u_xlat16_12.x * 0.5 + (-_SecondShadow);
    u_xlat16_12.x = u_xlat16_12.x + 1.0;
    u_xlat16_12.x = floor(u_xlat16_12.x);
    u_xlat16_12.x = max(u_xlat16_12.x, 0.0);
    u_xlati13 = int(u_xlat16_12.x);
    u_xlat16_12.xyz = u_xlat10_1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_12.xyz = (int(u_xlati13) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat10 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat10 = floor(u_xlat10);
    u_xlat10 = max(u_xlat10, 0.0);
    u_xlati10 = int(u_xlat10);
    u_xlat13.xy = u_xlat16_2.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_2.x = (u_xlati10 != 0) ? u_xlat13.y : u_xlat13.x;
    u_xlat16_2.x = u_xlat16_2.x + vs_COLOR1.x;
    u_xlat16_2.x = u_xlat16_2.x * 0.5 + (-_LightArea);
    u_xlat16_2.x = u_xlat16_2.x + 1.0;
    u_xlat16_2.x = floor(u_xlat16_2.x);
    u_xlat16_2.x = max(u_xlat16_2.x, 0.0);
    u_xlati10 = int(u_xlat16_2.x);
    u_xlat16_4.xyz = (int(u_xlati10) != 0) ? u_xlat10_1.xyz : u_xlat16_4.xyz;
    u_xlat16_2.xyz = (int(u_xlati3) != 0) ? u_xlat16_4.xyz : u_xlat16_12.xyz;
    u_xlat16_32 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_4.xyz = vec3(u_xlat16_32) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat3.xyz = vec3(u_xlat10) * u_xlat1.xyz;
    u_xlat5.xyz = u_xlat1.xyz * vec3(u_xlat10) + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat6.xyz = vec3(u_xlat33) * u_xlat5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb35 = 0.5<_CustomLightDir.w;
#endif
    u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat33) + (-_WorldSpaceLightPos0.xyz);
    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(u_xlat33) + _CustomLightDir.xyz;
    u_xlat16_32 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_32 = inversesqrt(u_xlat16_32);
    u_xlat16_7.xyz = vec3(u_xlat16_32) * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (bool(u_xlatb35)) ? u_xlat16_7.xyz : u_xlat6.xyz;
    u_xlat16_32 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
    u_xlat16_32 = max(u_xlat16_32, 0.0);
    u_xlat16_32 = log2(u_xlat16_32);
    u_xlat16_32 = u_xlat16_32 * _Shininess;
    u_xlat16_32 = exp2(u_xlat16_32);
    u_xlat16_20 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_20 = (-u_xlat16_32) + u_xlat16_20;
    u_xlat20 = u_xlat16_20 + 1.0;
    u_xlat20 = floor(u_xlat20);
    u_xlat20 = max(u_xlat20, 0.0);
    u_xlati20 = int(u_xlat20);
    u_xlat16_7.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_7.xyz = u_xlat10_0.xxx * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (int(u_xlati20) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_7.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * _EnvColor.xyz + u_xlat16_7.xyz;
    u_xlat16_2.w = u_xlat10_1.w * vs_COLOR1.y;
    u_xlat10_5 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_5.w * _SPOpaqueness;
    u_xlat10_8.xyz = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat0.x = u_xlat10_8.x * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + (-_WorldSpaceCameraPos.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat8.xyz = u_xlat10_8.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat10) + u_xlat8.xyz;
    u_xlat1.xyz = u_xlat1.xyz + _SPCubeMapOffset.xyz;
    u_xlat10 = dot(u_xlat1.xyz, u_xlat16_4.xyz);
    u_xlat10 = u_xlat10 + u_xlat10;
    u_xlat1.xyz = u_xlat16_4.xyz * (-vec3(u_xlat10)) + u_xlat1.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_7.xyz;
    u_xlat10 = _SPNoiseScaler * _SPTransition;
    u_xlat5.xy = vec2(u_xlat10) * vec2(1.70000005, 1.5) + (-u_xlat0.xx);
    u_xlat5.xy = u_xlat5.xy + vec2(1.0, 1.0);
    u_xlat5.xy = floor(u_xlat5.xy);
    u_xlat5.xy = max(u_xlat5.xy, vec2(0.0, 0.0));
    u_xlati5.xy = ivec2(u_xlat5.xy);
    u_xlat0.x = u_xlat10 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat8.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz + u_xlat1.xyz;
    u_xlat16_7.xyz = (u_xlati5.y != 0) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat0.x = (u_xlati5.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati5.x != 0) ? u_xlat16_7.xyz : u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_2) + u_xlat16_6;
    u_xlat1 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_2;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
        u_xlat10 = (-u_xlat0.x) + 1.00100005;
        u_xlat10 = max(u_xlat10, 0.00100000005);
        u_xlat10 = min(u_xlat10, 1.0);
        u_xlat10 = log2(u_xlat10);
        u_xlat10 = u_xlat10 * _RGShininess;
        u_xlat10 = exp2(u_xlat10);
        u_xlat10 = u_xlat10 * _RGScale + _RGBias;
        u_xlat20 = u_xlat10_0.w + 0.100000001;
        u_xlatb2 = greaterThanEqual(vec4(u_xlat20), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb5.xyz = lessThan(vec4(u_xlat20), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb5.x = u_xlatb2.y && u_xlatb5.x;
        u_xlatb5.y = u_xlatb2.z && u_xlatb5.y;
        u_xlatb5.z = u_xlatb2.w && u_xlatb5.z;
        u_xlat16_6 = (u_xlatb5.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_6 = (u_xlatb5.y) ? _HRRimColor2 : u_xlat16_6;
        u_xlat16_5 = (u_xlatb5.x) ? _HRRimColor3 : u_xlat16_6;
        u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_5;
        u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_34 = inversesqrt(u_xlat16_34);
        u_xlat16_7.xyz = vec3(u_xlat16_34) * _WorldSpaceLightPos0.xyz;
        u_xlat16_20 = dot(u_xlat16_4.xyz, u_xlat16_7.xyz);
        u_xlat16_34 = u_xlat16_20 + 0.5;
        u_xlat16_34 = u_xlat0.x * u_xlat16_34;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_34);
#else
        u_xlatb0 = u_xlat16_2.w<u_xlat16_34;
#endif
        u_xlat16_34 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_7.xyz = u_xlat16_2.xyz * vec3(u_xlat16_34);
        u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_HRRimPower) + u_xlat1.xyz;
        u_xlat16_34 = u_xlat10;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
        u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_34 * _RGRatio;
        u_xlat8.xyz = vec3(u_xlat10) * _RGColor.xyz + (-u_xlat1.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz + u_xlat1.xyz;
        u_xlat16_34 = float(_HRRimIntensity);
        u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat16_7.xyz;
        SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat16_7.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat3.xyz, u_xlat16_4.xyz);
            u_xlat10 = (-u_xlat0.x) + 1.00100005;
            u_xlat10 = max(u_xlat10, 0.00100000005);
            u_xlat10 = min(u_xlat10, 1.0);
            u_xlat10 = log2(u_xlat10);
            u_xlat10 = u_xlat10 * _RGShininess;
            u_xlat10 = exp2(u_xlat10);
            u_xlat10 = u_xlat10 * _RGScale + _RGBias;
            u_xlat16_7.xyz = vec3(u_xlat10) * _RGColor.xyz;
            u_xlat10 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat10), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb10.xyz = lessThan(vec4(u_xlat10), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb10.x = u_xlatb10.x && u_xlatb2.y;
            u_xlatb10.y = u_xlatb10.y && u_xlatb2.z;
            u_xlatb10.z = u_xlatb10.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb10.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb10.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb10.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_34 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_34 = inversesqrt(u_xlat16_34);
            u_xlat16_9.xyz = vec3(u_xlat16_34) * _WorldSpaceLightPos0.xyz;
            u_xlat16_10 = dot(u_xlat16_4.xyz, u_xlat16_9.xyz);
            u_xlat16_4.x = u_xlat16_10 + 0.5;
            u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_4.x);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_4.x;
#endif
            u_xlat16_4.x = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;
            u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(_HRRimPower);
            u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_4.xyz = u_xlat1.xyz + u_xlat16_4.xyz;
            u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_7.xyz = u_xlat1.xyz + u_xlat16_7.xyz;
            u_xlat16_34 = float(_HRRimIntensity);
            u_xlat16_4.xyz = u_xlat16_4.xyz + (-u_xlat16_7.xyz);
            SV_Target0.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz + u_xlat16_7.xyz;
        } else {
            SV_Target0.xyz = u_xlat1.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb20.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb20.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb20.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
int u_xlati1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec3 u_xlat10_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
bvec4 u_xlatb3;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
ivec2 u_xlati7;
bvec3 u_xlatb7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
float u_xlat11;
mediump float u_xlat16_11;
int u_xlati11;
bvec3 u_xlatb11;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
bvec2 u_xlatb22;
vec2 u_xlat23;
int u_xlati23;
float u_xlat35;
bool u_xlatb36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_37 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat1.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati23 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati23) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat11 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11 = floor(u_xlat11);
    u_xlat11 = max(u_xlat11, 0.0);
    u_xlati11 = int(u_xlat11);
    u_xlat23.xy = vec2(u_xlat16_37) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_37 = (u_xlati11 != 0) ? u_xlat23.y : u_xlat23.x;
    u_xlat16_37 = u_xlat16_37 + vs_COLOR1.x;
    u_xlat16_37 = u_xlat16_37 * 0.5 + (-_LightArea);
    u_xlat16_37 = u_xlat16_37 + 1.0;
    u_xlat16_37 = floor(u_xlat16_37);
    u_xlat16_37 = max(u_xlat16_37, 0.0);
    u_xlati11 = int(u_xlat16_37);
    u_xlat16_4.xyz = (int(u_xlati11) != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (int(u_xlati1) != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat16_37 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat16_5.xyz = vec3(u_xlat16_37) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11 = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat1.xzw;
    u_xlat3.xyz = u_xlat1.xzw * vec3(u_xlat11) + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat7.xyz = vec3(u_xlat35) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb36 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat35) + (-_WorldSpaceLightPos0.xyz);
    u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat35) + _CustomLightDir.xyz;
    u_xlat16_37 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat16_6.xyz = vec3(u_xlat16_37) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb36)) ? u_xlat16_6.xyz : u_xlat7.xyz;
    u_xlat16_37 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
    u_xlat16_37 = max(u_xlat16_37, 0.0);
    u_xlat16_37 = log2(u_xlat16_37);
    u_xlat16_37 = u_xlat16_37 * _Shininess;
    u_xlat16_37 = exp2(u_xlat16_37);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_37) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_4.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
    u_xlat16_3.w = u_xlat10_1.y * vs_COLOR1.y;
    u_xlat10_4 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_4.w * _SPOpaqueness;
    u_xlat10_7.xyz = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat0.x = u_xlat10_7.x * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xzw * vec3(u_xlat11) + (-_WorldSpaceCameraPos.xyz);
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat7.xyz = u_xlat10_7.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + u_xlat7.xyz;
    u_xlat1.xyz = u_xlat1.xyz + _SPCubeMapOffset.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat16_5.xyz);
    u_xlat11 = u_xlat11 + u_xlat11;
    u_xlat1.xyz = u_xlat16_5.xyz * (-vec3(u_xlat11)) + u_xlat1.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_8.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_8.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_8.xyz;
    u_xlat11 = _SPNoiseScaler * _SPTransition;
    u_xlat7.xy = vec2(u_xlat11) * vec2(1.70000005, 1.5) + (-u_xlat0.xx);
    u_xlat7.xy = u_xlat7.xy + vec2(1.0, 1.0);
    u_xlat7.xy = floor(u_xlat7.xy);
    u_xlat7.xy = max(u_xlat7.xy, vec2(0.0, 0.0));
    u_xlati7.xy = ivec2(u_xlat7.xy);
    u_xlat0.x = u_xlat11 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + u_xlat1.xyz;
    u_xlat16_8.xyz = (u_xlati7.y != 0) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat0.x = (u_xlati7.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_8.xyz = (u_xlati7.x != 0) ? u_xlat16_8.xyz : u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_8.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_3) + u_xlat16_6;
    u_xlat1 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_5.xyz);
        u_xlat11 = (-u_xlat0.x) + 1.00100005;
        u_xlat11 = max(u_xlat11, 0.00100000005);
        u_xlat11 = min(u_xlat11, 1.0);
        u_xlat11 = log2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGShininess;
        u_xlat11 = exp2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGScale + _RGBias;
        u_xlat22 = u_xlat10_0.w + 0.100000001;
        u_xlatb3 = greaterThanEqual(vec4(u_xlat22), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb7.xyz = lessThan(vec4(u_xlat22), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb7.x = u_xlatb3.y && u_xlatb7.x;
        u_xlatb7.y = u_xlatb3.z && u_xlatb7.y;
        u_xlatb7.z = u_xlatb3.w && u_xlatb7.z;
        u_xlat16_4 = (u_xlatb7.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_4 = (u_xlatb7.y) ? _HRRimColor2 : u_xlat16_4;
        u_xlat16_4 = (u_xlatb7.x) ? _HRRimColor3 : u_xlat16_4;
        u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_4;
        u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_38 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_38 = inversesqrt(u_xlat16_38);
        u_xlat16_6.xyz = vec3(u_xlat16_38) * _WorldSpaceLightPos0.xyz;
        u_xlat16_22 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
        u_xlat16_38 = u_xlat16_22 + 0.5;
        u_xlat16_38 = u_xlat0.x * u_xlat16_38;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_38);
#else
        u_xlatb0 = u_xlat16_3.w<u_xlat16_38;
#endif
        u_xlat16_38 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(u_xlat16_38);
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_HRRimPower) + u_xlat1.xyz;
        u_xlat16_38 = u_xlat11;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
        u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_38 * _RGRatio;
        u_xlat7.xyz = vec3(u_xlat11) * _RGColor.xyz + (-u_xlat1.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz + u_xlat1.xyz;
        u_xlat16_38 = float(_HRRimIntensity);
        u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat16_6.xyz;
        SV_Target0.xyz = vec3(u_xlat16_38) * u_xlat16_6.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_5.xyz);
            u_xlat11 = (-u_xlat0.x) + 1.00100005;
            u_xlat11 = max(u_xlat11, 0.00100000005);
            u_xlat11 = min(u_xlat11, 1.0);
            u_xlat11 = log2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGShininess;
            u_xlat11 = exp2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGScale + _RGBias;
            u_xlat16_6.xyz = vec3(u_xlat11) * _RGColor.xyz;
            u_xlat11 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat11), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb11.xyz = lessThan(vec4(u_xlat11), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb11.x = u_xlatb11.x && u_xlatb2.y;
            u_xlatb11.y = u_xlatb11.y && u_xlatb2.z;
            u_xlatb11.z = u_xlatb11.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb11.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb11.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb11.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_38 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_38 = inversesqrt(u_xlat16_38);
            u_xlat16_8.xyz = vec3(u_xlat16_38) * _WorldSpaceLightPos0.xyz;
            u_xlat16_11 = dot(u_xlat16_5.xyz, u_xlat16_8.xyz);
            u_xlat16_5.x = u_xlat16_11 + 0.5;
            u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_5.x);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_5.x;
#endif
            u_xlat16_5.x = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xxx;
            u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_HRRimPower);
            u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_5.xyz = u_xlat1.xyz + u_xlat16_5.xyz;
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_6.xyz = u_xlat1.xyz + u_xlat16_6.xyz;
            u_xlat16_38 = float(_HRRimIntensity);
            u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
            SV_Target0.xyz = vec3(u_xlat16_38) * u_xlat16_5.xyz + u_xlat16_6.xyz;
        } else {
            SV_Target0.xyz = u_xlat1.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
int u_xlati1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec3 u_xlat10_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
bvec4 u_xlatb3;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
ivec2 u_xlati7;
bvec3 u_xlatb7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
float u_xlat11;
mediump float u_xlat16_11;
int u_xlati11;
bvec3 u_xlatb11;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
bvec2 u_xlatb22;
vec2 u_xlat23;
int u_xlati23;
float u_xlat35;
bool u_xlatb36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_37 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat1.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati23 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati23) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat11 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11 = floor(u_xlat11);
    u_xlat11 = max(u_xlat11, 0.0);
    u_xlati11 = int(u_xlat11);
    u_xlat23.xy = vec2(u_xlat16_37) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_37 = (u_xlati11 != 0) ? u_xlat23.y : u_xlat23.x;
    u_xlat16_37 = u_xlat16_37 + vs_COLOR1.x;
    u_xlat16_37 = u_xlat16_37 * 0.5 + (-_LightArea);
    u_xlat16_37 = u_xlat16_37 + 1.0;
    u_xlat16_37 = floor(u_xlat16_37);
    u_xlat16_37 = max(u_xlat16_37, 0.0);
    u_xlati11 = int(u_xlat16_37);
    u_xlat16_4.xyz = (int(u_xlati11) != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (int(u_xlati1) != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat16_37 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat16_5.xyz = vec3(u_xlat16_37) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11 = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat1.xzw;
    u_xlat3.xyz = u_xlat1.xzw * vec3(u_xlat11) + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat7.xyz = vec3(u_xlat35) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb36 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat35) + (-_WorldSpaceLightPos0.xyz);
    u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat35) + _CustomLightDir.xyz;
    u_xlat16_37 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat16_6.xyz = vec3(u_xlat16_37) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb36)) ? u_xlat16_6.xyz : u_xlat7.xyz;
    u_xlat16_37 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
    u_xlat16_37 = max(u_xlat16_37, 0.0);
    u_xlat16_37 = log2(u_xlat16_37);
    u_xlat16_37 = u_xlat16_37 * _Shininess;
    u_xlat16_37 = exp2(u_xlat16_37);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_37) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_4.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
    u_xlat16_3.w = u_xlat10_1.y * vs_COLOR1.y;
    u_xlat10_4 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_4.w * _SPOpaqueness;
    u_xlat10_7.xyz = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat0.x = u_xlat10_7.x * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xzw * vec3(u_xlat11) + (-_WorldSpaceCameraPos.xyz);
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat7.xyz = u_xlat10_7.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + u_xlat7.xyz;
    u_xlat1.xyz = u_xlat1.xyz + _SPCubeMapOffset.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat16_5.xyz);
    u_xlat11 = u_xlat11 + u_xlat11;
    u_xlat1.xyz = u_xlat16_5.xyz * (-vec3(u_xlat11)) + u_xlat1.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_8.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_8.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_8.xyz;
    u_xlat11 = _SPNoiseScaler * _SPTransition;
    u_xlat7.xy = vec2(u_xlat11) * vec2(1.70000005, 1.5) + (-u_xlat0.xx);
    u_xlat7.xy = u_xlat7.xy + vec2(1.0, 1.0);
    u_xlat7.xy = floor(u_xlat7.xy);
    u_xlat7.xy = max(u_xlat7.xy, vec2(0.0, 0.0));
    u_xlati7.xy = ivec2(u_xlat7.xy);
    u_xlat0.x = u_xlat11 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + u_xlat1.xyz;
    u_xlat16_8.xyz = (u_xlati7.y != 0) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat0.x = (u_xlati7.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_8.xyz = (u_xlati7.x != 0) ? u_xlat16_8.xyz : u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_8.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_3) + u_xlat16_6;
    u_xlat1 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_5.xyz);
        u_xlat11 = (-u_xlat0.x) + 1.00100005;
        u_xlat11 = max(u_xlat11, 0.00100000005);
        u_xlat11 = min(u_xlat11, 1.0);
        u_xlat11 = log2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGShininess;
        u_xlat11 = exp2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGScale + _RGBias;
        u_xlat22 = u_xlat10_0.w + 0.100000001;
        u_xlatb3 = greaterThanEqual(vec4(u_xlat22), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb7.xyz = lessThan(vec4(u_xlat22), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb7.x = u_xlatb3.y && u_xlatb7.x;
        u_xlatb7.y = u_xlatb3.z && u_xlatb7.y;
        u_xlatb7.z = u_xlatb3.w && u_xlatb7.z;
        u_xlat16_4 = (u_xlatb7.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_4 = (u_xlatb7.y) ? _HRRimColor2 : u_xlat16_4;
        u_xlat16_4 = (u_xlatb7.x) ? _HRRimColor3 : u_xlat16_4;
        u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_4;
        u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_38 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_38 = inversesqrt(u_xlat16_38);
        u_xlat16_6.xyz = vec3(u_xlat16_38) * _WorldSpaceLightPos0.xyz;
        u_xlat16_22 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
        u_xlat16_38 = u_xlat16_22 + 0.5;
        u_xlat16_38 = u_xlat0.x * u_xlat16_38;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_38);
#else
        u_xlatb0 = u_xlat16_3.w<u_xlat16_38;
#endif
        u_xlat16_38 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(u_xlat16_38);
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_HRRimPower) + u_xlat1.xyz;
        u_xlat16_38 = u_xlat11;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
        u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_38 * _RGRatio;
        u_xlat7.xyz = vec3(u_xlat11) * _RGColor.xyz + (-u_xlat1.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz + u_xlat1.xyz;
        u_xlat16_38 = float(_HRRimIntensity);
        u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat16_6.xyz;
        SV_Target0.xyz = vec3(u_xlat16_38) * u_xlat16_6.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_5.xyz);
            u_xlat11 = (-u_xlat0.x) + 1.00100005;
            u_xlat11 = max(u_xlat11, 0.00100000005);
            u_xlat11 = min(u_xlat11, 1.0);
            u_xlat11 = log2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGShininess;
            u_xlat11 = exp2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGScale + _RGBias;
            u_xlat16_6.xyz = vec3(u_xlat11) * _RGColor.xyz;
            u_xlat11 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat11), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb11.xyz = lessThan(vec4(u_xlat11), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb11.x = u_xlatb11.x && u_xlatb2.y;
            u_xlatb11.y = u_xlatb11.y && u_xlatb2.z;
            u_xlatb11.z = u_xlatb11.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb11.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb11.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb11.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_38 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_38 = inversesqrt(u_xlat16_38);
            u_xlat16_8.xyz = vec3(u_xlat16_38) * _WorldSpaceLightPos0.xyz;
            u_xlat16_11 = dot(u_xlat16_5.xyz, u_xlat16_8.xyz);
            u_xlat16_5.x = u_xlat16_11 + 0.5;
            u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_5.x);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_5.x;
#endif
            u_xlat16_5.x = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xxx;
            u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_HRRimPower);
            u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_5.xyz = u_xlat1.xyz + u_xlat16_5.xyz;
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_6.xyz = u_xlat1.xyz + u_xlat16_6.xyz;
            u_xlat16_38 = float(_HRRimIntensity);
            u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
            SV_Target0.xyz = vec3(u_xlat16_38) * u_xlat16_5.xyz + u_xlat16_6.xyz;
        } else {
            SV_Target0.xyz = u_xlat1.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
int u_xlati1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
lowp vec3 u_xlat10_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_3;
bvec4 u_xlatb3;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
ivec2 u_xlati7;
bvec3 u_xlatb7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
float u_xlat11;
mediump float u_xlat16_11;
int u_xlati11;
bvec3 u_xlatb11;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
bvec2 u_xlatb22;
vec2 u_xlat23;
int u_xlati23;
float u_xlat35;
bool u_xlatb36;
mediump float u_xlat16_37;
mediump float u_xlat16_38;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat10_1.xy = texture(_factorTex, vs_TEXCOORD0.xy).xy;
    u_xlat2.x = texture(_indexTex, vs_TEXCOORD0.xy).w;
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(1.0);
    u_xlat10_3.xyz = texture(_tableTex, u_xlat2.xy).xyz;
    u_xlat10_2.xyz = texture(_tableTex, u_xlat2.xz).xyz;
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + u_xlat10_2.xyz;
    u_xlat16_4.xyz = u_xlat10_1.xxx * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat16_37 = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat1.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat1.x = floor(u_xlat1.x);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_5.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_5.x = u_xlat16_5.x * 0.5 + (-_SecondShadow);
    u_xlat16_5.x = u_xlat16_5.x + 1.0;
    u_xlat16_5.x = floor(u_xlat16_5.x);
    u_xlat16_5.x = max(u_xlat16_5.x, 0.0);
    u_xlati23 = int(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_4.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_5.xyz = (int(u_xlati23) != 0) ? u_xlat16_6.xyz : u_xlat16_5.xyz;
    u_xlat11 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11 = floor(u_xlat11);
    u_xlat11 = max(u_xlat11, 0.0);
    u_xlati11 = int(u_xlat11);
    u_xlat23.xy = vec2(u_xlat16_37) * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_37 = (u_xlati11 != 0) ? u_xlat23.y : u_xlat23.x;
    u_xlat16_37 = u_xlat16_37 + vs_COLOR1.x;
    u_xlat16_37 = u_xlat16_37 * 0.5 + (-_LightArea);
    u_xlat16_37 = u_xlat16_37 + 1.0;
    u_xlat16_37 = floor(u_xlat16_37);
    u_xlat16_37 = max(u_xlat16_37, 0.0);
    u_xlati11 = int(u_xlat16_37);
    u_xlat16_4.xyz = (int(u_xlati11) != 0) ? u_xlat16_4.xyz : u_xlat16_6.xyz;
    u_xlat16_4.xyz = (int(u_xlati1) != 0) ? u_xlat16_4.xyz : u_xlat16_5.xyz;
    u_xlat16_37 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat16_5.xyz = vec3(u_xlat16_37) * vs_TEXCOORD1.xyz;
    u_xlat1.xzw = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11 = dot(u_xlat1.xzw, u_xlat1.xzw);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat1.xzw;
    u_xlat3.xyz = u_xlat1.xzw * vec3(u_xlat11) + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat7.xyz = vec3(u_xlat35) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb36 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat35) + (-_WorldSpaceLightPos0.xyz);
    u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat16_6.xyz = u_xlat3.xyz * vec3(u_xlat35) + _CustomLightDir.xyz;
    u_xlat16_37 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat16_6.xyz = vec3(u_xlat16_37) * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (bool(u_xlatb36)) ? u_xlat16_6.xyz : u_xlat7.xyz;
    u_xlat16_37 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
    u_xlat16_37 = max(u_xlat16_37, 0.0);
    u_xlat16_37 = log2(u_xlat16_37);
    u_xlat16_37 = u_xlat16_37 * _Shininess;
    u_xlat16_37 = exp2(u_xlat16_37);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_37) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_6.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_6.xyz = u_xlat10_0.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_4.xyz * _EnvColor.xyz + u_xlat16_6.xyz;
    u_xlat16_3.w = u_xlat10_1.y * vs_COLOR1.y;
    u_xlat10_4 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_6.w = u_xlat10_4.w * _SPOpaqueness;
    u_xlat10_7.xyz = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat0.x = u_xlat10_7.x * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xzw * vec3(u_xlat11) + (-_WorldSpaceCameraPos.xyz);
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat7.xyz = u_xlat10_7.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + u_xlat7.xyz;
    u_xlat1.xyz = u_xlat1.xyz + _SPCubeMapOffset.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat16_5.xyz);
    u_xlat11 = u_xlat11 + u_xlat11;
    u_xlat1.xyz = u_xlat16_5.xyz * (-vec3(u_xlat11)) + u_xlat1.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_8.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_8.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_8.xyz;
    u_xlat11 = _SPNoiseScaler * _SPTransition;
    u_xlat7.xy = vec2(u_xlat11) * vec2(1.70000005, 1.5) + (-u_xlat0.xx);
    u_xlat7.xy = u_xlat7.xy + vec2(1.0, 1.0);
    u_xlat7.xy = floor(u_xlat7.xy);
    u_xlat7.xy = max(u_xlat7.xy, vec2(0.0, 0.0));
    u_xlati7.xy = ivec2(u_xlat7.xy);
    u_xlat0.x = u_xlat11 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat10.xyz + u_xlat1.xyz;
    u_xlat16_8.xyz = (u_xlati7.y != 0) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat0.x = (u_xlati7.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_8.xyz = (u_xlati7.x != 0) ? u_xlat16_8.xyz : u_xlat1.xyz;
    u_xlat16_6.xyz = u_xlat16_8.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_3) + u_xlat16_6;
    u_xlat1 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_5.xyz);
        u_xlat11 = (-u_xlat0.x) + 1.00100005;
        u_xlat11 = max(u_xlat11, 0.00100000005);
        u_xlat11 = min(u_xlat11, 1.0);
        u_xlat11 = log2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGShininess;
        u_xlat11 = exp2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGScale + _RGBias;
        u_xlat22 = u_xlat10_0.w + 0.100000001;
        u_xlatb3 = greaterThanEqual(vec4(u_xlat22), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb7.xyz = lessThan(vec4(u_xlat22), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb7.x = u_xlatb3.y && u_xlatb7.x;
        u_xlatb7.y = u_xlatb3.z && u_xlatb7.y;
        u_xlatb7.z = u_xlatb3.w && u_xlatb7.z;
        u_xlat16_4 = (u_xlatb7.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_4 = (u_xlatb7.y) ? _HRRimColor2 : u_xlat16_4;
        u_xlat16_4 = (u_xlatb7.x) ? _HRRimColor3 : u_xlat16_4;
        u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_4;
        u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_38 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_38 = inversesqrt(u_xlat16_38);
        u_xlat16_6.xyz = vec3(u_xlat16_38) * _WorldSpaceLightPos0.xyz;
        u_xlat16_22 = dot(u_xlat16_5.xyz, u_xlat16_6.xyz);
        u_xlat16_38 = u_xlat16_22 + 0.5;
        u_xlat16_38 = u_xlat0.x * u_xlat16_38;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_38);
#else
        u_xlatb0 = u_xlat16_3.w<u_xlat16_38;
#endif
        u_xlat16_38 = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_6.xyz = u_xlat16_3.xyz * vec3(u_xlat16_38);
        u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(_HRRimPower) + u_xlat1.xyz;
        u_xlat16_38 = u_xlat11;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
        u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_38 * _RGRatio;
        u_xlat7.xyz = vec3(u_xlat11) * _RGColor.xyz + (-u_xlat1.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz + u_xlat1.xyz;
        u_xlat16_38 = float(_HRRimIntensity);
        u_xlat16_6.xyz = (-u_xlat0.xyz) + u_xlat16_6.xyz;
        SV_Target0.xyz = vec3(u_xlat16_38) * u_xlat16_6.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_5.xyz);
            u_xlat11 = (-u_xlat0.x) + 1.00100005;
            u_xlat11 = max(u_xlat11, 0.00100000005);
            u_xlat11 = min(u_xlat11, 1.0);
            u_xlat11 = log2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGShininess;
            u_xlat11 = exp2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGScale + _RGBias;
            u_xlat16_6.xyz = vec3(u_xlat11) * _RGColor.xyz;
            u_xlat11 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat11), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb11.xyz = lessThan(vec4(u_xlat11), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb11.x = u_xlatb11.x && u_xlatb2.y;
            u_xlatb11.y = u_xlatb11.y && u_xlatb2.z;
            u_xlatb11.z = u_xlatb11.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb11.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb11.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb11.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_38 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_38 = inversesqrt(u_xlat16_38);
            u_xlat16_8.xyz = vec3(u_xlat16_38) * _WorldSpaceLightPos0.xyz;
            u_xlat16_11 = dot(u_xlat16_5.xyz, u_xlat16_8.xyz);
            u_xlat16_5.x = u_xlat16_11 + 0.5;
            u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_5.x);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_5.x;
#endif
            u_xlat16_5.x = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xxx;
            u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(_HRRimPower);
            u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_5.xyz = u_xlat1.xyz + u_xlat16_5.xyz;
            u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_6.xyz = u_xlat1.xyz + u_xlat16_6.xyz;
            u_xlat16_38 = float(_HRRimIntensity);
            u_xlat16_5.xyz = u_xlat16_5.xyz + (-u_xlat16_6.xyz);
            SV_Target0.xyz = vec3(u_xlat16_38) * u_xlat16_5.xyz + u_xlat16_6.xyz;
        } else {
            SV_Target0.xyz = u_xlat1.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
int u_xlati2;
bvec4 u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
ivec2 u_xlati4;
bvec3 u_xlatb4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec3 u_xlat10_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
float u_xlat11;
mediump float u_xlat16_11;
int u_xlati11;
bvec3 u_xlatb11;
mediump float u_xlat16_12;
vec2 u_xlat13;
int u_xlati13;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
bvec2 u_xlatb22;
mediump float u_xlat16_24;
lowp vec2 u_xlat10_24;
float u_xlat35;
bool u_xlatb36;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_24 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_24 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_12 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat5.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat5.w = u_xlat2.x * u_xlat16_12 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat5;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat2.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat2.x = max(u_xlat2.x, 0.0);
    u_xlati2 = int(u_xlat2.x);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati13 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati13) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11 = floor(u_xlat11);
    u_xlat11 = max(u_xlat11, 0.0);
    u_xlati11 = int(u_xlat11);
    u_xlat13.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11 != 0) ? u_xlat13.y : u_xlat13.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11 = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (int(u_xlati11) != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat11) + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat4.xyz = vec3(u_xlat35) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb36 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat35) + (-_WorldSpaceLightPos0.xyz);
    u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat16_9.xyz = u_xlat3.xyz * vec3(u_xlat35) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb36)) ? u_xlat16_9.xyz : u_xlat4.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_40) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_7.xyz * _EnvColor.xyz + u_xlat16_9.xyz;
    u_xlat16_3.w = u_xlat1.w * vs_COLOR1.y;
    u_xlat10_4 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_4.w * _SPOpaqueness;
    u_xlat10_6.xyz = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat0.x = u_xlat10_6.x * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + (-_WorldSpaceCameraPos.xyz);
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat6.xyz = u_xlat10_6.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + u_xlat6.xyz;
    u_xlat1.xyz = u_xlat1.xyz + _SPCubeMapOffset.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat16_8.xyz);
    u_xlat11 = u_xlat11 + u_xlat11;
    u_xlat1.xyz = u_xlat16_8.xyz * (-vec3(u_xlat11)) + u_xlat1.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_7.xyz;
    u_xlat11 = _SPNoiseScaler * _SPTransition;
    u_xlat4.xy = vec2(u_xlat11) * vec2(1.70000005, 1.5) + (-u_xlat0.xx);
    u_xlat4.xy = u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
    u_xlati4.xy = ivec2(u_xlat4.xy);
    u_xlat0.x = u_xlat11 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat1.xyz;
    u_xlat16_7.xyz = (u_xlati4.y != 0) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat0.x = (u_xlati4.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati4.x != 0) ? u_xlat16_7.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_3) + u_xlat16_5;
    u_xlat1 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_8.xyz);
        u_xlat11 = (-u_xlat0.x) + 1.00100005;
        u_xlat11 = max(u_xlat11, 0.00100000005);
        u_xlat11 = min(u_xlat11, 1.0);
        u_xlat11 = log2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGShininess;
        u_xlat11 = exp2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGScale + _RGBias;
        u_xlat22 = u_xlat10_0.w + 0.100000001;
        u_xlatb3 = greaterThanEqual(vec4(u_xlat22), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb4.xyz = lessThan(vec4(u_xlat22), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb4.x = u_xlatb3.y && u_xlatb4.x;
        u_xlatb4.y = u_xlatb3.z && u_xlatb4.y;
        u_xlatb4.z = u_xlatb3.w && u_xlatb4.z;
        u_xlat16_5 = (u_xlatb4.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_5 = (u_xlatb4.y) ? _HRRimColor2 : u_xlat16_5;
        u_xlat16_4 = (u_xlatb4.x) ? _HRRimColor3 : u_xlat16_5;
        u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_4;
        u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_7.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_7.x = inversesqrt(u_xlat16_7.x);
        u_xlat16_7.xyz = u_xlat16_7.xxx * _WorldSpaceLightPos0.xyz;
        u_xlat16_22 = dot(u_xlat16_8.xyz, u_xlat16_7.xyz);
        u_xlat16_7.x = u_xlat16_22 + 0.5;
        u_xlat16_7.x = u_xlat0.x * u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_7.x);
#else
        u_xlatb0 = u_xlat16_3.w<u_xlat16_7.x;
#endif
        u_xlat16_7.x = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_7.xyz = u_xlat16_3.xyz * u_xlat16_7.xxx;
        u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_HRRimPower) + u_xlat1.xyz;
        u_xlat16_40 = u_xlat11;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_40 = min(max(u_xlat16_40, 0.0), 1.0);
#else
        u_xlat16_40 = clamp(u_xlat16_40, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_40 * _RGRatio;
        u_xlat6.xyz = vec3(u_xlat11) * _RGColor.xyz + (-u_xlat1.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat1.xyz;
        u_xlat16_40 = float(_HRRimIntensity);
        u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat16_7.xyz;
        SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat16_7.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_8.xyz);
            u_xlat11 = (-u_xlat0.x) + 1.00100005;
            u_xlat11 = max(u_xlat11, 0.00100000005);
            u_xlat11 = min(u_xlat11, 1.0);
            u_xlat11 = log2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGShininess;
            u_xlat11 = exp2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGScale + _RGBias;
            u_xlat16_7.xyz = vec3(u_xlat11) * _RGColor.xyz;
            u_xlat11 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat11), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb11.xyz = lessThan(vec4(u_xlat11), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb11.x = u_xlatb11.x && u_xlatb2.y;
            u_xlatb11.y = u_xlatb11.y && u_xlatb2.z;
            u_xlatb11.z = u_xlatb11.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb11.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb11.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb11.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_40 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_40 = inversesqrt(u_xlat16_40);
            u_xlat16_9.xyz = vec3(u_xlat16_40) * _WorldSpaceLightPos0.xyz;
            u_xlat16_11 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
            u_xlat16_40 = u_xlat16_11 + 0.5;
            u_xlat16_40 = u_xlat0.x * u_xlat16_40;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_40);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_40;
#endif
            u_xlat16_40 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_8.xyz = u_xlat16_2.xyz * vec3(u_xlat16_40);
            u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_HRRimPower);
            u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_8.xyz = u_xlat1.xyz + u_xlat16_8.xyz;
            u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_7.xyz = u_xlat1.xyz + u_xlat16_7.xyz;
            u_xlat16_40 = float(_HRRimIntensity);
            u_xlat16_8.xyz = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
            SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat16_8.xyz + u_xlat16_7.xyz;
        } else {
            SV_Target0.xyz = u_xlat1.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
int u_xlati2;
bvec4 u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
ivec2 u_xlati4;
bvec3 u_xlatb4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec3 u_xlat10_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
float u_xlat11;
mediump float u_xlat16_11;
int u_xlati11;
bvec3 u_xlatb11;
mediump float u_xlat16_12;
vec2 u_xlat13;
int u_xlati13;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
bvec2 u_xlatb22;
mediump float u_xlat16_24;
lowp vec2 u_xlat10_24;
float u_xlat35;
bool u_xlatb36;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_24 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_24 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_12 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat5.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat5.w = u_xlat2.x * u_xlat16_12 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat5;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat2.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat2.x = max(u_xlat2.x, 0.0);
    u_xlati2 = int(u_xlat2.x);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati13 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati13) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11 = floor(u_xlat11);
    u_xlat11 = max(u_xlat11, 0.0);
    u_xlati11 = int(u_xlat11);
    u_xlat13.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11 != 0) ? u_xlat13.y : u_xlat13.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11 = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (int(u_xlati11) != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat11) + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat4.xyz = vec3(u_xlat35) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb36 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat35) + (-_WorldSpaceLightPos0.xyz);
    u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat16_9.xyz = u_xlat3.xyz * vec3(u_xlat35) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb36)) ? u_xlat16_9.xyz : u_xlat4.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_40) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_7.xyz * _EnvColor.xyz + u_xlat16_9.xyz;
    u_xlat16_3.w = u_xlat1.w * vs_COLOR1.y;
    u_xlat10_4 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_4.w * _SPOpaqueness;
    u_xlat10_6.xyz = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat0.x = u_xlat10_6.x * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + (-_WorldSpaceCameraPos.xyz);
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat6.xyz = u_xlat10_6.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + u_xlat6.xyz;
    u_xlat1.xyz = u_xlat1.xyz + _SPCubeMapOffset.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat16_8.xyz);
    u_xlat11 = u_xlat11 + u_xlat11;
    u_xlat1.xyz = u_xlat16_8.xyz * (-vec3(u_xlat11)) + u_xlat1.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_7.xyz;
    u_xlat11 = _SPNoiseScaler * _SPTransition;
    u_xlat4.xy = vec2(u_xlat11) * vec2(1.70000005, 1.5) + (-u_xlat0.xx);
    u_xlat4.xy = u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
    u_xlati4.xy = ivec2(u_xlat4.xy);
    u_xlat0.x = u_xlat11 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat1.xyz;
    u_xlat16_7.xyz = (u_xlati4.y != 0) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat0.x = (u_xlati4.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati4.x != 0) ? u_xlat16_7.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_3) + u_xlat16_5;
    u_xlat1 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_8.xyz);
        u_xlat11 = (-u_xlat0.x) + 1.00100005;
        u_xlat11 = max(u_xlat11, 0.00100000005);
        u_xlat11 = min(u_xlat11, 1.0);
        u_xlat11 = log2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGShininess;
        u_xlat11 = exp2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGScale + _RGBias;
        u_xlat22 = u_xlat10_0.w + 0.100000001;
        u_xlatb3 = greaterThanEqual(vec4(u_xlat22), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb4.xyz = lessThan(vec4(u_xlat22), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb4.x = u_xlatb3.y && u_xlatb4.x;
        u_xlatb4.y = u_xlatb3.z && u_xlatb4.y;
        u_xlatb4.z = u_xlatb3.w && u_xlatb4.z;
        u_xlat16_5 = (u_xlatb4.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_5 = (u_xlatb4.y) ? _HRRimColor2 : u_xlat16_5;
        u_xlat16_4 = (u_xlatb4.x) ? _HRRimColor3 : u_xlat16_5;
        u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_4;
        u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_7.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_7.x = inversesqrt(u_xlat16_7.x);
        u_xlat16_7.xyz = u_xlat16_7.xxx * _WorldSpaceLightPos0.xyz;
        u_xlat16_22 = dot(u_xlat16_8.xyz, u_xlat16_7.xyz);
        u_xlat16_7.x = u_xlat16_22 + 0.5;
        u_xlat16_7.x = u_xlat0.x * u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_7.x);
#else
        u_xlatb0 = u_xlat16_3.w<u_xlat16_7.x;
#endif
        u_xlat16_7.x = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_7.xyz = u_xlat16_3.xyz * u_xlat16_7.xxx;
        u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_HRRimPower) + u_xlat1.xyz;
        u_xlat16_40 = u_xlat11;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_40 = min(max(u_xlat16_40, 0.0), 1.0);
#else
        u_xlat16_40 = clamp(u_xlat16_40, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_40 * _RGRatio;
        u_xlat6.xyz = vec3(u_xlat11) * _RGColor.xyz + (-u_xlat1.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat1.xyz;
        u_xlat16_40 = float(_HRRimIntensity);
        u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat16_7.xyz;
        SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat16_7.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_8.xyz);
            u_xlat11 = (-u_xlat0.x) + 1.00100005;
            u_xlat11 = max(u_xlat11, 0.00100000005);
            u_xlat11 = min(u_xlat11, 1.0);
            u_xlat11 = log2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGShininess;
            u_xlat11 = exp2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGScale + _RGBias;
            u_xlat16_7.xyz = vec3(u_xlat11) * _RGColor.xyz;
            u_xlat11 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat11), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb11.xyz = lessThan(vec4(u_xlat11), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb11.x = u_xlatb11.x && u_xlatb2.y;
            u_xlatb11.y = u_xlatb11.y && u_xlatb2.z;
            u_xlatb11.z = u_xlatb11.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb11.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb11.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb11.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_40 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_40 = inversesqrt(u_xlat16_40);
            u_xlat16_9.xyz = vec3(u_xlat16_40) * _WorldSpaceLightPos0.xyz;
            u_xlat16_11 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
            u_xlat16_40 = u_xlat16_11 + 0.5;
            u_xlat16_40 = u_xlat0.x * u_xlat16_40;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_40);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_40;
#endif
            u_xlat16_40 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_8.xyz = u_xlat16_2.xyz * vec3(u_xlat16_40);
            u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_HRRimPower);
            u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_8.xyz = u_xlat1.xyz + u_xlat16_8.xyz;
            u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_7.xyz = u_xlat1.xyz + u_xlat16_7.xyz;
            u_xlat16_40 = float(_HRRimIntensity);
            u_xlat16_8.xyz = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
            SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat16_8.xyz + u_xlat16_7.xyz;
        } else {
            SV_Target0.xyz = u_xlat1.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPTex_ST;
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _Opaqueness;
uniform 	mediump vec4 _CustomLightDir;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out mediump vec2 vs_TEXCOORD0;
out mediump vec2 vs_COLOR1;
out mediump vec3 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec3 u_xlat16_2;
float u_xlat3;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat9;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    vs_TEXCOORD2.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat0;
    gl_Position = u_xlat0;
    vs_COLOR0 = in_COLOR0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6 = inversesqrt(u_xlat6);
    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb6 = 0.5<_CustomLightDir.w;
#endif
    u_xlat16_2.xyz = (bool(u_xlatb6)) ? _CustomLightDir.xyz : _WorldSpaceLightPos0.xyz;
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat16_2.xyz);
    vs_TEXCOORD1.xyz = u_xlat1.xyz;
    u_xlat6 = u_xlat16_2.x * 0.497500002 + 0.5;
    vs_COLOR1.x = u_xlat6;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;
    vs_COLOR1.y = _Opaqueness;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb6)));
    vs_TEXCOORD3.z = u_xlatb6 ? _DitherAlpha : float(0.0);
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat3 = u_xlat0.w + u_xlat0.y;
    u_xlat9 = u_xlat0.x * in_POSITION0.x;
    u_xlat7.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat7.y = u_xlat9 * 0.25 + u_xlat3;
    vs_TEXCOORD4.zw = u_xlat7.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    vs_TEXCOORD4.xy = in_TEXCOORD0.xy * _SPTex_ST.xy + _SPTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	float _SPNoiseScaler;
uniform 	float _SPIntensity;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPTransitionColor;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionEmissionScaler;
uniform 	vec3 _SPCubeMapOffset;
uniform 	float _SPCubeMapIntensity;
uniform 	float _SPCubeMapNoiseIntensity;
uniform 	float _SPCubeMapBrightness;
uniform 	mediump vec4 _SPOldColor;
uniform 	mediump vec4 _SPCubeMapColor;
uniform 	mediump vec4 _RGColor;
uniform 	float _RGShininess;
uniform 	float _RGScale;
uniform 	float _RGBias;
uniform 	float _RGRatio;
uniform 	int _RGBlendType;
uniform 	mediump vec4 _HRRimColor2;
uniform 	mediump vec4 _HRRimColor3;
uniform 	mediump vec4 _HRRimColor4;
uniform 	mediump vec4 _HRRimColor5;
uniform 	mediump float _HRRimPower;
uniform 	int _HRRimIntensity;
uniform 	int _MoreHardRimColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _EnvColor;
uniform 	mediump float _LightArea;
uniform 	mediump float _SecondShadow;
uniform 	mediump vec3 _FirstShadowMultColor;
uniform 	mediump vec3 _SecondShadowMultColor;
uniform 	mediump float _Shininess;
uniform 	mediump float _SpecMulti;
uniform 	mediump vec3 _LightSpecColor;
uniform 	mediump vec4 _CustomLightDir;
uniform 	vec4 _indexTex_TexelSize;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _LightMapTex;
uniform lowp sampler2D _factorTex;
uniform lowp sampler2D _indexTex;
uniform lowp sampler2D _tableTex;
uniform lowp sampler2D _SPTex;
uniform lowp sampler2D _SPNoiseTex;
uniform lowp samplerCube _SPCubeMap;
in mediump vec4 vs_COLOR0;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_COLOR1;
in mediump vec3 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
int u_xlati2;
bvec4 u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
lowp vec4 u_xlat10_3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
lowp vec4 u_xlat10_4;
ivec2 u_xlati4;
bvec3 u_xlatb4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
lowp vec3 u_xlat10_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
float u_xlat11;
mediump float u_xlat16_11;
int u_xlati11;
bvec3 u_xlatb11;
mediump float u_xlat16_12;
vec2 u_xlat13;
int u_xlati13;
mediump vec3 u_xlat16_18;
float u_xlat22;
mediump float u_xlat16_22;
int u_xlati22;
bvec2 u_xlatb22;
mediump float u_xlat16_24;
lowp vec2 u_xlat10_24;
float u_xlat35;
bool u_xlatb36;
mediump float u_xlat16_40;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_LightMapTex, vs_TEXCOORD0.xy);
    u_xlat1 = vec4(float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w, float(1.0) / _indexTex_TexelSize.z, float(1.0) / _indexTex_TexelSize.w);
    u_xlat2.xy = vs_TEXCOORD0.xy * _indexTex_TexelSize.zw + vec2(-0.5, -0.5);
    u_xlat3 = floor(u_xlat2.xyxy);
    u_xlat2.xy = fract(u_xlat2.xy);
    u_xlat4 = vec4(u_xlat3.z + float(0.5), u_xlat3.w + float(0.5), u_xlat3.z + float(1.5), u_xlat3.w + float(0.5));
    u_xlat4 = u_xlat1 * u_xlat4;
    u_xlat10_24.xy = texture(_factorTex, u_xlat4.xy).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.xy).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_7.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_7.xyz = u_xlat10_24.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat10_4.xy = texture(_factorTex, u_xlat4.zw).xy;
    u_xlat5.x = texture(_indexTex, u_xlat4.zw).w;
    u_xlat5.y = float(0.0);
    u_xlat5.z = float(1.0);
    u_xlat10_6.xyz = texture(_tableTex, u_xlat5.xy).xyz;
    u_xlat10_5.xyz = texture(_tableTex, u_xlat5.xz).xyz;
    u_xlat16_8.xyz = (-u_xlat10_6.xyz) + u_xlat10_5.xyz;
    u_xlat16_8.xyz = u_xlat10_4.xxx * u_xlat16_8.xyz + u_xlat10_6.xyz;
    u_xlat3 = u_xlat3 + vec4(0.5, 1.5, 1.5, 1.5);
    u_xlat1 = u_xlat1 * u_xlat3;
    u_xlat10_3.xy = texture(_factorTex, u_xlat1.xy).xy;
    u_xlat4.x = texture(_indexTex, u_xlat1.xy).w;
    u_xlat4.z = float(0.0);
    u_xlat4.w = float(1.0);
    u_xlat10_5.xyz = texture(_tableTex, u_xlat4.xz).xyz;
    u_xlat10_4.xzw = texture(_tableTex, u_xlat4.xw).xyz;
    u_xlat16_9.xyz = (-u_xlat10_5.xyz) + u_xlat10_4.xzw;
    u_xlat16_9.xyz = u_xlat10_3.xxx * u_xlat16_9.xyz + u_xlat10_5.xyz;
    u_xlat10_1.xy = texture(_factorTex, u_xlat1.zw).xy;
    u_xlat3.x = texture(_indexTex, u_xlat1.zw).w;
    u_xlat3.z = float(0.0);
    u_xlat3.w = float(1.0);
    u_xlat10_4.xzw = texture(_tableTex, u_xlat3.xz).xyz;
    u_xlat10_3.xzw = texture(_tableTex, u_xlat3.xw).xyz;
    u_xlat16_10.xyz = (-u_xlat10_4.xzw) + u_xlat10_3.xzw;
    u_xlat16_10.xyz = u_xlat10_1.xxx * u_xlat16_10.xyz + u_xlat10_4.xzw;
    u_xlat16_1.xzw = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
    u_xlat16_24 = (-u_xlat10_24.y) + u_xlat10_4.y;
    u_xlat4.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_7.xyz;
    u_xlat4.w = u_xlat2.x * u_xlat16_24 + u_xlat10_24.y;
    u_xlat16_1.xzw = (-u_xlat16_9.xyz) + u_xlat16_10.xyz;
    u_xlat16_12 = (-u_xlat10_3.y) + u_xlat10_1.y;
    u_xlat5.xyz = u_xlat2.xxx * u_xlat16_1.xzw + u_xlat16_9.xyz;
    u_xlat5.w = u_xlat2.x * u_xlat16_12 + u_xlat10_3.y;
    u_xlat1 = (-u_xlat4) + u_xlat5;
    u_xlat1 = u_xlat2.yyyy * u_xlat1 + u_xlat4;
    u_xlat16_7.x = u_xlat10_0.y * vs_COLOR0.x;
    u_xlat2.x = vs_COLOR0.x * u_xlat10_0.y + 0.909999967;
    u_xlat2.x = floor(u_xlat2.x);
    u_xlat2.x = max(u_xlat2.x, 0.0);
    u_xlati2 = int(u_xlat2.x);
    u_xlat16_18.x = vs_COLOR0.x * u_xlat10_0.y + vs_COLOR1.x;
    u_xlat16_18.x = u_xlat16_18.x * 0.5 + (-_SecondShadow);
    u_xlat16_18.x = u_xlat16_18.x + 1.0;
    u_xlat16_18.x = floor(u_xlat16_18.x);
    u_xlat16_18.x = max(u_xlat16_18.x, 0.0);
    u_xlati13 = int(u_xlat16_18.x);
    u_xlat16_18.xyz = u_xlat1.xyz * _SecondShadowMultColor.xyz;
    u_xlat16_8.xyz = u_xlat1.xyz * _FirstShadowMultColor.xyz;
    u_xlat16_18.xyz = (int(u_xlati13) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat11 = (-vs_COLOR0.x) * u_xlat10_0.y + 1.5;
    u_xlat11 = floor(u_xlat11);
    u_xlat11 = max(u_xlat11, 0.0);
    u_xlati11 = int(u_xlat11);
    u_xlat13.xy = u_xlat16_7.xx * vec2(1.20000005, 1.25) + vec2(-0.100000001, -0.125);
    u_xlat16_7.x = (u_xlati11 != 0) ? u_xlat13.y : u_xlat13.x;
    u_xlat16_7.x = u_xlat16_7.x + vs_COLOR1.x;
    u_xlat16_7.x = u_xlat16_7.x * 0.5 + (-_LightArea);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = floor(u_xlat16_7.x);
    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);
    u_xlati11 = int(u_xlat16_7.x);
    u_xlat16_8.xyz = (int(u_xlati11) != 0) ? u_xlat1.xyz : u_xlat16_8.xyz;
    u_xlat16_7.xyz = (int(u_xlati2) != 0) ? u_xlat16_8.xyz : u_xlat16_18.xyz;
    u_xlat16_40 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_8.xyz = vec3(u_xlat16_40) * vs_TEXCOORD1.xyz;
    u_xlat1.xyz = (-vs_TEXCOORD2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat2.xyz = vec3(u_xlat11) * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * vec3(u_xlat11) + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat4.xyz = vec3(u_xlat35) * u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb36 = !!(0.5<_CustomLightDir.w);
#else
    u_xlatb36 = 0.5<_CustomLightDir.w;
#endif
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat35) + (-_WorldSpaceLightPos0.xyz);
    u_xlat35 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat16_9.xyz = u_xlat3.xyz * vec3(u_xlat35) + _CustomLightDir.xyz;
    u_xlat16_40 = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = inversesqrt(u_xlat16_40);
    u_xlat16_9.xyz = vec3(u_xlat16_40) * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (bool(u_xlatb36)) ? u_xlat16_9.xyz : u_xlat4.xyz;
    u_xlat16_40 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
    u_xlat16_40 = max(u_xlat16_40, 0.0);
    u_xlat16_40 = log2(u_xlat16_40);
    u_xlat16_40 = u_xlat16_40 * _Shininess;
    u_xlat16_40 = exp2(u_xlat16_40);
    u_xlat16_22 = (-u_xlat10_0.z) + 1.0;
    u_xlat16_22 = (-u_xlat16_40) + u_xlat16_22;
    u_xlat22 = u_xlat16_22 + 1.0;
    u_xlat22 = floor(u_xlat22);
    u_xlat22 = max(u_xlat22, 0.0);
    u_xlati22 = int(u_xlat22);
    u_xlat16_9.xyz = vec3(vec3(_SpecMulti, _SpecMulti, _SpecMulti)) * _LightSpecColor.xyz;
    u_xlat16_9.xyz = u_xlat10_0.xxx * u_xlat16_9.xyz;
    u_xlat16_9.xyz = (int(u_xlati22) != 0) ? vec3(0.0, 0.0, 0.0) : u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_3.xyz = u_xlat16_7.xyz * _EnvColor.xyz + u_xlat16_9.xyz;
    u_xlat16_3.w = u_xlat1.w * vs_COLOR1.y;
    u_xlat10_4 = texture(_SPTex, vs_TEXCOORD4.xy);
    u_xlat16_5.w = u_xlat10_4.w * _SPOpaqueness;
    u_xlat10_6.xyz = texture(_SPNoiseTex, vs_TEXCOORD4.zw).xyz;
    u_xlat0.x = u_xlat10_6.x * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + (-_WorldSpaceCameraPos.xyz);
    u_xlat11 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat6.xyz = u_xlat10_6.xyz * vec3(_SPCubeMapNoiseIntensity);
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat11) + u_xlat6.xyz;
    u_xlat1.xyz = u_xlat1.xyz + _SPCubeMapOffset.xyz;
    u_xlat11 = dot(u_xlat1.xyz, u_xlat16_8.xyz);
    u_xlat11 = u_xlat11 + u_xlat11;
    u_xlat1.xyz = u_xlat16_8.xyz * (-vec3(u_xlat11)) + u_xlat1.xyz;
    u_xlat10_1.xyz = texture(_SPCubeMap, u_xlat1.xyz).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * _SPOldColor.xyz;
    u_xlat16_9.xyz = u_xlat10_1.xyz * _SPCubeMapColor.xyz;
    u_xlat1.xyz = u_xlat16_9.xyz * vec3(vec3(_SPCubeMapBrightness, _SPCubeMapBrightness, _SPCubeMapBrightness)) + (-u_xlat16_7.xyz);
    u_xlat1.xyz = vec3(vec3(_SPCubeMapIntensity, _SPCubeMapIntensity, _SPCubeMapIntensity)) * u_xlat1.xyz + u_xlat16_7.xyz;
    u_xlat11 = _SPNoiseScaler * _SPTransition;
    u_xlat4.xy = vec2(u_xlat11) * vec2(1.70000005, 1.5) + (-u_xlat0.xx);
    u_xlat4.xy = u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlat4.xy = max(u_xlat4.xy, vec2(0.0, 0.0));
    u_xlati4.xy = ivec2(u_xlat4.xy);
    u_xlat0.x = u_xlat11 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = _SPTransitionColor.xyz * vec3(_SPTransitionEmissionScaler) + (-u_xlat1.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat1.xyz;
    u_xlat16_7.xyz = (u_xlati4.y != 0) ? u_xlat1.xyz : u_xlat0.xyz;
    u_xlat0.x = (u_xlati4.x != 0) ? _SPIntensity : 0.0;
    u_xlat16_7.xyz = (u_xlati4.x != 0) ? u_xlat16_7.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = u_xlat16_7.xyz * _Color.xyz;
    u_xlat16_1 = (-u_xlat16_3) + u_xlat16_5;
    u_xlat1 = u_xlat0.xxxx * u_xlat16_1 + u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_RGBlendType==1);
#else
    u_xlatb0 = _RGBlendType==1;
#endif
    if(u_xlatb0){
        u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_8.xyz);
        u_xlat11 = (-u_xlat0.x) + 1.00100005;
        u_xlat11 = max(u_xlat11, 0.00100000005);
        u_xlat11 = min(u_xlat11, 1.0);
        u_xlat11 = log2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGShininess;
        u_xlat11 = exp2(u_xlat11);
        u_xlat11 = u_xlat11 * _RGScale + _RGBias;
        u_xlat22 = u_xlat10_0.w + 0.100000001;
        u_xlatb3 = greaterThanEqual(vec4(u_xlat22), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
        u_xlatb4.xyz = lessThan(vec4(u_xlat22), vec4(0.600000024, 0.400000006, 0.800000012, 0.0)).xyz;
        u_xlatb4.x = u_xlatb3.y && u_xlatb4.x;
        u_xlatb4.y = u_xlatb3.z && u_xlatb4.y;
        u_xlatb4.z = u_xlatb3.w && u_xlatb4.z;
        u_xlat16_5 = (u_xlatb4.z) ? _HRRimColor4 : _RGColor;
        u_xlat16_5 = (u_xlatb4.y) ? _HRRimColor2 : u_xlat16_5;
        u_xlat16_4 = (u_xlatb4.x) ? _HRRimColor3 : u_xlat16_5;
        u_xlat16_3 = (u_xlatb3.x) ? _HRRimColor5 : u_xlat16_4;
        u_xlat16_3 = (int(_MoreHardRimColor) != 0) ? u_xlat16_3 : _RGColor;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = (-u_xlat0.x) + 1.0;
        u_xlat16_7.x = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
        u_xlat16_7.x = inversesqrt(u_xlat16_7.x);
        u_xlat16_7.xyz = u_xlat16_7.xxx * _WorldSpaceLightPos0.xyz;
        u_xlat16_22 = dot(u_xlat16_8.xyz, u_xlat16_7.xyz);
        u_xlat16_7.x = u_xlat16_22 + 0.5;
        u_xlat16_7.x = u_xlat0.x * u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat16_3.w<u_xlat16_7.x);
#else
        u_xlatb0 = u_xlat16_3.w<u_xlat16_7.x;
#endif
        u_xlat16_7.x = (u_xlatb0) ? 1.0 : 0.0;
        u_xlat16_7.xyz = u_xlat16_3.xyz * u_xlat16_7.xxx;
        u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_HRRimPower) + u_xlat1.xyz;
        u_xlat16_40 = u_xlat11;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_40 = min(max(u_xlat16_40, 0.0), 1.0);
#else
        u_xlat16_40 = clamp(u_xlat16_40, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat16_40 * _RGRatio;
        u_xlat6.xyz = vec3(u_xlat11) * _RGColor.xyz + (-u_xlat1.xyz);
        u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat1.xyz;
        u_xlat16_40 = float(_HRRimIntensity);
        u_xlat16_7.xyz = (-u_xlat0.xyz) + u_xlat16_7.xyz;
        SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat16_7.xyz + u_xlat0.xyz;
    } else {
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(_RGBlendType==2);
#else
        u_xlatb0 = _RGBlendType==2;
#endif
        if(u_xlatb0){
            u_xlat0.x = dot(u_xlat2.xyz, u_xlat16_8.xyz);
            u_xlat11 = (-u_xlat0.x) + 1.00100005;
            u_xlat11 = max(u_xlat11, 0.00100000005);
            u_xlat11 = min(u_xlat11, 1.0);
            u_xlat11 = log2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGShininess;
            u_xlat11 = exp2(u_xlat11);
            u_xlat11 = u_xlat11 * _RGScale + _RGBias;
            u_xlat16_7.xyz = vec3(u_xlat11) * _RGColor.xyz;
            u_xlat11 = u_xlat10_0.w + 0.100000001;
            u_xlatb2 = greaterThanEqual(vec4(u_xlat11), vec4(0.800000012, 0.400000006, 0.200000003, 0.600000024));
            u_xlatb11.xyz = lessThan(vec4(u_xlat11), vec4(0.600000024, 0.400000006, 0.800000012, 0.800000012)).xyz;
            u_xlatb11.x = u_xlatb11.x && u_xlatb2.y;
            u_xlatb11.y = u_xlatb11.y && u_xlatb2.z;
            u_xlatb11.z = u_xlatb11.z && u_xlatb2.w;
            u_xlat16_3 = (u_xlatb11.z) ? _HRRimColor4 : _RGColor;
            u_xlat16_3 = (u_xlatb11.y) ? _HRRimColor2 : u_xlat16_3;
            u_xlat16_3 = (u_xlatb11.x) ? _HRRimColor3 : u_xlat16_3;
            u_xlat16_2 = (u_xlatb2.x) ? _HRRimColor5 : u_xlat16_3;
            u_xlat16_2 = (int(_MoreHardRimColor) != 0) ? u_xlat16_2 : _RGColor;
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlat0.x = (-u_xlat0.x) + 1.0;
            u_xlat16_40 = dot(_WorldSpaceLightPos0.xyz, _WorldSpaceLightPos0.xyz);
            u_xlat16_40 = inversesqrt(u_xlat16_40);
            u_xlat16_9.xyz = vec3(u_xlat16_40) * _WorldSpaceLightPos0.xyz;
            u_xlat16_11 = dot(u_xlat16_8.xyz, u_xlat16_9.xyz);
            u_xlat16_40 = u_xlat16_11 + 0.5;
            u_xlat16_40 = u_xlat0.x * u_xlat16_40;
#ifdef UNITY_ADRENO_ES3
            u_xlatb0 = !!(u_xlat16_2.w<u_xlat16_40);
#else
            u_xlatb0 = u_xlat16_2.w<u_xlat16_40;
#endif
            u_xlat16_40 = (u_xlatb0) ? 1.0 : 0.0;
            u_xlat16_8.xyz = u_xlat16_2.xyz * vec3(u_xlat16_40);
            u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(_HRRimPower);
            u_xlat16_8.xyz = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_8.xyz = u_xlat1.xyz + u_xlat16_8.xyz;
            u_xlat16_7.xyz = max(u_xlat16_7.xyz, vec3(0.0, 0.0, 0.0));
            u_xlat16_7.xyz = u_xlat1.xyz + u_xlat16_7.xyz;
            u_xlat16_40 = float(_HRRimIntensity);
            u_xlat16_8.xyz = (-u_xlat16_7.xyz) + u_xlat16_8.xyz;
            SV_Target0.xyz = vec3(u_xlat16_40) * u_xlat16_8.xyz + u_xlat16_7.xyz;
        } else {
            SV_Target0.xyz = u_xlat1.xyz;
        //ENDIF
        }
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb22.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb22.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb22.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat2.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat2.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.w = u_xlat1.w;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
}
}
 Pass {
  Name "COMPLEX"
  LOD 200
  Tags { "Distortion" = "None" "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "OutlineType" = "Complex" "QUEUE" = "Transparent" "Reflected" = "Reflected" "RenderType" = "Transparent" }
  Cull Front
  GpuProgramID 160302
Program "vp" {
SubProgram "gles3 hw_tier00 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_3;
bool u_xlatb8;
mediump float u_xlat16_11;
float u_xlat13;
void main()
{
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[1].yyyy * hlslcc_mtx4x4unity_MatrixV[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0] * hlslcc_mtx4x4unity_ObjectToWorld[1].xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[2] * hlslcc_mtx4x4unity_ObjectToWorld[1].zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[3] * hlslcc_mtx4x4unity_ObjectToWorld[1].wwww + u_xlat0;
    u_xlat1.xy = u_xlat0.xy * in_TANGENT0.yy;
    u_xlat0 = u_xlat0 * in_POSITION0.yyyy;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0].yyyy * hlslcc_mtx4x4unity_MatrixV[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0] * hlslcc_mtx4x4unity_ObjectToWorld[0].xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2] * hlslcc_mtx4x4unity_ObjectToWorld[0].zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[3] * hlslcc_mtx4x4unity_ObjectToWorld[0].wwww + u_xlat2;
    u_xlat1.xy = u_xlat2.xy * in_TANGENT0.xx + u_xlat1.xy;
    u_xlat0 = u_xlat2 * in_POSITION0.xxxx + u_xlat0;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2].yyyy * hlslcc_mtx4x4unity_MatrixV[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0] * hlslcc_mtx4x4unity_ObjectToWorld[2].xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2] * hlslcc_mtx4x4unity_ObjectToWorld[2].zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[3] * hlslcc_mtx4x4unity_ObjectToWorld[2].wwww + u_xlat2;
    u_xlat1.xy = u_xlat2.xy * in_TANGENT0.zz + u_xlat1.xy;
    u_xlat0 = u_xlat2 * in_POSITION0.zzzz + u_xlat0;
    u_xlat1.z = 0.00999999978;
    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
    u_xlat16_3.xy = u_xlat1.xy * u_xlat16_3.xx;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3].yyyy * hlslcc_mtx4x4unity_MatrixV[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[0] * hlslcc_mtx4x4unity_ObjectToWorld[3].xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[2] * hlslcc_mtx4x4unity_ObjectToWorld[3].zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[3] * hlslcc_mtx4x4unity_ObjectToWorld[3].wwww + u_xlat1;
    u_xlat0 = u_xlat1 * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat0 / u_xlat0.wwww;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_MaxOutlineZOffset);
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat13 = in_COLOR0.z + -0.5;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat13) + u_xlat0.xyz;
    u_xlat0.x = (-u_xlat0.z) / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat16_11 = u_xlat0.x / _Scale;
    u_xlat0.x = inversesqrt(u_xlat16_11);
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16_11 = _OutlineWidth * _Scale;
    u_xlat16_11 = u_xlat16_11 * in_COLOR0.w;
    u_xlat16_11 = u_xlat0.x * u_xlat16_11;
    u_xlat0.xy = u_xlat16_3.xy * vec2(u_xlat16_11) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat2 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = _OutlineColor.xyz;
    vs_COLOR0.w = 1.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD3.z = u_xlatb8 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump float _Opaqueness;
uniform 	float _UsingDitherAlpha;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb4;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb4.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb4.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb4.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.xyz = vs_COLOR0.xyz * _Color.xyz;
    SV_Target0.w = vs_COLOR0.w * _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_3;
bool u_xlatb8;
mediump float u_xlat16_11;
float u_xlat13;
void main()
{
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[1].yyyy * hlslcc_mtx4x4unity_MatrixV[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0] * hlslcc_mtx4x4unity_ObjectToWorld[1].xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[2] * hlslcc_mtx4x4unity_ObjectToWorld[1].zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[3] * hlslcc_mtx4x4unity_ObjectToWorld[1].wwww + u_xlat0;
    u_xlat1.xy = u_xlat0.xy * in_TANGENT0.yy;
    u_xlat0 = u_xlat0 * in_POSITION0.yyyy;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0].yyyy * hlslcc_mtx4x4unity_MatrixV[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0] * hlslcc_mtx4x4unity_ObjectToWorld[0].xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2] * hlslcc_mtx4x4unity_ObjectToWorld[0].zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[3] * hlslcc_mtx4x4unity_ObjectToWorld[0].wwww + u_xlat2;
    u_xlat1.xy = u_xlat2.xy * in_TANGENT0.xx + u_xlat1.xy;
    u_xlat0 = u_xlat2 * in_POSITION0.xxxx + u_xlat0;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2].yyyy * hlslcc_mtx4x4unity_MatrixV[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0] * hlslcc_mtx4x4unity_ObjectToWorld[2].xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2] * hlslcc_mtx4x4unity_ObjectToWorld[2].zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[3] * hlslcc_mtx4x4unity_ObjectToWorld[2].wwww + u_xlat2;
    u_xlat1.xy = u_xlat2.xy * in_TANGENT0.zz + u_xlat1.xy;
    u_xlat0 = u_xlat2 * in_POSITION0.zzzz + u_xlat0;
    u_xlat1.z = 0.00999999978;
    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
    u_xlat16_3.xy = u_xlat1.xy * u_xlat16_3.xx;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3].yyyy * hlslcc_mtx4x4unity_MatrixV[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[0] * hlslcc_mtx4x4unity_ObjectToWorld[3].xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[2] * hlslcc_mtx4x4unity_ObjectToWorld[3].zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[3] * hlslcc_mtx4x4unity_ObjectToWorld[3].wwww + u_xlat1;
    u_xlat0 = u_xlat1 * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat0 / u_xlat0.wwww;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_MaxOutlineZOffset);
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat13 = in_COLOR0.z + -0.5;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat13) + u_xlat0.xyz;
    u_xlat0.x = (-u_xlat0.z) / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat16_11 = u_xlat0.x / _Scale;
    u_xlat0.x = inversesqrt(u_xlat16_11);
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16_11 = _OutlineWidth * _Scale;
    u_xlat16_11 = u_xlat16_11 * in_COLOR0.w;
    u_xlat16_11 = u_xlat0.x * u_xlat16_11;
    u_xlat0.xy = u_xlat16_3.xy * vec2(u_xlat16_11) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat2 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = _OutlineColor.xyz;
    vs_COLOR0.w = 1.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD3.z = u_xlatb8 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump float _Opaqueness;
uniform 	float _UsingDitherAlpha;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb4;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb4.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb4.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb4.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.xyz = vs_COLOR0.xyz * _Color.xyz;
    SV_Target0.w = vs_COLOR0.w * _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	mediump float _OutlineWidth;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_3;
bool u_xlatb8;
mediump float u_xlat16_11;
float u_xlat13;
void main()
{
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[1].yyyy * hlslcc_mtx4x4unity_MatrixV[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0] * hlslcc_mtx4x4unity_ObjectToWorld[1].xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[2] * hlslcc_mtx4x4unity_ObjectToWorld[1].zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[3] * hlslcc_mtx4x4unity_ObjectToWorld[1].wwww + u_xlat0;
    u_xlat1.xy = u_xlat0.xy * in_TANGENT0.yy;
    u_xlat0 = u_xlat0 * in_POSITION0.yyyy;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0].yyyy * hlslcc_mtx4x4unity_MatrixV[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0] * hlslcc_mtx4x4unity_ObjectToWorld[0].xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2] * hlslcc_mtx4x4unity_ObjectToWorld[0].zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[3] * hlslcc_mtx4x4unity_ObjectToWorld[0].wwww + u_xlat2;
    u_xlat1.xy = u_xlat2.xy * in_TANGENT0.xx + u_xlat1.xy;
    u_xlat0 = u_xlat2 * in_POSITION0.xxxx + u_xlat0;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2].yyyy * hlslcc_mtx4x4unity_MatrixV[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0] * hlslcc_mtx4x4unity_ObjectToWorld[2].xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2] * hlslcc_mtx4x4unity_ObjectToWorld[2].zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[3] * hlslcc_mtx4x4unity_ObjectToWorld[2].wwww + u_xlat2;
    u_xlat1.xy = u_xlat2.xy * in_TANGENT0.zz + u_xlat1.xy;
    u_xlat0 = u_xlat2 * in_POSITION0.zzzz + u_xlat0;
    u_xlat1.z = 0.00999999978;
    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
    u_xlat16_3.xy = u_xlat1.xy * u_xlat16_3.xx;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3].yyyy * hlslcc_mtx4x4unity_MatrixV[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[0] * hlslcc_mtx4x4unity_ObjectToWorld[3].xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[2] * hlslcc_mtx4x4unity_ObjectToWorld[3].zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[3] * hlslcc_mtx4x4unity_ObjectToWorld[3].wwww + u_xlat1;
    u_xlat0 = u_xlat1 * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat0 / u_xlat0.wwww;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_MaxOutlineZOffset);
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat13 = in_COLOR0.z + -0.5;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat13) + u_xlat0.xyz;
    u_xlat0.x = (-u_xlat0.z) / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat16_11 = u_xlat0.x / _Scale;
    u_xlat0.x = inversesqrt(u_xlat16_11);
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16_11 = _OutlineWidth * _Scale;
    u_xlat16_11 = u_xlat16_11 * in_COLOR0.w;
    u_xlat16_11 = u_xlat0.x * u_xlat16_11;
    u_xlat0.xy = u_xlat16_3.xy * vec2(u_xlat16_11) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat2 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = _OutlineColor.xyz;
    vs_COLOR0.w = 1.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD3.z = u_xlatb8 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump float _Opaqueness;
uniform 	float _UsingDitherAlpha;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
bvec2 u_xlatb4;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb4.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb4.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb4.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    SV_Target0.xyz = vs_COLOR0.xyz * _Color.xyz;
    SV_Target0.w = vs_COLOR0.w * _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _OutlineWidth;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_3;
float u_xlat5;
float u_xlat8;
bool u_xlatb8;
mediump float u_xlat16_11;
float u_xlat13;
void main()
{
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[1].yyyy * hlslcc_mtx4x4unity_MatrixV[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0] * hlslcc_mtx4x4unity_ObjectToWorld[1].xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[2] * hlslcc_mtx4x4unity_ObjectToWorld[1].zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[3] * hlslcc_mtx4x4unity_ObjectToWorld[1].wwww + u_xlat0;
    u_xlat1.xy = u_xlat0.xy * in_TANGENT0.yy;
    u_xlat0 = u_xlat0 * in_POSITION0.yyyy;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0].yyyy * hlslcc_mtx4x4unity_MatrixV[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0] * hlslcc_mtx4x4unity_ObjectToWorld[0].xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2] * hlslcc_mtx4x4unity_ObjectToWorld[0].zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[3] * hlslcc_mtx4x4unity_ObjectToWorld[0].wwww + u_xlat2;
    u_xlat1.xy = u_xlat2.xy * in_TANGENT0.xx + u_xlat1.xy;
    u_xlat0 = u_xlat2 * in_POSITION0.xxxx + u_xlat0;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2].yyyy * hlslcc_mtx4x4unity_MatrixV[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0] * hlslcc_mtx4x4unity_ObjectToWorld[2].xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2] * hlslcc_mtx4x4unity_ObjectToWorld[2].zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[3] * hlslcc_mtx4x4unity_ObjectToWorld[2].wwww + u_xlat2;
    u_xlat1.xy = u_xlat2.xy * in_TANGENT0.zz + u_xlat1.xy;
    u_xlat0 = u_xlat2 * in_POSITION0.zzzz + u_xlat0;
    u_xlat1.z = 0.00999999978;
    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
    u_xlat16_3.xy = u_xlat1.xy * u_xlat16_3.xx;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3].yyyy * hlslcc_mtx4x4unity_MatrixV[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[0] * hlslcc_mtx4x4unity_ObjectToWorld[3].xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[2] * hlslcc_mtx4x4unity_ObjectToWorld[3].zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[3] * hlslcc_mtx4x4unity_ObjectToWorld[3].wwww + u_xlat1;
    u_xlat0 = u_xlat1 * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat0 / u_xlat0.wwww;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_MaxOutlineZOffset);
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat13 = in_COLOR0.z + -0.5;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat13) + u_xlat0.xyz;
    u_xlat0.x = (-u_xlat0.z) / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat16_11 = u_xlat0.x / _Scale;
    u_xlat0.x = inversesqrt(u_xlat16_11);
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16_11 = _OutlineWidth * _Scale;
    u_xlat16_11 = u_xlat16_11 * in_COLOR0.w;
    u_xlat16_11 = u_xlat0.x * u_xlat16_11;
    u_xlat0.xy = u_xlat16_3.xy * vec2(u_xlat16_11) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat2 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = _OutlineColor.xyz;
    vs_COLOR0.w = 1.0;
    u_xlat1 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat8 = u_xlat1.w + u_xlat1.y;
    u_xlat5 = u_xlat1.x * in_POSITION0.x;
    u_xlat2.x = u_xlat1.z * u_xlat1.z + u_xlat1.x;
    u_xlat2.y = u_xlat5 * 0.25 + u_xlat8;
    vs_TEXCOORD0.xy = u_xlat2.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD3.z = u_xlatb8 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	float _SPNoiseScaler;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPOutlineColor;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump float _Opaqueness;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _SPNoiseTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp float u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
bvec2 u_xlatb4;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb4.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb4.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb4.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_SPNoiseTex, vs_TEXCOORD0.xy).x;
    u_xlat0.x = u_xlat10_0 * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat2 = _SPNoiseScaler * _SPTransition;
    u_xlat0.x = u_xlat2 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    u_xlat16_0 = (int(u_xlati0) != 0) ? _SPOutlineColor : vs_COLOR0;
    SV_Target0.xyz = u_xlat16_0.xyz * _Color.xyz;
    SV_Target0.w = u_xlat16_0.w * _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _OutlineWidth;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_3;
float u_xlat5;
float u_xlat8;
bool u_xlatb8;
mediump float u_xlat16_11;
float u_xlat13;
void main()
{
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[1].yyyy * hlslcc_mtx4x4unity_MatrixV[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0] * hlslcc_mtx4x4unity_ObjectToWorld[1].xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[2] * hlslcc_mtx4x4unity_ObjectToWorld[1].zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[3] * hlslcc_mtx4x4unity_ObjectToWorld[1].wwww + u_xlat0;
    u_xlat1.xy = u_xlat0.xy * in_TANGENT0.yy;
    u_xlat0 = u_xlat0 * in_POSITION0.yyyy;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0].yyyy * hlslcc_mtx4x4unity_MatrixV[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0] * hlslcc_mtx4x4unity_ObjectToWorld[0].xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2] * hlslcc_mtx4x4unity_ObjectToWorld[0].zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[3] * hlslcc_mtx4x4unity_ObjectToWorld[0].wwww + u_xlat2;
    u_xlat1.xy = u_xlat2.xy * in_TANGENT0.xx + u_xlat1.xy;
    u_xlat0 = u_xlat2 * in_POSITION0.xxxx + u_xlat0;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2].yyyy * hlslcc_mtx4x4unity_MatrixV[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0] * hlslcc_mtx4x4unity_ObjectToWorld[2].xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2] * hlslcc_mtx4x4unity_ObjectToWorld[2].zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[3] * hlslcc_mtx4x4unity_ObjectToWorld[2].wwww + u_xlat2;
    u_xlat1.xy = u_xlat2.xy * in_TANGENT0.zz + u_xlat1.xy;
    u_xlat0 = u_xlat2 * in_POSITION0.zzzz + u_xlat0;
    u_xlat1.z = 0.00999999978;
    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
    u_xlat16_3.xy = u_xlat1.xy * u_xlat16_3.xx;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3].yyyy * hlslcc_mtx4x4unity_MatrixV[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[0] * hlslcc_mtx4x4unity_ObjectToWorld[3].xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[2] * hlslcc_mtx4x4unity_ObjectToWorld[3].zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[3] * hlslcc_mtx4x4unity_ObjectToWorld[3].wwww + u_xlat1;
    u_xlat0 = u_xlat1 * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat0 / u_xlat0.wwww;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_MaxOutlineZOffset);
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat13 = in_COLOR0.z + -0.5;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat13) + u_xlat0.xyz;
    u_xlat0.x = (-u_xlat0.z) / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat16_11 = u_xlat0.x / _Scale;
    u_xlat0.x = inversesqrt(u_xlat16_11);
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16_11 = _OutlineWidth * _Scale;
    u_xlat16_11 = u_xlat16_11 * in_COLOR0.w;
    u_xlat16_11 = u_xlat0.x * u_xlat16_11;
    u_xlat0.xy = u_xlat16_3.xy * vec2(u_xlat16_11) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat2 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = _OutlineColor.xyz;
    vs_COLOR0.w = 1.0;
    u_xlat1 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat8 = u_xlat1.w + u_xlat1.y;
    u_xlat5 = u_xlat1.x * in_POSITION0.x;
    u_xlat2.x = u_xlat1.z * u_xlat1.z + u_xlat1.x;
    u_xlat2.y = u_xlat5 * 0.25 + u_xlat8;
    vs_TEXCOORD0.xy = u_xlat2.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD3.z = u_xlatb8 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	float _SPNoiseScaler;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPOutlineColor;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump float _Opaqueness;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _SPNoiseTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp float u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
bvec2 u_xlatb4;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb4.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb4.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb4.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_SPNoiseTex, vs_TEXCOORD0.xy).x;
    u_xlat0.x = u_xlat10_0 * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat2 = _SPNoiseScaler * _SPTransition;
    u_xlat0.x = u_xlat2 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    u_xlat16_0 = (int(u_xlati0) != 0) ? _SPOutlineColor : vs_COLOR0;
    SV_Target0.xyz = u_xlat16_0.xyz * _Color.xyz;
    SV_Target0.w = u_xlat16_0.w * _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraProjection[4];
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4glstate_matrix_projection[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 _SPNoiseTex_ST;
uniform 	mediump float _OutlineWidth;
uniform 	mediump vec4 _OutlineColor;
uniform 	mediump float _MaxOutlineZOffset;
uniform 	mediump float _Scale;
uniform 	float _UsingDitherAlpha;
uniform 	float _DitherAlpha;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_COLOR0;
out highp vec2 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump vec2 u_xlat16_3;
float u_xlat5;
float u_xlat8;
bool u_xlatb8;
mediump float u_xlat16_11;
float u_xlat13;
void main()
{
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[1].yyyy * hlslcc_mtx4x4unity_MatrixV[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[0] * hlslcc_mtx4x4unity_ObjectToWorld[1].xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[2] * hlslcc_mtx4x4unity_ObjectToWorld[1].zzzz + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixV[3] * hlslcc_mtx4x4unity_ObjectToWorld[1].wwww + u_xlat0;
    u_xlat1.xy = u_xlat0.xy * in_TANGENT0.yy;
    u_xlat0 = u_xlat0 * in_POSITION0.yyyy;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[0].yyyy * hlslcc_mtx4x4unity_MatrixV[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0] * hlslcc_mtx4x4unity_ObjectToWorld[0].xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2] * hlslcc_mtx4x4unity_ObjectToWorld[0].zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[3] * hlslcc_mtx4x4unity_ObjectToWorld[0].wwww + u_xlat2;
    u_xlat1.xy = u_xlat2.xy * in_TANGENT0.xx + u_xlat1.xy;
    u_xlat0 = u_xlat2 * in_POSITION0.xxxx + u_xlat0;
    u_xlat2 = hlslcc_mtx4x4unity_ObjectToWorld[2].yyyy * hlslcc_mtx4x4unity_MatrixV[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0] * hlslcc_mtx4x4unity_ObjectToWorld[2].xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2] * hlslcc_mtx4x4unity_ObjectToWorld[2].zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[3] * hlslcc_mtx4x4unity_ObjectToWorld[2].wwww + u_xlat2;
    u_xlat1.xy = u_xlat2.xy * in_TANGENT0.zz + u_xlat1.xy;
    u_xlat0 = u_xlat2 * in_POSITION0.zzzz + u_xlat0;
    u_xlat1.z = 0.00999999978;
    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
    u_xlat16_3.xy = u_xlat1.xy * u_xlat16_3.xx;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[3].yyyy * hlslcc_mtx4x4unity_MatrixV[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[0] * hlslcc_mtx4x4unity_ObjectToWorld[3].xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[2] * hlslcc_mtx4x4unity_ObjectToWorld[3].zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixV[3] * hlslcc_mtx4x4unity_ObjectToWorld[3].wwww + u_xlat1;
    u_xlat0 = u_xlat1 * in_POSITION0.wwww + u_xlat0;
    u_xlat0 = u_xlat0 / u_xlat0.wwww;
    u_xlat1.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xxx;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_MaxOutlineZOffset);
    u_xlat1.xyz = u_xlat1.xyz * vec3(vec3(_Scale, _Scale, _Scale));
    u_xlat13 = in_COLOR0.z + -0.5;
    u_xlat1.xyz = u_xlat1.xyz * vec3(u_xlat13) + u_xlat0.xyz;
    u_xlat0.x = (-u_xlat0.z) / hlslcc_mtx4x4unity_CameraProjection[1].y;
    u_xlat16_11 = u_xlat0.x / _Scale;
    u_xlat0.x = inversesqrt(u_xlat16_11);
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat16_11 = _OutlineWidth * _Scale;
    u_xlat16_11 = u_xlat16_11 * in_COLOR0.w;
    u_xlat16_11 = u_xlat0.x * u_xlat16_11;
    u_xlat0.xy = u_xlat16_3.xy * vec2(u_xlat16_11) + u_xlat1.xy;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4glstate_matrix_projection[1];
    u_xlat2 = hlslcc_mtx4x4glstate_matrix_projection[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4glstate_matrix_projection[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat0 = hlslcc_mtx4x4glstate_matrix_projection[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    vs_COLOR0.xyz = _OutlineColor.xyz;
    vs_COLOR0.w = 1.0;
    u_xlat1 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat8 = u_xlat1.w + u_xlat1.y;
    u_xlat5 = u_xlat1.x * in_POSITION0.x;
    u_xlat2.x = u_xlat1.z * u_xlat1.z + u_xlat1.x;
    u_xlat2.y = u_xlat5 * 0.25 + u_xlat8;
    vs_TEXCOORD0.xy = u_xlat2.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    u_xlat0.xy = u_xlat1.zz + u_xlat1.xw;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb8 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    vs_TEXCOORD3.xyw = mix(vec3(0.0, 0.0, 0.0), u_xlat0.xyw, vec3(bvec3(u_xlatb8)));
    vs_TEXCOORD3.z = u_xlatb8 ? _DitherAlpha : float(0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	float _SPNoiseScaler;
uniform 	float _SPTransition;
uniform 	mediump vec4 _SPOutlineColor;
uniform 	vec4 hlslcc_mtx4x4_DITHERMATRIX[4];
uniform 	mediump vec4 _Color;
uniform 	mediump float _Opaqueness;
uniform 	float _UsingDitherAlpha;
uniform lowp sampler2D _SPNoiseTex;
in mediump vec4 vs_COLOR0;
in highp vec2 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec4 u_xlat16_0;
lowp float u_xlat10_0;
int u_xlati0;
uvec2 u_xlatu0;
bool u_xlatb0;
vec4 u_xlat1;
float u_xlat2;
bvec2 u_xlatb4;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_UsingDitherAlpha);
#endif
    if(u_xlatb0){
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(vs_TEXCOORD3.z<0.949999988);
#else
        u_xlatb0 = vs_TEXCOORD3.z<0.949999988;
#endif
        if(u_xlatb0){
            u_xlat0.xy = vs_TEXCOORD3.yx / vs_TEXCOORD3.ww;
            u_xlat0.xy = u_xlat0.xy * _ScreenParams.yx;
            u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25);
            u_xlatb4.xy = greaterThanEqual(u_xlat0.xyxy, (-u_xlat0.xyxy)).xy;
            u_xlat0.xy = fract(abs(u_xlat0.xy));
            u_xlat0.x = (u_xlatb4.x) ? u_xlat0.x : (-u_xlat0.x);
            u_xlat0.y = (u_xlatb4.y) ? u_xlat0.y : (-u_xlat0.y);
            u_xlat0.xy = u_xlat0.xy * vec2(4.0, 4.0);
            u_xlatu0.xy = uvec2(u_xlat0.xy);
            u_xlat1.x = dot(hlslcc_mtx4x4_DITHERMATRIX[0], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.y = dot(hlslcc_mtx4x4_DITHERMATRIX[1], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.z = dot(hlslcc_mtx4x4_DITHERMATRIX[2], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat1.w = dot(hlslcc_mtx4x4_DITHERMATRIX[3], ImmCB_0_0_0[int(u_xlatu0.y)]);
            u_xlat0.x = dot(u_xlat1, ImmCB_0_0_0[int(u_xlatu0.x)]);
            u_xlat0.x = vs_TEXCOORD3.z * 17.0 + (-u_xlat0.x);
            u_xlat0.x = u_xlat0.x + 0.99000001;
            u_xlat0.x = floor(u_xlat0.x);
            u_xlat0.x = max(u_xlat0.x, 0.0);
            u_xlati0 = int(u_xlat0.x);
            if((u_xlati0)==0){discard;}
        //ENDIF
        }
    //ENDIF
    }
    u_xlat10_0 = texture(_SPNoiseTex, vs_TEXCOORD0.xy).x;
    u_xlat0.x = u_xlat10_0 * _SPNoiseScaler;
    u_xlat0.x = u_xlat0.x * 1.99000001 + -1.0;
    u_xlat2 = _SPNoiseScaler * _SPTransition;
    u_xlat0.x = u_xlat2 * 1.70000005 + (-u_xlat0.x);
    u_xlat0.x = u_xlat0.x + 1.0;
    u_xlat0.x = floor(u_xlat0.x);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlati0 = int(u_xlat0.x);
    u_xlat16_0 = (int(u_xlati0) != 0) ? _SPOutlineColor : vs_COLOR0;
    SV_Target0.xyz = u_xlat16_0.xyz * _Color.xyz;
    SV_Target0.w = u_xlat16_0.w * _Opaqueness;
#ifdef UNITY_ADRENO_ES3
    SV_Target0.w = min(max(SV_Target0.w, 0.0), 1.0);
#else
    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);
#endif
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 hw_tier00 " {
""
}
SubProgram "gles3 hw_tier01 " {
""
}
SubProgram "gles3 hw_tier02 " {
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" }
""
}
}
}
 Pass {
  Name "CONSTANT_REPLACE_NOCUTOFF"
  LOD 200
  Tags { "Distortion" = "None" "IGNOREPROJECTOR" = "true" "OutlineType" = "Complex" "QUEUE" = "Transparent" "Reflected" = "Reflected" "RenderType" = "Transparent" }
  GpuProgramID 239230
Program "vp" {
SubProgram "gles3 hw_tier00 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _BloomFactor;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0.xyz = vec3(0.0, 0.0, 0.0);
    SV_Target0.w = _BloomFactor;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _BloomFactor;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0.xyz = vec3(0.0, 0.0, 0.0);
    SV_Target0.w = _BloomFactor;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	mediump float _BloomFactor;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0.xyz = vec3(0.0, 0.0, 0.0);
    SV_Target0.w = _BloomFactor;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPNoiseTex_ST;
in highp vec4 in_POSITION0;
out highp vec2 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat1.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat1.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD1.xy = u_xlat1.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	float _SPNoiseScaler;
uniform 	float _SPTransition;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionBloomFactor;
uniform 	mediump float _BloomFactor;
uniform lowp sampler2D _SPNoiseTex;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
lowp float u_xlat10_0;
vec2 u_xlat1;
mediump float u_xlat16_2;
vec3 u_xlat3;
ivec3 u_xlati3;
bvec2 u_xlatb3;
float u_xlat6;
void main()
{
    u_xlat10_0 = texture(_SPNoiseTex, vs_TEXCOORD1.xy).x;
    u_xlat0 = u_xlat10_0 * _SPNoiseScaler;
    u_xlat0 = u_xlat0 * 1.99000001 + -1.0;
    u_xlat3.x = _SPNoiseScaler * _SPTransition;
    u_xlat6 = u_xlat3.x * 1.5 + (-u_xlat0);
    u_xlat6 = u_xlat6 + 1.0;
    u_xlat6 = floor(u_xlat6);
    u_xlat6 = max(u_xlat6, 0.0);
    u_xlati3.y = int(u_xlat6);
    u_xlat1.xy = (-u_xlat3.xx) * vec2(1.70000005, 1.5) + vec2(u_xlat0);
    u_xlat0 = u_xlat3.x * 1.70000005 + (-u_xlat0);
    u_xlat0 = u_xlat0 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat3.xz = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat3.xz = floor(u_xlat3.xz);
    u_xlat3.xz = max(u_xlat3.xz, vec2(0.0, 0.0));
    u_xlati3.xz = ivec2(u_xlat3.xz);
    u_xlatb3.xy = equal(u_xlati3.xyxx, ivec4(0, 0, 0, 0)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb3.y;
    u_xlat16_2 = _SPOpaqueness * _BloomFactor;
    u_xlat16_2 = (u_xlati3.z != 0) ? _BloomFactor : u_xlat16_2;
    u_xlat6 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat0 = u_xlat0 * u_xlat6 + _BloomFactor;
    SV_Target0.w = (u_xlatb3.x) ? u_xlat0 : u_xlat16_2;
    SV_Target0.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPNoiseTex_ST;
in highp vec4 in_POSITION0;
out highp vec2 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat1.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat1.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD1.xy = u_xlat1.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	float _SPNoiseScaler;
uniform 	float _SPTransition;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionBloomFactor;
uniform 	mediump float _BloomFactor;
uniform lowp sampler2D _SPNoiseTex;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
lowp float u_xlat10_0;
vec2 u_xlat1;
mediump float u_xlat16_2;
vec3 u_xlat3;
ivec3 u_xlati3;
bvec2 u_xlatb3;
float u_xlat6;
void main()
{
    u_xlat10_0 = texture(_SPNoiseTex, vs_TEXCOORD1.xy).x;
    u_xlat0 = u_xlat10_0 * _SPNoiseScaler;
    u_xlat0 = u_xlat0 * 1.99000001 + -1.0;
    u_xlat3.x = _SPNoiseScaler * _SPTransition;
    u_xlat6 = u_xlat3.x * 1.5 + (-u_xlat0);
    u_xlat6 = u_xlat6 + 1.0;
    u_xlat6 = floor(u_xlat6);
    u_xlat6 = max(u_xlat6, 0.0);
    u_xlati3.y = int(u_xlat6);
    u_xlat1.xy = (-u_xlat3.xx) * vec2(1.70000005, 1.5) + vec2(u_xlat0);
    u_xlat0 = u_xlat3.x * 1.70000005 + (-u_xlat0);
    u_xlat0 = u_xlat0 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat3.xz = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat3.xz = floor(u_xlat3.xz);
    u_xlat3.xz = max(u_xlat3.xz, vec2(0.0, 0.0));
    u_xlati3.xz = ivec2(u_xlat3.xz);
    u_xlatb3.xy = equal(u_xlati3.xyxx, ivec4(0, 0, 0, 0)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb3.y;
    u_xlat16_2 = _SPOpaqueness * _BloomFactor;
    u_xlat16_2 = (u_xlati3.z != 0) ? _BloomFactor : u_xlat16_2;
    u_xlat6 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat0 = u_xlat0 * u_xlat6 + _BloomFactor;
    SV_Target0.w = (u_xlatb3.x) ? u_xlat0 : u_xlat16_2;
    SV_Target0.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SPNoiseTex_ST;
in highp vec4 in_POSITION0;
out highp vec2 vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat2;
float u_xlat6;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    u_xlat0 = in_POSITION0.xyzz * vec4(0.5, 0.5, 0.5, 0.25);
    u_xlat2 = u_xlat0.w + u_xlat0.y;
    u_xlat6 = u_xlat0.x * in_POSITION0.x;
    u_xlat1.x = u_xlat0.z * u_xlat0.z + u_xlat0.x;
    u_xlat1.y = u_xlat6 * 0.25 + u_xlat2;
    vs_TEXCOORD1.xy = u_xlat1.xy * _SPNoiseTex_ST.xy + _SPNoiseTex_ST.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp int;
uniform 	float _SPNoiseScaler;
uniform 	float _SPTransition;
uniform 	mediump float _SPOpaqueness;
uniform 	float _SPTransitionBloomFactor;
uniform 	mediump float _BloomFactor;
uniform lowp sampler2D _SPNoiseTex;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
lowp float u_xlat10_0;
vec2 u_xlat1;
mediump float u_xlat16_2;
vec3 u_xlat3;
ivec3 u_xlati3;
bvec2 u_xlatb3;
float u_xlat6;
void main()
{
    u_xlat10_0 = texture(_SPNoiseTex, vs_TEXCOORD1.xy).x;
    u_xlat0 = u_xlat10_0 * _SPNoiseScaler;
    u_xlat0 = u_xlat0 * 1.99000001 + -1.0;
    u_xlat3.x = _SPNoiseScaler * _SPTransition;
    u_xlat6 = u_xlat3.x * 1.5 + (-u_xlat0);
    u_xlat6 = u_xlat6 + 1.0;
    u_xlat6 = floor(u_xlat6);
    u_xlat6 = max(u_xlat6, 0.0);
    u_xlati3.y = int(u_xlat6);
    u_xlat1.xy = (-u_xlat3.xx) * vec2(1.70000005, 1.5) + vec2(u_xlat0);
    u_xlat0 = u_xlat3.x * 1.70000005 + (-u_xlat0);
    u_xlat0 = u_xlat0 * 10.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat3.xz = u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat3.xz = floor(u_xlat3.xz);
    u_xlat3.xz = max(u_xlat3.xz, vec2(0.0, 0.0));
    u_xlati3.xz = ivec2(u_xlat3.xz);
    u_xlatb3.xy = equal(u_xlati3.xyxx, ivec4(0, 0, 0, 0)).xy;
    u_xlatb3.x = u_xlatb3.x && u_xlatb3.y;
    u_xlat16_2 = _SPOpaqueness * _BloomFactor;
    u_xlat16_2 = (u_xlati3.z != 0) ? _BloomFactor : u_xlat16_2;
    u_xlat6 = _SPTransitionBloomFactor + (-_BloomFactor);
    u_xlat0 = u_xlat0 * u_xlat6 + _BloomFactor;
    SV_Target0.w = (u_xlatb3.x) ? u_xlat0 : u_xlat16_2;
    SV_Target0.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 hw_tier00 " {
""
}
SubProgram "gles3 hw_tier01 " {
""
}
SubProgram "gles3 hw_tier02 " {
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SPECIAL_STATE" }
""
}
}
}
}
CustomEditor "MoleMole.CharacterShaderEditorBase"
}