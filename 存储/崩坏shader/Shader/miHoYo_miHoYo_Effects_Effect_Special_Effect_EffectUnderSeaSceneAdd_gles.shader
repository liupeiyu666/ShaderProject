//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "miHoYo/miHoYo_Effects/Effect_Special/Effect/EffectUnderSeaSceneAdd" {
Properties {
_BloomFactor ("Bloom Factor", Float) = 1
_EmissionScaler ("Emission Scaler", Float) = 1
_MainTex ("Base(R) Mask(G) Trans (A)", 2D) = "white" { }
_BaseColor ("Base Color", Color) = (1,1,1,1)
_UpColor ("Up Color", Color) = (1,1,1,1)
_MaskColor ("Mask Color", Color) = (1,1,1,1)
_MaskScale ("Mask Scale", Float) = 1
_Magnitude ("Distortion Magnitude", Float) = 1
_Frequency ("Distortion Frequency", Float) = 1
_InvWaveLength ("Distortion Inverse Wave Length", Float) = 10
_Normal_Scale ("Normal Scale", Float) = 1
_Magnitude1 ("Distortion Magnitude normal", Float) = 1
_Frequency1 ("Distortion Frequency normal", Float) = 1
_USpeed ("Main Tex U Speed", Float) = 1
_VSpeed ("Main Tex V Speed", Float) = 1
_FlowMap ("FlowMap(RG)", 2D) = "white" { }
_Speed ("Speed", Range(0, 1)) = 0.4
_FlowIntensity ("FlowIntensity", Range(0, 1)) = 0.25
_FlowSignX ("FlowSignX", Range(-1, 1)) = 1
_FlowSignY ("FlowSignY", Range(-1, 1)) = -1
_EnvTex ("Environment Texture (RGB)", Cube) = "grey" { }
_Reflectivity ("Reflectivity", Range(0, 5)) = 1
_CamDistRatio ("Camera Distance Ratio", Range(0, 1)) = 0.1
_CamHeightOffset ("Camera Height", Float) = 5
_CamRotate ("Camera Rotate", Range(-3.14159, 3.14159)) = 0
[Toggle(HIGH_FOG)] _HighFog ("HighFog", Float) = 0
_HighFogColor ("HighFogColor", Color) = (1,1,1,1)
_FogHighStartDistance ("FogHighStartDistance", Float) = 8.5
_FogHighIntensity ("FogHighIntensity", Float) = 0.03
_FogHighEffectLimit ("FogHighEffectLimit", Float) = 0.7
[Toggle(FRESNEL)] _Fresnel ("Fresnel", Float) = 0
_RimColor ("【边缘发光颜色】Rim Color", Color) = (0.17,0.36,0.81,0)
_RimPower ("【边缘颜色强度】Rim Power", Range(0.6, 36)) = 8
_RimIntensity ("【边缘颜色强度系数】Rim Intensity", Range(0, 100)) = 1
[Toggle(UseNormalMap)] _UseNormalMap ("Use Normal Map", Float) = 0
_NormalMap ("Normal Map", 2D) = "green" { }
}
SubShader {
 LOD 200
 Tags { "RenderType" = "Opaque" }
 Pass {
  LOD 200
  Tags { "RenderType" = "Opaque" }
  GpuProgramID 21806
Program "vp" {
SubProgram "gles hw_tier00 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _FogStartDistance;
uniform highp float _FogEndDistance;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1.w = 0.0;
  tmpvar_1.xyz = _glesNormal;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp float sint_3;
  highp float cost_4;
  highp vec3 adjCamPos_5;
  mediump vec4 offsetVertex_6;
  mediump float normalOut_7;
  highp vec4 offset_8;
  highp vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  mediump vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  offset_8.yzw = vec3(0.0, 0.0, 0.0);
  offset_8.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_8.y = offset_8.x;
  highp float tmpvar_14;
  tmpvar_14 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_7 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = ((_glesVertex + (
    (offset_8 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_1 * normalOut_7) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_6 = tmpvar_15;
  highp vec4 pos_16;
  pos_16 = offsetVertex_6;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = pos_16.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_17));
  tmpvar_10.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_10.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_18;
  if ((_FogColorNear.w > 0.5)) {
    mediump vec4 fogColor_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_21;
    tmpvar_21 = max (0.0, (sqrt(
      dot (tmpvar_20, tmpvar_20)
    ) - _FogStartDistance));
    highp float tmpvar_22;
    tmpvar_22 = min (max ((
      (1.0 - exp((-(
        (_FogIntensity * tmpvar_21)
      ) * (_FogIntensity * tmpvar_21))))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_23;
    tmpvar_23 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3(clamp (exp(
      (-((_FogColorIntensity * tmpvar_21)) * (_FogColorIntensity * tmpvar_21))
    ), 0.0, 1.0)));
    fogColor_19.xyz = tmpvar_23;
    fogColor_19.w = tmpvar_22;
    tmpvar_18 = fogColor_19;
  } else {
    mediump vec4 fogColor_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_26;
    tmpvar_26 = max (0.0, (sqrt(
      dot (tmpvar_25, tmpvar_25)
    ) - _FogStartDistance));
    highp float tmpvar_27;
    highp float tmpvar_28;
    tmpvar_28 = (_FogEndDistance - _FogStartDistance);
    tmpvar_27 = min (max ((
      (((500.0 * _FogIntensity) * tmpvar_26) / max (0.1, tmpvar_28))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_29;
    tmpvar_29 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3((1.0 - clamp (
      (((1000.0 * _FogColorIntensity) * tmpvar_26) / max (0.1, tmpvar_28))
    , 0.0, 1.0))));
    fogColor_24.xyz = tmpvar_29;
    fogColor_24.w = tmpvar_27;
    tmpvar_18 = fogColor_24;
  };
  tmpvar_12.w = 1.0;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_1.xyz;
  highp vec3 norm_31;
  norm_31 = tmpvar_30;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = unity_WorldToObject[0].xyz;
  tmpvar_32[1] = unity_WorldToObject[1].xyz;
  tmpvar_32[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(normalize((norm_31 * tmpvar_32)));
  tmpvar_13 = tmpvar_33;
  highp vec4 tmpvar_34;
  tmpvar_34 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_5.xz = (tmpvar_34.xz - ((tmpvar_34.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_5.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((tmpvar_34.xyz - adjCamPos_5));
  tmpvar_11 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = cos(_CamRotate);
  cost_4 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = sin(_CamRotate);
  sint_3 = tmpvar_37;
  highp mat2 tmpvar_38;
  tmpvar_38[0].x = cost_4;
  tmpvar_38[0].y = -(sint_3);
  tmpvar_38[1].x = sint_3;
  tmpvar_38[1].y = cost_4;
  tmpvar_11.xz = (tmpvar_38 * tmpvar_11.xz);
  highp vec3 tmpvar_39;
  tmpvar_39 = (_WorldSpaceCameraPos - tmpvar_34.xyz);
  tmpvar_12.xyz = tmpvar_39;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_COLOR0 = tmpvar_2;
  xlv_COLOR1 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_1.xyz;
  xlv_TEXCOORD2 = tmpvar_11;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _FogStartDistance;
uniform highp float _FogEndDistance;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1.w = 0.0;
  tmpvar_1.xyz = _glesNormal;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp float sint_3;
  highp float cost_4;
  highp vec3 adjCamPos_5;
  mediump vec4 offsetVertex_6;
  mediump float normalOut_7;
  highp vec4 offset_8;
  highp vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  mediump vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  offset_8.yzw = vec3(0.0, 0.0, 0.0);
  offset_8.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_8.y = offset_8.x;
  highp float tmpvar_14;
  tmpvar_14 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_7 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = ((_glesVertex + (
    (offset_8 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_1 * normalOut_7) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_6 = tmpvar_15;
  highp vec4 pos_16;
  pos_16 = offsetVertex_6;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = pos_16.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_17));
  tmpvar_10.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_10.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_18;
  if ((_FogColorNear.w > 0.5)) {
    mediump vec4 fogColor_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_21;
    tmpvar_21 = max (0.0, (sqrt(
      dot (tmpvar_20, tmpvar_20)
    ) - _FogStartDistance));
    highp float tmpvar_22;
    tmpvar_22 = min (max ((
      (1.0 - exp((-(
        (_FogIntensity * tmpvar_21)
      ) * (_FogIntensity * tmpvar_21))))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_23;
    tmpvar_23 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3(clamp (exp(
      (-((_FogColorIntensity * tmpvar_21)) * (_FogColorIntensity * tmpvar_21))
    ), 0.0, 1.0)));
    fogColor_19.xyz = tmpvar_23;
    fogColor_19.w = tmpvar_22;
    tmpvar_18 = fogColor_19;
  } else {
    mediump vec4 fogColor_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_26;
    tmpvar_26 = max (0.0, (sqrt(
      dot (tmpvar_25, tmpvar_25)
    ) - _FogStartDistance));
    highp float tmpvar_27;
    highp float tmpvar_28;
    tmpvar_28 = (_FogEndDistance - _FogStartDistance);
    tmpvar_27 = min (max ((
      (((500.0 * _FogIntensity) * tmpvar_26) / max (0.1, tmpvar_28))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_29;
    tmpvar_29 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3((1.0 - clamp (
      (((1000.0 * _FogColorIntensity) * tmpvar_26) / max (0.1, tmpvar_28))
    , 0.0, 1.0))));
    fogColor_24.xyz = tmpvar_29;
    fogColor_24.w = tmpvar_27;
    tmpvar_18 = fogColor_24;
  };
  tmpvar_12.w = 1.0;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_1.xyz;
  highp vec3 norm_31;
  norm_31 = tmpvar_30;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = unity_WorldToObject[0].xyz;
  tmpvar_32[1] = unity_WorldToObject[1].xyz;
  tmpvar_32[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(normalize((norm_31 * tmpvar_32)));
  tmpvar_13 = tmpvar_33;
  highp vec4 tmpvar_34;
  tmpvar_34 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_5.xz = (tmpvar_34.xz - ((tmpvar_34.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_5.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((tmpvar_34.xyz - adjCamPos_5));
  tmpvar_11 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = cos(_CamRotate);
  cost_4 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = sin(_CamRotate);
  sint_3 = tmpvar_37;
  highp mat2 tmpvar_38;
  tmpvar_38[0].x = cost_4;
  tmpvar_38[0].y = -(sint_3);
  tmpvar_38[1].x = sint_3;
  tmpvar_38[1].y = cost_4;
  tmpvar_11.xz = (tmpvar_38 * tmpvar_11.xz);
  highp vec3 tmpvar_39;
  tmpvar_39 = (_WorldSpaceCameraPos - tmpvar_34.xyz);
  tmpvar_12.xyz = tmpvar_39;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_COLOR0 = tmpvar_2;
  xlv_COLOR1 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_1.xyz;
  xlv_TEXCOORD2 = tmpvar_11;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _FogStartDistance;
uniform highp float _FogEndDistance;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1.w = 0.0;
  tmpvar_1.xyz = _glesNormal;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp float sint_3;
  highp float cost_4;
  highp vec3 adjCamPos_5;
  mediump vec4 offsetVertex_6;
  mediump float normalOut_7;
  highp vec4 offset_8;
  highp vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  mediump vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  offset_8.yzw = vec3(0.0, 0.0, 0.0);
  offset_8.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_8.y = offset_8.x;
  highp float tmpvar_14;
  tmpvar_14 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_7 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = ((_glesVertex + (
    (offset_8 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_1 * normalOut_7) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_6 = tmpvar_15;
  highp vec4 pos_16;
  pos_16 = offsetVertex_6;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = pos_16.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_17));
  tmpvar_10.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_10.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_18;
  if ((_FogColorNear.w > 0.5)) {
    mediump vec4 fogColor_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_21;
    tmpvar_21 = max (0.0, (sqrt(
      dot (tmpvar_20, tmpvar_20)
    ) - _FogStartDistance));
    highp float tmpvar_22;
    tmpvar_22 = min (max ((
      (1.0 - exp((-(
        (_FogIntensity * tmpvar_21)
      ) * (_FogIntensity * tmpvar_21))))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_23;
    tmpvar_23 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3(clamp (exp(
      (-((_FogColorIntensity * tmpvar_21)) * (_FogColorIntensity * tmpvar_21))
    ), 0.0, 1.0)));
    fogColor_19.xyz = tmpvar_23;
    fogColor_19.w = tmpvar_22;
    tmpvar_18 = fogColor_19;
  } else {
    mediump vec4 fogColor_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_26;
    tmpvar_26 = max (0.0, (sqrt(
      dot (tmpvar_25, tmpvar_25)
    ) - _FogStartDistance));
    highp float tmpvar_27;
    highp float tmpvar_28;
    tmpvar_28 = (_FogEndDistance - _FogStartDistance);
    tmpvar_27 = min (max ((
      (((500.0 * _FogIntensity) * tmpvar_26) / max (0.1, tmpvar_28))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_29;
    tmpvar_29 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3((1.0 - clamp (
      (((1000.0 * _FogColorIntensity) * tmpvar_26) / max (0.1, tmpvar_28))
    , 0.0, 1.0))));
    fogColor_24.xyz = tmpvar_29;
    fogColor_24.w = tmpvar_27;
    tmpvar_18 = fogColor_24;
  };
  tmpvar_12.w = 1.0;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_1.xyz;
  highp vec3 norm_31;
  norm_31 = tmpvar_30;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = unity_WorldToObject[0].xyz;
  tmpvar_32[1] = unity_WorldToObject[1].xyz;
  tmpvar_32[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(normalize((norm_31 * tmpvar_32)));
  tmpvar_13 = tmpvar_33;
  highp vec4 tmpvar_34;
  tmpvar_34 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_5.xz = (tmpvar_34.xz - ((tmpvar_34.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_5.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((tmpvar_34.xyz - adjCamPos_5));
  tmpvar_11 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = cos(_CamRotate);
  cost_4 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = sin(_CamRotate);
  sint_3 = tmpvar_37;
  highp mat2 tmpvar_38;
  tmpvar_38[0].x = cost_4;
  tmpvar_38[0].y = -(sint_3);
  tmpvar_38[1].x = sint_3;
  tmpvar_38[1].y = cost_4;
  tmpvar_11.xz = (tmpvar_38 * tmpvar_11.xz);
  highp vec3 tmpvar_39;
  tmpvar_39 = (_WorldSpaceCameraPos - tmpvar_34.xyz);
  tmpvar_12.xyz = tmpvar_39;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_COLOR0 = tmpvar_2;
  xlv_COLOR1 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_1.xyz;
  xlv_TEXCOORD2 = tmpvar_11;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _FogStartDistance;
uniform highp float _FogEndDistance;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1.w = 0.0;
  tmpvar_1.xyz = _glesNormal;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp float sint_3;
  highp float cost_4;
  highp vec3 adjCamPos_5;
  mediump vec4 offsetVertex_6;
  mediump float normalOut_7;
  highp vec4 offset_8;
  highp vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  mediump vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  offset_8.yzw = vec3(0.0, 0.0, 0.0);
  offset_8.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_8.y = offset_8.x;
  highp float tmpvar_14;
  tmpvar_14 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_7 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = ((_glesVertex + (
    (offset_8 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_1 * normalOut_7) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_6 = tmpvar_15;
  highp vec4 pos_16;
  pos_16 = offsetVertex_6;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = pos_16.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_17));
  tmpvar_10.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_10.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_18;
  if ((_FogColorNear.w > 0.5)) {
    mediump vec4 fogColor_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_21;
    tmpvar_21 = max (0.0, (sqrt(
      dot (tmpvar_20, tmpvar_20)
    ) - _FogStartDistance));
    highp float tmpvar_22;
    tmpvar_22 = min (max ((
      (1.0 - exp((-(
        (_FogIntensity * tmpvar_21)
      ) * (_FogIntensity * tmpvar_21))))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_23;
    tmpvar_23 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3(clamp (exp(
      (-((_FogColorIntensity * tmpvar_21)) * (_FogColorIntensity * tmpvar_21))
    ), 0.0, 1.0)));
    fogColor_19.xyz = tmpvar_23;
    fogColor_19.w = tmpvar_22;
    tmpvar_18 = fogColor_19;
  } else {
    mediump vec4 fogColor_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_26;
    tmpvar_26 = max (0.0, (sqrt(
      dot (tmpvar_25, tmpvar_25)
    ) - _FogStartDistance));
    highp float tmpvar_27;
    highp float tmpvar_28;
    tmpvar_28 = (_FogEndDistance - _FogStartDistance);
    tmpvar_27 = min (max ((
      (((500.0 * _FogIntensity) * tmpvar_26) / max (0.1, tmpvar_28))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_29;
    tmpvar_29 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3((1.0 - clamp (
      (((1000.0 * _FogColorIntensity) * tmpvar_26) / max (0.1, tmpvar_28))
    , 0.0, 1.0))));
    fogColor_24.xyz = tmpvar_29;
    fogColor_24.w = tmpvar_27;
    tmpvar_18 = fogColor_24;
  };
  tmpvar_12.w = 1.0;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_1.xyz;
  highp vec3 norm_31;
  norm_31 = tmpvar_30;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = unity_WorldToObject[0].xyz;
  tmpvar_32[1] = unity_WorldToObject[1].xyz;
  tmpvar_32[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(normalize((norm_31 * tmpvar_32)));
  tmpvar_13 = tmpvar_33;
  highp vec4 tmpvar_34;
  tmpvar_34 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_5.xz = (tmpvar_34.xz - ((tmpvar_34.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_5.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((tmpvar_34.xyz - adjCamPos_5));
  tmpvar_11 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = cos(_CamRotate);
  cost_4 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = sin(_CamRotate);
  sint_3 = tmpvar_37;
  highp mat2 tmpvar_38;
  tmpvar_38[0].x = cost_4;
  tmpvar_38[0].y = -(sint_3);
  tmpvar_38[1].x = sint_3;
  tmpvar_38[1].y = cost_4;
  tmpvar_11.xz = (tmpvar_38 * tmpvar_11.xz);
  highp vec3 tmpvar_39;
  tmpvar_39 = (_WorldSpaceCameraPos - tmpvar_34.xyz);
  tmpvar_12.xyz = tmpvar_39;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_COLOR0 = tmpvar_2;
  xlv_COLOR1 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_1.xyz;
  xlv_TEXCOORD2 = tmpvar_11;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _FogStartDistance;
uniform highp float _FogEndDistance;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1.w = 0.0;
  tmpvar_1.xyz = _glesNormal;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp float sint_3;
  highp float cost_4;
  highp vec3 adjCamPos_5;
  mediump vec4 offsetVertex_6;
  mediump float normalOut_7;
  highp vec4 offset_8;
  highp vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  mediump vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  offset_8.yzw = vec3(0.0, 0.0, 0.0);
  offset_8.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_8.y = offset_8.x;
  highp float tmpvar_14;
  tmpvar_14 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_7 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = ((_glesVertex + (
    (offset_8 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_1 * normalOut_7) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_6 = tmpvar_15;
  highp vec4 pos_16;
  pos_16 = offsetVertex_6;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = pos_16.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_17));
  tmpvar_10.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_10.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_18;
  if ((_FogColorNear.w > 0.5)) {
    mediump vec4 fogColor_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_21;
    tmpvar_21 = max (0.0, (sqrt(
      dot (tmpvar_20, tmpvar_20)
    ) - _FogStartDistance));
    highp float tmpvar_22;
    tmpvar_22 = min (max ((
      (1.0 - exp((-(
        (_FogIntensity * tmpvar_21)
      ) * (_FogIntensity * tmpvar_21))))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_23;
    tmpvar_23 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3(clamp (exp(
      (-((_FogColorIntensity * tmpvar_21)) * (_FogColorIntensity * tmpvar_21))
    ), 0.0, 1.0)));
    fogColor_19.xyz = tmpvar_23;
    fogColor_19.w = tmpvar_22;
    tmpvar_18 = fogColor_19;
  } else {
    mediump vec4 fogColor_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_26;
    tmpvar_26 = max (0.0, (sqrt(
      dot (tmpvar_25, tmpvar_25)
    ) - _FogStartDistance));
    highp float tmpvar_27;
    highp float tmpvar_28;
    tmpvar_28 = (_FogEndDistance - _FogStartDistance);
    tmpvar_27 = min (max ((
      (((500.0 * _FogIntensity) * tmpvar_26) / max (0.1, tmpvar_28))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_29;
    tmpvar_29 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3((1.0 - clamp (
      (((1000.0 * _FogColorIntensity) * tmpvar_26) / max (0.1, tmpvar_28))
    , 0.0, 1.0))));
    fogColor_24.xyz = tmpvar_29;
    fogColor_24.w = tmpvar_27;
    tmpvar_18 = fogColor_24;
  };
  tmpvar_12.w = 1.0;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_1.xyz;
  highp vec3 norm_31;
  norm_31 = tmpvar_30;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = unity_WorldToObject[0].xyz;
  tmpvar_32[1] = unity_WorldToObject[1].xyz;
  tmpvar_32[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(normalize((norm_31 * tmpvar_32)));
  tmpvar_13 = tmpvar_33;
  highp vec4 tmpvar_34;
  tmpvar_34 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_5.xz = (tmpvar_34.xz - ((tmpvar_34.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_5.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((tmpvar_34.xyz - adjCamPos_5));
  tmpvar_11 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = cos(_CamRotate);
  cost_4 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = sin(_CamRotate);
  sint_3 = tmpvar_37;
  highp mat2 tmpvar_38;
  tmpvar_38[0].x = cost_4;
  tmpvar_38[0].y = -(sint_3);
  tmpvar_38[1].x = sint_3;
  tmpvar_38[1].y = cost_4;
  tmpvar_11.xz = (tmpvar_38 * tmpvar_11.xz);
  highp vec3 tmpvar_39;
  tmpvar_39 = (_WorldSpaceCameraPos - tmpvar_34.xyz);
  tmpvar_12.xyz = tmpvar_39;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_COLOR0 = tmpvar_2;
  xlv_COLOR1 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_1.xyz;
  xlv_TEXCOORD2 = tmpvar_11;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _FogStartDistance;
uniform highp float _FogEndDistance;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1.w = 0.0;
  tmpvar_1.xyz = _glesNormal;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp float sint_3;
  highp float cost_4;
  highp vec3 adjCamPos_5;
  mediump vec4 offsetVertex_6;
  mediump float normalOut_7;
  highp vec4 offset_8;
  highp vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  mediump vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  offset_8.yzw = vec3(0.0, 0.0, 0.0);
  offset_8.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_8.y = offset_8.x;
  highp float tmpvar_14;
  tmpvar_14 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_7 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = ((_glesVertex + (
    (offset_8 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_1 * normalOut_7) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_6 = tmpvar_15;
  highp vec4 pos_16;
  pos_16 = offsetVertex_6;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = pos_16.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_17));
  tmpvar_10.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_10.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_18;
  if ((_FogColorNear.w > 0.5)) {
    mediump vec4 fogColor_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_21;
    tmpvar_21 = max (0.0, (sqrt(
      dot (tmpvar_20, tmpvar_20)
    ) - _FogStartDistance));
    highp float tmpvar_22;
    tmpvar_22 = min (max ((
      (1.0 - exp((-(
        (_FogIntensity * tmpvar_21)
      ) * (_FogIntensity * tmpvar_21))))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_23;
    tmpvar_23 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3(clamp (exp(
      (-((_FogColorIntensity * tmpvar_21)) * (_FogColorIntensity * tmpvar_21))
    ), 0.0, 1.0)));
    fogColor_19.xyz = tmpvar_23;
    fogColor_19.w = tmpvar_22;
    tmpvar_18 = fogColor_19;
  } else {
    mediump vec4 fogColor_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_26;
    tmpvar_26 = max (0.0, (sqrt(
      dot (tmpvar_25, tmpvar_25)
    ) - _FogStartDistance));
    highp float tmpvar_27;
    highp float tmpvar_28;
    tmpvar_28 = (_FogEndDistance - _FogStartDistance);
    tmpvar_27 = min (max ((
      (((500.0 * _FogIntensity) * tmpvar_26) / max (0.1, tmpvar_28))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_29;
    tmpvar_29 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3((1.0 - clamp (
      (((1000.0 * _FogColorIntensity) * tmpvar_26) / max (0.1, tmpvar_28))
    , 0.0, 1.0))));
    fogColor_24.xyz = tmpvar_29;
    fogColor_24.w = tmpvar_27;
    tmpvar_18 = fogColor_24;
  };
  tmpvar_12.w = 1.0;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_1.xyz;
  highp vec3 norm_31;
  norm_31 = tmpvar_30;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = unity_WorldToObject[0].xyz;
  tmpvar_32[1] = unity_WorldToObject[1].xyz;
  tmpvar_32[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(normalize((norm_31 * tmpvar_32)));
  tmpvar_13 = tmpvar_33;
  highp vec4 tmpvar_34;
  tmpvar_34 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_5.xz = (tmpvar_34.xz - ((tmpvar_34.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_5.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((tmpvar_34.xyz - adjCamPos_5));
  tmpvar_11 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = cos(_CamRotate);
  cost_4 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = sin(_CamRotate);
  sint_3 = tmpvar_37;
  highp mat2 tmpvar_38;
  tmpvar_38[0].x = cost_4;
  tmpvar_38[0].y = -(sint_3);
  tmpvar_38[1].x = sint_3;
  tmpvar_38[1].y = cost_4;
  tmpvar_11.xz = (tmpvar_38 * tmpvar_11.xz);
  highp vec3 tmpvar_39;
  tmpvar_39 = (_WorldSpaceCameraPos - tmpvar_34.xyz);
  tmpvar_12.xyz = tmpvar_39;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_COLOR0 = tmpvar_2;
  xlv_COLOR1 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_1.xyz;
  xlv_TEXCOORD2 = tmpvar_11;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_HEIGHT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _glesNormal;
  highp float sint_3;
  highp float cost_4;
  highp vec3 adjCamPos_5;
  mediump vec4 offsetVertex_6;
  mediump float normalOut_7;
  highp vec4 offset_8;
  mediump vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  mediump vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  offset_8.yzw = vec3(0.0, 0.0, 0.0);
  offset_8.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_8.y = offset_8.x;
  highp float tmpvar_13;
  tmpvar_13 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_7 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = ((_glesVertex + (
    (offset_8 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_2 * normalOut_7) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_6 = tmpvar_14;
  highp vec4 pos_15;
  pos_15 = offsetVertex_6;
  highp vec4 tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = pos_15.xyz;
  tmpvar_16 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_17));
  tmpvar_9.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_9.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_21;
  mediump float fogFactor_22;
  mediump vec3 fogColor_23;
  mediump vec3 heightFogColor_24;
  highp float HeightFogFactor_25;
  mediump vec3 atomesphereFogColor_26;
  mediump float h_27;
  highp float linearFogDensity_28;
  mediump float len_29;
  highp float tmpvar_30;
  tmpvar_30 = sqrt(dot (tmpvar_20, tmpvar_20));
  len_29 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (((len_29 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_28 = (tmpvar_31 * (2.0 - tmpvar_31));
  if ((len_29 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_28 = (linearFogDensity_28 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_32;
  tmpvar_32 = min (pow (linearFogDensity_28, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_28 = tmpvar_32;
  mediump float tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((tmpvar_19.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_33 = tmpvar_34;
  h_27 = (tmpvar_33 * (2.0 - tmpvar_33));
  highp vec3 tmpvar_35;
  tmpvar_35 = (_HeigtFogColBase.xyz + (h_27 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_26 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (atomesphereFogColor_26, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_29 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_26 = tmpvar_36;
  mediump float tmpvar_37;
  mediump float r_38;
  mediump float f_39;
  mediump float u_40;
  mediump float l_41;
  mediump float fogInt_42;
  fogInt_42 = 1.0;
  highp float tmpvar_43;
  tmpvar_43 = (_HeigtFogParams.x * tmpvar_20.y);
  highp float tmpvar_44;
  tmpvar_44 = abs(tmpvar_43);
  if ((tmpvar_44 > 0.01)) {
    highp float tmpvar_45;
    tmpvar_45 = exp(-(tmpvar_43));
    fogInt_42 = ((1.0 - tmpvar_45) / tmpvar_43);
  };
  highp float tmpvar_46;
  tmpvar_46 = sqrt(dot (tmpvar_20, tmpvar_20));
  l_41 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = (l_41 * _HeigtFogParams.y);
  u_40 = tmpvar_47;
  fogInt_42 = (fogInt_42 * u_40);
  mediump float tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((l_41 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_48 = tmpvar_49;
  r_38 = (tmpvar_48 * (2.0 - tmpvar_48));
  r_38 = ((r_38 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_39 = ((1.0 - clamp (
    exp2(-(fogInt_42))
  , 0.0, 1.0)) * r_38);
  highp float tmpvar_50;
  tmpvar_50 = min (f_39, _HeigtFogColBase.w);
  tmpvar_37 = tmpvar_50;
  HeightFogFactor_25 = tmpvar_37;
  highp vec3 tmpvar_51;
  tmpvar_51 = _Mihoyo_FogColor.xyz;
  heightFogColor_24 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = ((heightFogColor_24 * HeightFogFactor_25) + ((atomesphereFogColor_26 * tmpvar_32) * (1.0 - HeightFogFactor_25)));
  fogColor_23 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = ((1.0 - tmpvar_32) * (1.0 - HeightFogFactor_25));
  fogFactor_22 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54.xyz = fogColor_23;
  tmpvar_54.w = fogFactor_22;
  tmpvar_21 = tmpvar_54;
  tmpvar_18 = tmpvar_21;
  tmpvar_11.w = 1.0;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_2.xyz;
  highp vec3 norm_56;
  norm_56 = tmpvar_55;
  highp mat3 tmpvar_57;
  tmpvar_57[0] = unity_WorldToObject[0].xyz;
  tmpvar_57[1] = unity_WorldToObject[1].xyz;
  tmpvar_57[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(normalize((norm_56 * tmpvar_57)));
  tmpvar_12 = tmpvar_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_5.xz = (tmpvar_59.xz - ((tmpvar_59.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_5.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize((tmpvar_59.xyz - adjCamPos_5));
  tmpvar_10 = tmpvar_60;
  mediump float tmpvar_61;
  tmpvar_61 = cos(_CamRotate);
  cost_4 = tmpvar_61;
  mediump float tmpvar_62;
  tmpvar_62 = sin(_CamRotate);
  sint_3 = tmpvar_62;
  highp mat2 tmpvar_63;
  tmpvar_63[0].x = cost_4;
  tmpvar_63[0].y = -(sint_3);
  tmpvar_63[1].x = sint_3;
  tmpvar_63[1].y = cost_4;
  tmpvar_10.xz = (tmpvar_63 * tmpvar_10.xz);
  highp vec3 tmpvar_64;
  tmpvar_64 = (_WorldSpaceCameraPos - tmpvar_59.xyz);
  tmpvar_11.xyz = tmpvar_64;
  gl_Position = tmpvar_16;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_COLOR0 = tmpvar_1;
  xlv_COLOR1 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_2.xyz;
  xlv_TEXCOORD2 = tmpvar_10;
  xlv_TEXCOORD4 = tmpvar_11;
  xlv_TEXCOORD5 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  finalColor_2.xyz = (xlv_COLOR1.xyz + (finalColor_2.xyz * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_HEIGHT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _glesNormal;
  highp float sint_3;
  highp float cost_4;
  highp vec3 adjCamPos_5;
  mediump vec4 offsetVertex_6;
  mediump float normalOut_7;
  highp vec4 offset_8;
  mediump vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  mediump vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  offset_8.yzw = vec3(0.0, 0.0, 0.0);
  offset_8.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_8.y = offset_8.x;
  highp float tmpvar_13;
  tmpvar_13 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_7 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = ((_glesVertex + (
    (offset_8 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_2 * normalOut_7) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_6 = tmpvar_14;
  highp vec4 pos_15;
  pos_15 = offsetVertex_6;
  highp vec4 tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = pos_15.xyz;
  tmpvar_16 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_17));
  tmpvar_9.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_9.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_21;
  mediump float fogFactor_22;
  mediump vec3 fogColor_23;
  mediump vec3 heightFogColor_24;
  highp float HeightFogFactor_25;
  mediump vec3 atomesphereFogColor_26;
  mediump float h_27;
  highp float linearFogDensity_28;
  mediump float len_29;
  highp float tmpvar_30;
  tmpvar_30 = sqrt(dot (tmpvar_20, tmpvar_20));
  len_29 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (((len_29 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_28 = (tmpvar_31 * (2.0 - tmpvar_31));
  if ((len_29 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_28 = (linearFogDensity_28 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_32;
  tmpvar_32 = min (pow (linearFogDensity_28, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_28 = tmpvar_32;
  mediump float tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((tmpvar_19.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_33 = tmpvar_34;
  h_27 = (tmpvar_33 * (2.0 - tmpvar_33));
  highp vec3 tmpvar_35;
  tmpvar_35 = (_HeigtFogColBase.xyz + (h_27 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_26 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (atomesphereFogColor_26, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_29 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_26 = tmpvar_36;
  mediump float tmpvar_37;
  mediump float r_38;
  mediump float f_39;
  mediump float u_40;
  mediump float l_41;
  mediump float fogInt_42;
  fogInt_42 = 1.0;
  highp float tmpvar_43;
  tmpvar_43 = (_HeigtFogParams.x * tmpvar_20.y);
  highp float tmpvar_44;
  tmpvar_44 = abs(tmpvar_43);
  if ((tmpvar_44 > 0.01)) {
    highp float tmpvar_45;
    tmpvar_45 = exp(-(tmpvar_43));
    fogInt_42 = ((1.0 - tmpvar_45) / tmpvar_43);
  };
  highp float tmpvar_46;
  tmpvar_46 = sqrt(dot (tmpvar_20, tmpvar_20));
  l_41 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = (l_41 * _HeigtFogParams.y);
  u_40 = tmpvar_47;
  fogInt_42 = (fogInt_42 * u_40);
  mediump float tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((l_41 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_48 = tmpvar_49;
  r_38 = (tmpvar_48 * (2.0 - tmpvar_48));
  r_38 = ((r_38 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_39 = ((1.0 - clamp (
    exp2(-(fogInt_42))
  , 0.0, 1.0)) * r_38);
  highp float tmpvar_50;
  tmpvar_50 = min (f_39, _HeigtFogColBase.w);
  tmpvar_37 = tmpvar_50;
  HeightFogFactor_25 = tmpvar_37;
  highp vec3 tmpvar_51;
  tmpvar_51 = _Mihoyo_FogColor.xyz;
  heightFogColor_24 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = ((heightFogColor_24 * HeightFogFactor_25) + ((atomesphereFogColor_26 * tmpvar_32) * (1.0 - HeightFogFactor_25)));
  fogColor_23 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = ((1.0 - tmpvar_32) * (1.0 - HeightFogFactor_25));
  fogFactor_22 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54.xyz = fogColor_23;
  tmpvar_54.w = fogFactor_22;
  tmpvar_21 = tmpvar_54;
  tmpvar_18 = tmpvar_21;
  tmpvar_11.w = 1.0;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_2.xyz;
  highp vec3 norm_56;
  norm_56 = tmpvar_55;
  highp mat3 tmpvar_57;
  tmpvar_57[0] = unity_WorldToObject[0].xyz;
  tmpvar_57[1] = unity_WorldToObject[1].xyz;
  tmpvar_57[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(normalize((norm_56 * tmpvar_57)));
  tmpvar_12 = tmpvar_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_5.xz = (tmpvar_59.xz - ((tmpvar_59.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_5.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize((tmpvar_59.xyz - adjCamPos_5));
  tmpvar_10 = tmpvar_60;
  mediump float tmpvar_61;
  tmpvar_61 = cos(_CamRotate);
  cost_4 = tmpvar_61;
  mediump float tmpvar_62;
  tmpvar_62 = sin(_CamRotate);
  sint_3 = tmpvar_62;
  highp mat2 tmpvar_63;
  tmpvar_63[0].x = cost_4;
  tmpvar_63[0].y = -(sint_3);
  tmpvar_63[1].x = sint_3;
  tmpvar_63[1].y = cost_4;
  tmpvar_10.xz = (tmpvar_63 * tmpvar_10.xz);
  highp vec3 tmpvar_64;
  tmpvar_64 = (_WorldSpaceCameraPos - tmpvar_59.xyz);
  tmpvar_11.xyz = tmpvar_64;
  gl_Position = tmpvar_16;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_COLOR0 = tmpvar_1;
  xlv_COLOR1 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_2.xyz;
  xlv_TEXCOORD2 = tmpvar_10;
  xlv_TEXCOORD4 = tmpvar_11;
  xlv_TEXCOORD5 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  finalColor_2.xyz = (xlv_COLOR1.xyz + (finalColor_2.xyz * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_HEIGHT" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _glesNormal;
  highp float sint_3;
  highp float cost_4;
  highp vec3 adjCamPos_5;
  mediump vec4 offsetVertex_6;
  mediump float normalOut_7;
  highp vec4 offset_8;
  mediump vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  mediump vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  offset_8.yzw = vec3(0.0, 0.0, 0.0);
  offset_8.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_8.y = offset_8.x;
  highp float tmpvar_13;
  tmpvar_13 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_7 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = ((_glesVertex + (
    (offset_8 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_2 * normalOut_7) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_6 = tmpvar_14;
  highp vec4 pos_15;
  pos_15 = offsetVertex_6;
  highp vec4 tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = pos_15.xyz;
  tmpvar_16 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_17));
  tmpvar_9.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_9.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_21;
  mediump float fogFactor_22;
  mediump vec3 fogColor_23;
  mediump vec3 heightFogColor_24;
  highp float HeightFogFactor_25;
  mediump vec3 atomesphereFogColor_26;
  mediump float h_27;
  highp float linearFogDensity_28;
  mediump float len_29;
  highp float tmpvar_30;
  tmpvar_30 = sqrt(dot (tmpvar_20, tmpvar_20));
  len_29 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (((len_29 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_28 = (tmpvar_31 * (2.0 - tmpvar_31));
  if ((len_29 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_28 = (linearFogDensity_28 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_32;
  tmpvar_32 = min (pow (linearFogDensity_28, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_28 = tmpvar_32;
  mediump float tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((tmpvar_19.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_33 = tmpvar_34;
  h_27 = (tmpvar_33 * (2.0 - tmpvar_33));
  highp vec3 tmpvar_35;
  tmpvar_35 = (_HeigtFogColBase.xyz + (h_27 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_26 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (atomesphereFogColor_26, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_29 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_26 = tmpvar_36;
  mediump float tmpvar_37;
  mediump float r_38;
  mediump float f_39;
  mediump float u_40;
  mediump float l_41;
  mediump float fogInt_42;
  fogInt_42 = 1.0;
  highp float tmpvar_43;
  tmpvar_43 = (_HeigtFogParams.x * tmpvar_20.y);
  highp float tmpvar_44;
  tmpvar_44 = abs(tmpvar_43);
  if ((tmpvar_44 > 0.01)) {
    highp float tmpvar_45;
    tmpvar_45 = exp(-(tmpvar_43));
    fogInt_42 = ((1.0 - tmpvar_45) / tmpvar_43);
  };
  highp float tmpvar_46;
  tmpvar_46 = sqrt(dot (tmpvar_20, tmpvar_20));
  l_41 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = (l_41 * _HeigtFogParams.y);
  u_40 = tmpvar_47;
  fogInt_42 = (fogInt_42 * u_40);
  mediump float tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((l_41 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_48 = tmpvar_49;
  r_38 = (tmpvar_48 * (2.0 - tmpvar_48));
  r_38 = ((r_38 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_39 = ((1.0 - clamp (
    exp2(-(fogInt_42))
  , 0.0, 1.0)) * r_38);
  highp float tmpvar_50;
  tmpvar_50 = min (f_39, _HeigtFogColBase.w);
  tmpvar_37 = tmpvar_50;
  HeightFogFactor_25 = tmpvar_37;
  highp vec3 tmpvar_51;
  tmpvar_51 = _Mihoyo_FogColor.xyz;
  heightFogColor_24 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = ((heightFogColor_24 * HeightFogFactor_25) + ((atomesphereFogColor_26 * tmpvar_32) * (1.0 - HeightFogFactor_25)));
  fogColor_23 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = ((1.0 - tmpvar_32) * (1.0 - HeightFogFactor_25));
  fogFactor_22 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54.xyz = fogColor_23;
  tmpvar_54.w = fogFactor_22;
  tmpvar_21 = tmpvar_54;
  tmpvar_18 = tmpvar_21;
  tmpvar_11.w = 1.0;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_2.xyz;
  highp vec3 norm_56;
  norm_56 = tmpvar_55;
  highp mat3 tmpvar_57;
  tmpvar_57[0] = unity_WorldToObject[0].xyz;
  tmpvar_57[1] = unity_WorldToObject[1].xyz;
  tmpvar_57[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(normalize((norm_56 * tmpvar_57)));
  tmpvar_12 = tmpvar_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_5.xz = (tmpvar_59.xz - ((tmpvar_59.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_5.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize((tmpvar_59.xyz - adjCamPos_5));
  tmpvar_10 = tmpvar_60;
  mediump float tmpvar_61;
  tmpvar_61 = cos(_CamRotate);
  cost_4 = tmpvar_61;
  mediump float tmpvar_62;
  tmpvar_62 = sin(_CamRotate);
  sint_3 = tmpvar_62;
  highp mat2 tmpvar_63;
  tmpvar_63[0].x = cost_4;
  tmpvar_63[0].y = -(sint_3);
  tmpvar_63[1].x = sint_3;
  tmpvar_63[1].y = cost_4;
  tmpvar_10.xz = (tmpvar_63 * tmpvar_10.xz);
  highp vec3 tmpvar_64;
  tmpvar_64 = (_WorldSpaceCameraPos - tmpvar_59.xyz);
  tmpvar_11.xyz = tmpvar_64;
  gl_Position = tmpvar_16;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_COLOR0 = tmpvar_1;
  xlv_COLOR1 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_2.xyz;
  xlv_TEXCOORD2 = tmpvar_10;
  xlv_TEXCOORD4 = tmpvar_11;
  xlv_TEXCOORD5 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  finalColor_2.xyz = (xlv_COLOR1.xyz + (finalColor_2.xyz * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _glesNormal;
  highp float sint_3;
  highp float cost_4;
  highp vec3 adjCamPos_5;
  mediump vec4 offsetVertex_6;
  mediump float normalOut_7;
  highp vec4 offset_8;
  mediump vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  mediump vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  offset_8.yzw = vec3(0.0, 0.0, 0.0);
  offset_8.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_8.y = offset_8.x;
  highp float tmpvar_13;
  tmpvar_13 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_7 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = ((_glesVertex + (
    (offset_8 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_2 * normalOut_7) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_6 = tmpvar_14;
  highp vec4 pos_15;
  pos_15 = offsetVertex_6;
  highp vec4 tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = pos_15.xyz;
  tmpvar_16 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_17));
  tmpvar_9.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_9.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_21;
  mediump float fogFactor_22;
  mediump vec3 fogColor_23;
  mediump vec3 heightFogColor_24;
  highp float HeightFogFactor_25;
  mediump vec3 atomesphereFogColor_26;
  mediump float h_27;
  highp float linearFogDensity_28;
  mediump float len_29;
  highp float tmpvar_30;
  tmpvar_30 = sqrt(dot (tmpvar_20, tmpvar_20));
  len_29 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (((len_29 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_28 = (tmpvar_31 * (2.0 - tmpvar_31));
  if ((len_29 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_28 = (linearFogDensity_28 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_32;
  tmpvar_32 = min (pow (linearFogDensity_28, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_28 = tmpvar_32;
  mediump float tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((tmpvar_19.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_33 = tmpvar_34;
  h_27 = (tmpvar_33 * (2.0 - tmpvar_33));
  highp vec3 tmpvar_35;
  tmpvar_35 = (_HeigtFogColBase2.xyz + (h_27 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_26 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (atomesphereFogColor_26, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_29 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_26 = tmpvar_36;
  mediump float tmpvar_37;
  mediump float r_38;
  mediump float f_39;
  mediump float u_40;
  mediump float l_41;
  mediump float fogInt_42;
  fogInt_42 = 1.0;
  highp float tmpvar_43;
  tmpvar_43 = (_HeigtFogParams2.x * tmpvar_20.y);
  highp float tmpvar_44;
  tmpvar_44 = abs(tmpvar_43);
  if ((tmpvar_44 > 0.01)) {
    highp float tmpvar_45;
    tmpvar_45 = exp(-(tmpvar_43));
    fogInt_42 = ((1.0 - tmpvar_45) / tmpvar_43);
  };
  highp float tmpvar_46;
  tmpvar_46 = sqrt(dot (tmpvar_20, tmpvar_20));
  l_41 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = (l_41 * _HeigtFogParams2.y);
  u_40 = tmpvar_47;
  fogInt_42 = (fogInt_42 * u_40);
  mediump float tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((l_41 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_48 = tmpvar_49;
  r_38 = (tmpvar_48 * (2.0 - tmpvar_48));
  r_38 = ((r_38 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_39 = ((1.0 - clamp (
    exp2(-(fogInt_42))
  , 0.0, 1.0)) * r_38);
  highp float tmpvar_50;
  tmpvar_50 = min (f_39, _HeigtFogColBase2.w);
  tmpvar_37 = tmpvar_50;
  HeightFogFactor_25 = tmpvar_37;
  highp vec3 tmpvar_51;
  tmpvar_51 = _Mihoyo_FogColor2.xyz;
  heightFogColor_24 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = ((heightFogColor_24 * HeightFogFactor_25) + ((atomesphereFogColor_26 * tmpvar_32) * (1.0 - HeightFogFactor_25)));
  fogColor_23 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = ((1.0 - tmpvar_32) * (1.0 - HeightFogFactor_25));
  fogFactor_22 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54.xyz = fogColor_23;
  tmpvar_54.w = fogFactor_22;
  tmpvar_21 = tmpvar_54;
  highp vec4 tmpvar_55;
  mediump float fogFactor_56;
  mediump vec3 fogColor_57;
  mediump vec3 heightFogColor_58;
  highp float HeightFogFactor_59;
  mediump vec3 atomesphereFogColor_60;
  mediump float h_61;
  highp float linearFogDensity_62;
  mediump float len_63;
  highp float tmpvar_64;
  tmpvar_64 = sqrt(dot (tmpvar_20, tmpvar_20));
  len_63 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (((len_63 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_62 = (tmpvar_65 * (2.0 - tmpvar_65));
  if ((len_63 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_62 = (linearFogDensity_62 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_66;
  tmpvar_66 = min (pow (linearFogDensity_62, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_62 = tmpvar_66;
  mediump float tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((tmpvar_19.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_67 = tmpvar_68;
  h_61 = (tmpvar_67 * (2.0 - tmpvar_67));
  highp vec3 tmpvar_69;
  tmpvar_69 = (_HeigtFogColBase3.xyz + (h_61 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_60 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = mix (atomesphereFogColor_60, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_63 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_60 = tmpvar_70;
  mediump float tmpvar_71;
  mediump float r_72;
  mediump float f_73;
  mediump float u_74;
  mediump float l_75;
  mediump float fogInt_76;
  fogInt_76 = 1.0;
  highp float tmpvar_77;
  tmpvar_77 = (_HeigtFogParams3.x * tmpvar_20.y);
  highp float tmpvar_78;
  tmpvar_78 = abs(tmpvar_77);
  if ((tmpvar_78 > 0.01)) {
    highp float tmpvar_79;
    tmpvar_79 = exp(-(tmpvar_77));
    fogInt_76 = ((1.0 - tmpvar_79) / tmpvar_77);
  };
  highp float tmpvar_80;
  tmpvar_80 = sqrt(dot (tmpvar_20, tmpvar_20));
  l_75 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (l_75 * _HeigtFogParams3.y);
  u_74 = tmpvar_81;
  fogInt_76 = (fogInt_76 * u_74);
  mediump float tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (((l_75 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_82 = tmpvar_83;
  r_72 = (tmpvar_82 * (2.0 - tmpvar_82));
  r_72 = ((r_72 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_73 = ((1.0 - clamp (
    exp2(-(fogInt_76))
  , 0.0, 1.0)) * r_72);
  highp float tmpvar_84;
  tmpvar_84 = min (f_73, _HeigtFogColBase3.w);
  tmpvar_71 = tmpvar_84;
  HeightFogFactor_59 = tmpvar_71;
  highp vec3 tmpvar_85;
  tmpvar_85 = _Mihoyo_FogColor3.xyz;
  heightFogColor_58 = tmpvar_85;
  highp vec3 tmpvar_86;
  tmpvar_86 = ((heightFogColor_58 * HeightFogFactor_59) + ((atomesphereFogColor_60 * tmpvar_66) * (1.0 - HeightFogFactor_59)));
  fogColor_57 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = ((1.0 - tmpvar_66) * (1.0 - HeightFogFactor_59));
  fogFactor_56 = tmpvar_87;
  mediump vec4 tmpvar_88;
  tmpvar_88.xyz = fogColor_57;
  tmpvar_88.w = fogFactor_56;
  tmpvar_55 = tmpvar_88;
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (tmpvar_21, tmpvar_55, vec4(_LerpFactor));
  tmpvar_18 = tmpvar_89;
  tmpvar_11.w = 1.0;
  mediump vec3 tmpvar_90;
  tmpvar_90 = tmpvar_2.xyz;
  highp vec3 norm_91;
  norm_91 = tmpvar_90;
  highp mat3 tmpvar_92;
  tmpvar_92[0] = unity_WorldToObject[0].xyz;
  tmpvar_92[1] = unity_WorldToObject[1].xyz;
  tmpvar_92[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_93;
  tmpvar_93 = normalize(normalize((norm_91 * tmpvar_92)));
  tmpvar_12 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_5.xz = (tmpvar_94.xz - ((tmpvar_94.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_5.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_95;
  tmpvar_95 = normalize((tmpvar_94.xyz - adjCamPos_5));
  tmpvar_10 = tmpvar_95;
  mediump float tmpvar_96;
  tmpvar_96 = cos(_CamRotate);
  cost_4 = tmpvar_96;
  mediump float tmpvar_97;
  tmpvar_97 = sin(_CamRotate);
  sint_3 = tmpvar_97;
  highp mat2 tmpvar_98;
  tmpvar_98[0].x = cost_4;
  tmpvar_98[0].y = -(sint_3);
  tmpvar_98[1].x = sint_3;
  tmpvar_98[1].y = cost_4;
  tmpvar_10.xz = (tmpvar_98 * tmpvar_10.xz);
  highp vec3 tmpvar_99;
  tmpvar_99 = (_WorldSpaceCameraPos - tmpvar_94.xyz);
  tmpvar_11.xyz = tmpvar_99;
  gl_Position = tmpvar_16;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_COLOR0 = tmpvar_1;
  xlv_COLOR1 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_2.xyz;
  xlv_TEXCOORD2 = tmpvar_10;
  xlv_TEXCOORD4 = tmpvar_11;
  xlv_TEXCOORD5 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  finalColor_2.xyz = (xlv_COLOR1.xyz + (finalColor_2.xyz * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _glesNormal;
  highp float sint_3;
  highp float cost_4;
  highp vec3 adjCamPos_5;
  mediump vec4 offsetVertex_6;
  mediump float normalOut_7;
  highp vec4 offset_8;
  mediump vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  mediump vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  offset_8.yzw = vec3(0.0, 0.0, 0.0);
  offset_8.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_8.y = offset_8.x;
  highp float tmpvar_13;
  tmpvar_13 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_7 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = ((_glesVertex + (
    (offset_8 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_2 * normalOut_7) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_6 = tmpvar_14;
  highp vec4 pos_15;
  pos_15 = offsetVertex_6;
  highp vec4 tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = pos_15.xyz;
  tmpvar_16 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_17));
  tmpvar_9.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_9.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_21;
  mediump float fogFactor_22;
  mediump vec3 fogColor_23;
  mediump vec3 heightFogColor_24;
  highp float HeightFogFactor_25;
  mediump vec3 atomesphereFogColor_26;
  mediump float h_27;
  highp float linearFogDensity_28;
  mediump float len_29;
  highp float tmpvar_30;
  tmpvar_30 = sqrt(dot (tmpvar_20, tmpvar_20));
  len_29 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (((len_29 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_28 = (tmpvar_31 * (2.0 - tmpvar_31));
  if ((len_29 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_28 = (linearFogDensity_28 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_32;
  tmpvar_32 = min (pow (linearFogDensity_28, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_28 = tmpvar_32;
  mediump float tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((tmpvar_19.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_33 = tmpvar_34;
  h_27 = (tmpvar_33 * (2.0 - tmpvar_33));
  highp vec3 tmpvar_35;
  tmpvar_35 = (_HeigtFogColBase2.xyz + (h_27 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_26 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (atomesphereFogColor_26, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_29 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_26 = tmpvar_36;
  mediump float tmpvar_37;
  mediump float r_38;
  mediump float f_39;
  mediump float u_40;
  mediump float l_41;
  mediump float fogInt_42;
  fogInt_42 = 1.0;
  highp float tmpvar_43;
  tmpvar_43 = (_HeigtFogParams2.x * tmpvar_20.y);
  highp float tmpvar_44;
  tmpvar_44 = abs(tmpvar_43);
  if ((tmpvar_44 > 0.01)) {
    highp float tmpvar_45;
    tmpvar_45 = exp(-(tmpvar_43));
    fogInt_42 = ((1.0 - tmpvar_45) / tmpvar_43);
  };
  highp float tmpvar_46;
  tmpvar_46 = sqrt(dot (tmpvar_20, tmpvar_20));
  l_41 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = (l_41 * _HeigtFogParams2.y);
  u_40 = tmpvar_47;
  fogInt_42 = (fogInt_42 * u_40);
  mediump float tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((l_41 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_48 = tmpvar_49;
  r_38 = (tmpvar_48 * (2.0 - tmpvar_48));
  r_38 = ((r_38 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_39 = ((1.0 - clamp (
    exp2(-(fogInt_42))
  , 0.0, 1.0)) * r_38);
  highp float tmpvar_50;
  tmpvar_50 = min (f_39, _HeigtFogColBase2.w);
  tmpvar_37 = tmpvar_50;
  HeightFogFactor_25 = tmpvar_37;
  highp vec3 tmpvar_51;
  tmpvar_51 = _Mihoyo_FogColor2.xyz;
  heightFogColor_24 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = ((heightFogColor_24 * HeightFogFactor_25) + ((atomesphereFogColor_26 * tmpvar_32) * (1.0 - HeightFogFactor_25)));
  fogColor_23 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = ((1.0 - tmpvar_32) * (1.0 - HeightFogFactor_25));
  fogFactor_22 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54.xyz = fogColor_23;
  tmpvar_54.w = fogFactor_22;
  tmpvar_21 = tmpvar_54;
  highp vec4 tmpvar_55;
  mediump float fogFactor_56;
  mediump vec3 fogColor_57;
  mediump vec3 heightFogColor_58;
  highp float HeightFogFactor_59;
  mediump vec3 atomesphereFogColor_60;
  mediump float h_61;
  highp float linearFogDensity_62;
  mediump float len_63;
  highp float tmpvar_64;
  tmpvar_64 = sqrt(dot (tmpvar_20, tmpvar_20));
  len_63 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (((len_63 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_62 = (tmpvar_65 * (2.0 - tmpvar_65));
  if ((len_63 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_62 = (linearFogDensity_62 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_66;
  tmpvar_66 = min (pow (linearFogDensity_62, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_62 = tmpvar_66;
  mediump float tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((tmpvar_19.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_67 = tmpvar_68;
  h_61 = (tmpvar_67 * (2.0 - tmpvar_67));
  highp vec3 tmpvar_69;
  tmpvar_69 = (_HeigtFogColBase3.xyz + (h_61 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_60 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = mix (atomesphereFogColor_60, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_63 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_60 = tmpvar_70;
  mediump float tmpvar_71;
  mediump float r_72;
  mediump float f_73;
  mediump float u_74;
  mediump float l_75;
  mediump float fogInt_76;
  fogInt_76 = 1.0;
  highp float tmpvar_77;
  tmpvar_77 = (_HeigtFogParams3.x * tmpvar_20.y);
  highp float tmpvar_78;
  tmpvar_78 = abs(tmpvar_77);
  if ((tmpvar_78 > 0.01)) {
    highp float tmpvar_79;
    tmpvar_79 = exp(-(tmpvar_77));
    fogInt_76 = ((1.0 - tmpvar_79) / tmpvar_77);
  };
  highp float tmpvar_80;
  tmpvar_80 = sqrt(dot (tmpvar_20, tmpvar_20));
  l_75 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (l_75 * _HeigtFogParams3.y);
  u_74 = tmpvar_81;
  fogInt_76 = (fogInt_76 * u_74);
  mediump float tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (((l_75 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_82 = tmpvar_83;
  r_72 = (tmpvar_82 * (2.0 - tmpvar_82));
  r_72 = ((r_72 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_73 = ((1.0 - clamp (
    exp2(-(fogInt_76))
  , 0.0, 1.0)) * r_72);
  highp float tmpvar_84;
  tmpvar_84 = min (f_73, _HeigtFogColBase3.w);
  tmpvar_71 = tmpvar_84;
  HeightFogFactor_59 = tmpvar_71;
  highp vec3 tmpvar_85;
  tmpvar_85 = _Mihoyo_FogColor3.xyz;
  heightFogColor_58 = tmpvar_85;
  highp vec3 tmpvar_86;
  tmpvar_86 = ((heightFogColor_58 * HeightFogFactor_59) + ((atomesphereFogColor_60 * tmpvar_66) * (1.0 - HeightFogFactor_59)));
  fogColor_57 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = ((1.0 - tmpvar_66) * (1.0 - HeightFogFactor_59));
  fogFactor_56 = tmpvar_87;
  mediump vec4 tmpvar_88;
  tmpvar_88.xyz = fogColor_57;
  tmpvar_88.w = fogFactor_56;
  tmpvar_55 = tmpvar_88;
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (tmpvar_21, tmpvar_55, vec4(_LerpFactor));
  tmpvar_18 = tmpvar_89;
  tmpvar_11.w = 1.0;
  mediump vec3 tmpvar_90;
  tmpvar_90 = tmpvar_2.xyz;
  highp vec3 norm_91;
  norm_91 = tmpvar_90;
  highp mat3 tmpvar_92;
  tmpvar_92[0] = unity_WorldToObject[0].xyz;
  tmpvar_92[1] = unity_WorldToObject[1].xyz;
  tmpvar_92[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_93;
  tmpvar_93 = normalize(normalize((norm_91 * tmpvar_92)));
  tmpvar_12 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_5.xz = (tmpvar_94.xz - ((tmpvar_94.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_5.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_95;
  tmpvar_95 = normalize((tmpvar_94.xyz - adjCamPos_5));
  tmpvar_10 = tmpvar_95;
  mediump float tmpvar_96;
  tmpvar_96 = cos(_CamRotate);
  cost_4 = tmpvar_96;
  mediump float tmpvar_97;
  tmpvar_97 = sin(_CamRotate);
  sint_3 = tmpvar_97;
  highp mat2 tmpvar_98;
  tmpvar_98[0].x = cost_4;
  tmpvar_98[0].y = -(sint_3);
  tmpvar_98[1].x = sint_3;
  tmpvar_98[1].y = cost_4;
  tmpvar_10.xz = (tmpvar_98 * tmpvar_10.xz);
  highp vec3 tmpvar_99;
  tmpvar_99 = (_WorldSpaceCameraPos - tmpvar_94.xyz);
  tmpvar_11.xyz = tmpvar_99;
  gl_Position = tmpvar_16;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_COLOR0 = tmpvar_1;
  xlv_COLOR1 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_2.xyz;
  xlv_TEXCOORD2 = tmpvar_10;
  xlv_TEXCOORD4 = tmpvar_11;
  xlv_TEXCOORD5 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  finalColor_2.xyz = (xlv_COLOR1.xyz + (finalColor_2.xyz * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _glesNormal;
  highp float sint_3;
  highp float cost_4;
  highp vec3 adjCamPos_5;
  mediump vec4 offsetVertex_6;
  mediump float normalOut_7;
  highp vec4 offset_8;
  mediump vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  mediump vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  offset_8.yzw = vec3(0.0, 0.0, 0.0);
  offset_8.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_8.y = offset_8.x;
  highp float tmpvar_13;
  tmpvar_13 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_7 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = ((_glesVertex + (
    (offset_8 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_2 * normalOut_7) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_6 = tmpvar_14;
  highp vec4 pos_15;
  pos_15 = offsetVertex_6;
  highp vec4 tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = pos_15.xyz;
  tmpvar_16 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_17));
  tmpvar_9.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_9.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_21;
  mediump float fogFactor_22;
  mediump vec3 fogColor_23;
  mediump vec3 heightFogColor_24;
  highp float HeightFogFactor_25;
  mediump vec3 atomesphereFogColor_26;
  mediump float h_27;
  highp float linearFogDensity_28;
  mediump float len_29;
  highp float tmpvar_30;
  tmpvar_30 = sqrt(dot (tmpvar_20, tmpvar_20));
  len_29 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (((len_29 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_28 = (tmpvar_31 * (2.0 - tmpvar_31));
  if ((len_29 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_28 = (linearFogDensity_28 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_32;
  tmpvar_32 = min (pow (linearFogDensity_28, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_28 = tmpvar_32;
  mediump float tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((tmpvar_19.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_33 = tmpvar_34;
  h_27 = (tmpvar_33 * (2.0 - tmpvar_33));
  highp vec3 tmpvar_35;
  tmpvar_35 = (_HeigtFogColBase2.xyz + (h_27 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_26 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (atomesphereFogColor_26, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_29 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_26 = tmpvar_36;
  mediump float tmpvar_37;
  mediump float r_38;
  mediump float f_39;
  mediump float u_40;
  mediump float l_41;
  mediump float fogInt_42;
  fogInt_42 = 1.0;
  highp float tmpvar_43;
  tmpvar_43 = (_HeigtFogParams2.x * tmpvar_20.y);
  highp float tmpvar_44;
  tmpvar_44 = abs(tmpvar_43);
  if ((tmpvar_44 > 0.01)) {
    highp float tmpvar_45;
    tmpvar_45 = exp(-(tmpvar_43));
    fogInt_42 = ((1.0 - tmpvar_45) / tmpvar_43);
  };
  highp float tmpvar_46;
  tmpvar_46 = sqrt(dot (tmpvar_20, tmpvar_20));
  l_41 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = (l_41 * _HeigtFogParams2.y);
  u_40 = tmpvar_47;
  fogInt_42 = (fogInt_42 * u_40);
  mediump float tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((l_41 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_48 = tmpvar_49;
  r_38 = (tmpvar_48 * (2.0 - tmpvar_48));
  r_38 = ((r_38 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_39 = ((1.0 - clamp (
    exp2(-(fogInt_42))
  , 0.0, 1.0)) * r_38);
  highp float tmpvar_50;
  tmpvar_50 = min (f_39, _HeigtFogColBase2.w);
  tmpvar_37 = tmpvar_50;
  HeightFogFactor_25 = tmpvar_37;
  highp vec3 tmpvar_51;
  tmpvar_51 = _Mihoyo_FogColor2.xyz;
  heightFogColor_24 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = ((heightFogColor_24 * HeightFogFactor_25) + ((atomesphereFogColor_26 * tmpvar_32) * (1.0 - HeightFogFactor_25)));
  fogColor_23 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = ((1.0 - tmpvar_32) * (1.0 - HeightFogFactor_25));
  fogFactor_22 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54.xyz = fogColor_23;
  tmpvar_54.w = fogFactor_22;
  tmpvar_21 = tmpvar_54;
  highp vec4 tmpvar_55;
  mediump float fogFactor_56;
  mediump vec3 fogColor_57;
  mediump vec3 heightFogColor_58;
  highp float HeightFogFactor_59;
  mediump vec3 atomesphereFogColor_60;
  mediump float h_61;
  highp float linearFogDensity_62;
  mediump float len_63;
  highp float tmpvar_64;
  tmpvar_64 = sqrt(dot (tmpvar_20, tmpvar_20));
  len_63 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (((len_63 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_62 = (tmpvar_65 * (2.0 - tmpvar_65));
  if ((len_63 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_62 = (linearFogDensity_62 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_66;
  tmpvar_66 = min (pow (linearFogDensity_62, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_62 = tmpvar_66;
  mediump float tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((tmpvar_19.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_67 = tmpvar_68;
  h_61 = (tmpvar_67 * (2.0 - tmpvar_67));
  highp vec3 tmpvar_69;
  tmpvar_69 = (_HeigtFogColBase3.xyz + (h_61 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_60 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = mix (atomesphereFogColor_60, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_63 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_60 = tmpvar_70;
  mediump float tmpvar_71;
  mediump float r_72;
  mediump float f_73;
  mediump float u_74;
  mediump float l_75;
  mediump float fogInt_76;
  fogInt_76 = 1.0;
  highp float tmpvar_77;
  tmpvar_77 = (_HeigtFogParams3.x * tmpvar_20.y);
  highp float tmpvar_78;
  tmpvar_78 = abs(tmpvar_77);
  if ((tmpvar_78 > 0.01)) {
    highp float tmpvar_79;
    tmpvar_79 = exp(-(tmpvar_77));
    fogInt_76 = ((1.0 - tmpvar_79) / tmpvar_77);
  };
  highp float tmpvar_80;
  tmpvar_80 = sqrt(dot (tmpvar_20, tmpvar_20));
  l_75 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (l_75 * _HeigtFogParams3.y);
  u_74 = tmpvar_81;
  fogInt_76 = (fogInt_76 * u_74);
  mediump float tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (((l_75 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_82 = tmpvar_83;
  r_72 = (tmpvar_82 * (2.0 - tmpvar_82));
  r_72 = ((r_72 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_73 = ((1.0 - clamp (
    exp2(-(fogInt_76))
  , 0.0, 1.0)) * r_72);
  highp float tmpvar_84;
  tmpvar_84 = min (f_73, _HeigtFogColBase3.w);
  tmpvar_71 = tmpvar_84;
  HeightFogFactor_59 = tmpvar_71;
  highp vec3 tmpvar_85;
  tmpvar_85 = _Mihoyo_FogColor3.xyz;
  heightFogColor_58 = tmpvar_85;
  highp vec3 tmpvar_86;
  tmpvar_86 = ((heightFogColor_58 * HeightFogFactor_59) + ((atomesphereFogColor_60 * tmpvar_66) * (1.0 - HeightFogFactor_59)));
  fogColor_57 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = ((1.0 - tmpvar_66) * (1.0 - HeightFogFactor_59));
  fogFactor_56 = tmpvar_87;
  mediump vec4 tmpvar_88;
  tmpvar_88.xyz = fogColor_57;
  tmpvar_88.w = fogFactor_56;
  tmpvar_55 = tmpvar_88;
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (tmpvar_21, tmpvar_55, vec4(_LerpFactor));
  tmpvar_18 = tmpvar_89;
  tmpvar_11.w = 1.0;
  mediump vec3 tmpvar_90;
  tmpvar_90 = tmpvar_2.xyz;
  highp vec3 norm_91;
  norm_91 = tmpvar_90;
  highp mat3 tmpvar_92;
  tmpvar_92[0] = unity_WorldToObject[0].xyz;
  tmpvar_92[1] = unity_WorldToObject[1].xyz;
  tmpvar_92[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_93;
  tmpvar_93 = normalize(normalize((norm_91 * tmpvar_92)));
  tmpvar_12 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_5.xz = (tmpvar_94.xz - ((tmpvar_94.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_5.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_95;
  tmpvar_95 = normalize((tmpvar_94.xyz - adjCamPos_5));
  tmpvar_10 = tmpvar_95;
  mediump float tmpvar_96;
  tmpvar_96 = cos(_CamRotate);
  cost_4 = tmpvar_96;
  mediump float tmpvar_97;
  tmpvar_97 = sin(_CamRotate);
  sint_3 = tmpvar_97;
  highp mat2 tmpvar_98;
  tmpvar_98[0].x = cost_4;
  tmpvar_98[0].y = -(sint_3);
  tmpvar_98[1].x = sint_3;
  tmpvar_98[1].y = cost_4;
  tmpvar_10.xz = (tmpvar_98 * tmpvar_10.xz);
  highp vec3 tmpvar_99;
  tmpvar_99 = (_WorldSpaceCameraPos - tmpvar_94.xyz);
  tmpvar_11.xyz = tmpvar_99;
  gl_Position = tmpvar_16;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_COLOR0 = tmpvar_1;
  xlv_COLOR1 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_2.xyz;
  xlv_TEXCOORD2 = tmpvar_10;
  xlv_TEXCOORD4 = tmpvar_11;
  xlv_TEXCOORD5 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  finalColor_2.xyz = (xlv_COLOR1.xyz + (finalColor_2.xyz * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "UseNormalMap" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_WorldTransformParams;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _FogStartDistance;
uniform highp float _FogEndDistance;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1.w = 0.0;
  tmpvar_1.xyz = _glesNormal;
  mediump vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  tmpvar_2 = _glesColor;
  tmpvar_3 = _glesTANGENT;
  highp float sint_4;
  highp float cost_5;
  highp vec3 adjCamPos_6;
  mediump vec4 offsetVertex_7;
  mediump float normalOut_8;
  highp vec4 offset_9;
  highp vec4 tmpvar_10;
  mediump vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  mediump vec4 tmpvar_13;
  offset_9.yzw = vec3(0.0, 0.0, 0.0);
  offset_9.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_9.y = offset_9.x;
  highp float tmpvar_14;
  tmpvar_14 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_8 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = ((_glesVertex + (
    (offset_9 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_1 * normalOut_8) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_7 = tmpvar_15;
  highp vec4 pos_16;
  pos_16 = offsetVertex_7;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = pos_16.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_17));
  tmpvar_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_11.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_18;
  if ((_FogColorNear.w > 0.5)) {
    mediump vec4 fogColor_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_21;
    tmpvar_21 = max (0.0, (sqrt(
      dot (tmpvar_20, tmpvar_20)
    ) - _FogStartDistance));
    highp float tmpvar_22;
    tmpvar_22 = min (max ((
      (1.0 - exp((-(
        (_FogIntensity * tmpvar_21)
      ) * (_FogIntensity * tmpvar_21))))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_23;
    tmpvar_23 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3(clamp (exp(
      (-((_FogColorIntensity * tmpvar_21)) * (_FogColorIntensity * tmpvar_21))
    ), 0.0, 1.0)));
    fogColor_19.xyz = tmpvar_23;
    fogColor_19.w = tmpvar_22;
    tmpvar_18 = fogColor_19;
  } else {
    mediump vec4 fogColor_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_26;
    tmpvar_26 = max (0.0, (sqrt(
      dot (tmpvar_25, tmpvar_25)
    ) - _FogStartDistance));
    highp float tmpvar_27;
    highp float tmpvar_28;
    tmpvar_28 = (_FogEndDistance - _FogStartDistance);
    tmpvar_27 = min (max ((
      (((500.0 * _FogIntensity) * tmpvar_26) / max (0.1, tmpvar_28))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_29;
    tmpvar_29 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3((1.0 - clamp (
      (((1000.0 * _FogColorIntensity) * tmpvar_26) / max (0.1, tmpvar_28))
    , 0.0, 1.0))));
    fogColor_24.xyz = tmpvar_29;
    fogColor_24.w = tmpvar_27;
    tmpvar_18 = fogColor_24;
  };
  tmpvar_13.w = 1.0;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_1.xyz;
  mediump vec4 wTangent_31;
  mediump vec3 wNormal_32;
  highp vec3 norm_33;
  norm_33 = tmpvar_30;
  highp mat3 tmpvar_34;
  tmpvar_34[0] = unity_WorldToObject[0].xyz;
  tmpvar_34[1] = unity_WorldToObject[1].xyz;
  tmpvar_34[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((norm_33 * tmpvar_34));
  wNormal_32 = tmpvar_35;
  highp vec3 dir_36;
  dir_36 = tmpvar_3.xyz;
  highp mat3 tmpvar_37;
  tmpvar_37[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_37[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_37[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((tmpvar_37 * dir_36));
  wTangent_31.xyz = tmpvar_38;
  wTangent_31.w = (_glesTANGENT.w * unity_WorldTransformParams.w);
  mediump vec3 tmpvar_39;
  tmpvar_39 = (((wNormal_32.yzx * wTangent_31.zxy) - (wNormal_32.zxy * wTangent_31.yzx)) * wTangent_31.w);
  mediump vec3 tmpvar_40;
  tmpvar_40.x = wTangent_31.x;
  tmpvar_40.y = tmpvar_39.x;
  tmpvar_40.z = wNormal_32.x;
  mediump vec3 tmpvar_41;
  tmpvar_41.x = wTangent_31.y;
  tmpvar_41.y = tmpvar_39.y;
  tmpvar_41.z = wNormal_32.y;
  mediump vec3 tmpvar_42;
  tmpvar_42.x = wTangent_31.z;
  tmpvar_42.y = tmpvar_39.z;
  tmpvar_42.z = wNormal_32.z;
  highp vec4 tmpvar_43;
  tmpvar_43 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_6.xz = (tmpvar_43.xz - ((tmpvar_43.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_6.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize((tmpvar_43.xyz - adjCamPos_6));
  tmpvar_12 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = cos(_CamRotate);
  cost_5 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = sin(_CamRotate);
  sint_4 = tmpvar_46;
  highp mat2 tmpvar_47;
  tmpvar_47[0].x = cost_5;
  tmpvar_47[0].y = -(sint_4);
  tmpvar_47[1].x = sint_4;
  tmpvar_47[1].y = cost_5;
  tmpvar_12.xz = (tmpvar_47 * tmpvar_12.xz);
  highp vec3 tmpvar_48;
  tmpvar_48 = (_WorldSpaceCameraPos - tmpvar_43.xyz);
  tmpvar_13.xyz = tmpvar_48;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_COLOR0 = tmpvar_2;
  xlv_COLOR1 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_1.xyz;
  xlv_TEXCOORD2 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_40;
  xlv_TEXCOORD6 = tmpvar_41;
  xlv_TEXCOORD7 = tmpvar_42;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "UseNormalMap" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_WorldTransformParams;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _FogStartDistance;
uniform highp float _FogEndDistance;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1.w = 0.0;
  tmpvar_1.xyz = _glesNormal;
  mediump vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  tmpvar_2 = _glesColor;
  tmpvar_3 = _glesTANGENT;
  highp float sint_4;
  highp float cost_5;
  highp vec3 adjCamPos_6;
  mediump vec4 offsetVertex_7;
  mediump float normalOut_8;
  highp vec4 offset_9;
  highp vec4 tmpvar_10;
  mediump vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  mediump vec4 tmpvar_13;
  offset_9.yzw = vec3(0.0, 0.0, 0.0);
  offset_9.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_9.y = offset_9.x;
  highp float tmpvar_14;
  tmpvar_14 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_8 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = ((_glesVertex + (
    (offset_9 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_1 * normalOut_8) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_7 = tmpvar_15;
  highp vec4 pos_16;
  pos_16 = offsetVertex_7;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = pos_16.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_17));
  tmpvar_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_11.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_18;
  if ((_FogColorNear.w > 0.5)) {
    mediump vec4 fogColor_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_21;
    tmpvar_21 = max (0.0, (sqrt(
      dot (tmpvar_20, tmpvar_20)
    ) - _FogStartDistance));
    highp float tmpvar_22;
    tmpvar_22 = min (max ((
      (1.0 - exp((-(
        (_FogIntensity * tmpvar_21)
      ) * (_FogIntensity * tmpvar_21))))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_23;
    tmpvar_23 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3(clamp (exp(
      (-((_FogColorIntensity * tmpvar_21)) * (_FogColorIntensity * tmpvar_21))
    ), 0.0, 1.0)));
    fogColor_19.xyz = tmpvar_23;
    fogColor_19.w = tmpvar_22;
    tmpvar_18 = fogColor_19;
  } else {
    mediump vec4 fogColor_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_26;
    tmpvar_26 = max (0.0, (sqrt(
      dot (tmpvar_25, tmpvar_25)
    ) - _FogStartDistance));
    highp float tmpvar_27;
    highp float tmpvar_28;
    tmpvar_28 = (_FogEndDistance - _FogStartDistance);
    tmpvar_27 = min (max ((
      (((500.0 * _FogIntensity) * tmpvar_26) / max (0.1, tmpvar_28))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_29;
    tmpvar_29 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3((1.0 - clamp (
      (((1000.0 * _FogColorIntensity) * tmpvar_26) / max (0.1, tmpvar_28))
    , 0.0, 1.0))));
    fogColor_24.xyz = tmpvar_29;
    fogColor_24.w = tmpvar_27;
    tmpvar_18 = fogColor_24;
  };
  tmpvar_13.w = 1.0;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_1.xyz;
  mediump vec4 wTangent_31;
  mediump vec3 wNormal_32;
  highp vec3 norm_33;
  norm_33 = tmpvar_30;
  highp mat3 tmpvar_34;
  tmpvar_34[0] = unity_WorldToObject[0].xyz;
  tmpvar_34[1] = unity_WorldToObject[1].xyz;
  tmpvar_34[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((norm_33 * tmpvar_34));
  wNormal_32 = tmpvar_35;
  highp vec3 dir_36;
  dir_36 = tmpvar_3.xyz;
  highp mat3 tmpvar_37;
  tmpvar_37[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_37[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_37[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((tmpvar_37 * dir_36));
  wTangent_31.xyz = tmpvar_38;
  wTangent_31.w = (_glesTANGENT.w * unity_WorldTransformParams.w);
  mediump vec3 tmpvar_39;
  tmpvar_39 = (((wNormal_32.yzx * wTangent_31.zxy) - (wNormal_32.zxy * wTangent_31.yzx)) * wTangent_31.w);
  mediump vec3 tmpvar_40;
  tmpvar_40.x = wTangent_31.x;
  tmpvar_40.y = tmpvar_39.x;
  tmpvar_40.z = wNormal_32.x;
  mediump vec3 tmpvar_41;
  tmpvar_41.x = wTangent_31.y;
  tmpvar_41.y = tmpvar_39.y;
  tmpvar_41.z = wNormal_32.y;
  mediump vec3 tmpvar_42;
  tmpvar_42.x = wTangent_31.z;
  tmpvar_42.y = tmpvar_39.z;
  tmpvar_42.z = wNormal_32.z;
  highp vec4 tmpvar_43;
  tmpvar_43 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_6.xz = (tmpvar_43.xz - ((tmpvar_43.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_6.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize((tmpvar_43.xyz - adjCamPos_6));
  tmpvar_12 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = cos(_CamRotate);
  cost_5 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = sin(_CamRotate);
  sint_4 = tmpvar_46;
  highp mat2 tmpvar_47;
  tmpvar_47[0].x = cost_5;
  tmpvar_47[0].y = -(sint_4);
  tmpvar_47[1].x = sint_4;
  tmpvar_47[1].y = cost_5;
  tmpvar_12.xz = (tmpvar_47 * tmpvar_12.xz);
  highp vec3 tmpvar_48;
  tmpvar_48 = (_WorldSpaceCameraPos - tmpvar_43.xyz);
  tmpvar_13.xyz = tmpvar_48;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_COLOR0 = tmpvar_2;
  xlv_COLOR1 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_1.xyz;
  xlv_TEXCOORD2 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_40;
  xlv_TEXCOORD6 = tmpvar_41;
  xlv_TEXCOORD7 = tmpvar_42;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "UseNormalMap" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_WorldTransformParams;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _FogStartDistance;
uniform highp float _FogEndDistance;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1.w = 0.0;
  tmpvar_1.xyz = _glesNormal;
  mediump vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  tmpvar_2 = _glesColor;
  tmpvar_3 = _glesTANGENT;
  highp float sint_4;
  highp float cost_5;
  highp vec3 adjCamPos_6;
  mediump vec4 offsetVertex_7;
  mediump float normalOut_8;
  highp vec4 offset_9;
  highp vec4 tmpvar_10;
  mediump vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  mediump vec4 tmpvar_13;
  offset_9.yzw = vec3(0.0, 0.0, 0.0);
  offset_9.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_9.y = offset_9.x;
  highp float tmpvar_14;
  tmpvar_14 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_8 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = ((_glesVertex + (
    (offset_9 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_1 * normalOut_8) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_7 = tmpvar_15;
  highp vec4 pos_16;
  pos_16 = offsetVertex_7;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = pos_16.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_17));
  tmpvar_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_11.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_18;
  if ((_FogColorNear.w > 0.5)) {
    mediump vec4 fogColor_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_21;
    tmpvar_21 = max (0.0, (sqrt(
      dot (tmpvar_20, tmpvar_20)
    ) - _FogStartDistance));
    highp float tmpvar_22;
    tmpvar_22 = min (max ((
      (1.0 - exp((-(
        (_FogIntensity * tmpvar_21)
      ) * (_FogIntensity * tmpvar_21))))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_23;
    tmpvar_23 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3(clamp (exp(
      (-((_FogColorIntensity * tmpvar_21)) * (_FogColorIntensity * tmpvar_21))
    ), 0.0, 1.0)));
    fogColor_19.xyz = tmpvar_23;
    fogColor_19.w = tmpvar_22;
    tmpvar_18 = fogColor_19;
  } else {
    mediump vec4 fogColor_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_26;
    tmpvar_26 = max (0.0, (sqrt(
      dot (tmpvar_25, tmpvar_25)
    ) - _FogStartDistance));
    highp float tmpvar_27;
    highp float tmpvar_28;
    tmpvar_28 = (_FogEndDistance - _FogStartDistance);
    tmpvar_27 = min (max ((
      (((500.0 * _FogIntensity) * tmpvar_26) / max (0.1, tmpvar_28))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_29;
    tmpvar_29 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3((1.0 - clamp (
      (((1000.0 * _FogColorIntensity) * tmpvar_26) / max (0.1, tmpvar_28))
    , 0.0, 1.0))));
    fogColor_24.xyz = tmpvar_29;
    fogColor_24.w = tmpvar_27;
    tmpvar_18 = fogColor_24;
  };
  tmpvar_13.w = 1.0;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_1.xyz;
  mediump vec4 wTangent_31;
  mediump vec3 wNormal_32;
  highp vec3 norm_33;
  norm_33 = tmpvar_30;
  highp mat3 tmpvar_34;
  tmpvar_34[0] = unity_WorldToObject[0].xyz;
  tmpvar_34[1] = unity_WorldToObject[1].xyz;
  tmpvar_34[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((norm_33 * tmpvar_34));
  wNormal_32 = tmpvar_35;
  highp vec3 dir_36;
  dir_36 = tmpvar_3.xyz;
  highp mat3 tmpvar_37;
  tmpvar_37[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_37[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_37[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((tmpvar_37 * dir_36));
  wTangent_31.xyz = tmpvar_38;
  wTangent_31.w = (_glesTANGENT.w * unity_WorldTransformParams.w);
  mediump vec3 tmpvar_39;
  tmpvar_39 = (((wNormal_32.yzx * wTangent_31.zxy) - (wNormal_32.zxy * wTangent_31.yzx)) * wTangent_31.w);
  mediump vec3 tmpvar_40;
  tmpvar_40.x = wTangent_31.x;
  tmpvar_40.y = tmpvar_39.x;
  tmpvar_40.z = wNormal_32.x;
  mediump vec3 tmpvar_41;
  tmpvar_41.x = wTangent_31.y;
  tmpvar_41.y = tmpvar_39.y;
  tmpvar_41.z = wNormal_32.y;
  mediump vec3 tmpvar_42;
  tmpvar_42.x = wTangent_31.z;
  tmpvar_42.y = tmpvar_39.z;
  tmpvar_42.z = wNormal_32.z;
  highp vec4 tmpvar_43;
  tmpvar_43 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_6.xz = (tmpvar_43.xz - ((tmpvar_43.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_6.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize((tmpvar_43.xyz - adjCamPos_6));
  tmpvar_12 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = cos(_CamRotate);
  cost_5 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = sin(_CamRotate);
  sint_4 = tmpvar_46;
  highp mat2 tmpvar_47;
  tmpvar_47[0].x = cost_5;
  tmpvar_47[0].y = -(sint_4);
  tmpvar_47[1].x = sint_4;
  tmpvar_47[1].y = cost_5;
  tmpvar_12.xz = (tmpvar_47 * tmpvar_12.xz);
  highp vec3 tmpvar_48;
  tmpvar_48 = (_WorldSpaceCameraPos - tmpvar_43.xyz);
  tmpvar_13.xyz = tmpvar_48;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_COLOR0 = tmpvar_2;
  xlv_COLOR1 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_1.xyz;
  xlv_TEXCOORD2 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_40;
  xlv_TEXCOORD6 = tmpvar_41;
  xlv_TEXCOORD7 = tmpvar_42;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "UseNormalMap" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_WorldTransformParams;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _FogStartDistance;
uniform highp float _FogEndDistance;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1.w = 0.0;
  tmpvar_1.xyz = _glesNormal;
  mediump vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  tmpvar_2 = _glesColor;
  tmpvar_3 = _glesTANGENT;
  highp float sint_4;
  highp float cost_5;
  highp vec3 adjCamPos_6;
  mediump vec4 offsetVertex_7;
  mediump float normalOut_8;
  highp vec4 offset_9;
  highp vec4 tmpvar_10;
  mediump vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  mediump vec4 tmpvar_13;
  offset_9.yzw = vec3(0.0, 0.0, 0.0);
  offset_9.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_9.y = offset_9.x;
  highp float tmpvar_14;
  tmpvar_14 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_8 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = ((_glesVertex + (
    (offset_9 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_1 * normalOut_8) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_7 = tmpvar_15;
  highp vec4 pos_16;
  pos_16 = offsetVertex_7;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = pos_16.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_17));
  tmpvar_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_11.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_18;
  if ((_FogColorNear.w > 0.5)) {
    mediump vec4 fogColor_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_21;
    tmpvar_21 = max (0.0, (sqrt(
      dot (tmpvar_20, tmpvar_20)
    ) - _FogStartDistance));
    highp float tmpvar_22;
    tmpvar_22 = min (max ((
      (1.0 - exp((-(
        (_FogIntensity * tmpvar_21)
      ) * (_FogIntensity * tmpvar_21))))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_23;
    tmpvar_23 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3(clamp (exp(
      (-((_FogColorIntensity * tmpvar_21)) * (_FogColorIntensity * tmpvar_21))
    ), 0.0, 1.0)));
    fogColor_19.xyz = tmpvar_23;
    fogColor_19.w = tmpvar_22;
    tmpvar_18 = fogColor_19;
  } else {
    mediump vec4 fogColor_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_26;
    tmpvar_26 = max (0.0, (sqrt(
      dot (tmpvar_25, tmpvar_25)
    ) - _FogStartDistance));
    highp float tmpvar_27;
    highp float tmpvar_28;
    tmpvar_28 = (_FogEndDistance - _FogStartDistance);
    tmpvar_27 = min (max ((
      (((500.0 * _FogIntensity) * tmpvar_26) / max (0.1, tmpvar_28))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_29;
    tmpvar_29 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3((1.0 - clamp (
      (((1000.0 * _FogColorIntensity) * tmpvar_26) / max (0.1, tmpvar_28))
    , 0.0, 1.0))));
    fogColor_24.xyz = tmpvar_29;
    fogColor_24.w = tmpvar_27;
    tmpvar_18 = fogColor_24;
  };
  tmpvar_13.w = 1.0;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_1.xyz;
  mediump vec4 wTangent_31;
  mediump vec3 wNormal_32;
  highp vec3 norm_33;
  norm_33 = tmpvar_30;
  highp mat3 tmpvar_34;
  tmpvar_34[0] = unity_WorldToObject[0].xyz;
  tmpvar_34[1] = unity_WorldToObject[1].xyz;
  tmpvar_34[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((norm_33 * tmpvar_34));
  wNormal_32 = tmpvar_35;
  highp vec3 dir_36;
  dir_36 = tmpvar_3.xyz;
  highp mat3 tmpvar_37;
  tmpvar_37[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_37[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_37[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((tmpvar_37 * dir_36));
  wTangent_31.xyz = tmpvar_38;
  wTangent_31.w = (_glesTANGENT.w * unity_WorldTransformParams.w);
  mediump vec3 tmpvar_39;
  tmpvar_39 = (((wNormal_32.yzx * wTangent_31.zxy) - (wNormal_32.zxy * wTangent_31.yzx)) * wTangent_31.w);
  mediump vec3 tmpvar_40;
  tmpvar_40.x = wTangent_31.x;
  tmpvar_40.y = tmpvar_39.x;
  tmpvar_40.z = wNormal_32.x;
  mediump vec3 tmpvar_41;
  tmpvar_41.x = wTangent_31.y;
  tmpvar_41.y = tmpvar_39.y;
  tmpvar_41.z = wNormal_32.y;
  mediump vec3 tmpvar_42;
  tmpvar_42.x = wTangent_31.z;
  tmpvar_42.y = tmpvar_39.z;
  tmpvar_42.z = wNormal_32.z;
  highp vec4 tmpvar_43;
  tmpvar_43 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_6.xz = (tmpvar_43.xz - ((tmpvar_43.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_6.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize((tmpvar_43.xyz - adjCamPos_6));
  tmpvar_12 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = cos(_CamRotate);
  cost_5 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = sin(_CamRotate);
  sint_4 = tmpvar_46;
  highp mat2 tmpvar_47;
  tmpvar_47[0].x = cost_5;
  tmpvar_47[0].y = -(sint_4);
  tmpvar_47[1].x = sint_4;
  tmpvar_47[1].y = cost_5;
  tmpvar_12.xz = (tmpvar_47 * tmpvar_12.xz);
  highp vec3 tmpvar_48;
  tmpvar_48 = (_WorldSpaceCameraPos - tmpvar_43.xyz);
  tmpvar_13.xyz = tmpvar_48;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_COLOR0 = tmpvar_2;
  xlv_COLOR1 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_1.xyz;
  xlv_TEXCOORD2 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_40;
  xlv_TEXCOORD6 = tmpvar_41;
  xlv_TEXCOORD7 = tmpvar_42;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "UseNormalMap" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_WorldTransformParams;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _FogStartDistance;
uniform highp float _FogEndDistance;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1.w = 0.0;
  tmpvar_1.xyz = _glesNormal;
  mediump vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  tmpvar_2 = _glesColor;
  tmpvar_3 = _glesTANGENT;
  highp float sint_4;
  highp float cost_5;
  highp vec3 adjCamPos_6;
  mediump vec4 offsetVertex_7;
  mediump float normalOut_8;
  highp vec4 offset_9;
  highp vec4 tmpvar_10;
  mediump vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  mediump vec4 tmpvar_13;
  offset_9.yzw = vec3(0.0, 0.0, 0.0);
  offset_9.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_9.y = offset_9.x;
  highp float tmpvar_14;
  tmpvar_14 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_8 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = ((_glesVertex + (
    (offset_9 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_1 * normalOut_8) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_7 = tmpvar_15;
  highp vec4 pos_16;
  pos_16 = offsetVertex_7;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = pos_16.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_17));
  tmpvar_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_11.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_18;
  if ((_FogColorNear.w > 0.5)) {
    mediump vec4 fogColor_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_21;
    tmpvar_21 = max (0.0, (sqrt(
      dot (tmpvar_20, tmpvar_20)
    ) - _FogStartDistance));
    highp float tmpvar_22;
    tmpvar_22 = min (max ((
      (1.0 - exp((-(
        (_FogIntensity * tmpvar_21)
      ) * (_FogIntensity * tmpvar_21))))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_23;
    tmpvar_23 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3(clamp (exp(
      (-((_FogColorIntensity * tmpvar_21)) * (_FogColorIntensity * tmpvar_21))
    ), 0.0, 1.0)));
    fogColor_19.xyz = tmpvar_23;
    fogColor_19.w = tmpvar_22;
    tmpvar_18 = fogColor_19;
  } else {
    mediump vec4 fogColor_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_26;
    tmpvar_26 = max (0.0, (sqrt(
      dot (tmpvar_25, tmpvar_25)
    ) - _FogStartDistance));
    highp float tmpvar_27;
    highp float tmpvar_28;
    tmpvar_28 = (_FogEndDistance - _FogStartDistance);
    tmpvar_27 = min (max ((
      (((500.0 * _FogIntensity) * tmpvar_26) / max (0.1, tmpvar_28))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_29;
    tmpvar_29 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3((1.0 - clamp (
      (((1000.0 * _FogColorIntensity) * tmpvar_26) / max (0.1, tmpvar_28))
    , 0.0, 1.0))));
    fogColor_24.xyz = tmpvar_29;
    fogColor_24.w = tmpvar_27;
    tmpvar_18 = fogColor_24;
  };
  tmpvar_13.w = 1.0;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_1.xyz;
  mediump vec4 wTangent_31;
  mediump vec3 wNormal_32;
  highp vec3 norm_33;
  norm_33 = tmpvar_30;
  highp mat3 tmpvar_34;
  tmpvar_34[0] = unity_WorldToObject[0].xyz;
  tmpvar_34[1] = unity_WorldToObject[1].xyz;
  tmpvar_34[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((norm_33 * tmpvar_34));
  wNormal_32 = tmpvar_35;
  highp vec3 dir_36;
  dir_36 = tmpvar_3.xyz;
  highp mat3 tmpvar_37;
  tmpvar_37[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_37[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_37[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((tmpvar_37 * dir_36));
  wTangent_31.xyz = tmpvar_38;
  wTangent_31.w = (_glesTANGENT.w * unity_WorldTransformParams.w);
  mediump vec3 tmpvar_39;
  tmpvar_39 = (((wNormal_32.yzx * wTangent_31.zxy) - (wNormal_32.zxy * wTangent_31.yzx)) * wTangent_31.w);
  mediump vec3 tmpvar_40;
  tmpvar_40.x = wTangent_31.x;
  tmpvar_40.y = tmpvar_39.x;
  tmpvar_40.z = wNormal_32.x;
  mediump vec3 tmpvar_41;
  tmpvar_41.x = wTangent_31.y;
  tmpvar_41.y = tmpvar_39.y;
  tmpvar_41.z = wNormal_32.y;
  mediump vec3 tmpvar_42;
  tmpvar_42.x = wTangent_31.z;
  tmpvar_42.y = tmpvar_39.z;
  tmpvar_42.z = wNormal_32.z;
  highp vec4 tmpvar_43;
  tmpvar_43 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_6.xz = (tmpvar_43.xz - ((tmpvar_43.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_6.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize((tmpvar_43.xyz - adjCamPos_6));
  tmpvar_12 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = cos(_CamRotate);
  cost_5 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = sin(_CamRotate);
  sint_4 = tmpvar_46;
  highp mat2 tmpvar_47;
  tmpvar_47[0].x = cost_5;
  tmpvar_47[0].y = -(sint_4);
  tmpvar_47[1].x = sint_4;
  tmpvar_47[1].y = cost_5;
  tmpvar_12.xz = (tmpvar_47 * tmpvar_12.xz);
  highp vec3 tmpvar_48;
  tmpvar_48 = (_WorldSpaceCameraPos - tmpvar_43.xyz);
  tmpvar_13.xyz = tmpvar_48;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_COLOR0 = tmpvar_2;
  xlv_COLOR1 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_1.xyz;
  xlv_TEXCOORD2 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_40;
  xlv_TEXCOORD6 = tmpvar_41;
  xlv_TEXCOORD7 = tmpvar_42;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "UseNormalMap" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_WorldTransformParams;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _FogStartDistance;
uniform highp float _FogEndDistance;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1.w = 0.0;
  tmpvar_1.xyz = _glesNormal;
  mediump vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  tmpvar_2 = _glesColor;
  tmpvar_3 = _glesTANGENT;
  highp float sint_4;
  highp float cost_5;
  highp vec3 adjCamPos_6;
  mediump vec4 offsetVertex_7;
  mediump float normalOut_8;
  highp vec4 offset_9;
  highp vec4 tmpvar_10;
  mediump vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  mediump vec4 tmpvar_13;
  offset_9.yzw = vec3(0.0, 0.0, 0.0);
  offset_9.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_9.y = offset_9.x;
  highp float tmpvar_14;
  tmpvar_14 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_8 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = ((_glesVertex + (
    (offset_9 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_1 * normalOut_8) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_7 = tmpvar_15;
  highp vec4 pos_16;
  pos_16 = offsetVertex_7;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = pos_16.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_17));
  tmpvar_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_11.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_18;
  if ((_FogColorNear.w > 0.5)) {
    mediump vec4 fogColor_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_21;
    tmpvar_21 = max (0.0, (sqrt(
      dot (tmpvar_20, tmpvar_20)
    ) - _FogStartDistance));
    highp float tmpvar_22;
    tmpvar_22 = min (max ((
      (1.0 - exp((-(
        (_FogIntensity * tmpvar_21)
      ) * (_FogIntensity * tmpvar_21))))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_23;
    tmpvar_23 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3(clamp (exp(
      (-((_FogColorIntensity * tmpvar_21)) * (_FogColorIntensity * tmpvar_21))
    ), 0.0, 1.0)));
    fogColor_19.xyz = tmpvar_23;
    fogColor_19.w = tmpvar_22;
    tmpvar_18 = fogColor_19;
  } else {
    mediump vec4 fogColor_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_26;
    tmpvar_26 = max (0.0, (sqrt(
      dot (tmpvar_25, tmpvar_25)
    ) - _FogStartDistance));
    highp float tmpvar_27;
    highp float tmpvar_28;
    tmpvar_28 = (_FogEndDistance - _FogStartDistance);
    tmpvar_27 = min (max ((
      (((500.0 * _FogIntensity) * tmpvar_26) / max (0.1, tmpvar_28))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_29;
    tmpvar_29 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3((1.0 - clamp (
      (((1000.0 * _FogColorIntensity) * tmpvar_26) / max (0.1, tmpvar_28))
    , 0.0, 1.0))));
    fogColor_24.xyz = tmpvar_29;
    fogColor_24.w = tmpvar_27;
    tmpvar_18 = fogColor_24;
  };
  tmpvar_13.w = 1.0;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_1.xyz;
  mediump vec4 wTangent_31;
  mediump vec3 wNormal_32;
  highp vec3 norm_33;
  norm_33 = tmpvar_30;
  highp mat3 tmpvar_34;
  tmpvar_34[0] = unity_WorldToObject[0].xyz;
  tmpvar_34[1] = unity_WorldToObject[1].xyz;
  tmpvar_34[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((norm_33 * tmpvar_34));
  wNormal_32 = tmpvar_35;
  highp vec3 dir_36;
  dir_36 = tmpvar_3.xyz;
  highp mat3 tmpvar_37;
  tmpvar_37[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_37[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_37[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((tmpvar_37 * dir_36));
  wTangent_31.xyz = tmpvar_38;
  wTangent_31.w = (_glesTANGENT.w * unity_WorldTransformParams.w);
  mediump vec3 tmpvar_39;
  tmpvar_39 = (((wNormal_32.yzx * wTangent_31.zxy) - (wNormal_32.zxy * wTangent_31.yzx)) * wTangent_31.w);
  mediump vec3 tmpvar_40;
  tmpvar_40.x = wTangent_31.x;
  tmpvar_40.y = tmpvar_39.x;
  tmpvar_40.z = wNormal_32.x;
  mediump vec3 tmpvar_41;
  tmpvar_41.x = wTangent_31.y;
  tmpvar_41.y = tmpvar_39.y;
  tmpvar_41.z = wNormal_32.y;
  mediump vec3 tmpvar_42;
  tmpvar_42.x = wTangent_31.z;
  tmpvar_42.y = tmpvar_39.z;
  tmpvar_42.z = wNormal_32.z;
  highp vec4 tmpvar_43;
  tmpvar_43 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_6.xz = (tmpvar_43.xz - ((tmpvar_43.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_6.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize((tmpvar_43.xyz - adjCamPos_6));
  tmpvar_12 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = cos(_CamRotate);
  cost_5 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = sin(_CamRotate);
  sint_4 = tmpvar_46;
  highp mat2 tmpvar_47;
  tmpvar_47[0].x = cost_5;
  tmpvar_47[0].y = -(sint_4);
  tmpvar_47[1].x = sint_4;
  tmpvar_47[1].y = cost_5;
  tmpvar_12.xz = (tmpvar_47 * tmpvar_12.xz);
  highp vec3 tmpvar_48;
  tmpvar_48 = (_WorldSpaceCameraPos - tmpvar_43.xyz);
  tmpvar_13.xyz = tmpvar_48;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_COLOR0 = tmpvar_2;
  xlv_COLOR1 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_1.xyz;
  xlv_TEXCOORD2 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_40;
  xlv_TEXCOORD6 = tmpvar_41;
  xlv_TEXCOORD7 = tmpvar_42;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_HEIGHT" "UseNormalMap" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_WorldTransformParams;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _glesNormal;
  mediump vec4 tmpvar_3;
  tmpvar_3 = _glesTANGENT;
  highp float sint_4;
  highp float cost_5;
  highp vec3 adjCamPos_6;
  mediump vec4 offsetVertex_7;
  mediump float normalOut_8;
  highp vec4 offset_9;
  mediump vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  mediump vec4 tmpvar_12;
  offset_9.yzw = vec3(0.0, 0.0, 0.0);
  offset_9.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_9.y = offset_9.x;
  highp float tmpvar_13;
  tmpvar_13 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_8 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = ((_glesVertex + (
    (offset_9 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_2 * normalOut_8) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_7 = tmpvar_14;
  highp vec4 pos_15;
  pos_15 = offsetVertex_7;
  highp vec4 tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = pos_15.xyz;
  tmpvar_16 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_17));
  tmpvar_10.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_10.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_21;
  mediump float fogFactor_22;
  mediump vec3 fogColor_23;
  mediump vec3 heightFogColor_24;
  highp float HeightFogFactor_25;
  mediump vec3 atomesphereFogColor_26;
  mediump float h_27;
  highp float linearFogDensity_28;
  mediump float len_29;
  highp float tmpvar_30;
  tmpvar_30 = sqrt(dot (tmpvar_20, tmpvar_20));
  len_29 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (((len_29 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_28 = (tmpvar_31 * (2.0 - tmpvar_31));
  if ((len_29 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_28 = (linearFogDensity_28 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_32;
  tmpvar_32 = min (pow (linearFogDensity_28, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_28 = tmpvar_32;
  mediump float tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((tmpvar_19.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_33 = tmpvar_34;
  h_27 = (tmpvar_33 * (2.0 - tmpvar_33));
  highp vec3 tmpvar_35;
  tmpvar_35 = (_HeigtFogColBase.xyz + (h_27 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_26 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (atomesphereFogColor_26, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_29 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_26 = tmpvar_36;
  mediump float tmpvar_37;
  mediump float r_38;
  mediump float f_39;
  mediump float u_40;
  mediump float l_41;
  mediump float fogInt_42;
  fogInt_42 = 1.0;
  highp float tmpvar_43;
  tmpvar_43 = (_HeigtFogParams.x * tmpvar_20.y);
  highp float tmpvar_44;
  tmpvar_44 = abs(tmpvar_43);
  if ((tmpvar_44 > 0.01)) {
    highp float tmpvar_45;
    tmpvar_45 = exp(-(tmpvar_43));
    fogInt_42 = ((1.0 - tmpvar_45) / tmpvar_43);
  };
  highp float tmpvar_46;
  tmpvar_46 = sqrt(dot (tmpvar_20, tmpvar_20));
  l_41 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = (l_41 * _HeigtFogParams.y);
  u_40 = tmpvar_47;
  fogInt_42 = (fogInt_42 * u_40);
  mediump float tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((l_41 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_48 = tmpvar_49;
  r_38 = (tmpvar_48 * (2.0 - tmpvar_48));
  r_38 = ((r_38 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_39 = ((1.0 - clamp (
    exp2(-(fogInt_42))
  , 0.0, 1.0)) * r_38);
  highp float tmpvar_50;
  tmpvar_50 = min (f_39, _HeigtFogColBase.w);
  tmpvar_37 = tmpvar_50;
  HeightFogFactor_25 = tmpvar_37;
  highp vec3 tmpvar_51;
  tmpvar_51 = _Mihoyo_FogColor.xyz;
  heightFogColor_24 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = ((heightFogColor_24 * HeightFogFactor_25) + ((atomesphereFogColor_26 * tmpvar_32) * (1.0 - HeightFogFactor_25)));
  fogColor_23 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = ((1.0 - tmpvar_32) * (1.0 - HeightFogFactor_25));
  fogFactor_22 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54.xyz = fogColor_23;
  tmpvar_54.w = fogFactor_22;
  tmpvar_21 = tmpvar_54;
  tmpvar_18 = tmpvar_21;
  tmpvar_12.w = 1.0;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_2.xyz;
  mediump vec4 wTangent_56;
  mediump vec3 wNormal_57;
  highp vec3 norm_58;
  norm_58 = tmpvar_55;
  highp mat3 tmpvar_59;
  tmpvar_59[0] = unity_WorldToObject[0].xyz;
  tmpvar_59[1] = unity_WorldToObject[1].xyz;
  tmpvar_59[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize((norm_58 * tmpvar_59));
  wNormal_57 = tmpvar_60;
  highp vec3 dir_61;
  dir_61 = tmpvar_3.xyz;
  highp mat3 tmpvar_62;
  tmpvar_62[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_62[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_62[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((tmpvar_62 * dir_61));
  wTangent_56.xyz = tmpvar_63;
  wTangent_56.w = (_glesTANGENT.w * unity_WorldTransformParams.w);
  mediump vec3 tmpvar_64;
  tmpvar_64 = (((wNormal_57.yzx * wTangent_56.zxy) - (wNormal_57.zxy * wTangent_56.yzx)) * wTangent_56.w);
  mediump vec3 tmpvar_65;
  tmpvar_65.x = wTangent_56.x;
  tmpvar_65.y = tmpvar_64.x;
  tmpvar_65.z = wNormal_57.x;
  mediump vec3 tmpvar_66;
  tmpvar_66.x = wTangent_56.y;
  tmpvar_66.y = tmpvar_64.y;
  tmpvar_66.z = wNormal_57.y;
  mediump vec3 tmpvar_67;
  tmpvar_67.x = wTangent_56.z;
  tmpvar_67.y = tmpvar_64.z;
  tmpvar_67.z = wNormal_57.z;
  highp vec4 tmpvar_68;
  tmpvar_68 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_6.xz = (tmpvar_68.xz - ((tmpvar_68.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_6.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((tmpvar_68.xyz - adjCamPos_6));
  tmpvar_11 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = cos(_CamRotate);
  cost_5 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = sin(_CamRotate);
  sint_4 = tmpvar_71;
  highp mat2 tmpvar_72;
  tmpvar_72[0].x = cost_5;
  tmpvar_72[0].y = -(sint_4);
  tmpvar_72[1].x = sint_4;
  tmpvar_72[1].y = cost_5;
  tmpvar_11.xz = (tmpvar_72 * tmpvar_11.xz);
  highp vec3 tmpvar_73;
  tmpvar_73 = (_WorldSpaceCameraPos - tmpvar_68.xyz);
  tmpvar_12.xyz = tmpvar_73;
  gl_Position = tmpvar_16;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_COLOR0 = tmpvar_1;
  xlv_COLOR1 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_2.xyz;
  xlv_TEXCOORD2 = tmpvar_11;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_65;
  xlv_TEXCOORD6 = tmpvar_66;
  xlv_TEXCOORD7 = tmpvar_67;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  finalColor_2.xyz = (xlv_COLOR1.xyz + (finalColor_2.xyz * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_HEIGHT" "UseNormalMap" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_WorldTransformParams;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _glesNormal;
  mediump vec4 tmpvar_3;
  tmpvar_3 = _glesTANGENT;
  highp float sint_4;
  highp float cost_5;
  highp vec3 adjCamPos_6;
  mediump vec4 offsetVertex_7;
  mediump float normalOut_8;
  highp vec4 offset_9;
  mediump vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  mediump vec4 tmpvar_12;
  offset_9.yzw = vec3(0.0, 0.0, 0.0);
  offset_9.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_9.y = offset_9.x;
  highp float tmpvar_13;
  tmpvar_13 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_8 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = ((_glesVertex + (
    (offset_9 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_2 * normalOut_8) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_7 = tmpvar_14;
  highp vec4 pos_15;
  pos_15 = offsetVertex_7;
  highp vec4 tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = pos_15.xyz;
  tmpvar_16 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_17));
  tmpvar_10.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_10.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_21;
  mediump float fogFactor_22;
  mediump vec3 fogColor_23;
  mediump vec3 heightFogColor_24;
  highp float HeightFogFactor_25;
  mediump vec3 atomesphereFogColor_26;
  mediump float h_27;
  highp float linearFogDensity_28;
  mediump float len_29;
  highp float tmpvar_30;
  tmpvar_30 = sqrt(dot (tmpvar_20, tmpvar_20));
  len_29 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (((len_29 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_28 = (tmpvar_31 * (2.0 - tmpvar_31));
  if ((len_29 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_28 = (linearFogDensity_28 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_32;
  tmpvar_32 = min (pow (linearFogDensity_28, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_28 = tmpvar_32;
  mediump float tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((tmpvar_19.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_33 = tmpvar_34;
  h_27 = (tmpvar_33 * (2.0 - tmpvar_33));
  highp vec3 tmpvar_35;
  tmpvar_35 = (_HeigtFogColBase.xyz + (h_27 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_26 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (atomesphereFogColor_26, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_29 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_26 = tmpvar_36;
  mediump float tmpvar_37;
  mediump float r_38;
  mediump float f_39;
  mediump float u_40;
  mediump float l_41;
  mediump float fogInt_42;
  fogInt_42 = 1.0;
  highp float tmpvar_43;
  tmpvar_43 = (_HeigtFogParams.x * tmpvar_20.y);
  highp float tmpvar_44;
  tmpvar_44 = abs(tmpvar_43);
  if ((tmpvar_44 > 0.01)) {
    highp float tmpvar_45;
    tmpvar_45 = exp(-(tmpvar_43));
    fogInt_42 = ((1.0 - tmpvar_45) / tmpvar_43);
  };
  highp float tmpvar_46;
  tmpvar_46 = sqrt(dot (tmpvar_20, tmpvar_20));
  l_41 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = (l_41 * _HeigtFogParams.y);
  u_40 = tmpvar_47;
  fogInt_42 = (fogInt_42 * u_40);
  mediump float tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((l_41 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_48 = tmpvar_49;
  r_38 = (tmpvar_48 * (2.0 - tmpvar_48));
  r_38 = ((r_38 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_39 = ((1.0 - clamp (
    exp2(-(fogInt_42))
  , 0.0, 1.0)) * r_38);
  highp float tmpvar_50;
  tmpvar_50 = min (f_39, _HeigtFogColBase.w);
  tmpvar_37 = tmpvar_50;
  HeightFogFactor_25 = tmpvar_37;
  highp vec3 tmpvar_51;
  tmpvar_51 = _Mihoyo_FogColor.xyz;
  heightFogColor_24 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = ((heightFogColor_24 * HeightFogFactor_25) + ((atomesphereFogColor_26 * tmpvar_32) * (1.0 - HeightFogFactor_25)));
  fogColor_23 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = ((1.0 - tmpvar_32) * (1.0 - HeightFogFactor_25));
  fogFactor_22 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54.xyz = fogColor_23;
  tmpvar_54.w = fogFactor_22;
  tmpvar_21 = tmpvar_54;
  tmpvar_18 = tmpvar_21;
  tmpvar_12.w = 1.0;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_2.xyz;
  mediump vec4 wTangent_56;
  mediump vec3 wNormal_57;
  highp vec3 norm_58;
  norm_58 = tmpvar_55;
  highp mat3 tmpvar_59;
  tmpvar_59[0] = unity_WorldToObject[0].xyz;
  tmpvar_59[1] = unity_WorldToObject[1].xyz;
  tmpvar_59[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize((norm_58 * tmpvar_59));
  wNormal_57 = tmpvar_60;
  highp vec3 dir_61;
  dir_61 = tmpvar_3.xyz;
  highp mat3 tmpvar_62;
  tmpvar_62[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_62[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_62[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((tmpvar_62 * dir_61));
  wTangent_56.xyz = tmpvar_63;
  wTangent_56.w = (_glesTANGENT.w * unity_WorldTransformParams.w);
  mediump vec3 tmpvar_64;
  tmpvar_64 = (((wNormal_57.yzx * wTangent_56.zxy) - (wNormal_57.zxy * wTangent_56.yzx)) * wTangent_56.w);
  mediump vec3 tmpvar_65;
  tmpvar_65.x = wTangent_56.x;
  tmpvar_65.y = tmpvar_64.x;
  tmpvar_65.z = wNormal_57.x;
  mediump vec3 tmpvar_66;
  tmpvar_66.x = wTangent_56.y;
  tmpvar_66.y = tmpvar_64.y;
  tmpvar_66.z = wNormal_57.y;
  mediump vec3 tmpvar_67;
  tmpvar_67.x = wTangent_56.z;
  tmpvar_67.y = tmpvar_64.z;
  tmpvar_67.z = wNormal_57.z;
  highp vec4 tmpvar_68;
  tmpvar_68 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_6.xz = (tmpvar_68.xz - ((tmpvar_68.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_6.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((tmpvar_68.xyz - adjCamPos_6));
  tmpvar_11 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = cos(_CamRotate);
  cost_5 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = sin(_CamRotate);
  sint_4 = tmpvar_71;
  highp mat2 tmpvar_72;
  tmpvar_72[0].x = cost_5;
  tmpvar_72[0].y = -(sint_4);
  tmpvar_72[1].x = sint_4;
  tmpvar_72[1].y = cost_5;
  tmpvar_11.xz = (tmpvar_72 * tmpvar_11.xz);
  highp vec3 tmpvar_73;
  tmpvar_73 = (_WorldSpaceCameraPos - tmpvar_68.xyz);
  tmpvar_12.xyz = tmpvar_73;
  gl_Position = tmpvar_16;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_COLOR0 = tmpvar_1;
  xlv_COLOR1 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_2.xyz;
  xlv_TEXCOORD2 = tmpvar_11;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_65;
  xlv_TEXCOORD6 = tmpvar_66;
  xlv_TEXCOORD7 = tmpvar_67;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  finalColor_2.xyz = (xlv_COLOR1.xyz + (finalColor_2.xyz * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_HEIGHT" "UseNormalMap" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_WorldTransformParams;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _glesNormal;
  mediump vec4 tmpvar_3;
  tmpvar_3 = _glesTANGENT;
  highp float sint_4;
  highp float cost_5;
  highp vec3 adjCamPos_6;
  mediump vec4 offsetVertex_7;
  mediump float normalOut_8;
  highp vec4 offset_9;
  mediump vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  mediump vec4 tmpvar_12;
  offset_9.yzw = vec3(0.0, 0.0, 0.0);
  offset_9.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_9.y = offset_9.x;
  highp float tmpvar_13;
  tmpvar_13 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_8 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = ((_glesVertex + (
    (offset_9 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_2 * normalOut_8) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_7 = tmpvar_14;
  highp vec4 pos_15;
  pos_15 = offsetVertex_7;
  highp vec4 tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = pos_15.xyz;
  tmpvar_16 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_17));
  tmpvar_10.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_10.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_21;
  mediump float fogFactor_22;
  mediump vec3 fogColor_23;
  mediump vec3 heightFogColor_24;
  highp float HeightFogFactor_25;
  mediump vec3 atomesphereFogColor_26;
  mediump float h_27;
  highp float linearFogDensity_28;
  mediump float len_29;
  highp float tmpvar_30;
  tmpvar_30 = sqrt(dot (tmpvar_20, tmpvar_20));
  len_29 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (((len_29 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_28 = (tmpvar_31 * (2.0 - tmpvar_31));
  if ((len_29 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_28 = (linearFogDensity_28 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_32;
  tmpvar_32 = min (pow (linearFogDensity_28, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_28 = tmpvar_32;
  mediump float tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((tmpvar_19.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_33 = tmpvar_34;
  h_27 = (tmpvar_33 * (2.0 - tmpvar_33));
  highp vec3 tmpvar_35;
  tmpvar_35 = (_HeigtFogColBase.xyz + (h_27 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_26 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (atomesphereFogColor_26, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_29 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_26 = tmpvar_36;
  mediump float tmpvar_37;
  mediump float r_38;
  mediump float f_39;
  mediump float u_40;
  mediump float l_41;
  mediump float fogInt_42;
  fogInt_42 = 1.0;
  highp float tmpvar_43;
  tmpvar_43 = (_HeigtFogParams.x * tmpvar_20.y);
  highp float tmpvar_44;
  tmpvar_44 = abs(tmpvar_43);
  if ((tmpvar_44 > 0.01)) {
    highp float tmpvar_45;
    tmpvar_45 = exp(-(tmpvar_43));
    fogInt_42 = ((1.0 - tmpvar_45) / tmpvar_43);
  };
  highp float tmpvar_46;
  tmpvar_46 = sqrt(dot (tmpvar_20, tmpvar_20));
  l_41 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = (l_41 * _HeigtFogParams.y);
  u_40 = tmpvar_47;
  fogInt_42 = (fogInt_42 * u_40);
  mediump float tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((l_41 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_48 = tmpvar_49;
  r_38 = (tmpvar_48 * (2.0 - tmpvar_48));
  r_38 = ((r_38 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_39 = ((1.0 - clamp (
    exp2(-(fogInt_42))
  , 0.0, 1.0)) * r_38);
  highp float tmpvar_50;
  tmpvar_50 = min (f_39, _HeigtFogColBase.w);
  tmpvar_37 = tmpvar_50;
  HeightFogFactor_25 = tmpvar_37;
  highp vec3 tmpvar_51;
  tmpvar_51 = _Mihoyo_FogColor.xyz;
  heightFogColor_24 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = ((heightFogColor_24 * HeightFogFactor_25) + ((atomesphereFogColor_26 * tmpvar_32) * (1.0 - HeightFogFactor_25)));
  fogColor_23 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = ((1.0 - tmpvar_32) * (1.0 - HeightFogFactor_25));
  fogFactor_22 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54.xyz = fogColor_23;
  tmpvar_54.w = fogFactor_22;
  tmpvar_21 = tmpvar_54;
  tmpvar_18 = tmpvar_21;
  tmpvar_12.w = 1.0;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_2.xyz;
  mediump vec4 wTangent_56;
  mediump vec3 wNormal_57;
  highp vec3 norm_58;
  norm_58 = tmpvar_55;
  highp mat3 tmpvar_59;
  tmpvar_59[0] = unity_WorldToObject[0].xyz;
  tmpvar_59[1] = unity_WorldToObject[1].xyz;
  tmpvar_59[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize((norm_58 * tmpvar_59));
  wNormal_57 = tmpvar_60;
  highp vec3 dir_61;
  dir_61 = tmpvar_3.xyz;
  highp mat3 tmpvar_62;
  tmpvar_62[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_62[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_62[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((tmpvar_62 * dir_61));
  wTangent_56.xyz = tmpvar_63;
  wTangent_56.w = (_glesTANGENT.w * unity_WorldTransformParams.w);
  mediump vec3 tmpvar_64;
  tmpvar_64 = (((wNormal_57.yzx * wTangent_56.zxy) - (wNormal_57.zxy * wTangent_56.yzx)) * wTangent_56.w);
  mediump vec3 tmpvar_65;
  tmpvar_65.x = wTangent_56.x;
  tmpvar_65.y = tmpvar_64.x;
  tmpvar_65.z = wNormal_57.x;
  mediump vec3 tmpvar_66;
  tmpvar_66.x = wTangent_56.y;
  tmpvar_66.y = tmpvar_64.y;
  tmpvar_66.z = wNormal_57.y;
  mediump vec3 tmpvar_67;
  tmpvar_67.x = wTangent_56.z;
  tmpvar_67.y = tmpvar_64.z;
  tmpvar_67.z = wNormal_57.z;
  highp vec4 tmpvar_68;
  tmpvar_68 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_6.xz = (tmpvar_68.xz - ((tmpvar_68.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_6.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((tmpvar_68.xyz - adjCamPos_6));
  tmpvar_11 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = cos(_CamRotate);
  cost_5 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = sin(_CamRotate);
  sint_4 = tmpvar_71;
  highp mat2 tmpvar_72;
  tmpvar_72[0].x = cost_5;
  tmpvar_72[0].y = -(sint_4);
  tmpvar_72[1].x = sint_4;
  tmpvar_72[1].y = cost_5;
  tmpvar_11.xz = (tmpvar_72 * tmpvar_11.xz);
  highp vec3 tmpvar_73;
  tmpvar_73 = (_WorldSpaceCameraPos - tmpvar_68.xyz);
  tmpvar_12.xyz = tmpvar_73;
  gl_Position = tmpvar_16;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_COLOR0 = tmpvar_1;
  xlv_COLOR1 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_2.xyz;
  xlv_TEXCOORD2 = tmpvar_11;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_65;
  xlv_TEXCOORD6 = tmpvar_66;
  xlv_TEXCOORD7 = tmpvar_67;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  finalColor_2.xyz = (xlv_COLOR1.xyz + (finalColor_2.xyz * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "UseNormalMap" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_WorldTransformParams;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _glesNormal;
  mediump vec4 tmpvar_3;
  tmpvar_3 = _glesTANGENT;
  highp float sint_4;
  highp float cost_5;
  highp vec3 adjCamPos_6;
  mediump vec4 offsetVertex_7;
  mediump float normalOut_8;
  highp vec4 offset_9;
  mediump vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  mediump vec4 tmpvar_12;
  offset_9.yzw = vec3(0.0, 0.0, 0.0);
  offset_9.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_9.y = offset_9.x;
  highp float tmpvar_13;
  tmpvar_13 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_8 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = ((_glesVertex + (
    (offset_9 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_2 * normalOut_8) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_7 = tmpvar_14;
  highp vec4 pos_15;
  pos_15 = offsetVertex_7;
  highp vec4 tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = pos_15.xyz;
  tmpvar_16 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_17));
  tmpvar_10.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_10.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_21;
  mediump float fogFactor_22;
  mediump vec3 fogColor_23;
  mediump vec3 heightFogColor_24;
  highp float HeightFogFactor_25;
  mediump vec3 atomesphereFogColor_26;
  mediump float h_27;
  highp float linearFogDensity_28;
  mediump float len_29;
  highp float tmpvar_30;
  tmpvar_30 = sqrt(dot (tmpvar_20, tmpvar_20));
  len_29 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (((len_29 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_28 = (tmpvar_31 * (2.0 - tmpvar_31));
  if ((len_29 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_28 = (linearFogDensity_28 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_32;
  tmpvar_32 = min (pow (linearFogDensity_28, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_28 = tmpvar_32;
  mediump float tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((tmpvar_19.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_33 = tmpvar_34;
  h_27 = (tmpvar_33 * (2.0 - tmpvar_33));
  highp vec3 tmpvar_35;
  tmpvar_35 = (_HeigtFogColBase2.xyz + (h_27 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_26 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (atomesphereFogColor_26, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_29 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_26 = tmpvar_36;
  mediump float tmpvar_37;
  mediump float r_38;
  mediump float f_39;
  mediump float u_40;
  mediump float l_41;
  mediump float fogInt_42;
  fogInt_42 = 1.0;
  highp float tmpvar_43;
  tmpvar_43 = (_HeigtFogParams2.x * tmpvar_20.y);
  highp float tmpvar_44;
  tmpvar_44 = abs(tmpvar_43);
  if ((tmpvar_44 > 0.01)) {
    highp float tmpvar_45;
    tmpvar_45 = exp(-(tmpvar_43));
    fogInt_42 = ((1.0 - tmpvar_45) / tmpvar_43);
  };
  highp float tmpvar_46;
  tmpvar_46 = sqrt(dot (tmpvar_20, tmpvar_20));
  l_41 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = (l_41 * _HeigtFogParams2.y);
  u_40 = tmpvar_47;
  fogInt_42 = (fogInt_42 * u_40);
  mediump float tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((l_41 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_48 = tmpvar_49;
  r_38 = (tmpvar_48 * (2.0 - tmpvar_48));
  r_38 = ((r_38 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_39 = ((1.0 - clamp (
    exp2(-(fogInt_42))
  , 0.0, 1.0)) * r_38);
  highp float tmpvar_50;
  tmpvar_50 = min (f_39, _HeigtFogColBase2.w);
  tmpvar_37 = tmpvar_50;
  HeightFogFactor_25 = tmpvar_37;
  highp vec3 tmpvar_51;
  tmpvar_51 = _Mihoyo_FogColor2.xyz;
  heightFogColor_24 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = ((heightFogColor_24 * HeightFogFactor_25) + ((atomesphereFogColor_26 * tmpvar_32) * (1.0 - HeightFogFactor_25)));
  fogColor_23 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = ((1.0 - tmpvar_32) * (1.0 - HeightFogFactor_25));
  fogFactor_22 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54.xyz = fogColor_23;
  tmpvar_54.w = fogFactor_22;
  tmpvar_21 = tmpvar_54;
  highp vec4 tmpvar_55;
  mediump float fogFactor_56;
  mediump vec3 fogColor_57;
  mediump vec3 heightFogColor_58;
  highp float HeightFogFactor_59;
  mediump vec3 atomesphereFogColor_60;
  mediump float h_61;
  highp float linearFogDensity_62;
  mediump float len_63;
  highp float tmpvar_64;
  tmpvar_64 = sqrt(dot (tmpvar_20, tmpvar_20));
  len_63 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (((len_63 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_62 = (tmpvar_65 * (2.0 - tmpvar_65));
  if ((len_63 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_62 = (linearFogDensity_62 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_66;
  tmpvar_66 = min (pow (linearFogDensity_62, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_62 = tmpvar_66;
  mediump float tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((tmpvar_19.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_67 = tmpvar_68;
  h_61 = (tmpvar_67 * (2.0 - tmpvar_67));
  highp vec3 tmpvar_69;
  tmpvar_69 = (_HeigtFogColBase3.xyz + (h_61 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_60 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = mix (atomesphereFogColor_60, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_63 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_60 = tmpvar_70;
  mediump float tmpvar_71;
  mediump float r_72;
  mediump float f_73;
  mediump float u_74;
  mediump float l_75;
  mediump float fogInt_76;
  fogInt_76 = 1.0;
  highp float tmpvar_77;
  tmpvar_77 = (_HeigtFogParams3.x * tmpvar_20.y);
  highp float tmpvar_78;
  tmpvar_78 = abs(tmpvar_77);
  if ((tmpvar_78 > 0.01)) {
    highp float tmpvar_79;
    tmpvar_79 = exp(-(tmpvar_77));
    fogInt_76 = ((1.0 - tmpvar_79) / tmpvar_77);
  };
  highp float tmpvar_80;
  tmpvar_80 = sqrt(dot (tmpvar_20, tmpvar_20));
  l_75 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (l_75 * _HeigtFogParams3.y);
  u_74 = tmpvar_81;
  fogInt_76 = (fogInt_76 * u_74);
  mediump float tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (((l_75 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_82 = tmpvar_83;
  r_72 = (tmpvar_82 * (2.0 - tmpvar_82));
  r_72 = ((r_72 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_73 = ((1.0 - clamp (
    exp2(-(fogInt_76))
  , 0.0, 1.0)) * r_72);
  highp float tmpvar_84;
  tmpvar_84 = min (f_73, _HeigtFogColBase3.w);
  tmpvar_71 = tmpvar_84;
  HeightFogFactor_59 = tmpvar_71;
  highp vec3 tmpvar_85;
  tmpvar_85 = _Mihoyo_FogColor3.xyz;
  heightFogColor_58 = tmpvar_85;
  highp vec3 tmpvar_86;
  tmpvar_86 = ((heightFogColor_58 * HeightFogFactor_59) + ((atomesphereFogColor_60 * tmpvar_66) * (1.0 - HeightFogFactor_59)));
  fogColor_57 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = ((1.0 - tmpvar_66) * (1.0 - HeightFogFactor_59));
  fogFactor_56 = tmpvar_87;
  mediump vec4 tmpvar_88;
  tmpvar_88.xyz = fogColor_57;
  tmpvar_88.w = fogFactor_56;
  tmpvar_55 = tmpvar_88;
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (tmpvar_21, tmpvar_55, vec4(_LerpFactor));
  tmpvar_18 = tmpvar_89;
  tmpvar_12.w = 1.0;
  mediump vec3 tmpvar_90;
  tmpvar_90 = tmpvar_2.xyz;
  mediump vec4 wTangent_91;
  mediump vec3 wNormal_92;
  highp vec3 norm_93;
  norm_93 = tmpvar_90;
  highp mat3 tmpvar_94;
  tmpvar_94[0] = unity_WorldToObject[0].xyz;
  tmpvar_94[1] = unity_WorldToObject[1].xyz;
  tmpvar_94[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_95;
  tmpvar_95 = normalize((norm_93 * tmpvar_94));
  wNormal_92 = tmpvar_95;
  highp vec3 dir_96;
  dir_96 = tmpvar_3.xyz;
  highp mat3 tmpvar_97;
  tmpvar_97[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_97[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_97[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_98;
  tmpvar_98 = normalize((tmpvar_97 * dir_96));
  wTangent_91.xyz = tmpvar_98;
  wTangent_91.w = (_glesTANGENT.w * unity_WorldTransformParams.w);
  mediump vec3 tmpvar_99;
  tmpvar_99 = (((wNormal_92.yzx * wTangent_91.zxy) - (wNormal_92.zxy * wTangent_91.yzx)) * wTangent_91.w);
  mediump vec3 tmpvar_100;
  tmpvar_100.x = wTangent_91.x;
  tmpvar_100.y = tmpvar_99.x;
  tmpvar_100.z = wNormal_92.x;
  mediump vec3 tmpvar_101;
  tmpvar_101.x = wTangent_91.y;
  tmpvar_101.y = tmpvar_99.y;
  tmpvar_101.z = wNormal_92.y;
  mediump vec3 tmpvar_102;
  tmpvar_102.x = wTangent_91.z;
  tmpvar_102.y = tmpvar_99.z;
  tmpvar_102.z = wNormal_92.z;
  highp vec4 tmpvar_103;
  tmpvar_103 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_6.xz = (tmpvar_103.xz - ((tmpvar_103.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_6.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_104;
  tmpvar_104 = normalize((tmpvar_103.xyz - adjCamPos_6));
  tmpvar_11 = tmpvar_104;
  mediump float tmpvar_105;
  tmpvar_105 = cos(_CamRotate);
  cost_5 = tmpvar_105;
  mediump float tmpvar_106;
  tmpvar_106 = sin(_CamRotate);
  sint_4 = tmpvar_106;
  highp mat2 tmpvar_107;
  tmpvar_107[0].x = cost_5;
  tmpvar_107[0].y = -(sint_4);
  tmpvar_107[1].x = sint_4;
  tmpvar_107[1].y = cost_5;
  tmpvar_11.xz = (tmpvar_107 * tmpvar_11.xz);
  highp vec3 tmpvar_108;
  tmpvar_108 = (_WorldSpaceCameraPos - tmpvar_103.xyz);
  tmpvar_12.xyz = tmpvar_108;
  gl_Position = tmpvar_16;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_COLOR0 = tmpvar_1;
  xlv_COLOR1 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_2.xyz;
  xlv_TEXCOORD2 = tmpvar_11;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_100;
  xlv_TEXCOORD6 = tmpvar_101;
  xlv_TEXCOORD7 = tmpvar_102;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  finalColor_2.xyz = (xlv_COLOR1.xyz + (finalColor_2.xyz * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "UseNormalMap" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_WorldTransformParams;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _glesNormal;
  mediump vec4 tmpvar_3;
  tmpvar_3 = _glesTANGENT;
  highp float sint_4;
  highp float cost_5;
  highp vec3 adjCamPos_6;
  mediump vec4 offsetVertex_7;
  mediump float normalOut_8;
  highp vec4 offset_9;
  mediump vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  mediump vec4 tmpvar_12;
  offset_9.yzw = vec3(0.0, 0.0, 0.0);
  offset_9.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_9.y = offset_9.x;
  highp float tmpvar_13;
  tmpvar_13 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_8 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = ((_glesVertex + (
    (offset_9 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_2 * normalOut_8) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_7 = tmpvar_14;
  highp vec4 pos_15;
  pos_15 = offsetVertex_7;
  highp vec4 tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = pos_15.xyz;
  tmpvar_16 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_17));
  tmpvar_10.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_10.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_21;
  mediump float fogFactor_22;
  mediump vec3 fogColor_23;
  mediump vec3 heightFogColor_24;
  highp float HeightFogFactor_25;
  mediump vec3 atomesphereFogColor_26;
  mediump float h_27;
  highp float linearFogDensity_28;
  mediump float len_29;
  highp float tmpvar_30;
  tmpvar_30 = sqrt(dot (tmpvar_20, tmpvar_20));
  len_29 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (((len_29 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_28 = (tmpvar_31 * (2.0 - tmpvar_31));
  if ((len_29 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_28 = (linearFogDensity_28 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_32;
  tmpvar_32 = min (pow (linearFogDensity_28, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_28 = tmpvar_32;
  mediump float tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((tmpvar_19.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_33 = tmpvar_34;
  h_27 = (tmpvar_33 * (2.0 - tmpvar_33));
  highp vec3 tmpvar_35;
  tmpvar_35 = (_HeigtFogColBase2.xyz + (h_27 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_26 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (atomesphereFogColor_26, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_29 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_26 = tmpvar_36;
  mediump float tmpvar_37;
  mediump float r_38;
  mediump float f_39;
  mediump float u_40;
  mediump float l_41;
  mediump float fogInt_42;
  fogInt_42 = 1.0;
  highp float tmpvar_43;
  tmpvar_43 = (_HeigtFogParams2.x * tmpvar_20.y);
  highp float tmpvar_44;
  tmpvar_44 = abs(tmpvar_43);
  if ((tmpvar_44 > 0.01)) {
    highp float tmpvar_45;
    tmpvar_45 = exp(-(tmpvar_43));
    fogInt_42 = ((1.0 - tmpvar_45) / tmpvar_43);
  };
  highp float tmpvar_46;
  tmpvar_46 = sqrt(dot (tmpvar_20, tmpvar_20));
  l_41 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = (l_41 * _HeigtFogParams2.y);
  u_40 = tmpvar_47;
  fogInt_42 = (fogInt_42 * u_40);
  mediump float tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((l_41 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_48 = tmpvar_49;
  r_38 = (tmpvar_48 * (2.0 - tmpvar_48));
  r_38 = ((r_38 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_39 = ((1.0 - clamp (
    exp2(-(fogInt_42))
  , 0.0, 1.0)) * r_38);
  highp float tmpvar_50;
  tmpvar_50 = min (f_39, _HeigtFogColBase2.w);
  tmpvar_37 = tmpvar_50;
  HeightFogFactor_25 = tmpvar_37;
  highp vec3 tmpvar_51;
  tmpvar_51 = _Mihoyo_FogColor2.xyz;
  heightFogColor_24 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = ((heightFogColor_24 * HeightFogFactor_25) + ((atomesphereFogColor_26 * tmpvar_32) * (1.0 - HeightFogFactor_25)));
  fogColor_23 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = ((1.0 - tmpvar_32) * (1.0 - HeightFogFactor_25));
  fogFactor_22 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54.xyz = fogColor_23;
  tmpvar_54.w = fogFactor_22;
  tmpvar_21 = tmpvar_54;
  highp vec4 tmpvar_55;
  mediump float fogFactor_56;
  mediump vec3 fogColor_57;
  mediump vec3 heightFogColor_58;
  highp float HeightFogFactor_59;
  mediump vec3 atomesphereFogColor_60;
  mediump float h_61;
  highp float linearFogDensity_62;
  mediump float len_63;
  highp float tmpvar_64;
  tmpvar_64 = sqrt(dot (tmpvar_20, tmpvar_20));
  len_63 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (((len_63 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_62 = (tmpvar_65 * (2.0 - tmpvar_65));
  if ((len_63 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_62 = (linearFogDensity_62 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_66;
  tmpvar_66 = min (pow (linearFogDensity_62, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_62 = tmpvar_66;
  mediump float tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((tmpvar_19.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_67 = tmpvar_68;
  h_61 = (tmpvar_67 * (2.0 - tmpvar_67));
  highp vec3 tmpvar_69;
  tmpvar_69 = (_HeigtFogColBase3.xyz + (h_61 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_60 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = mix (atomesphereFogColor_60, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_63 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_60 = tmpvar_70;
  mediump float tmpvar_71;
  mediump float r_72;
  mediump float f_73;
  mediump float u_74;
  mediump float l_75;
  mediump float fogInt_76;
  fogInt_76 = 1.0;
  highp float tmpvar_77;
  tmpvar_77 = (_HeigtFogParams3.x * tmpvar_20.y);
  highp float tmpvar_78;
  tmpvar_78 = abs(tmpvar_77);
  if ((tmpvar_78 > 0.01)) {
    highp float tmpvar_79;
    tmpvar_79 = exp(-(tmpvar_77));
    fogInt_76 = ((1.0 - tmpvar_79) / tmpvar_77);
  };
  highp float tmpvar_80;
  tmpvar_80 = sqrt(dot (tmpvar_20, tmpvar_20));
  l_75 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (l_75 * _HeigtFogParams3.y);
  u_74 = tmpvar_81;
  fogInt_76 = (fogInt_76 * u_74);
  mediump float tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (((l_75 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_82 = tmpvar_83;
  r_72 = (tmpvar_82 * (2.0 - tmpvar_82));
  r_72 = ((r_72 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_73 = ((1.0 - clamp (
    exp2(-(fogInt_76))
  , 0.0, 1.0)) * r_72);
  highp float tmpvar_84;
  tmpvar_84 = min (f_73, _HeigtFogColBase3.w);
  tmpvar_71 = tmpvar_84;
  HeightFogFactor_59 = tmpvar_71;
  highp vec3 tmpvar_85;
  tmpvar_85 = _Mihoyo_FogColor3.xyz;
  heightFogColor_58 = tmpvar_85;
  highp vec3 tmpvar_86;
  tmpvar_86 = ((heightFogColor_58 * HeightFogFactor_59) + ((atomesphereFogColor_60 * tmpvar_66) * (1.0 - HeightFogFactor_59)));
  fogColor_57 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = ((1.0 - tmpvar_66) * (1.0 - HeightFogFactor_59));
  fogFactor_56 = tmpvar_87;
  mediump vec4 tmpvar_88;
  tmpvar_88.xyz = fogColor_57;
  tmpvar_88.w = fogFactor_56;
  tmpvar_55 = tmpvar_88;
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (tmpvar_21, tmpvar_55, vec4(_LerpFactor));
  tmpvar_18 = tmpvar_89;
  tmpvar_12.w = 1.0;
  mediump vec3 tmpvar_90;
  tmpvar_90 = tmpvar_2.xyz;
  mediump vec4 wTangent_91;
  mediump vec3 wNormal_92;
  highp vec3 norm_93;
  norm_93 = tmpvar_90;
  highp mat3 tmpvar_94;
  tmpvar_94[0] = unity_WorldToObject[0].xyz;
  tmpvar_94[1] = unity_WorldToObject[1].xyz;
  tmpvar_94[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_95;
  tmpvar_95 = normalize((norm_93 * tmpvar_94));
  wNormal_92 = tmpvar_95;
  highp vec3 dir_96;
  dir_96 = tmpvar_3.xyz;
  highp mat3 tmpvar_97;
  tmpvar_97[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_97[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_97[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_98;
  tmpvar_98 = normalize((tmpvar_97 * dir_96));
  wTangent_91.xyz = tmpvar_98;
  wTangent_91.w = (_glesTANGENT.w * unity_WorldTransformParams.w);
  mediump vec3 tmpvar_99;
  tmpvar_99 = (((wNormal_92.yzx * wTangent_91.zxy) - (wNormal_92.zxy * wTangent_91.yzx)) * wTangent_91.w);
  mediump vec3 tmpvar_100;
  tmpvar_100.x = wTangent_91.x;
  tmpvar_100.y = tmpvar_99.x;
  tmpvar_100.z = wNormal_92.x;
  mediump vec3 tmpvar_101;
  tmpvar_101.x = wTangent_91.y;
  tmpvar_101.y = tmpvar_99.y;
  tmpvar_101.z = wNormal_92.y;
  mediump vec3 tmpvar_102;
  tmpvar_102.x = wTangent_91.z;
  tmpvar_102.y = tmpvar_99.z;
  tmpvar_102.z = wNormal_92.z;
  highp vec4 tmpvar_103;
  tmpvar_103 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_6.xz = (tmpvar_103.xz - ((tmpvar_103.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_6.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_104;
  tmpvar_104 = normalize((tmpvar_103.xyz - adjCamPos_6));
  tmpvar_11 = tmpvar_104;
  mediump float tmpvar_105;
  tmpvar_105 = cos(_CamRotate);
  cost_5 = tmpvar_105;
  mediump float tmpvar_106;
  tmpvar_106 = sin(_CamRotate);
  sint_4 = tmpvar_106;
  highp mat2 tmpvar_107;
  tmpvar_107[0].x = cost_5;
  tmpvar_107[0].y = -(sint_4);
  tmpvar_107[1].x = sint_4;
  tmpvar_107[1].y = cost_5;
  tmpvar_11.xz = (tmpvar_107 * tmpvar_11.xz);
  highp vec3 tmpvar_108;
  tmpvar_108 = (_WorldSpaceCameraPos - tmpvar_103.xyz);
  tmpvar_12.xyz = tmpvar_108;
  gl_Position = tmpvar_16;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_COLOR0 = tmpvar_1;
  xlv_COLOR1 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_2.xyz;
  xlv_TEXCOORD2 = tmpvar_11;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_100;
  xlv_TEXCOORD6 = tmpvar_101;
  xlv_TEXCOORD7 = tmpvar_102;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  finalColor_2.xyz = (xlv_COLOR1.xyz + (finalColor_2.xyz * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "UseNormalMap" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_WorldTransformParams;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _glesNormal;
  mediump vec4 tmpvar_3;
  tmpvar_3 = _glesTANGENT;
  highp float sint_4;
  highp float cost_5;
  highp vec3 adjCamPos_6;
  mediump vec4 offsetVertex_7;
  mediump float normalOut_8;
  highp vec4 offset_9;
  mediump vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  mediump vec4 tmpvar_12;
  offset_9.yzw = vec3(0.0, 0.0, 0.0);
  offset_9.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_9.y = offset_9.x;
  highp float tmpvar_13;
  tmpvar_13 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_8 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = ((_glesVertex + (
    (offset_9 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_2 * normalOut_8) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_7 = tmpvar_14;
  highp vec4 pos_15;
  pos_15 = offsetVertex_7;
  highp vec4 tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = pos_15.xyz;
  tmpvar_16 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_17));
  tmpvar_10.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_10.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_21;
  mediump float fogFactor_22;
  mediump vec3 fogColor_23;
  mediump vec3 heightFogColor_24;
  highp float HeightFogFactor_25;
  mediump vec3 atomesphereFogColor_26;
  mediump float h_27;
  highp float linearFogDensity_28;
  mediump float len_29;
  highp float tmpvar_30;
  tmpvar_30 = sqrt(dot (tmpvar_20, tmpvar_20));
  len_29 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (((len_29 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_28 = (tmpvar_31 * (2.0 - tmpvar_31));
  if ((len_29 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_28 = (linearFogDensity_28 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_32;
  tmpvar_32 = min (pow (linearFogDensity_28, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_28 = tmpvar_32;
  mediump float tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((tmpvar_19.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_33 = tmpvar_34;
  h_27 = (tmpvar_33 * (2.0 - tmpvar_33));
  highp vec3 tmpvar_35;
  tmpvar_35 = (_HeigtFogColBase2.xyz + (h_27 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_26 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (atomesphereFogColor_26, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_29 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_26 = tmpvar_36;
  mediump float tmpvar_37;
  mediump float r_38;
  mediump float f_39;
  mediump float u_40;
  mediump float l_41;
  mediump float fogInt_42;
  fogInt_42 = 1.0;
  highp float tmpvar_43;
  tmpvar_43 = (_HeigtFogParams2.x * tmpvar_20.y);
  highp float tmpvar_44;
  tmpvar_44 = abs(tmpvar_43);
  if ((tmpvar_44 > 0.01)) {
    highp float tmpvar_45;
    tmpvar_45 = exp(-(tmpvar_43));
    fogInt_42 = ((1.0 - tmpvar_45) / tmpvar_43);
  };
  highp float tmpvar_46;
  tmpvar_46 = sqrt(dot (tmpvar_20, tmpvar_20));
  l_41 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = (l_41 * _HeigtFogParams2.y);
  u_40 = tmpvar_47;
  fogInt_42 = (fogInt_42 * u_40);
  mediump float tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((l_41 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_48 = tmpvar_49;
  r_38 = (tmpvar_48 * (2.0 - tmpvar_48));
  r_38 = ((r_38 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_39 = ((1.0 - clamp (
    exp2(-(fogInt_42))
  , 0.0, 1.0)) * r_38);
  highp float tmpvar_50;
  tmpvar_50 = min (f_39, _HeigtFogColBase2.w);
  tmpvar_37 = tmpvar_50;
  HeightFogFactor_25 = tmpvar_37;
  highp vec3 tmpvar_51;
  tmpvar_51 = _Mihoyo_FogColor2.xyz;
  heightFogColor_24 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = ((heightFogColor_24 * HeightFogFactor_25) + ((atomesphereFogColor_26 * tmpvar_32) * (1.0 - HeightFogFactor_25)));
  fogColor_23 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = ((1.0 - tmpvar_32) * (1.0 - HeightFogFactor_25));
  fogFactor_22 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54.xyz = fogColor_23;
  tmpvar_54.w = fogFactor_22;
  tmpvar_21 = tmpvar_54;
  highp vec4 tmpvar_55;
  mediump float fogFactor_56;
  mediump vec3 fogColor_57;
  mediump vec3 heightFogColor_58;
  highp float HeightFogFactor_59;
  mediump vec3 atomesphereFogColor_60;
  mediump float h_61;
  highp float linearFogDensity_62;
  mediump float len_63;
  highp float tmpvar_64;
  tmpvar_64 = sqrt(dot (tmpvar_20, tmpvar_20));
  len_63 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (((len_63 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_62 = (tmpvar_65 * (2.0 - tmpvar_65));
  if ((len_63 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_62 = (linearFogDensity_62 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_66;
  tmpvar_66 = min (pow (linearFogDensity_62, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_62 = tmpvar_66;
  mediump float tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((tmpvar_19.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_67 = tmpvar_68;
  h_61 = (tmpvar_67 * (2.0 - tmpvar_67));
  highp vec3 tmpvar_69;
  tmpvar_69 = (_HeigtFogColBase3.xyz + (h_61 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_60 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = mix (atomesphereFogColor_60, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_63 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_60 = tmpvar_70;
  mediump float tmpvar_71;
  mediump float r_72;
  mediump float f_73;
  mediump float u_74;
  mediump float l_75;
  mediump float fogInt_76;
  fogInt_76 = 1.0;
  highp float tmpvar_77;
  tmpvar_77 = (_HeigtFogParams3.x * tmpvar_20.y);
  highp float tmpvar_78;
  tmpvar_78 = abs(tmpvar_77);
  if ((tmpvar_78 > 0.01)) {
    highp float tmpvar_79;
    tmpvar_79 = exp(-(tmpvar_77));
    fogInt_76 = ((1.0 - tmpvar_79) / tmpvar_77);
  };
  highp float tmpvar_80;
  tmpvar_80 = sqrt(dot (tmpvar_20, tmpvar_20));
  l_75 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (l_75 * _HeigtFogParams3.y);
  u_74 = tmpvar_81;
  fogInt_76 = (fogInt_76 * u_74);
  mediump float tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (((l_75 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_82 = tmpvar_83;
  r_72 = (tmpvar_82 * (2.0 - tmpvar_82));
  r_72 = ((r_72 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_73 = ((1.0 - clamp (
    exp2(-(fogInt_76))
  , 0.0, 1.0)) * r_72);
  highp float tmpvar_84;
  tmpvar_84 = min (f_73, _HeigtFogColBase3.w);
  tmpvar_71 = tmpvar_84;
  HeightFogFactor_59 = tmpvar_71;
  highp vec3 tmpvar_85;
  tmpvar_85 = _Mihoyo_FogColor3.xyz;
  heightFogColor_58 = tmpvar_85;
  highp vec3 tmpvar_86;
  tmpvar_86 = ((heightFogColor_58 * HeightFogFactor_59) + ((atomesphereFogColor_60 * tmpvar_66) * (1.0 - HeightFogFactor_59)));
  fogColor_57 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = ((1.0 - tmpvar_66) * (1.0 - HeightFogFactor_59));
  fogFactor_56 = tmpvar_87;
  mediump vec4 tmpvar_88;
  tmpvar_88.xyz = fogColor_57;
  tmpvar_88.w = fogFactor_56;
  tmpvar_55 = tmpvar_88;
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (tmpvar_21, tmpvar_55, vec4(_LerpFactor));
  tmpvar_18 = tmpvar_89;
  tmpvar_12.w = 1.0;
  mediump vec3 tmpvar_90;
  tmpvar_90 = tmpvar_2.xyz;
  mediump vec4 wTangent_91;
  mediump vec3 wNormal_92;
  highp vec3 norm_93;
  norm_93 = tmpvar_90;
  highp mat3 tmpvar_94;
  tmpvar_94[0] = unity_WorldToObject[0].xyz;
  tmpvar_94[1] = unity_WorldToObject[1].xyz;
  tmpvar_94[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_95;
  tmpvar_95 = normalize((norm_93 * tmpvar_94));
  wNormal_92 = tmpvar_95;
  highp vec3 dir_96;
  dir_96 = tmpvar_3.xyz;
  highp mat3 tmpvar_97;
  tmpvar_97[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_97[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_97[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_98;
  tmpvar_98 = normalize((tmpvar_97 * dir_96));
  wTangent_91.xyz = tmpvar_98;
  wTangent_91.w = (_glesTANGENT.w * unity_WorldTransformParams.w);
  mediump vec3 tmpvar_99;
  tmpvar_99 = (((wNormal_92.yzx * wTangent_91.zxy) - (wNormal_92.zxy * wTangent_91.yzx)) * wTangent_91.w);
  mediump vec3 tmpvar_100;
  tmpvar_100.x = wTangent_91.x;
  tmpvar_100.y = tmpvar_99.x;
  tmpvar_100.z = wNormal_92.x;
  mediump vec3 tmpvar_101;
  tmpvar_101.x = wTangent_91.y;
  tmpvar_101.y = tmpvar_99.y;
  tmpvar_101.z = wNormal_92.y;
  mediump vec3 tmpvar_102;
  tmpvar_102.x = wTangent_91.z;
  tmpvar_102.y = tmpvar_99.z;
  tmpvar_102.z = wNormal_92.z;
  highp vec4 tmpvar_103;
  tmpvar_103 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_6.xz = (tmpvar_103.xz - ((tmpvar_103.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_6.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_104;
  tmpvar_104 = normalize((tmpvar_103.xyz - adjCamPos_6));
  tmpvar_11 = tmpvar_104;
  mediump float tmpvar_105;
  tmpvar_105 = cos(_CamRotate);
  cost_5 = tmpvar_105;
  mediump float tmpvar_106;
  tmpvar_106 = sin(_CamRotate);
  sint_4 = tmpvar_106;
  highp mat2 tmpvar_107;
  tmpvar_107[0].x = cost_5;
  tmpvar_107[0].y = -(sint_4);
  tmpvar_107[1].x = sint_4;
  tmpvar_107[1].y = cost_5;
  tmpvar_11.xz = (tmpvar_107 * tmpvar_11.xz);
  highp vec3 tmpvar_108;
  tmpvar_108 = (_WorldSpaceCameraPos - tmpvar_103.xyz);
  tmpvar_12.xyz = tmpvar_108;
  gl_Position = tmpvar_16;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_COLOR0 = tmpvar_1;
  xlv_COLOR1 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_2.xyz;
  xlv_TEXCOORD2 = tmpvar_11;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_100;
  xlv_TEXCOORD6 = tmpvar_101;
  xlv_TEXCOORD7 = tmpvar_102;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  finalColor_2.xyz = (xlv_COLOR1.xyz + (finalColor_2.xyz * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FRESNEL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _FogStartDistance;
uniform highp float _FogEndDistance;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1.w = 0.0;
  tmpvar_1.xyz = _glesNormal;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp float sint_3;
  highp float cost_4;
  highp vec3 adjCamPos_5;
  mediump vec4 offsetVertex_6;
  mediump float normalOut_7;
  highp vec4 offset_8;
  highp vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  mediump vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  offset_8.yzw = vec3(0.0, 0.0, 0.0);
  offset_8.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_8.y = offset_8.x;
  highp float tmpvar_14;
  tmpvar_14 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_7 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = ((_glesVertex + (
    (offset_8 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_1 * normalOut_7) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_6 = tmpvar_15;
  highp vec4 pos_16;
  pos_16 = offsetVertex_6;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = pos_16.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_17));
  tmpvar_10.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_10.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_18;
  if ((_FogColorNear.w > 0.5)) {
    mediump vec4 fogColor_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_21;
    tmpvar_21 = max (0.0, (sqrt(
      dot (tmpvar_20, tmpvar_20)
    ) - _FogStartDistance));
    highp float tmpvar_22;
    tmpvar_22 = min (max ((
      (1.0 - exp((-(
        (_FogIntensity * tmpvar_21)
      ) * (_FogIntensity * tmpvar_21))))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_23;
    tmpvar_23 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3(clamp (exp(
      (-((_FogColorIntensity * tmpvar_21)) * (_FogColorIntensity * tmpvar_21))
    ), 0.0, 1.0)));
    fogColor_19.xyz = tmpvar_23;
    fogColor_19.w = tmpvar_22;
    tmpvar_18 = fogColor_19;
  } else {
    mediump vec4 fogColor_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_26;
    tmpvar_26 = max (0.0, (sqrt(
      dot (tmpvar_25, tmpvar_25)
    ) - _FogStartDistance));
    highp float tmpvar_27;
    highp float tmpvar_28;
    tmpvar_28 = (_FogEndDistance - _FogStartDistance);
    tmpvar_27 = min (max ((
      (((500.0 * _FogIntensity) * tmpvar_26) / max (0.1, tmpvar_28))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_29;
    tmpvar_29 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3((1.0 - clamp (
      (((1000.0 * _FogColorIntensity) * tmpvar_26) / max (0.1, tmpvar_28))
    , 0.0, 1.0))));
    fogColor_24.xyz = tmpvar_29;
    fogColor_24.w = tmpvar_27;
    tmpvar_18 = fogColor_24;
  };
  tmpvar_12.w = 1.0;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_1.xyz;
  highp vec3 norm_31;
  norm_31 = tmpvar_30;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = unity_WorldToObject[0].xyz;
  tmpvar_32[1] = unity_WorldToObject[1].xyz;
  tmpvar_32[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(normalize((norm_31 * tmpvar_32)));
  tmpvar_13 = tmpvar_33;
  highp vec4 tmpvar_34;
  tmpvar_34 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_5.xz = (tmpvar_34.xz - ((tmpvar_34.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_5.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((tmpvar_34.xyz - adjCamPos_5));
  tmpvar_11 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = cos(_CamRotate);
  cost_4 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = sin(_CamRotate);
  sint_3 = tmpvar_37;
  highp mat2 tmpvar_38;
  tmpvar_38[0].x = cost_4;
  tmpvar_38[0].y = -(sint_3);
  tmpvar_38[1].x = sint_3;
  tmpvar_38[1].y = cost_4;
  tmpvar_11.xz = (tmpvar_38 * tmpvar_11.xz);
  highp vec3 tmpvar_39;
  tmpvar_39 = (_WorldSpaceCameraPos - tmpvar_34.xyz);
  tmpvar_12.xyz = tmpvar_39;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_COLOR0 = tmpvar_2;
  xlv_COLOR1 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_1.xyz;
  xlv_TEXCOORD2 = tmpvar_11;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
uniform highp vec4 _RimColor;
uniform highp float _RimPower;
uniform highp float _RimIntensity;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  mediump float tmpvar_32;
  tmpvar_32 = (1.0 - clamp (dot (
    normalize(xlv_TEXCOORD4.xyz)
  , xlv_TEXCOORD5), 0.0, 1.0));
  highp float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, _RimPower);
  finalColor_2.xyz = (finalColor_2.xyz + ((_RimColor.xyz * tmpvar_33) * _RimIntensity));
  finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FRESNEL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _FogStartDistance;
uniform highp float _FogEndDistance;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1.w = 0.0;
  tmpvar_1.xyz = _glesNormal;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp float sint_3;
  highp float cost_4;
  highp vec3 adjCamPos_5;
  mediump vec4 offsetVertex_6;
  mediump float normalOut_7;
  highp vec4 offset_8;
  highp vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  mediump vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  offset_8.yzw = vec3(0.0, 0.0, 0.0);
  offset_8.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_8.y = offset_8.x;
  highp float tmpvar_14;
  tmpvar_14 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_7 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = ((_glesVertex + (
    (offset_8 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_1 * normalOut_7) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_6 = tmpvar_15;
  highp vec4 pos_16;
  pos_16 = offsetVertex_6;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = pos_16.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_17));
  tmpvar_10.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_10.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_18;
  if ((_FogColorNear.w > 0.5)) {
    mediump vec4 fogColor_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_21;
    tmpvar_21 = max (0.0, (sqrt(
      dot (tmpvar_20, tmpvar_20)
    ) - _FogStartDistance));
    highp float tmpvar_22;
    tmpvar_22 = min (max ((
      (1.0 - exp((-(
        (_FogIntensity * tmpvar_21)
      ) * (_FogIntensity * tmpvar_21))))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_23;
    tmpvar_23 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3(clamp (exp(
      (-((_FogColorIntensity * tmpvar_21)) * (_FogColorIntensity * tmpvar_21))
    ), 0.0, 1.0)));
    fogColor_19.xyz = tmpvar_23;
    fogColor_19.w = tmpvar_22;
    tmpvar_18 = fogColor_19;
  } else {
    mediump vec4 fogColor_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_26;
    tmpvar_26 = max (0.0, (sqrt(
      dot (tmpvar_25, tmpvar_25)
    ) - _FogStartDistance));
    highp float tmpvar_27;
    highp float tmpvar_28;
    tmpvar_28 = (_FogEndDistance - _FogStartDistance);
    tmpvar_27 = min (max ((
      (((500.0 * _FogIntensity) * tmpvar_26) / max (0.1, tmpvar_28))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_29;
    tmpvar_29 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3((1.0 - clamp (
      (((1000.0 * _FogColorIntensity) * tmpvar_26) / max (0.1, tmpvar_28))
    , 0.0, 1.0))));
    fogColor_24.xyz = tmpvar_29;
    fogColor_24.w = tmpvar_27;
    tmpvar_18 = fogColor_24;
  };
  tmpvar_12.w = 1.0;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_1.xyz;
  highp vec3 norm_31;
  norm_31 = tmpvar_30;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = unity_WorldToObject[0].xyz;
  tmpvar_32[1] = unity_WorldToObject[1].xyz;
  tmpvar_32[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(normalize((norm_31 * tmpvar_32)));
  tmpvar_13 = tmpvar_33;
  highp vec4 tmpvar_34;
  tmpvar_34 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_5.xz = (tmpvar_34.xz - ((tmpvar_34.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_5.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((tmpvar_34.xyz - adjCamPos_5));
  tmpvar_11 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = cos(_CamRotate);
  cost_4 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = sin(_CamRotate);
  sint_3 = tmpvar_37;
  highp mat2 tmpvar_38;
  tmpvar_38[0].x = cost_4;
  tmpvar_38[0].y = -(sint_3);
  tmpvar_38[1].x = sint_3;
  tmpvar_38[1].y = cost_4;
  tmpvar_11.xz = (tmpvar_38 * tmpvar_11.xz);
  highp vec3 tmpvar_39;
  tmpvar_39 = (_WorldSpaceCameraPos - tmpvar_34.xyz);
  tmpvar_12.xyz = tmpvar_39;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_COLOR0 = tmpvar_2;
  xlv_COLOR1 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_1.xyz;
  xlv_TEXCOORD2 = tmpvar_11;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
uniform highp vec4 _RimColor;
uniform highp float _RimPower;
uniform highp float _RimIntensity;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  mediump float tmpvar_32;
  tmpvar_32 = (1.0 - clamp (dot (
    normalize(xlv_TEXCOORD4.xyz)
  , xlv_TEXCOORD5), 0.0, 1.0));
  highp float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, _RimPower);
  finalColor_2.xyz = (finalColor_2.xyz + ((_RimColor.xyz * tmpvar_33) * _RimIntensity));
  finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FRESNEL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _FogStartDistance;
uniform highp float _FogEndDistance;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1.w = 0.0;
  tmpvar_1.xyz = _glesNormal;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp float sint_3;
  highp float cost_4;
  highp vec3 adjCamPos_5;
  mediump vec4 offsetVertex_6;
  mediump float normalOut_7;
  highp vec4 offset_8;
  highp vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  mediump vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  offset_8.yzw = vec3(0.0, 0.0, 0.0);
  offset_8.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_8.y = offset_8.x;
  highp float tmpvar_14;
  tmpvar_14 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_7 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = ((_glesVertex + (
    (offset_8 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_1 * normalOut_7) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_6 = tmpvar_15;
  highp vec4 pos_16;
  pos_16 = offsetVertex_6;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = pos_16.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_17));
  tmpvar_10.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_10.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_18;
  if ((_FogColorNear.w > 0.5)) {
    mediump vec4 fogColor_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_21;
    tmpvar_21 = max (0.0, (sqrt(
      dot (tmpvar_20, tmpvar_20)
    ) - _FogStartDistance));
    highp float tmpvar_22;
    tmpvar_22 = min (max ((
      (1.0 - exp((-(
        (_FogIntensity * tmpvar_21)
      ) * (_FogIntensity * tmpvar_21))))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_23;
    tmpvar_23 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3(clamp (exp(
      (-((_FogColorIntensity * tmpvar_21)) * (_FogColorIntensity * tmpvar_21))
    ), 0.0, 1.0)));
    fogColor_19.xyz = tmpvar_23;
    fogColor_19.w = tmpvar_22;
    tmpvar_18 = fogColor_19;
  } else {
    mediump vec4 fogColor_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_26;
    tmpvar_26 = max (0.0, (sqrt(
      dot (tmpvar_25, tmpvar_25)
    ) - _FogStartDistance));
    highp float tmpvar_27;
    highp float tmpvar_28;
    tmpvar_28 = (_FogEndDistance - _FogStartDistance);
    tmpvar_27 = min (max ((
      (((500.0 * _FogIntensity) * tmpvar_26) / max (0.1, tmpvar_28))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_29;
    tmpvar_29 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3((1.0 - clamp (
      (((1000.0 * _FogColorIntensity) * tmpvar_26) / max (0.1, tmpvar_28))
    , 0.0, 1.0))));
    fogColor_24.xyz = tmpvar_29;
    fogColor_24.w = tmpvar_27;
    tmpvar_18 = fogColor_24;
  };
  tmpvar_12.w = 1.0;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_1.xyz;
  highp vec3 norm_31;
  norm_31 = tmpvar_30;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = unity_WorldToObject[0].xyz;
  tmpvar_32[1] = unity_WorldToObject[1].xyz;
  tmpvar_32[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(normalize((norm_31 * tmpvar_32)));
  tmpvar_13 = tmpvar_33;
  highp vec4 tmpvar_34;
  tmpvar_34 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_5.xz = (tmpvar_34.xz - ((tmpvar_34.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_5.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((tmpvar_34.xyz - adjCamPos_5));
  tmpvar_11 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = cos(_CamRotate);
  cost_4 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = sin(_CamRotate);
  sint_3 = tmpvar_37;
  highp mat2 tmpvar_38;
  tmpvar_38[0].x = cost_4;
  tmpvar_38[0].y = -(sint_3);
  tmpvar_38[1].x = sint_3;
  tmpvar_38[1].y = cost_4;
  tmpvar_11.xz = (tmpvar_38 * tmpvar_11.xz);
  highp vec3 tmpvar_39;
  tmpvar_39 = (_WorldSpaceCameraPos - tmpvar_34.xyz);
  tmpvar_12.xyz = tmpvar_39;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_COLOR0 = tmpvar_2;
  xlv_COLOR1 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_1.xyz;
  xlv_TEXCOORD2 = tmpvar_11;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
uniform highp vec4 _RimColor;
uniform highp float _RimPower;
uniform highp float _RimIntensity;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  mediump float tmpvar_32;
  tmpvar_32 = (1.0 - clamp (dot (
    normalize(xlv_TEXCOORD4.xyz)
  , xlv_TEXCOORD5), 0.0, 1.0));
  highp float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, _RimPower);
  finalColor_2.xyz = (finalColor_2.xyz + ((_RimColor.xyz * tmpvar_33) * _RimIntensity));
  finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "FRESNEL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _FogStartDistance;
uniform highp float _FogEndDistance;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1.w = 0.0;
  tmpvar_1.xyz = _glesNormal;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp float sint_3;
  highp float cost_4;
  highp vec3 adjCamPos_5;
  mediump vec4 offsetVertex_6;
  mediump float normalOut_7;
  highp vec4 offset_8;
  highp vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  mediump vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  offset_8.yzw = vec3(0.0, 0.0, 0.0);
  offset_8.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_8.y = offset_8.x;
  highp float tmpvar_14;
  tmpvar_14 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_7 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = ((_glesVertex + (
    (offset_8 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_1 * normalOut_7) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_6 = tmpvar_15;
  highp vec4 pos_16;
  pos_16 = offsetVertex_6;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = pos_16.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_17));
  tmpvar_10.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_10.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_18;
  if ((_FogColorNear.w > 0.5)) {
    mediump vec4 fogColor_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_21;
    tmpvar_21 = max (0.0, (sqrt(
      dot (tmpvar_20, tmpvar_20)
    ) - _FogStartDistance));
    highp float tmpvar_22;
    tmpvar_22 = min (max ((
      (1.0 - exp((-(
        (_FogIntensity * tmpvar_21)
      ) * (_FogIntensity * tmpvar_21))))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_23;
    tmpvar_23 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3(clamp (exp(
      (-((_FogColorIntensity * tmpvar_21)) * (_FogColorIntensity * tmpvar_21))
    ), 0.0, 1.0)));
    fogColor_19.xyz = tmpvar_23;
    fogColor_19.w = tmpvar_22;
    tmpvar_18 = fogColor_19;
  } else {
    mediump vec4 fogColor_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_26;
    tmpvar_26 = max (0.0, (sqrt(
      dot (tmpvar_25, tmpvar_25)
    ) - _FogStartDistance));
    highp float tmpvar_27;
    highp float tmpvar_28;
    tmpvar_28 = (_FogEndDistance - _FogStartDistance);
    tmpvar_27 = min (max ((
      (((500.0 * _FogIntensity) * tmpvar_26) / max (0.1, tmpvar_28))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_29;
    tmpvar_29 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3((1.0 - clamp (
      (((1000.0 * _FogColorIntensity) * tmpvar_26) / max (0.1, tmpvar_28))
    , 0.0, 1.0))));
    fogColor_24.xyz = tmpvar_29;
    fogColor_24.w = tmpvar_27;
    tmpvar_18 = fogColor_24;
  };
  tmpvar_12.w = 1.0;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_1.xyz;
  highp vec3 norm_31;
  norm_31 = tmpvar_30;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = unity_WorldToObject[0].xyz;
  tmpvar_32[1] = unity_WorldToObject[1].xyz;
  tmpvar_32[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(normalize((norm_31 * tmpvar_32)));
  tmpvar_13 = tmpvar_33;
  highp vec4 tmpvar_34;
  tmpvar_34 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_5.xz = (tmpvar_34.xz - ((tmpvar_34.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_5.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((tmpvar_34.xyz - adjCamPos_5));
  tmpvar_11 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = cos(_CamRotate);
  cost_4 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = sin(_CamRotate);
  sint_3 = tmpvar_37;
  highp mat2 tmpvar_38;
  tmpvar_38[0].x = cost_4;
  tmpvar_38[0].y = -(sint_3);
  tmpvar_38[1].x = sint_3;
  tmpvar_38[1].y = cost_4;
  tmpvar_11.xz = (tmpvar_38 * tmpvar_11.xz);
  highp vec3 tmpvar_39;
  tmpvar_39 = (_WorldSpaceCameraPos - tmpvar_34.xyz);
  tmpvar_12.xyz = tmpvar_39;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_COLOR0 = tmpvar_2;
  xlv_COLOR1 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_1.xyz;
  xlv_TEXCOORD2 = tmpvar_11;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
uniform highp vec4 _RimColor;
uniform highp float _RimPower;
uniform highp float _RimIntensity;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  mediump float tmpvar_32;
  tmpvar_32 = (1.0 - clamp (dot (
    normalize(xlv_TEXCOORD4.xyz)
  , xlv_TEXCOORD5), 0.0, 1.0));
  highp float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, _RimPower);
  finalColor_2.xyz = (finalColor_2.xyz + ((_RimColor.xyz * tmpvar_33) * _RimIntensity));
  finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "FRESNEL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _FogStartDistance;
uniform highp float _FogEndDistance;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1.w = 0.0;
  tmpvar_1.xyz = _glesNormal;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp float sint_3;
  highp float cost_4;
  highp vec3 adjCamPos_5;
  mediump vec4 offsetVertex_6;
  mediump float normalOut_7;
  highp vec4 offset_8;
  highp vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  mediump vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  offset_8.yzw = vec3(0.0, 0.0, 0.0);
  offset_8.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_8.y = offset_8.x;
  highp float tmpvar_14;
  tmpvar_14 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_7 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = ((_glesVertex + (
    (offset_8 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_1 * normalOut_7) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_6 = tmpvar_15;
  highp vec4 pos_16;
  pos_16 = offsetVertex_6;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = pos_16.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_17));
  tmpvar_10.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_10.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_18;
  if ((_FogColorNear.w > 0.5)) {
    mediump vec4 fogColor_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_21;
    tmpvar_21 = max (0.0, (sqrt(
      dot (tmpvar_20, tmpvar_20)
    ) - _FogStartDistance));
    highp float tmpvar_22;
    tmpvar_22 = min (max ((
      (1.0 - exp((-(
        (_FogIntensity * tmpvar_21)
      ) * (_FogIntensity * tmpvar_21))))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_23;
    tmpvar_23 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3(clamp (exp(
      (-((_FogColorIntensity * tmpvar_21)) * (_FogColorIntensity * tmpvar_21))
    ), 0.0, 1.0)));
    fogColor_19.xyz = tmpvar_23;
    fogColor_19.w = tmpvar_22;
    tmpvar_18 = fogColor_19;
  } else {
    mediump vec4 fogColor_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_26;
    tmpvar_26 = max (0.0, (sqrt(
      dot (tmpvar_25, tmpvar_25)
    ) - _FogStartDistance));
    highp float tmpvar_27;
    highp float tmpvar_28;
    tmpvar_28 = (_FogEndDistance - _FogStartDistance);
    tmpvar_27 = min (max ((
      (((500.0 * _FogIntensity) * tmpvar_26) / max (0.1, tmpvar_28))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_29;
    tmpvar_29 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3((1.0 - clamp (
      (((1000.0 * _FogColorIntensity) * tmpvar_26) / max (0.1, tmpvar_28))
    , 0.0, 1.0))));
    fogColor_24.xyz = tmpvar_29;
    fogColor_24.w = tmpvar_27;
    tmpvar_18 = fogColor_24;
  };
  tmpvar_12.w = 1.0;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_1.xyz;
  highp vec3 norm_31;
  norm_31 = tmpvar_30;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = unity_WorldToObject[0].xyz;
  tmpvar_32[1] = unity_WorldToObject[1].xyz;
  tmpvar_32[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(normalize((norm_31 * tmpvar_32)));
  tmpvar_13 = tmpvar_33;
  highp vec4 tmpvar_34;
  tmpvar_34 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_5.xz = (tmpvar_34.xz - ((tmpvar_34.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_5.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((tmpvar_34.xyz - adjCamPos_5));
  tmpvar_11 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = cos(_CamRotate);
  cost_4 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = sin(_CamRotate);
  sint_3 = tmpvar_37;
  highp mat2 tmpvar_38;
  tmpvar_38[0].x = cost_4;
  tmpvar_38[0].y = -(sint_3);
  tmpvar_38[1].x = sint_3;
  tmpvar_38[1].y = cost_4;
  tmpvar_11.xz = (tmpvar_38 * tmpvar_11.xz);
  highp vec3 tmpvar_39;
  tmpvar_39 = (_WorldSpaceCameraPos - tmpvar_34.xyz);
  tmpvar_12.xyz = tmpvar_39;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_COLOR0 = tmpvar_2;
  xlv_COLOR1 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_1.xyz;
  xlv_TEXCOORD2 = tmpvar_11;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
uniform highp vec4 _RimColor;
uniform highp float _RimPower;
uniform highp float _RimIntensity;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  mediump float tmpvar_32;
  tmpvar_32 = (1.0 - clamp (dot (
    normalize(xlv_TEXCOORD4.xyz)
  , xlv_TEXCOORD5), 0.0, 1.0));
  highp float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, _RimPower);
  finalColor_2.xyz = (finalColor_2.xyz + ((_RimColor.xyz * tmpvar_33) * _RimIntensity));
  finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "FRESNEL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _FogStartDistance;
uniform highp float _FogEndDistance;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1.w = 0.0;
  tmpvar_1.xyz = _glesNormal;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp float sint_3;
  highp float cost_4;
  highp vec3 adjCamPos_5;
  mediump vec4 offsetVertex_6;
  mediump float normalOut_7;
  highp vec4 offset_8;
  highp vec4 tmpvar_9;
  mediump vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  mediump vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  offset_8.yzw = vec3(0.0, 0.0, 0.0);
  offset_8.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_8.y = offset_8.x;
  highp float tmpvar_14;
  tmpvar_14 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_7 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = ((_glesVertex + (
    (offset_8 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_1 * normalOut_7) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_6 = tmpvar_15;
  highp vec4 pos_16;
  pos_16 = offsetVertex_6;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = pos_16.xyz;
  tmpvar_9 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_17));
  tmpvar_10.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_10.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_18;
  if ((_FogColorNear.w > 0.5)) {
    mediump vec4 fogColor_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_21;
    tmpvar_21 = max (0.0, (sqrt(
      dot (tmpvar_20, tmpvar_20)
    ) - _FogStartDistance));
    highp float tmpvar_22;
    tmpvar_22 = min (max ((
      (1.0 - exp((-(
        (_FogIntensity * tmpvar_21)
      ) * (_FogIntensity * tmpvar_21))))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_23;
    tmpvar_23 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3(clamp (exp(
      (-((_FogColorIntensity * tmpvar_21)) * (_FogColorIntensity * tmpvar_21))
    ), 0.0, 1.0)));
    fogColor_19.xyz = tmpvar_23;
    fogColor_19.w = tmpvar_22;
    tmpvar_18 = fogColor_19;
  } else {
    mediump vec4 fogColor_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_26;
    tmpvar_26 = max (0.0, (sqrt(
      dot (tmpvar_25, tmpvar_25)
    ) - _FogStartDistance));
    highp float tmpvar_27;
    highp float tmpvar_28;
    tmpvar_28 = (_FogEndDistance - _FogStartDistance);
    tmpvar_27 = min (max ((
      (((500.0 * _FogIntensity) * tmpvar_26) / max (0.1, tmpvar_28))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_29;
    tmpvar_29 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3((1.0 - clamp (
      (((1000.0 * _FogColorIntensity) * tmpvar_26) / max (0.1, tmpvar_28))
    , 0.0, 1.0))));
    fogColor_24.xyz = tmpvar_29;
    fogColor_24.w = tmpvar_27;
    tmpvar_18 = fogColor_24;
  };
  tmpvar_12.w = 1.0;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_1.xyz;
  highp vec3 norm_31;
  norm_31 = tmpvar_30;
  highp mat3 tmpvar_32;
  tmpvar_32[0] = unity_WorldToObject[0].xyz;
  tmpvar_32[1] = unity_WorldToObject[1].xyz;
  tmpvar_32[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_33;
  tmpvar_33 = normalize(normalize((norm_31 * tmpvar_32)));
  tmpvar_13 = tmpvar_33;
  highp vec4 tmpvar_34;
  tmpvar_34 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_5.xz = (tmpvar_34.xz - ((tmpvar_34.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_5.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((tmpvar_34.xyz - adjCamPos_5));
  tmpvar_11 = tmpvar_35;
  mediump float tmpvar_36;
  tmpvar_36 = cos(_CamRotate);
  cost_4 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = sin(_CamRotate);
  sint_3 = tmpvar_37;
  highp mat2 tmpvar_38;
  tmpvar_38[0].x = cost_4;
  tmpvar_38[0].y = -(sint_3);
  tmpvar_38[1].x = sint_3;
  tmpvar_38[1].y = cost_4;
  tmpvar_11.xz = (tmpvar_38 * tmpvar_11.xz);
  highp vec3 tmpvar_39;
  tmpvar_39 = (_WorldSpaceCameraPos - tmpvar_34.xyz);
  tmpvar_12.xyz = tmpvar_39;
  gl_Position = tmpvar_9;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_COLOR0 = tmpvar_2;
  xlv_COLOR1 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_1.xyz;
  xlv_TEXCOORD2 = tmpvar_11;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
uniform highp vec4 _RimColor;
uniform highp float _RimPower;
uniform highp float _RimIntensity;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  mediump float tmpvar_32;
  tmpvar_32 = (1.0 - clamp (dot (
    normalize(xlv_TEXCOORD4.xyz)
  , xlv_TEXCOORD5), 0.0, 1.0));
  highp float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, _RimPower);
  finalColor_2.xyz = (finalColor_2.xyz + ((_RimColor.xyz * tmpvar_33) * _RimIntensity));
  finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_HEIGHT" "FRESNEL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _glesNormal;
  highp float sint_3;
  highp float cost_4;
  highp vec3 adjCamPos_5;
  mediump vec4 offsetVertex_6;
  mediump float normalOut_7;
  highp vec4 offset_8;
  mediump vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  mediump vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  offset_8.yzw = vec3(0.0, 0.0, 0.0);
  offset_8.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_8.y = offset_8.x;
  highp float tmpvar_13;
  tmpvar_13 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_7 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = ((_glesVertex + (
    (offset_8 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_2 * normalOut_7) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_6 = tmpvar_14;
  highp vec4 pos_15;
  pos_15 = offsetVertex_6;
  highp vec4 tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = pos_15.xyz;
  tmpvar_16 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_17));
  tmpvar_9.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_9.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_21;
  mediump float fogFactor_22;
  mediump vec3 fogColor_23;
  mediump vec3 heightFogColor_24;
  highp float HeightFogFactor_25;
  mediump vec3 atomesphereFogColor_26;
  mediump float h_27;
  highp float linearFogDensity_28;
  mediump float len_29;
  highp float tmpvar_30;
  tmpvar_30 = sqrt(dot (tmpvar_20, tmpvar_20));
  len_29 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (((len_29 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_28 = (tmpvar_31 * (2.0 - tmpvar_31));
  if ((len_29 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_28 = (linearFogDensity_28 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_32;
  tmpvar_32 = min (pow (linearFogDensity_28, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_28 = tmpvar_32;
  mediump float tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((tmpvar_19.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_33 = tmpvar_34;
  h_27 = (tmpvar_33 * (2.0 - tmpvar_33));
  highp vec3 tmpvar_35;
  tmpvar_35 = (_HeigtFogColBase.xyz + (h_27 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_26 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (atomesphereFogColor_26, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_29 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_26 = tmpvar_36;
  mediump float tmpvar_37;
  mediump float r_38;
  mediump float f_39;
  mediump float u_40;
  mediump float l_41;
  mediump float fogInt_42;
  fogInt_42 = 1.0;
  highp float tmpvar_43;
  tmpvar_43 = (_HeigtFogParams.x * tmpvar_20.y);
  highp float tmpvar_44;
  tmpvar_44 = abs(tmpvar_43);
  if ((tmpvar_44 > 0.01)) {
    highp float tmpvar_45;
    tmpvar_45 = exp(-(tmpvar_43));
    fogInt_42 = ((1.0 - tmpvar_45) / tmpvar_43);
  };
  highp float tmpvar_46;
  tmpvar_46 = sqrt(dot (tmpvar_20, tmpvar_20));
  l_41 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = (l_41 * _HeigtFogParams.y);
  u_40 = tmpvar_47;
  fogInt_42 = (fogInt_42 * u_40);
  mediump float tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((l_41 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_48 = tmpvar_49;
  r_38 = (tmpvar_48 * (2.0 - tmpvar_48));
  r_38 = ((r_38 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_39 = ((1.0 - clamp (
    exp2(-(fogInt_42))
  , 0.0, 1.0)) * r_38);
  highp float tmpvar_50;
  tmpvar_50 = min (f_39, _HeigtFogColBase.w);
  tmpvar_37 = tmpvar_50;
  HeightFogFactor_25 = tmpvar_37;
  highp vec3 tmpvar_51;
  tmpvar_51 = _Mihoyo_FogColor.xyz;
  heightFogColor_24 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = ((heightFogColor_24 * HeightFogFactor_25) + ((atomesphereFogColor_26 * tmpvar_32) * (1.0 - HeightFogFactor_25)));
  fogColor_23 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = ((1.0 - tmpvar_32) * (1.0 - HeightFogFactor_25));
  fogFactor_22 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54.xyz = fogColor_23;
  tmpvar_54.w = fogFactor_22;
  tmpvar_21 = tmpvar_54;
  tmpvar_18 = tmpvar_21;
  tmpvar_11.w = 1.0;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_2.xyz;
  highp vec3 norm_56;
  norm_56 = tmpvar_55;
  highp mat3 tmpvar_57;
  tmpvar_57[0] = unity_WorldToObject[0].xyz;
  tmpvar_57[1] = unity_WorldToObject[1].xyz;
  tmpvar_57[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(normalize((norm_56 * tmpvar_57)));
  tmpvar_12 = tmpvar_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_5.xz = (tmpvar_59.xz - ((tmpvar_59.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_5.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize((tmpvar_59.xyz - adjCamPos_5));
  tmpvar_10 = tmpvar_60;
  mediump float tmpvar_61;
  tmpvar_61 = cos(_CamRotate);
  cost_4 = tmpvar_61;
  mediump float tmpvar_62;
  tmpvar_62 = sin(_CamRotate);
  sint_3 = tmpvar_62;
  highp mat2 tmpvar_63;
  tmpvar_63[0].x = cost_4;
  tmpvar_63[0].y = -(sint_3);
  tmpvar_63[1].x = sint_3;
  tmpvar_63[1].y = cost_4;
  tmpvar_10.xz = (tmpvar_63 * tmpvar_10.xz);
  highp vec3 tmpvar_64;
  tmpvar_64 = (_WorldSpaceCameraPos - tmpvar_59.xyz);
  tmpvar_11.xyz = tmpvar_64;
  gl_Position = tmpvar_16;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_COLOR0 = tmpvar_1;
  xlv_COLOR1 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_2.xyz;
  xlv_TEXCOORD2 = tmpvar_10;
  xlv_TEXCOORD4 = tmpvar_11;
  xlv_TEXCOORD5 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
uniform highp vec4 _RimColor;
uniform highp float _RimPower;
uniform highp float _RimIntensity;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  mediump float tmpvar_32;
  tmpvar_32 = (1.0 - clamp (dot (
    normalize(xlv_TEXCOORD4.xyz)
  , xlv_TEXCOORD5), 0.0, 1.0));
  highp float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, _RimPower);
  finalColor_2.xyz = (finalColor_2.xyz + ((_RimColor.xyz * tmpvar_33) * _RimIntensity));
  finalColor_2.xyz = (xlv_COLOR1.xyz + (finalColor_2.xyz * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_HEIGHT" "FRESNEL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _glesNormal;
  highp float sint_3;
  highp float cost_4;
  highp vec3 adjCamPos_5;
  mediump vec4 offsetVertex_6;
  mediump float normalOut_7;
  highp vec4 offset_8;
  mediump vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  mediump vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  offset_8.yzw = vec3(0.0, 0.0, 0.0);
  offset_8.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_8.y = offset_8.x;
  highp float tmpvar_13;
  tmpvar_13 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_7 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = ((_glesVertex + (
    (offset_8 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_2 * normalOut_7) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_6 = tmpvar_14;
  highp vec4 pos_15;
  pos_15 = offsetVertex_6;
  highp vec4 tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = pos_15.xyz;
  tmpvar_16 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_17));
  tmpvar_9.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_9.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_21;
  mediump float fogFactor_22;
  mediump vec3 fogColor_23;
  mediump vec3 heightFogColor_24;
  highp float HeightFogFactor_25;
  mediump vec3 atomesphereFogColor_26;
  mediump float h_27;
  highp float linearFogDensity_28;
  mediump float len_29;
  highp float tmpvar_30;
  tmpvar_30 = sqrt(dot (tmpvar_20, tmpvar_20));
  len_29 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (((len_29 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_28 = (tmpvar_31 * (2.0 - tmpvar_31));
  if ((len_29 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_28 = (linearFogDensity_28 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_32;
  tmpvar_32 = min (pow (linearFogDensity_28, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_28 = tmpvar_32;
  mediump float tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((tmpvar_19.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_33 = tmpvar_34;
  h_27 = (tmpvar_33 * (2.0 - tmpvar_33));
  highp vec3 tmpvar_35;
  tmpvar_35 = (_HeigtFogColBase.xyz + (h_27 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_26 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (atomesphereFogColor_26, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_29 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_26 = tmpvar_36;
  mediump float tmpvar_37;
  mediump float r_38;
  mediump float f_39;
  mediump float u_40;
  mediump float l_41;
  mediump float fogInt_42;
  fogInt_42 = 1.0;
  highp float tmpvar_43;
  tmpvar_43 = (_HeigtFogParams.x * tmpvar_20.y);
  highp float tmpvar_44;
  tmpvar_44 = abs(tmpvar_43);
  if ((tmpvar_44 > 0.01)) {
    highp float tmpvar_45;
    tmpvar_45 = exp(-(tmpvar_43));
    fogInt_42 = ((1.0 - tmpvar_45) / tmpvar_43);
  };
  highp float tmpvar_46;
  tmpvar_46 = sqrt(dot (tmpvar_20, tmpvar_20));
  l_41 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = (l_41 * _HeigtFogParams.y);
  u_40 = tmpvar_47;
  fogInt_42 = (fogInt_42 * u_40);
  mediump float tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((l_41 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_48 = tmpvar_49;
  r_38 = (tmpvar_48 * (2.0 - tmpvar_48));
  r_38 = ((r_38 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_39 = ((1.0 - clamp (
    exp2(-(fogInt_42))
  , 0.0, 1.0)) * r_38);
  highp float tmpvar_50;
  tmpvar_50 = min (f_39, _HeigtFogColBase.w);
  tmpvar_37 = tmpvar_50;
  HeightFogFactor_25 = tmpvar_37;
  highp vec3 tmpvar_51;
  tmpvar_51 = _Mihoyo_FogColor.xyz;
  heightFogColor_24 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = ((heightFogColor_24 * HeightFogFactor_25) + ((atomesphereFogColor_26 * tmpvar_32) * (1.0 - HeightFogFactor_25)));
  fogColor_23 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = ((1.0 - tmpvar_32) * (1.0 - HeightFogFactor_25));
  fogFactor_22 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54.xyz = fogColor_23;
  tmpvar_54.w = fogFactor_22;
  tmpvar_21 = tmpvar_54;
  tmpvar_18 = tmpvar_21;
  tmpvar_11.w = 1.0;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_2.xyz;
  highp vec3 norm_56;
  norm_56 = tmpvar_55;
  highp mat3 tmpvar_57;
  tmpvar_57[0] = unity_WorldToObject[0].xyz;
  tmpvar_57[1] = unity_WorldToObject[1].xyz;
  tmpvar_57[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(normalize((norm_56 * tmpvar_57)));
  tmpvar_12 = tmpvar_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_5.xz = (tmpvar_59.xz - ((tmpvar_59.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_5.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize((tmpvar_59.xyz - adjCamPos_5));
  tmpvar_10 = tmpvar_60;
  mediump float tmpvar_61;
  tmpvar_61 = cos(_CamRotate);
  cost_4 = tmpvar_61;
  mediump float tmpvar_62;
  tmpvar_62 = sin(_CamRotate);
  sint_3 = tmpvar_62;
  highp mat2 tmpvar_63;
  tmpvar_63[0].x = cost_4;
  tmpvar_63[0].y = -(sint_3);
  tmpvar_63[1].x = sint_3;
  tmpvar_63[1].y = cost_4;
  tmpvar_10.xz = (tmpvar_63 * tmpvar_10.xz);
  highp vec3 tmpvar_64;
  tmpvar_64 = (_WorldSpaceCameraPos - tmpvar_59.xyz);
  tmpvar_11.xyz = tmpvar_64;
  gl_Position = tmpvar_16;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_COLOR0 = tmpvar_1;
  xlv_COLOR1 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_2.xyz;
  xlv_TEXCOORD2 = tmpvar_10;
  xlv_TEXCOORD4 = tmpvar_11;
  xlv_TEXCOORD5 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
uniform highp vec4 _RimColor;
uniform highp float _RimPower;
uniform highp float _RimIntensity;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  mediump float tmpvar_32;
  tmpvar_32 = (1.0 - clamp (dot (
    normalize(xlv_TEXCOORD4.xyz)
  , xlv_TEXCOORD5), 0.0, 1.0));
  highp float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, _RimPower);
  finalColor_2.xyz = (finalColor_2.xyz + ((_RimColor.xyz * tmpvar_33) * _RimIntensity));
  finalColor_2.xyz = (xlv_COLOR1.xyz + (finalColor_2.xyz * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_HEIGHT" "FRESNEL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _glesNormal;
  highp float sint_3;
  highp float cost_4;
  highp vec3 adjCamPos_5;
  mediump vec4 offsetVertex_6;
  mediump float normalOut_7;
  highp vec4 offset_8;
  mediump vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  mediump vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  offset_8.yzw = vec3(0.0, 0.0, 0.0);
  offset_8.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_8.y = offset_8.x;
  highp float tmpvar_13;
  tmpvar_13 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_7 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = ((_glesVertex + (
    (offset_8 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_2 * normalOut_7) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_6 = tmpvar_14;
  highp vec4 pos_15;
  pos_15 = offsetVertex_6;
  highp vec4 tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = pos_15.xyz;
  tmpvar_16 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_17));
  tmpvar_9.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_9.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_21;
  mediump float fogFactor_22;
  mediump vec3 fogColor_23;
  mediump vec3 heightFogColor_24;
  highp float HeightFogFactor_25;
  mediump vec3 atomesphereFogColor_26;
  mediump float h_27;
  highp float linearFogDensity_28;
  mediump float len_29;
  highp float tmpvar_30;
  tmpvar_30 = sqrt(dot (tmpvar_20, tmpvar_20));
  len_29 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (((len_29 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_28 = (tmpvar_31 * (2.0 - tmpvar_31));
  if ((len_29 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_28 = (linearFogDensity_28 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_32;
  tmpvar_32 = min (pow (linearFogDensity_28, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_28 = tmpvar_32;
  mediump float tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((tmpvar_19.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_33 = tmpvar_34;
  h_27 = (tmpvar_33 * (2.0 - tmpvar_33));
  highp vec3 tmpvar_35;
  tmpvar_35 = (_HeigtFogColBase.xyz + (h_27 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_26 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (atomesphereFogColor_26, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_29 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_26 = tmpvar_36;
  mediump float tmpvar_37;
  mediump float r_38;
  mediump float f_39;
  mediump float u_40;
  mediump float l_41;
  mediump float fogInt_42;
  fogInt_42 = 1.0;
  highp float tmpvar_43;
  tmpvar_43 = (_HeigtFogParams.x * tmpvar_20.y);
  highp float tmpvar_44;
  tmpvar_44 = abs(tmpvar_43);
  if ((tmpvar_44 > 0.01)) {
    highp float tmpvar_45;
    tmpvar_45 = exp(-(tmpvar_43));
    fogInt_42 = ((1.0 - tmpvar_45) / tmpvar_43);
  };
  highp float tmpvar_46;
  tmpvar_46 = sqrt(dot (tmpvar_20, tmpvar_20));
  l_41 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = (l_41 * _HeigtFogParams.y);
  u_40 = tmpvar_47;
  fogInt_42 = (fogInt_42 * u_40);
  mediump float tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((l_41 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_48 = tmpvar_49;
  r_38 = (tmpvar_48 * (2.0 - tmpvar_48));
  r_38 = ((r_38 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_39 = ((1.0 - clamp (
    exp2(-(fogInt_42))
  , 0.0, 1.0)) * r_38);
  highp float tmpvar_50;
  tmpvar_50 = min (f_39, _HeigtFogColBase.w);
  tmpvar_37 = tmpvar_50;
  HeightFogFactor_25 = tmpvar_37;
  highp vec3 tmpvar_51;
  tmpvar_51 = _Mihoyo_FogColor.xyz;
  heightFogColor_24 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = ((heightFogColor_24 * HeightFogFactor_25) + ((atomesphereFogColor_26 * tmpvar_32) * (1.0 - HeightFogFactor_25)));
  fogColor_23 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = ((1.0 - tmpvar_32) * (1.0 - HeightFogFactor_25));
  fogFactor_22 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54.xyz = fogColor_23;
  tmpvar_54.w = fogFactor_22;
  tmpvar_21 = tmpvar_54;
  tmpvar_18 = tmpvar_21;
  tmpvar_11.w = 1.0;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_2.xyz;
  highp vec3 norm_56;
  norm_56 = tmpvar_55;
  highp mat3 tmpvar_57;
  tmpvar_57[0] = unity_WorldToObject[0].xyz;
  tmpvar_57[1] = unity_WorldToObject[1].xyz;
  tmpvar_57[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(normalize((norm_56 * tmpvar_57)));
  tmpvar_12 = tmpvar_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_5.xz = (tmpvar_59.xz - ((tmpvar_59.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_5.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize((tmpvar_59.xyz - adjCamPos_5));
  tmpvar_10 = tmpvar_60;
  mediump float tmpvar_61;
  tmpvar_61 = cos(_CamRotate);
  cost_4 = tmpvar_61;
  mediump float tmpvar_62;
  tmpvar_62 = sin(_CamRotate);
  sint_3 = tmpvar_62;
  highp mat2 tmpvar_63;
  tmpvar_63[0].x = cost_4;
  tmpvar_63[0].y = -(sint_3);
  tmpvar_63[1].x = sint_3;
  tmpvar_63[1].y = cost_4;
  tmpvar_10.xz = (tmpvar_63 * tmpvar_10.xz);
  highp vec3 tmpvar_64;
  tmpvar_64 = (_WorldSpaceCameraPos - tmpvar_59.xyz);
  tmpvar_11.xyz = tmpvar_64;
  gl_Position = tmpvar_16;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_COLOR0 = tmpvar_1;
  xlv_COLOR1 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_2.xyz;
  xlv_TEXCOORD2 = tmpvar_10;
  xlv_TEXCOORD4 = tmpvar_11;
  xlv_TEXCOORD5 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
uniform highp vec4 _RimColor;
uniform highp float _RimPower;
uniform highp float _RimIntensity;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  mediump float tmpvar_32;
  tmpvar_32 = (1.0 - clamp (dot (
    normalize(xlv_TEXCOORD4.xyz)
  , xlv_TEXCOORD5), 0.0, 1.0));
  highp float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, _RimPower);
  finalColor_2.xyz = (finalColor_2.xyz + ((_RimColor.xyz * tmpvar_33) * _RimIntensity));
  finalColor_2.xyz = (xlv_COLOR1.xyz + (finalColor_2.xyz * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FRESNEL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _glesNormal;
  highp float sint_3;
  highp float cost_4;
  highp vec3 adjCamPos_5;
  mediump vec4 offsetVertex_6;
  mediump float normalOut_7;
  highp vec4 offset_8;
  mediump vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  mediump vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  offset_8.yzw = vec3(0.0, 0.0, 0.0);
  offset_8.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_8.y = offset_8.x;
  highp float tmpvar_13;
  tmpvar_13 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_7 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = ((_glesVertex + (
    (offset_8 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_2 * normalOut_7) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_6 = tmpvar_14;
  highp vec4 pos_15;
  pos_15 = offsetVertex_6;
  highp vec4 tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = pos_15.xyz;
  tmpvar_16 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_17));
  tmpvar_9.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_9.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_21;
  mediump float fogFactor_22;
  mediump vec3 fogColor_23;
  mediump vec3 heightFogColor_24;
  highp float HeightFogFactor_25;
  mediump vec3 atomesphereFogColor_26;
  mediump float h_27;
  highp float linearFogDensity_28;
  mediump float len_29;
  highp float tmpvar_30;
  tmpvar_30 = sqrt(dot (tmpvar_20, tmpvar_20));
  len_29 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (((len_29 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_28 = (tmpvar_31 * (2.0 - tmpvar_31));
  if ((len_29 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_28 = (linearFogDensity_28 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_32;
  tmpvar_32 = min (pow (linearFogDensity_28, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_28 = tmpvar_32;
  mediump float tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((tmpvar_19.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_33 = tmpvar_34;
  h_27 = (tmpvar_33 * (2.0 - tmpvar_33));
  highp vec3 tmpvar_35;
  tmpvar_35 = (_HeigtFogColBase2.xyz + (h_27 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_26 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (atomesphereFogColor_26, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_29 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_26 = tmpvar_36;
  mediump float tmpvar_37;
  mediump float r_38;
  mediump float f_39;
  mediump float u_40;
  mediump float l_41;
  mediump float fogInt_42;
  fogInt_42 = 1.0;
  highp float tmpvar_43;
  tmpvar_43 = (_HeigtFogParams2.x * tmpvar_20.y);
  highp float tmpvar_44;
  tmpvar_44 = abs(tmpvar_43);
  if ((tmpvar_44 > 0.01)) {
    highp float tmpvar_45;
    tmpvar_45 = exp(-(tmpvar_43));
    fogInt_42 = ((1.0 - tmpvar_45) / tmpvar_43);
  };
  highp float tmpvar_46;
  tmpvar_46 = sqrt(dot (tmpvar_20, tmpvar_20));
  l_41 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = (l_41 * _HeigtFogParams2.y);
  u_40 = tmpvar_47;
  fogInt_42 = (fogInt_42 * u_40);
  mediump float tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((l_41 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_48 = tmpvar_49;
  r_38 = (tmpvar_48 * (2.0 - tmpvar_48));
  r_38 = ((r_38 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_39 = ((1.0 - clamp (
    exp2(-(fogInt_42))
  , 0.0, 1.0)) * r_38);
  highp float tmpvar_50;
  tmpvar_50 = min (f_39, _HeigtFogColBase2.w);
  tmpvar_37 = tmpvar_50;
  HeightFogFactor_25 = tmpvar_37;
  highp vec3 tmpvar_51;
  tmpvar_51 = _Mihoyo_FogColor2.xyz;
  heightFogColor_24 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = ((heightFogColor_24 * HeightFogFactor_25) + ((atomesphereFogColor_26 * tmpvar_32) * (1.0 - HeightFogFactor_25)));
  fogColor_23 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = ((1.0 - tmpvar_32) * (1.0 - HeightFogFactor_25));
  fogFactor_22 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54.xyz = fogColor_23;
  tmpvar_54.w = fogFactor_22;
  tmpvar_21 = tmpvar_54;
  highp vec4 tmpvar_55;
  mediump float fogFactor_56;
  mediump vec3 fogColor_57;
  mediump vec3 heightFogColor_58;
  highp float HeightFogFactor_59;
  mediump vec3 atomesphereFogColor_60;
  mediump float h_61;
  highp float linearFogDensity_62;
  mediump float len_63;
  highp float tmpvar_64;
  tmpvar_64 = sqrt(dot (tmpvar_20, tmpvar_20));
  len_63 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (((len_63 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_62 = (tmpvar_65 * (2.0 - tmpvar_65));
  if ((len_63 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_62 = (linearFogDensity_62 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_66;
  tmpvar_66 = min (pow (linearFogDensity_62, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_62 = tmpvar_66;
  mediump float tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((tmpvar_19.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_67 = tmpvar_68;
  h_61 = (tmpvar_67 * (2.0 - tmpvar_67));
  highp vec3 tmpvar_69;
  tmpvar_69 = (_HeigtFogColBase3.xyz + (h_61 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_60 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = mix (atomesphereFogColor_60, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_63 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_60 = tmpvar_70;
  mediump float tmpvar_71;
  mediump float r_72;
  mediump float f_73;
  mediump float u_74;
  mediump float l_75;
  mediump float fogInt_76;
  fogInt_76 = 1.0;
  highp float tmpvar_77;
  tmpvar_77 = (_HeigtFogParams3.x * tmpvar_20.y);
  highp float tmpvar_78;
  tmpvar_78 = abs(tmpvar_77);
  if ((tmpvar_78 > 0.01)) {
    highp float tmpvar_79;
    tmpvar_79 = exp(-(tmpvar_77));
    fogInt_76 = ((1.0 - tmpvar_79) / tmpvar_77);
  };
  highp float tmpvar_80;
  tmpvar_80 = sqrt(dot (tmpvar_20, tmpvar_20));
  l_75 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (l_75 * _HeigtFogParams3.y);
  u_74 = tmpvar_81;
  fogInt_76 = (fogInt_76 * u_74);
  mediump float tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (((l_75 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_82 = tmpvar_83;
  r_72 = (tmpvar_82 * (2.0 - tmpvar_82));
  r_72 = ((r_72 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_73 = ((1.0 - clamp (
    exp2(-(fogInt_76))
  , 0.0, 1.0)) * r_72);
  highp float tmpvar_84;
  tmpvar_84 = min (f_73, _HeigtFogColBase3.w);
  tmpvar_71 = tmpvar_84;
  HeightFogFactor_59 = tmpvar_71;
  highp vec3 tmpvar_85;
  tmpvar_85 = _Mihoyo_FogColor3.xyz;
  heightFogColor_58 = tmpvar_85;
  highp vec3 tmpvar_86;
  tmpvar_86 = ((heightFogColor_58 * HeightFogFactor_59) + ((atomesphereFogColor_60 * tmpvar_66) * (1.0 - HeightFogFactor_59)));
  fogColor_57 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = ((1.0 - tmpvar_66) * (1.0 - HeightFogFactor_59));
  fogFactor_56 = tmpvar_87;
  mediump vec4 tmpvar_88;
  tmpvar_88.xyz = fogColor_57;
  tmpvar_88.w = fogFactor_56;
  tmpvar_55 = tmpvar_88;
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (tmpvar_21, tmpvar_55, vec4(_LerpFactor));
  tmpvar_18 = tmpvar_89;
  tmpvar_11.w = 1.0;
  mediump vec3 tmpvar_90;
  tmpvar_90 = tmpvar_2.xyz;
  highp vec3 norm_91;
  norm_91 = tmpvar_90;
  highp mat3 tmpvar_92;
  tmpvar_92[0] = unity_WorldToObject[0].xyz;
  tmpvar_92[1] = unity_WorldToObject[1].xyz;
  tmpvar_92[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_93;
  tmpvar_93 = normalize(normalize((norm_91 * tmpvar_92)));
  tmpvar_12 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_5.xz = (tmpvar_94.xz - ((tmpvar_94.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_5.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_95;
  tmpvar_95 = normalize((tmpvar_94.xyz - adjCamPos_5));
  tmpvar_10 = tmpvar_95;
  mediump float tmpvar_96;
  tmpvar_96 = cos(_CamRotate);
  cost_4 = tmpvar_96;
  mediump float tmpvar_97;
  tmpvar_97 = sin(_CamRotate);
  sint_3 = tmpvar_97;
  highp mat2 tmpvar_98;
  tmpvar_98[0].x = cost_4;
  tmpvar_98[0].y = -(sint_3);
  tmpvar_98[1].x = sint_3;
  tmpvar_98[1].y = cost_4;
  tmpvar_10.xz = (tmpvar_98 * tmpvar_10.xz);
  highp vec3 tmpvar_99;
  tmpvar_99 = (_WorldSpaceCameraPos - tmpvar_94.xyz);
  tmpvar_11.xyz = tmpvar_99;
  gl_Position = tmpvar_16;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_COLOR0 = tmpvar_1;
  xlv_COLOR1 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_2.xyz;
  xlv_TEXCOORD2 = tmpvar_10;
  xlv_TEXCOORD4 = tmpvar_11;
  xlv_TEXCOORD5 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
uniform highp vec4 _RimColor;
uniform highp float _RimPower;
uniform highp float _RimIntensity;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  mediump float tmpvar_32;
  tmpvar_32 = (1.0 - clamp (dot (
    normalize(xlv_TEXCOORD4.xyz)
  , xlv_TEXCOORD5), 0.0, 1.0));
  highp float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, _RimPower);
  finalColor_2.xyz = (finalColor_2.xyz + ((_RimColor.xyz * tmpvar_33) * _RimIntensity));
  finalColor_2.xyz = (xlv_COLOR1.xyz + (finalColor_2.xyz * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FRESNEL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _glesNormal;
  highp float sint_3;
  highp float cost_4;
  highp vec3 adjCamPos_5;
  mediump vec4 offsetVertex_6;
  mediump float normalOut_7;
  highp vec4 offset_8;
  mediump vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  mediump vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  offset_8.yzw = vec3(0.0, 0.0, 0.0);
  offset_8.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_8.y = offset_8.x;
  highp float tmpvar_13;
  tmpvar_13 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_7 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = ((_glesVertex + (
    (offset_8 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_2 * normalOut_7) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_6 = tmpvar_14;
  highp vec4 pos_15;
  pos_15 = offsetVertex_6;
  highp vec4 tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = pos_15.xyz;
  tmpvar_16 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_17));
  tmpvar_9.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_9.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_21;
  mediump float fogFactor_22;
  mediump vec3 fogColor_23;
  mediump vec3 heightFogColor_24;
  highp float HeightFogFactor_25;
  mediump vec3 atomesphereFogColor_26;
  mediump float h_27;
  highp float linearFogDensity_28;
  mediump float len_29;
  highp float tmpvar_30;
  tmpvar_30 = sqrt(dot (tmpvar_20, tmpvar_20));
  len_29 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (((len_29 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_28 = (tmpvar_31 * (2.0 - tmpvar_31));
  if ((len_29 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_28 = (linearFogDensity_28 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_32;
  tmpvar_32 = min (pow (linearFogDensity_28, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_28 = tmpvar_32;
  mediump float tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((tmpvar_19.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_33 = tmpvar_34;
  h_27 = (tmpvar_33 * (2.0 - tmpvar_33));
  highp vec3 tmpvar_35;
  tmpvar_35 = (_HeigtFogColBase2.xyz + (h_27 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_26 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (atomesphereFogColor_26, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_29 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_26 = tmpvar_36;
  mediump float tmpvar_37;
  mediump float r_38;
  mediump float f_39;
  mediump float u_40;
  mediump float l_41;
  mediump float fogInt_42;
  fogInt_42 = 1.0;
  highp float tmpvar_43;
  tmpvar_43 = (_HeigtFogParams2.x * tmpvar_20.y);
  highp float tmpvar_44;
  tmpvar_44 = abs(tmpvar_43);
  if ((tmpvar_44 > 0.01)) {
    highp float tmpvar_45;
    tmpvar_45 = exp(-(tmpvar_43));
    fogInt_42 = ((1.0 - tmpvar_45) / tmpvar_43);
  };
  highp float tmpvar_46;
  tmpvar_46 = sqrt(dot (tmpvar_20, tmpvar_20));
  l_41 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = (l_41 * _HeigtFogParams2.y);
  u_40 = tmpvar_47;
  fogInt_42 = (fogInt_42 * u_40);
  mediump float tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((l_41 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_48 = tmpvar_49;
  r_38 = (tmpvar_48 * (2.0 - tmpvar_48));
  r_38 = ((r_38 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_39 = ((1.0 - clamp (
    exp2(-(fogInt_42))
  , 0.0, 1.0)) * r_38);
  highp float tmpvar_50;
  tmpvar_50 = min (f_39, _HeigtFogColBase2.w);
  tmpvar_37 = tmpvar_50;
  HeightFogFactor_25 = tmpvar_37;
  highp vec3 tmpvar_51;
  tmpvar_51 = _Mihoyo_FogColor2.xyz;
  heightFogColor_24 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = ((heightFogColor_24 * HeightFogFactor_25) + ((atomesphereFogColor_26 * tmpvar_32) * (1.0 - HeightFogFactor_25)));
  fogColor_23 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = ((1.0 - tmpvar_32) * (1.0 - HeightFogFactor_25));
  fogFactor_22 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54.xyz = fogColor_23;
  tmpvar_54.w = fogFactor_22;
  tmpvar_21 = tmpvar_54;
  highp vec4 tmpvar_55;
  mediump float fogFactor_56;
  mediump vec3 fogColor_57;
  mediump vec3 heightFogColor_58;
  highp float HeightFogFactor_59;
  mediump vec3 atomesphereFogColor_60;
  mediump float h_61;
  highp float linearFogDensity_62;
  mediump float len_63;
  highp float tmpvar_64;
  tmpvar_64 = sqrt(dot (tmpvar_20, tmpvar_20));
  len_63 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (((len_63 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_62 = (tmpvar_65 * (2.0 - tmpvar_65));
  if ((len_63 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_62 = (linearFogDensity_62 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_66;
  tmpvar_66 = min (pow (linearFogDensity_62, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_62 = tmpvar_66;
  mediump float tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((tmpvar_19.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_67 = tmpvar_68;
  h_61 = (tmpvar_67 * (2.0 - tmpvar_67));
  highp vec3 tmpvar_69;
  tmpvar_69 = (_HeigtFogColBase3.xyz + (h_61 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_60 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = mix (atomesphereFogColor_60, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_63 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_60 = tmpvar_70;
  mediump float tmpvar_71;
  mediump float r_72;
  mediump float f_73;
  mediump float u_74;
  mediump float l_75;
  mediump float fogInt_76;
  fogInt_76 = 1.0;
  highp float tmpvar_77;
  tmpvar_77 = (_HeigtFogParams3.x * tmpvar_20.y);
  highp float tmpvar_78;
  tmpvar_78 = abs(tmpvar_77);
  if ((tmpvar_78 > 0.01)) {
    highp float tmpvar_79;
    tmpvar_79 = exp(-(tmpvar_77));
    fogInt_76 = ((1.0 - tmpvar_79) / tmpvar_77);
  };
  highp float tmpvar_80;
  tmpvar_80 = sqrt(dot (tmpvar_20, tmpvar_20));
  l_75 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (l_75 * _HeigtFogParams3.y);
  u_74 = tmpvar_81;
  fogInt_76 = (fogInt_76 * u_74);
  mediump float tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (((l_75 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_82 = tmpvar_83;
  r_72 = (tmpvar_82 * (2.0 - tmpvar_82));
  r_72 = ((r_72 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_73 = ((1.0 - clamp (
    exp2(-(fogInt_76))
  , 0.0, 1.0)) * r_72);
  highp float tmpvar_84;
  tmpvar_84 = min (f_73, _HeigtFogColBase3.w);
  tmpvar_71 = tmpvar_84;
  HeightFogFactor_59 = tmpvar_71;
  highp vec3 tmpvar_85;
  tmpvar_85 = _Mihoyo_FogColor3.xyz;
  heightFogColor_58 = tmpvar_85;
  highp vec3 tmpvar_86;
  tmpvar_86 = ((heightFogColor_58 * HeightFogFactor_59) + ((atomesphereFogColor_60 * tmpvar_66) * (1.0 - HeightFogFactor_59)));
  fogColor_57 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = ((1.0 - tmpvar_66) * (1.0 - HeightFogFactor_59));
  fogFactor_56 = tmpvar_87;
  mediump vec4 tmpvar_88;
  tmpvar_88.xyz = fogColor_57;
  tmpvar_88.w = fogFactor_56;
  tmpvar_55 = tmpvar_88;
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (tmpvar_21, tmpvar_55, vec4(_LerpFactor));
  tmpvar_18 = tmpvar_89;
  tmpvar_11.w = 1.0;
  mediump vec3 tmpvar_90;
  tmpvar_90 = tmpvar_2.xyz;
  highp vec3 norm_91;
  norm_91 = tmpvar_90;
  highp mat3 tmpvar_92;
  tmpvar_92[0] = unity_WorldToObject[0].xyz;
  tmpvar_92[1] = unity_WorldToObject[1].xyz;
  tmpvar_92[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_93;
  tmpvar_93 = normalize(normalize((norm_91 * tmpvar_92)));
  tmpvar_12 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_5.xz = (tmpvar_94.xz - ((tmpvar_94.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_5.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_95;
  tmpvar_95 = normalize((tmpvar_94.xyz - adjCamPos_5));
  tmpvar_10 = tmpvar_95;
  mediump float tmpvar_96;
  tmpvar_96 = cos(_CamRotate);
  cost_4 = tmpvar_96;
  mediump float tmpvar_97;
  tmpvar_97 = sin(_CamRotate);
  sint_3 = tmpvar_97;
  highp mat2 tmpvar_98;
  tmpvar_98[0].x = cost_4;
  tmpvar_98[0].y = -(sint_3);
  tmpvar_98[1].x = sint_3;
  tmpvar_98[1].y = cost_4;
  tmpvar_10.xz = (tmpvar_98 * tmpvar_10.xz);
  highp vec3 tmpvar_99;
  tmpvar_99 = (_WorldSpaceCameraPos - tmpvar_94.xyz);
  tmpvar_11.xyz = tmpvar_99;
  gl_Position = tmpvar_16;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_COLOR0 = tmpvar_1;
  xlv_COLOR1 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_2.xyz;
  xlv_TEXCOORD2 = tmpvar_10;
  xlv_TEXCOORD4 = tmpvar_11;
  xlv_TEXCOORD5 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
uniform highp vec4 _RimColor;
uniform highp float _RimPower;
uniform highp float _RimIntensity;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  mediump float tmpvar_32;
  tmpvar_32 = (1.0 - clamp (dot (
    normalize(xlv_TEXCOORD4.xyz)
  , xlv_TEXCOORD5), 0.0, 1.0));
  highp float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, _RimPower);
  finalColor_2.xyz = (finalColor_2.xyz + ((_RimColor.xyz * tmpvar_33) * _RimIntensity));
  finalColor_2.xyz = (xlv_COLOR1.xyz + (finalColor_2.xyz * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FRESNEL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _glesNormal;
  highp float sint_3;
  highp float cost_4;
  highp vec3 adjCamPos_5;
  mediump vec4 offsetVertex_6;
  mediump float normalOut_7;
  highp vec4 offset_8;
  mediump vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  mediump vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  offset_8.yzw = vec3(0.0, 0.0, 0.0);
  offset_8.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_8.y = offset_8.x;
  highp float tmpvar_13;
  tmpvar_13 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_7 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = ((_glesVertex + (
    (offset_8 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_2 * normalOut_7) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_6 = tmpvar_14;
  highp vec4 pos_15;
  pos_15 = offsetVertex_6;
  highp vec4 tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = pos_15.xyz;
  tmpvar_16 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_17));
  tmpvar_9.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_9.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_21;
  mediump float fogFactor_22;
  mediump vec3 fogColor_23;
  mediump vec3 heightFogColor_24;
  highp float HeightFogFactor_25;
  mediump vec3 atomesphereFogColor_26;
  mediump float h_27;
  highp float linearFogDensity_28;
  mediump float len_29;
  highp float tmpvar_30;
  tmpvar_30 = sqrt(dot (tmpvar_20, tmpvar_20));
  len_29 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (((len_29 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_28 = (tmpvar_31 * (2.0 - tmpvar_31));
  if ((len_29 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_28 = (linearFogDensity_28 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_32;
  tmpvar_32 = min (pow (linearFogDensity_28, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_28 = tmpvar_32;
  mediump float tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((tmpvar_19.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_33 = tmpvar_34;
  h_27 = (tmpvar_33 * (2.0 - tmpvar_33));
  highp vec3 tmpvar_35;
  tmpvar_35 = (_HeigtFogColBase2.xyz + (h_27 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_26 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (atomesphereFogColor_26, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_29 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_26 = tmpvar_36;
  mediump float tmpvar_37;
  mediump float r_38;
  mediump float f_39;
  mediump float u_40;
  mediump float l_41;
  mediump float fogInt_42;
  fogInt_42 = 1.0;
  highp float tmpvar_43;
  tmpvar_43 = (_HeigtFogParams2.x * tmpvar_20.y);
  highp float tmpvar_44;
  tmpvar_44 = abs(tmpvar_43);
  if ((tmpvar_44 > 0.01)) {
    highp float tmpvar_45;
    tmpvar_45 = exp(-(tmpvar_43));
    fogInt_42 = ((1.0 - tmpvar_45) / tmpvar_43);
  };
  highp float tmpvar_46;
  tmpvar_46 = sqrt(dot (tmpvar_20, tmpvar_20));
  l_41 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = (l_41 * _HeigtFogParams2.y);
  u_40 = tmpvar_47;
  fogInt_42 = (fogInt_42 * u_40);
  mediump float tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((l_41 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_48 = tmpvar_49;
  r_38 = (tmpvar_48 * (2.0 - tmpvar_48));
  r_38 = ((r_38 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_39 = ((1.0 - clamp (
    exp2(-(fogInt_42))
  , 0.0, 1.0)) * r_38);
  highp float tmpvar_50;
  tmpvar_50 = min (f_39, _HeigtFogColBase2.w);
  tmpvar_37 = tmpvar_50;
  HeightFogFactor_25 = tmpvar_37;
  highp vec3 tmpvar_51;
  tmpvar_51 = _Mihoyo_FogColor2.xyz;
  heightFogColor_24 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = ((heightFogColor_24 * HeightFogFactor_25) + ((atomesphereFogColor_26 * tmpvar_32) * (1.0 - HeightFogFactor_25)));
  fogColor_23 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = ((1.0 - tmpvar_32) * (1.0 - HeightFogFactor_25));
  fogFactor_22 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54.xyz = fogColor_23;
  tmpvar_54.w = fogFactor_22;
  tmpvar_21 = tmpvar_54;
  highp vec4 tmpvar_55;
  mediump float fogFactor_56;
  mediump vec3 fogColor_57;
  mediump vec3 heightFogColor_58;
  highp float HeightFogFactor_59;
  mediump vec3 atomesphereFogColor_60;
  mediump float h_61;
  highp float linearFogDensity_62;
  mediump float len_63;
  highp float tmpvar_64;
  tmpvar_64 = sqrt(dot (tmpvar_20, tmpvar_20));
  len_63 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (((len_63 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_62 = (tmpvar_65 * (2.0 - tmpvar_65));
  if ((len_63 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_62 = (linearFogDensity_62 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_66;
  tmpvar_66 = min (pow (linearFogDensity_62, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_62 = tmpvar_66;
  mediump float tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((tmpvar_19.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_67 = tmpvar_68;
  h_61 = (tmpvar_67 * (2.0 - tmpvar_67));
  highp vec3 tmpvar_69;
  tmpvar_69 = (_HeigtFogColBase3.xyz + (h_61 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_60 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = mix (atomesphereFogColor_60, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_63 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_60 = tmpvar_70;
  mediump float tmpvar_71;
  mediump float r_72;
  mediump float f_73;
  mediump float u_74;
  mediump float l_75;
  mediump float fogInt_76;
  fogInt_76 = 1.0;
  highp float tmpvar_77;
  tmpvar_77 = (_HeigtFogParams3.x * tmpvar_20.y);
  highp float tmpvar_78;
  tmpvar_78 = abs(tmpvar_77);
  if ((tmpvar_78 > 0.01)) {
    highp float tmpvar_79;
    tmpvar_79 = exp(-(tmpvar_77));
    fogInt_76 = ((1.0 - tmpvar_79) / tmpvar_77);
  };
  highp float tmpvar_80;
  tmpvar_80 = sqrt(dot (tmpvar_20, tmpvar_20));
  l_75 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (l_75 * _HeigtFogParams3.y);
  u_74 = tmpvar_81;
  fogInt_76 = (fogInt_76 * u_74);
  mediump float tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (((l_75 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_82 = tmpvar_83;
  r_72 = (tmpvar_82 * (2.0 - tmpvar_82));
  r_72 = ((r_72 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_73 = ((1.0 - clamp (
    exp2(-(fogInt_76))
  , 0.0, 1.0)) * r_72);
  highp float tmpvar_84;
  tmpvar_84 = min (f_73, _HeigtFogColBase3.w);
  tmpvar_71 = tmpvar_84;
  HeightFogFactor_59 = tmpvar_71;
  highp vec3 tmpvar_85;
  tmpvar_85 = _Mihoyo_FogColor3.xyz;
  heightFogColor_58 = tmpvar_85;
  highp vec3 tmpvar_86;
  tmpvar_86 = ((heightFogColor_58 * HeightFogFactor_59) + ((atomesphereFogColor_60 * tmpvar_66) * (1.0 - HeightFogFactor_59)));
  fogColor_57 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = ((1.0 - tmpvar_66) * (1.0 - HeightFogFactor_59));
  fogFactor_56 = tmpvar_87;
  mediump vec4 tmpvar_88;
  tmpvar_88.xyz = fogColor_57;
  tmpvar_88.w = fogFactor_56;
  tmpvar_55 = tmpvar_88;
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (tmpvar_21, tmpvar_55, vec4(_LerpFactor));
  tmpvar_18 = tmpvar_89;
  tmpvar_11.w = 1.0;
  mediump vec3 tmpvar_90;
  tmpvar_90 = tmpvar_2.xyz;
  highp vec3 norm_91;
  norm_91 = tmpvar_90;
  highp mat3 tmpvar_92;
  tmpvar_92[0] = unity_WorldToObject[0].xyz;
  tmpvar_92[1] = unity_WorldToObject[1].xyz;
  tmpvar_92[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_93;
  tmpvar_93 = normalize(normalize((norm_91 * tmpvar_92)));
  tmpvar_12 = tmpvar_93;
  highp vec4 tmpvar_94;
  tmpvar_94 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_5.xz = (tmpvar_94.xz - ((tmpvar_94.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_5.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_95;
  tmpvar_95 = normalize((tmpvar_94.xyz - adjCamPos_5));
  tmpvar_10 = tmpvar_95;
  mediump float tmpvar_96;
  tmpvar_96 = cos(_CamRotate);
  cost_4 = tmpvar_96;
  mediump float tmpvar_97;
  tmpvar_97 = sin(_CamRotate);
  sint_3 = tmpvar_97;
  highp mat2 tmpvar_98;
  tmpvar_98[0].x = cost_4;
  tmpvar_98[0].y = -(sint_3);
  tmpvar_98[1].x = sint_3;
  tmpvar_98[1].y = cost_4;
  tmpvar_10.xz = (tmpvar_98 * tmpvar_10.xz);
  highp vec3 tmpvar_99;
  tmpvar_99 = (_WorldSpaceCameraPos - tmpvar_94.xyz);
  tmpvar_11.xyz = tmpvar_99;
  gl_Position = tmpvar_16;
  xlv_TEXCOORD0 = tmpvar_9;
  xlv_COLOR0 = tmpvar_1;
  xlv_COLOR1 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_2.xyz;
  xlv_TEXCOORD2 = tmpvar_10;
  xlv_TEXCOORD4 = tmpvar_11;
  xlv_TEXCOORD5 = tmpvar_12;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
uniform highp vec4 _RimColor;
uniform highp float _RimPower;
uniform highp float _RimIntensity;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  mediump float tmpvar_32;
  tmpvar_32 = (1.0 - clamp (dot (
    normalize(xlv_TEXCOORD4.xyz)
  , xlv_TEXCOORD5), 0.0, 1.0));
  highp float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, _RimPower);
  finalColor_2.xyz = (finalColor_2.xyz + ((_RimColor.xyz * tmpvar_33) * _RimIntensity));
  finalColor_2.xyz = (xlv_COLOR1.xyz + (finalColor_2.xyz * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FRESNEL" "UseNormalMap" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_WorldTransformParams;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _FogStartDistance;
uniform highp float _FogEndDistance;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1.w = 0.0;
  tmpvar_1.xyz = _glesNormal;
  mediump vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  tmpvar_2 = _glesColor;
  tmpvar_3 = _glesTANGENT;
  highp float sint_4;
  highp float cost_5;
  highp vec3 adjCamPos_6;
  mediump vec4 offsetVertex_7;
  mediump float normalOut_8;
  highp vec4 offset_9;
  highp vec4 tmpvar_10;
  mediump vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  mediump vec4 tmpvar_13;
  offset_9.yzw = vec3(0.0, 0.0, 0.0);
  offset_9.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_9.y = offset_9.x;
  highp float tmpvar_14;
  tmpvar_14 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_8 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = ((_glesVertex + (
    (offset_9 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_1 * normalOut_8) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_7 = tmpvar_15;
  highp vec4 pos_16;
  pos_16 = offsetVertex_7;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = pos_16.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_17));
  tmpvar_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_11.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_18;
  if ((_FogColorNear.w > 0.5)) {
    mediump vec4 fogColor_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_21;
    tmpvar_21 = max (0.0, (sqrt(
      dot (tmpvar_20, tmpvar_20)
    ) - _FogStartDistance));
    highp float tmpvar_22;
    tmpvar_22 = min (max ((
      (1.0 - exp((-(
        (_FogIntensity * tmpvar_21)
      ) * (_FogIntensity * tmpvar_21))))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_23;
    tmpvar_23 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3(clamp (exp(
      (-((_FogColorIntensity * tmpvar_21)) * (_FogColorIntensity * tmpvar_21))
    ), 0.0, 1.0)));
    fogColor_19.xyz = tmpvar_23;
    fogColor_19.w = tmpvar_22;
    tmpvar_18 = fogColor_19;
  } else {
    mediump vec4 fogColor_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_26;
    tmpvar_26 = max (0.0, (sqrt(
      dot (tmpvar_25, tmpvar_25)
    ) - _FogStartDistance));
    highp float tmpvar_27;
    highp float tmpvar_28;
    tmpvar_28 = (_FogEndDistance - _FogStartDistance);
    tmpvar_27 = min (max ((
      (((500.0 * _FogIntensity) * tmpvar_26) / max (0.1, tmpvar_28))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_29;
    tmpvar_29 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3((1.0 - clamp (
      (((1000.0 * _FogColorIntensity) * tmpvar_26) / max (0.1, tmpvar_28))
    , 0.0, 1.0))));
    fogColor_24.xyz = tmpvar_29;
    fogColor_24.w = tmpvar_27;
    tmpvar_18 = fogColor_24;
  };
  tmpvar_13.w = 1.0;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_1.xyz;
  mediump vec4 wTangent_31;
  mediump vec3 wNormal_32;
  highp vec3 norm_33;
  norm_33 = tmpvar_30;
  highp mat3 tmpvar_34;
  tmpvar_34[0] = unity_WorldToObject[0].xyz;
  tmpvar_34[1] = unity_WorldToObject[1].xyz;
  tmpvar_34[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((norm_33 * tmpvar_34));
  wNormal_32 = tmpvar_35;
  highp vec3 dir_36;
  dir_36 = tmpvar_3.xyz;
  highp mat3 tmpvar_37;
  tmpvar_37[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_37[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_37[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((tmpvar_37 * dir_36));
  wTangent_31.xyz = tmpvar_38;
  wTangent_31.w = (_glesTANGENT.w * unity_WorldTransformParams.w);
  mediump vec3 tmpvar_39;
  tmpvar_39 = (((wNormal_32.yzx * wTangent_31.zxy) - (wNormal_32.zxy * wTangent_31.yzx)) * wTangent_31.w);
  mediump vec3 tmpvar_40;
  tmpvar_40.x = wTangent_31.x;
  tmpvar_40.y = tmpvar_39.x;
  tmpvar_40.z = wNormal_32.x;
  mediump vec3 tmpvar_41;
  tmpvar_41.x = wTangent_31.y;
  tmpvar_41.y = tmpvar_39.y;
  tmpvar_41.z = wNormal_32.y;
  mediump vec3 tmpvar_42;
  tmpvar_42.x = wTangent_31.z;
  tmpvar_42.y = tmpvar_39.z;
  tmpvar_42.z = wNormal_32.z;
  highp vec4 tmpvar_43;
  tmpvar_43 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_6.xz = (tmpvar_43.xz - ((tmpvar_43.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_6.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize((tmpvar_43.xyz - adjCamPos_6));
  tmpvar_12 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = cos(_CamRotate);
  cost_5 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = sin(_CamRotate);
  sint_4 = tmpvar_46;
  highp mat2 tmpvar_47;
  tmpvar_47[0].x = cost_5;
  tmpvar_47[0].y = -(sint_4);
  tmpvar_47[1].x = sint_4;
  tmpvar_47[1].y = cost_5;
  tmpvar_12.xz = (tmpvar_47 * tmpvar_12.xz);
  highp vec3 tmpvar_48;
  tmpvar_48 = (_WorldSpaceCameraPos - tmpvar_43.xyz);
  tmpvar_13.xyz = tmpvar_48;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_COLOR0 = tmpvar_2;
  xlv_COLOR1 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_1.xyz;
  xlv_TEXCOORD2 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_40;
  xlv_TEXCOORD6 = tmpvar_41;
  xlv_TEXCOORD7 = tmpvar_42;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
uniform highp vec4 _RimColor;
uniform highp float _RimPower;
uniform highp float _RimIntensity;
uniform sampler2D _NormalMap;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec3 normalFromMap_1;
  mediump vec4 Maskmap_2;
  mediump vec4 finalColor_3;
  mediump vec4 base_color1_4;
  mediump vec4 base_color0_5;
  mediump vec2 flow_dir_6;
  mediump float flow_scale1_7;
  mediump float flow_scale0_8;
  mediump vec3 flowAll_9;
  mediump float time_10;
  mediump vec2 uv_11;
  mediump vec2 UV_12;
  highp vec2 tmpvar_13;
  tmpvar_13 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_12 = tmpvar_13;
  highp vec2 tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_USpeed * _Time.y);
  tmpvar_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (_VSpeed * _Time.y);
  tmpvar_14.y = tmpvar_16;
  UV_12 = (UV_12 + tmpvar_14);
  highp vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_15;
  tmpvar_17.y = tmpvar_16;
  highp vec2 tmpvar_18;
  tmpvar_18 = (UV_12 + tmpvar_17);
  uv_11 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = _Time.y;
  time_10 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_FlowMap, uv_11).xyz;
  flowAll_9 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((_Speed * time_10) + flowAll_9.z));
  flow_scale0_8 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = fract(((
    (_Speed * time_10)
   + flowAll_9.z) + 0.5));
  flow_scale1_7 = tmpvar_22;
  flowAll_9.xy = (2.0 * (flowAll_9.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_23;
  tmpvar_23.x = _FlowSignX;
  tmpvar_23.y = _FlowSignY;
  flowAll_9.xy = (flowAll_9.xy * tmpvar_23);
  highp vec2 tmpvar_24;
  tmpvar_24 = (flowAll_9.xy * _FlowIntensity);
  flow_dir_6 = tmpvar_24;
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_11 + (flow_dir_6 * flow_scale0_8));
  mediump vec2 tmpvar_26;
  tmpvar_26 = (uv_11 + (flow_dir_6 * flow_scale1_7));
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color0_5 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MainTex, tmpvar_26);
  base_color1_4 = tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix (base_color0_5, base_color1_4, vec4(abs((2.0 * 
    (flow_scale0_8 - 0.5)
  ))));
  finalColor_3.w = 0.0;
  finalColor_3.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_29.x * xlv_COLOR0.x)));
  finalColor_3.xyz = (finalColor_3.xyz * (1.0 + (tmpvar_29.x * _EmissionScaler)));
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_2 = tmpvar_30;
  finalColor_3.xyz = (finalColor_3.xyz + ((_MaskColor.xyz * Maskmap_2.y) * _MaskScale));
  mediump vec3 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_32;
  tmpvar_32 = textureCube (_EnvTex, tmpvar_31);
  finalColor_3.xyz = (finalColor_3.xyz + ((tmpvar_32.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_3.w = (tmpvar_29.w * _BloomFactor);
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_NormalMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  normalFromMap_1 = tmpvar_33;
  mediump vec3 o_34;
  o_34.x = dot (xlv_TEXCOORD5, normalFromMap_1);
  o_34.y = dot (xlv_TEXCOORD6, normalFromMap_1);
  o_34.z = dot (xlv_TEXCOORD7, normalFromMap_1);
  mediump float tmpvar_35;
  tmpvar_35 = (1.0 - clamp (dot (
    normalize(xlv_TEXCOORD4.xyz)
  , o_34), 0.0, 1.0));
  highp float tmpvar_36;
  tmpvar_36 = pow (tmpvar_35, _RimPower);
  finalColor_3.xyz = (finalColor_3.xyz + ((_RimColor.xyz * tmpvar_36) * _RimIntensity));
  finalColor_3.xyz = mix (finalColor_3.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  gl_FragData[0] = finalColor_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FRESNEL" "UseNormalMap" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_WorldTransformParams;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _FogStartDistance;
uniform highp float _FogEndDistance;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1.w = 0.0;
  tmpvar_1.xyz = _glesNormal;
  mediump vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  tmpvar_2 = _glesColor;
  tmpvar_3 = _glesTANGENT;
  highp float sint_4;
  highp float cost_5;
  highp vec3 adjCamPos_6;
  mediump vec4 offsetVertex_7;
  mediump float normalOut_8;
  highp vec4 offset_9;
  highp vec4 tmpvar_10;
  mediump vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  mediump vec4 tmpvar_13;
  offset_9.yzw = vec3(0.0, 0.0, 0.0);
  offset_9.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_9.y = offset_9.x;
  highp float tmpvar_14;
  tmpvar_14 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_8 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = ((_glesVertex + (
    (offset_9 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_1 * normalOut_8) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_7 = tmpvar_15;
  highp vec4 pos_16;
  pos_16 = offsetVertex_7;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = pos_16.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_17));
  tmpvar_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_11.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_18;
  if ((_FogColorNear.w > 0.5)) {
    mediump vec4 fogColor_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_21;
    tmpvar_21 = max (0.0, (sqrt(
      dot (tmpvar_20, tmpvar_20)
    ) - _FogStartDistance));
    highp float tmpvar_22;
    tmpvar_22 = min (max ((
      (1.0 - exp((-(
        (_FogIntensity * tmpvar_21)
      ) * (_FogIntensity * tmpvar_21))))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_23;
    tmpvar_23 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3(clamp (exp(
      (-((_FogColorIntensity * tmpvar_21)) * (_FogColorIntensity * tmpvar_21))
    ), 0.0, 1.0)));
    fogColor_19.xyz = tmpvar_23;
    fogColor_19.w = tmpvar_22;
    tmpvar_18 = fogColor_19;
  } else {
    mediump vec4 fogColor_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_26;
    tmpvar_26 = max (0.0, (sqrt(
      dot (tmpvar_25, tmpvar_25)
    ) - _FogStartDistance));
    highp float tmpvar_27;
    highp float tmpvar_28;
    tmpvar_28 = (_FogEndDistance - _FogStartDistance);
    tmpvar_27 = min (max ((
      (((500.0 * _FogIntensity) * tmpvar_26) / max (0.1, tmpvar_28))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_29;
    tmpvar_29 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3((1.0 - clamp (
      (((1000.0 * _FogColorIntensity) * tmpvar_26) / max (0.1, tmpvar_28))
    , 0.0, 1.0))));
    fogColor_24.xyz = tmpvar_29;
    fogColor_24.w = tmpvar_27;
    tmpvar_18 = fogColor_24;
  };
  tmpvar_13.w = 1.0;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_1.xyz;
  mediump vec4 wTangent_31;
  mediump vec3 wNormal_32;
  highp vec3 norm_33;
  norm_33 = tmpvar_30;
  highp mat3 tmpvar_34;
  tmpvar_34[0] = unity_WorldToObject[0].xyz;
  tmpvar_34[1] = unity_WorldToObject[1].xyz;
  tmpvar_34[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((norm_33 * tmpvar_34));
  wNormal_32 = tmpvar_35;
  highp vec3 dir_36;
  dir_36 = tmpvar_3.xyz;
  highp mat3 tmpvar_37;
  tmpvar_37[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_37[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_37[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((tmpvar_37 * dir_36));
  wTangent_31.xyz = tmpvar_38;
  wTangent_31.w = (_glesTANGENT.w * unity_WorldTransformParams.w);
  mediump vec3 tmpvar_39;
  tmpvar_39 = (((wNormal_32.yzx * wTangent_31.zxy) - (wNormal_32.zxy * wTangent_31.yzx)) * wTangent_31.w);
  mediump vec3 tmpvar_40;
  tmpvar_40.x = wTangent_31.x;
  tmpvar_40.y = tmpvar_39.x;
  tmpvar_40.z = wNormal_32.x;
  mediump vec3 tmpvar_41;
  tmpvar_41.x = wTangent_31.y;
  tmpvar_41.y = tmpvar_39.y;
  tmpvar_41.z = wNormal_32.y;
  mediump vec3 tmpvar_42;
  tmpvar_42.x = wTangent_31.z;
  tmpvar_42.y = tmpvar_39.z;
  tmpvar_42.z = wNormal_32.z;
  highp vec4 tmpvar_43;
  tmpvar_43 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_6.xz = (tmpvar_43.xz - ((tmpvar_43.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_6.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize((tmpvar_43.xyz - adjCamPos_6));
  tmpvar_12 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = cos(_CamRotate);
  cost_5 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = sin(_CamRotate);
  sint_4 = tmpvar_46;
  highp mat2 tmpvar_47;
  tmpvar_47[0].x = cost_5;
  tmpvar_47[0].y = -(sint_4);
  tmpvar_47[1].x = sint_4;
  tmpvar_47[1].y = cost_5;
  tmpvar_12.xz = (tmpvar_47 * tmpvar_12.xz);
  highp vec3 tmpvar_48;
  tmpvar_48 = (_WorldSpaceCameraPos - tmpvar_43.xyz);
  tmpvar_13.xyz = tmpvar_48;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_COLOR0 = tmpvar_2;
  xlv_COLOR1 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_1.xyz;
  xlv_TEXCOORD2 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_40;
  xlv_TEXCOORD6 = tmpvar_41;
  xlv_TEXCOORD7 = tmpvar_42;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
uniform highp vec4 _RimColor;
uniform highp float _RimPower;
uniform highp float _RimIntensity;
uniform sampler2D _NormalMap;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec3 normalFromMap_1;
  mediump vec4 Maskmap_2;
  mediump vec4 finalColor_3;
  mediump vec4 base_color1_4;
  mediump vec4 base_color0_5;
  mediump vec2 flow_dir_6;
  mediump float flow_scale1_7;
  mediump float flow_scale0_8;
  mediump vec3 flowAll_9;
  mediump float time_10;
  mediump vec2 uv_11;
  mediump vec2 UV_12;
  highp vec2 tmpvar_13;
  tmpvar_13 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_12 = tmpvar_13;
  highp vec2 tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_USpeed * _Time.y);
  tmpvar_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (_VSpeed * _Time.y);
  tmpvar_14.y = tmpvar_16;
  UV_12 = (UV_12 + tmpvar_14);
  highp vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_15;
  tmpvar_17.y = tmpvar_16;
  highp vec2 tmpvar_18;
  tmpvar_18 = (UV_12 + tmpvar_17);
  uv_11 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = _Time.y;
  time_10 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_FlowMap, uv_11).xyz;
  flowAll_9 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((_Speed * time_10) + flowAll_9.z));
  flow_scale0_8 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = fract(((
    (_Speed * time_10)
   + flowAll_9.z) + 0.5));
  flow_scale1_7 = tmpvar_22;
  flowAll_9.xy = (2.0 * (flowAll_9.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_23;
  tmpvar_23.x = _FlowSignX;
  tmpvar_23.y = _FlowSignY;
  flowAll_9.xy = (flowAll_9.xy * tmpvar_23);
  highp vec2 tmpvar_24;
  tmpvar_24 = (flowAll_9.xy * _FlowIntensity);
  flow_dir_6 = tmpvar_24;
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_11 + (flow_dir_6 * flow_scale0_8));
  mediump vec2 tmpvar_26;
  tmpvar_26 = (uv_11 + (flow_dir_6 * flow_scale1_7));
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color0_5 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MainTex, tmpvar_26);
  base_color1_4 = tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix (base_color0_5, base_color1_4, vec4(abs((2.0 * 
    (flow_scale0_8 - 0.5)
  ))));
  finalColor_3.w = 0.0;
  finalColor_3.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_29.x * xlv_COLOR0.x)));
  finalColor_3.xyz = (finalColor_3.xyz * (1.0 + (tmpvar_29.x * _EmissionScaler)));
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_2 = tmpvar_30;
  finalColor_3.xyz = (finalColor_3.xyz + ((_MaskColor.xyz * Maskmap_2.y) * _MaskScale));
  mediump vec3 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_32;
  tmpvar_32 = textureCube (_EnvTex, tmpvar_31);
  finalColor_3.xyz = (finalColor_3.xyz + ((tmpvar_32.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_3.w = (tmpvar_29.w * _BloomFactor);
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_NormalMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  normalFromMap_1 = tmpvar_33;
  mediump vec3 o_34;
  o_34.x = dot (xlv_TEXCOORD5, normalFromMap_1);
  o_34.y = dot (xlv_TEXCOORD6, normalFromMap_1);
  o_34.z = dot (xlv_TEXCOORD7, normalFromMap_1);
  mediump float tmpvar_35;
  tmpvar_35 = (1.0 - clamp (dot (
    normalize(xlv_TEXCOORD4.xyz)
  , o_34), 0.0, 1.0));
  highp float tmpvar_36;
  tmpvar_36 = pow (tmpvar_35, _RimPower);
  finalColor_3.xyz = (finalColor_3.xyz + ((_RimColor.xyz * tmpvar_36) * _RimIntensity));
  finalColor_3.xyz = mix (finalColor_3.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  gl_FragData[0] = finalColor_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FRESNEL" "UseNormalMap" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_WorldTransformParams;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _FogStartDistance;
uniform highp float _FogEndDistance;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1.w = 0.0;
  tmpvar_1.xyz = _glesNormal;
  mediump vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  tmpvar_2 = _glesColor;
  tmpvar_3 = _glesTANGENT;
  highp float sint_4;
  highp float cost_5;
  highp vec3 adjCamPos_6;
  mediump vec4 offsetVertex_7;
  mediump float normalOut_8;
  highp vec4 offset_9;
  highp vec4 tmpvar_10;
  mediump vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  mediump vec4 tmpvar_13;
  offset_9.yzw = vec3(0.0, 0.0, 0.0);
  offset_9.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_9.y = offset_9.x;
  highp float tmpvar_14;
  tmpvar_14 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_8 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = ((_glesVertex + (
    (offset_9 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_1 * normalOut_8) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_7 = tmpvar_15;
  highp vec4 pos_16;
  pos_16 = offsetVertex_7;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = pos_16.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_17));
  tmpvar_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_11.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_18;
  if ((_FogColorNear.w > 0.5)) {
    mediump vec4 fogColor_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_21;
    tmpvar_21 = max (0.0, (sqrt(
      dot (tmpvar_20, tmpvar_20)
    ) - _FogStartDistance));
    highp float tmpvar_22;
    tmpvar_22 = min (max ((
      (1.0 - exp((-(
        (_FogIntensity * tmpvar_21)
      ) * (_FogIntensity * tmpvar_21))))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_23;
    tmpvar_23 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3(clamp (exp(
      (-((_FogColorIntensity * tmpvar_21)) * (_FogColorIntensity * tmpvar_21))
    ), 0.0, 1.0)));
    fogColor_19.xyz = tmpvar_23;
    fogColor_19.w = tmpvar_22;
    tmpvar_18 = fogColor_19;
  } else {
    mediump vec4 fogColor_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_26;
    tmpvar_26 = max (0.0, (sqrt(
      dot (tmpvar_25, tmpvar_25)
    ) - _FogStartDistance));
    highp float tmpvar_27;
    highp float tmpvar_28;
    tmpvar_28 = (_FogEndDistance - _FogStartDistance);
    tmpvar_27 = min (max ((
      (((500.0 * _FogIntensity) * tmpvar_26) / max (0.1, tmpvar_28))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_29;
    tmpvar_29 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3((1.0 - clamp (
      (((1000.0 * _FogColorIntensity) * tmpvar_26) / max (0.1, tmpvar_28))
    , 0.0, 1.0))));
    fogColor_24.xyz = tmpvar_29;
    fogColor_24.w = tmpvar_27;
    tmpvar_18 = fogColor_24;
  };
  tmpvar_13.w = 1.0;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_1.xyz;
  mediump vec4 wTangent_31;
  mediump vec3 wNormal_32;
  highp vec3 norm_33;
  norm_33 = tmpvar_30;
  highp mat3 tmpvar_34;
  tmpvar_34[0] = unity_WorldToObject[0].xyz;
  tmpvar_34[1] = unity_WorldToObject[1].xyz;
  tmpvar_34[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((norm_33 * tmpvar_34));
  wNormal_32 = tmpvar_35;
  highp vec3 dir_36;
  dir_36 = tmpvar_3.xyz;
  highp mat3 tmpvar_37;
  tmpvar_37[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_37[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_37[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((tmpvar_37 * dir_36));
  wTangent_31.xyz = tmpvar_38;
  wTangent_31.w = (_glesTANGENT.w * unity_WorldTransformParams.w);
  mediump vec3 tmpvar_39;
  tmpvar_39 = (((wNormal_32.yzx * wTangent_31.zxy) - (wNormal_32.zxy * wTangent_31.yzx)) * wTangent_31.w);
  mediump vec3 tmpvar_40;
  tmpvar_40.x = wTangent_31.x;
  tmpvar_40.y = tmpvar_39.x;
  tmpvar_40.z = wNormal_32.x;
  mediump vec3 tmpvar_41;
  tmpvar_41.x = wTangent_31.y;
  tmpvar_41.y = tmpvar_39.y;
  tmpvar_41.z = wNormal_32.y;
  mediump vec3 tmpvar_42;
  tmpvar_42.x = wTangent_31.z;
  tmpvar_42.y = tmpvar_39.z;
  tmpvar_42.z = wNormal_32.z;
  highp vec4 tmpvar_43;
  tmpvar_43 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_6.xz = (tmpvar_43.xz - ((tmpvar_43.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_6.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize((tmpvar_43.xyz - adjCamPos_6));
  tmpvar_12 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = cos(_CamRotate);
  cost_5 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = sin(_CamRotate);
  sint_4 = tmpvar_46;
  highp mat2 tmpvar_47;
  tmpvar_47[0].x = cost_5;
  tmpvar_47[0].y = -(sint_4);
  tmpvar_47[1].x = sint_4;
  tmpvar_47[1].y = cost_5;
  tmpvar_12.xz = (tmpvar_47 * tmpvar_12.xz);
  highp vec3 tmpvar_48;
  tmpvar_48 = (_WorldSpaceCameraPos - tmpvar_43.xyz);
  tmpvar_13.xyz = tmpvar_48;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_COLOR0 = tmpvar_2;
  xlv_COLOR1 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_1.xyz;
  xlv_TEXCOORD2 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_40;
  xlv_TEXCOORD6 = tmpvar_41;
  xlv_TEXCOORD7 = tmpvar_42;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
uniform highp vec4 _RimColor;
uniform highp float _RimPower;
uniform highp float _RimIntensity;
uniform sampler2D _NormalMap;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec3 normalFromMap_1;
  mediump vec4 Maskmap_2;
  mediump vec4 finalColor_3;
  mediump vec4 base_color1_4;
  mediump vec4 base_color0_5;
  mediump vec2 flow_dir_6;
  mediump float flow_scale1_7;
  mediump float flow_scale0_8;
  mediump vec3 flowAll_9;
  mediump float time_10;
  mediump vec2 uv_11;
  mediump vec2 UV_12;
  highp vec2 tmpvar_13;
  tmpvar_13 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_12 = tmpvar_13;
  highp vec2 tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_USpeed * _Time.y);
  tmpvar_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (_VSpeed * _Time.y);
  tmpvar_14.y = tmpvar_16;
  UV_12 = (UV_12 + tmpvar_14);
  highp vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_15;
  tmpvar_17.y = tmpvar_16;
  highp vec2 tmpvar_18;
  tmpvar_18 = (UV_12 + tmpvar_17);
  uv_11 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = _Time.y;
  time_10 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_FlowMap, uv_11).xyz;
  flowAll_9 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((_Speed * time_10) + flowAll_9.z));
  flow_scale0_8 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = fract(((
    (_Speed * time_10)
   + flowAll_9.z) + 0.5));
  flow_scale1_7 = tmpvar_22;
  flowAll_9.xy = (2.0 * (flowAll_9.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_23;
  tmpvar_23.x = _FlowSignX;
  tmpvar_23.y = _FlowSignY;
  flowAll_9.xy = (flowAll_9.xy * tmpvar_23);
  highp vec2 tmpvar_24;
  tmpvar_24 = (flowAll_9.xy * _FlowIntensity);
  flow_dir_6 = tmpvar_24;
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_11 + (flow_dir_6 * flow_scale0_8));
  mediump vec2 tmpvar_26;
  tmpvar_26 = (uv_11 + (flow_dir_6 * flow_scale1_7));
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color0_5 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MainTex, tmpvar_26);
  base_color1_4 = tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix (base_color0_5, base_color1_4, vec4(abs((2.0 * 
    (flow_scale0_8 - 0.5)
  ))));
  finalColor_3.w = 0.0;
  finalColor_3.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_29.x * xlv_COLOR0.x)));
  finalColor_3.xyz = (finalColor_3.xyz * (1.0 + (tmpvar_29.x * _EmissionScaler)));
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_2 = tmpvar_30;
  finalColor_3.xyz = (finalColor_3.xyz + ((_MaskColor.xyz * Maskmap_2.y) * _MaskScale));
  mediump vec3 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_32;
  tmpvar_32 = textureCube (_EnvTex, tmpvar_31);
  finalColor_3.xyz = (finalColor_3.xyz + ((tmpvar_32.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_3.w = (tmpvar_29.w * _BloomFactor);
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_NormalMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  normalFromMap_1 = tmpvar_33;
  mediump vec3 o_34;
  o_34.x = dot (xlv_TEXCOORD5, normalFromMap_1);
  o_34.y = dot (xlv_TEXCOORD6, normalFromMap_1);
  o_34.z = dot (xlv_TEXCOORD7, normalFromMap_1);
  mediump float tmpvar_35;
  tmpvar_35 = (1.0 - clamp (dot (
    normalize(xlv_TEXCOORD4.xyz)
  , o_34), 0.0, 1.0));
  highp float tmpvar_36;
  tmpvar_36 = pow (tmpvar_35, _RimPower);
  finalColor_3.xyz = (finalColor_3.xyz + ((_RimColor.xyz * tmpvar_36) * _RimIntensity));
  finalColor_3.xyz = mix (finalColor_3.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  gl_FragData[0] = finalColor_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "FRESNEL" "UseNormalMap" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_WorldTransformParams;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _FogStartDistance;
uniform highp float _FogEndDistance;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1.w = 0.0;
  tmpvar_1.xyz = _glesNormal;
  mediump vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  tmpvar_2 = _glesColor;
  tmpvar_3 = _glesTANGENT;
  highp float sint_4;
  highp float cost_5;
  highp vec3 adjCamPos_6;
  mediump vec4 offsetVertex_7;
  mediump float normalOut_8;
  highp vec4 offset_9;
  highp vec4 tmpvar_10;
  mediump vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  mediump vec4 tmpvar_13;
  offset_9.yzw = vec3(0.0, 0.0, 0.0);
  offset_9.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_9.y = offset_9.x;
  highp float tmpvar_14;
  tmpvar_14 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_8 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = ((_glesVertex + (
    (offset_9 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_1 * normalOut_8) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_7 = tmpvar_15;
  highp vec4 pos_16;
  pos_16 = offsetVertex_7;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = pos_16.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_17));
  tmpvar_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_11.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_18;
  if ((_FogColorNear.w > 0.5)) {
    mediump vec4 fogColor_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_21;
    tmpvar_21 = max (0.0, (sqrt(
      dot (tmpvar_20, tmpvar_20)
    ) - _FogStartDistance));
    highp float tmpvar_22;
    tmpvar_22 = min (max ((
      (1.0 - exp((-(
        (_FogIntensity * tmpvar_21)
      ) * (_FogIntensity * tmpvar_21))))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_23;
    tmpvar_23 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3(clamp (exp(
      (-((_FogColorIntensity * tmpvar_21)) * (_FogColorIntensity * tmpvar_21))
    ), 0.0, 1.0)));
    fogColor_19.xyz = tmpvar_23;
    fogColor_19.w = tmpvar_22;
    tmpvar_18 = fogColor_19;
  } else {
    mediump vec4 fogColor_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_26;
    tmpvar_26 = max (0.0, (sqrt(
      dot (tmpvar_25, tmpvar_25)
    ) - _FogStartDistance));
    highp float tmpvar_27;
    highp float tmpvar_28;
    tmpvar_28 = (_FogEndDistance - _FogStartDistance);
    tmpvar_27 = min (max ((
      (((500.0 * _FogIntensity) * tmpvar_26) / max (0.1, tmpvar_28))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_29;
    tmpvar_29 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3((1.0 - clamp (
      (((1000.0 * _FogColorIntensity) * tmpvar_26) / max (0.1, tmpvar_28))
    , 0.0, 1.0))));
    fogColor_24.xyz = tmpvar_29;
    fogColor_24.w = tmpvar_27;
    tmpvar_18 = fogColor_24;
  };
  tmpvar_13.w = 1.0;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_1.xyz;
  mediump vec4 wTangent_31;
  mediump vec3 wNormal_32;
  highp vec3 norm_33;
  norm_33 = tmpvar_30;
  highp mat3 tmpvar_34;
  tmpvar_34[0] = unity_WorldToObject[0].xyz;
  tmpvar_34[1] = unity_WorldToObject[1].xyz;
  tmpvar_34[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((norm_33 * tmpvar_34));
  wNormal_32 = tmpvar_35;
  highp vec3 dir_36;
  dir_36 = tmpvar_3.xyz;
  highp mat3 tmpvar_37;
  tmpvar_37[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_37[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_37[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((tmpvar_37 * dir_36));
  wTangent_31.xyz = tmpvar_38;
  wTangent_31.w = (_glesTANGENT.w * unity_WorldTransformParams.w);
  mediump vec3 tmpvar_39;
  tmpvar_39 = (((wNormal_32.yzx * wTangent_31.zxy) - (wNormal_32.zxy * wTangent_31.yzx)) * wTangent_31.w);
  mediump vec3 tmpvar_40;
  tmpvar_40.x = wTangent_31.x;
  tmpvar_40.y = tmpvar_39.x;
  tmpvar_40.z = wNormal_32.x;
  mediump vec3 tmpvar_41;
  tmpvar_41.x = wTangent_31.y;
  tmpvar_41.y = tmpvar_39.y;
  tmpvar_41.z = wNormal_32.y;
  mediump vec3 tmpvar_42;
  tmpvar_42.x = wTangent_31.z;
  tmpvar_42.y = tmpvar_39.z;
  tmpvar_42.z = wNormal_32.z;
  highp vec4 tmpvar_43;
  tmpvar_43 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_6.xz = (tmpvar_43.xz - ((tmpvar_43.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_6.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize((tmpvar_43.xyz - adjCamPos_6));
  tmpvar_12 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = cos(_CamRotate);
  cost_5 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = sin(_CamRotate);
  sint_4 = tmpvar_46;
  highp mat2 tmpvar_47;
  tmpvar_47[0].x = cost_5;
  tmpvar_47[0].y = -(sint_4);
  tmpvar_47[1].x = sint_4;
  tmpvar_47[1].y = cost_5;
  tmpvar_12.xz = (tmpvar_47 * tmpvar_12.xz);
  highp vec3 tmpvar_48;
  tmpvar_48 = (_WorldSpaceCameraPos - tmpvar_43.xyz);
  tmpvar_13.xyz = tmpvar_48;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_COLOR0 = tmpvar_2;
  xlv_COLOR1 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_1.xyz;
  xlv_TEXCOORD2 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_40;
  xlv_TEXCOORD6 = tmpvar_41;
  xlv_TEXCOORD7 = tmpvar_42;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
uniform highp vec4 _RimColor;
uniform highp float _RimPower;
uniform highp float _RimIntensity;
uniform sampler2D _NormalMap;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec3 normalFromMap_1;
  mediump vec4 Maskmap_2;
  mediump vec4 finalColor_3;
  mediump vec4 base_color1_4;
  mediump vec4 base_color0_5;
  mediump vec2 flow_dir_6;
  mediump float flow_scale1_7;
  mediump float flow_scale0_8;
  mediump vec3 flowAll_9;
  mediump float time_10;
  mediump vec2 uv_11;
  mediump vec2 UV_12;
  highp vec2 tmpvar_13;
  tmpvar_13 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_12 = tmpvar_13;
  highp vec2 tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_USpeed * _Time.y);
  tmpvar_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (_VSpeed * _Time.y);
  tmpvar_14.y = tmpvar_16;
  UV_12 = (UV_12 + tmpvar_14);
  highp vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_15;
  tmpvar_17.y = tmpvar_16;
  highp vec2 tmpvar_18;
  tmpvar_18 = (UV_12 + tmpvar_17);
  uv_11 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = _Time.y;
  time_10 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_FlowMap, uv_11).xyz;
  flowAll_9 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((_Speed * time_10) + flowAll_9.z));
  flow_scale0_8 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = fract(((
    (_Speed * time_10)
   + flowAll_9.z) + 0.5));
  flow_scale1_7 = tmpvar_22;
  flowAll_9.xy = (2.0 * (flowAll_9.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_23;
  tmpvar_23.x = _FlowSignX;
  tmpvar_23.y = _FlowSignY;
  flowAll_9.xy = (flowAll_9.xy * tmpvar_23);
  highp vec2 tmpvar_24;
  tmpvar_24 = (flowAll_9.xy * _FlowIntensity);
  flow_dir_6 = tmpvar_24;
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_11 + (flow_dir_6 * flow_scale0_8));
  mediump vec2 tmpvar_26;
  tmpvar_26 = (uv_11 + (flow_dir_6 * flow_scale1_7));
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color0_5 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MainTex, tmpvar_26);
  base_color1_4 = tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix (base_color0_5, base_color1_4, vec4(abs((2.0 * 
    (flow_scale0_8 - 0.5)
  ))));
  finalColor_3.w = 0.0;
  finalColor_3.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_29.x * xlv_COLOR0.x)));
  finalColor_3.xyz = (finalColor_3.xyz * (1.0 + (tmpvar_29.x * _EmissionScaler)));
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_2 = tmpvar_30;
  finalColor_3.xyz = (finalColor_3.xyz + ((_MaskColor.xyz * Maskmap_2.y) * _MaskScale));
  mediump vec3 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_32;
  tmpvar_32 = textureCube (_EnvTex, tmpvar_31);
  finalColor_3.xyz = (finalColor_3.xyz + ((tmpvar_32.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_3.w = (tmpvar_29.w * _BloomFactor);
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_NormalMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  normalFromMap_1 = tmpvar_33;
  mediump vec3 o_34;
  o_34.x = dot (xlv_TEXCOORD5, normalFromMap_1);
  o_34.y = dot (xlv_TEXCOORD6, normalFromMap_1);
  o_34.z = dot (xlv_TEXCOORD7, normalFromMap_1);
  mediump float tmpvar_35;
  tmpvar_35 = (1.0 - clamp (dot (
    normalize(xlv_TEXCOORD4.xyz)
  , o_34), 0.0, 1.0));
  highp float tmpvar_36;
  tmpvar_36 = pow (tmpvar_35, _RimPower);
  finalColor_3.xyz = (finalColor_3.xyz + ((_RimColor.xyz * tmpvar_36) * _RimIntensity));
  finalColor_3.xyz = mix (finalColor_3.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  gl_FragData[0] = finalColor_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "FRESNEL" "UseNormalMap" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_WorldTransformParams;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _FogStartDistance;
uniform highp float _FogEndDistance;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1.w = 0.0;
  tmpvar_1.xyz = _glesNormal;
  mediump vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  tmpvar_2 = _glesColor;
  tmpvar_3 = _glesTANGENT;
  highp float sint_4;
  highp float cost_5;
  highp vec3 adjCamPos_6;
  mediump vec4 offsetVertex_7;
  mediump float normalOut_8;
  highp vec4 offset_9;
  highp vec4 tmpvar_10;
  mediump vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  mediump vec4 tmpvar_13;
  offset_9.yzw = vec3(0.0, 0.0, 0.0);
  offset_9.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_9.y = offset_9.x;
  highp float tmpvar_14;
  tmpvar_14 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_8 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = ((_glesVertex + (
    (offset_9 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_1 * normalOut_8) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_7 = tmpvar_15;
  highp vec4 pos_16;
  pos_16 = offsetVertex_7;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = pos_16.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_17));
  tmpvar_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_11.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_18;
  if ((_FogColorNear.w > 0.5)) {
    mediump vec4 fogColor_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_21;
    tmpvar_21 = max (0.0, (sqrt(
      dot (tmpvar_20, tmpvar_20)
    ) - _FogStartDistance));
    highp float tmpvar_22;
    tmpvar_22 = min (max ((
      (1.0 - exp((-(
        (_FogIntensity * tmpvar_21)
      ) * (_FogIntensity * tmpvar_21))))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_23;
    tmpvar_23 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3(clamp (exp(
      (-((_FogColorIntensity * tmpvar_21)) * (_FogColorIntensity * tmpvar_21))
    ), 0.0, 1.0)));
    fogColor_19.xyz = tmpvar_23;
    fogColor_19.w = tmpvar_22;
    tmpvar_18 = fogColor_19;
  } else {
    mediump vec4 fogColor_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_26;
    tmpvar_26 = max (0.0, (sqrt(
      dot (tmpvar_25, tmpvar_25)
    ) - _FogStartDistance));
    highp float tmpvar_27;
    highp float tmpvar_28;
    tmpvar_28 = (_FogEndDistance - _FogStartDistance);
    tmpvar_27 = min (max ((
      (((500.0 * _FogIntensity) * tmpvar_26) / max (0.1, tmpvar_28))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_29;
    tmpvar_29 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3((1.0 - clamp (
      (((1000.0 * _FogColorIntensity) * tmpvar_26) / max (0.1, tmpvar_28))
    , 0.0, 1.0))));
    fogColor_24.xyz = tmpvar_29;
    fogColor_24.w = tmpvar_27;
    tmpvar_18 = fogColor_24;
  };
  tmpvar_13.w = 1.0;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_1.xyz;
  mediump vec4 wTangent_31;
  mediump vec3 wNormal_32;
  highp vec3 norm_33;
  norm_33 = tmpvar_30;
  highp mat3 tmpvar_34;
  tmpvar_34[0] = unity_WorldToObject[0].xyz;
  tmpvar_34[1] = unity_WorldToObject[1].xyz;
  tmpvar_34[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((norm_33 * tmpvar_34));
  wNormal_32 = tmpvar_35;
  highp vec3 dir_36;
  dir_36 = tmpvar_3.xyz;
  highp mat3 tmpvar_37;
  tmpvar_37[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_37[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_37[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((tmpvar_37 * dir_36));
  wTangent_31.xyz = tmpvar_38;
  wTangent_31.w = (_glesTANGENT.w * unity_WorldTransformParams.w);
  mediump vec3 tmpvar_39;
  tmpvar_39 = (((wNormal_32.yzx * wTangent_31.zxy) - (wNormal_32.zxy * wTangent_31.yzx)) * wTangent_31.w);
  mediump vec3 tmpvar_40;
  tmpvar_40.x = wTangent_31.x;
  tmpvar_40.y = tmpvar_39.x;
  tmpvar_40.z = wNormal_32.x;
  mediump vec3 tmpvar_41;
  tmpvar_41.x = wTangent_31.y;
  tmpvar_41.y = tmpvar_39.y;
  tmpvar_41.z = wNormal_32.y;
  mediump vec3 tmpvar_42;
  tmpvar_42.x = wTangent_31.z;
  tmpvar_42.y = tmpvar_39.z;
  tmpvar_42.z = wNormal_32.z;
  highp vec4 tmpvar_43;
  tmpvar_43 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_6.xz = (tmpvar_43.xz - ((tmpvar_43.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_6.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize((tmpvar_43.xyz - adjCamPos_6));
  tmpvar_12 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = cos(_CamRotate);
  cost_5 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = sin(_CamRotate);
  sint_4 = tmpvar_46;
  highp mat2 tmpvar_47;
  tmpvar_47[0].x = cost_5;
  tmpvar_47[0].y = -(sint_4);
  tmpvar_47[1].x = sint_4;
  tmpvar_47[1].y = cost_5;
  tmpvar_12.xz = (tmpvar_47 * tmpvar_12.xz);
  highp vec3 tmpvar_48;
  tmpvar_48 = (_WorldSpaceCameraPos - tmpvar_43.xyz);
  tmpvar_13.xyz = tmpvar_48;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_COLOR0 = tmpvar_2;
  xlv_COLOR1 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_1.xyz;
  xlv_TEXCOORD2 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_40;
  xlv_TEXCOORD6 = tmpvar_41;
  xlv_TEXCOORD7 = tmpvar_42;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
uniform highp vec4 _RimColor;
uniform highp float _RimPower;
uniform highp float _RimIntensity;
uniform sampler2D _NormalMap;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec3 normalFromMap_1;
  mediump vec4 Maskmap_2;
  mediump vec4 finalColor_3;
  mediump vec4 base_color1_4;
  mediump vec4 base_color0_5;
  mediump vec2 flow_dir_6;
  mediump float flow_scale1_7;
  mediump float flow_scale0_8;
  mediump vec3 flowAll_9;
  mediump float time_10;
  mediump vec2 uv_11;
  mediump vec2 UV_12;
  highp vec2 tmpvar_13;
  tmpvar_13 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_12 = tmpvar_13;
  highp vec2 tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_USpeed * _Time.y);
  tmpvar_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (_VSpeed * _Time.y);
  tmpvar_14.y = tmpvar_16;
  UV_12 = (UV_12 + tmpvar_14);
  highp vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_15;
  tmpvar_17.y = tmpvar_16;
  highp vec2 tmpvar_18;
  tmpvar_18 = (UV_12 + tmpvar_17);
  uv_11 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = _Time.y;
  time_10 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_FlowMap, uv_11).xyz;
  flowAll_9 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((_Speed * time_10) + flowAll_9.z));
  flow_scale0_8 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = fract(((
    (_Speed * time_10)
   + flowAll_9.z) + 0.5));
  flow_scale1_7 = tmpvar_22;
  flowAll_9.xy = (2.0 * (flowAll_9.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_23;
  tmpvar_23.x = _FlowSignX;
  tmpvar_23.y = _FlowSignY;
  flowAll_9.xy = (flowAll_9.xy * tmpvar_23);
  highp vec2 tmpvar_24;
  tmpvar_24 = (flowAll_9.xy * _FlowIntensity);
  flow_dir_6 = tmpvar_24;
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_11 + (flow_dir_6 * flow_scale0_8));
  mediump vec2 tmpvar_26;
  tmpvar_26 = (uv_11 + (flow_dir_6 * flow_scale1_7));
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color0_5 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MainTex, tmpvar_26);
  base_color1_4 = tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix (base_color0_5, base_color1_4, vec4(abs((2.0 * 
    (flow_scale0_8 - 0.5)
  ))));
  finalColor_3.w = 0.0;
  finalColor_3.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_29.x * xlv_COLOR0.x)));
  finalColor_3.xyz = (finalColor_3.xyz * (1.0 + (tmpvar_29.x * _EmissionScaler)));
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_2 = tmpvar_30;
  finalColor_3.xyz = (finalColor_3.xyz + ((_MaskColor.xyz * Maskmap_2.y) * _MaskScale));
  mediump vec3 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_32;
  tmpvar_32 = textureCube (_EnvTex, tmpvar_31);
  finalColor_3.xyz = (finalColor_3.xyz + ((tmpvar_32.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_3.w = (tmpvar_29.w * _BloomFactor);
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_NormalMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  normalFromMap_1 = tmpvar_33;
  mediump vec3 o_34;
  o_34.x = dot (xlv_TEXCOORD5, normalFromMap_1);
  o_34.y = dot (xlv_TEXCOORD6, normalFromMap_1);
  o_34.z = dot (xlv_TEXCOORD7, normalFromMap_1);
  mediump float tmpvar_35;
  tmpvar_35 = (1.0 - clamp (dot (
    normalize(xlv_TEXCOORD4.xyz)
  , o_34), 0.0, 1.0));
  highp float tmpvar_36;
  tmpvar_36 = pow (tmpvar_35, _RimPower);
  finalColor_3.xyz = (finalColor_3.xyz + ((_RimColor.xyz * tmpvar_36) * _RimIntensity));
  finalColor_3.xyz = mix (finalColor_3.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  gl_FragData[0] = finalColor_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "FRESNEL" "UseNormalMap" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_WorldTransformParams;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _FogStartDistance;
uniform highp float _FogEndDistance;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1.w = 0.0;
  tmpvar_1.xyz = _glesNormal;
  mediump vec4 tmpvar_2;
  mediump vec4 tmpvar_3;
  tmpvar_2 = _glesColor;
  tmpvar_3 = _glesTANGENT;
  highp float sint_4;
  highp float cost_5;
  highp vec3 adjCamPos_6;
  mediump vec4 offsetVertex_7;
  mediump float normalOut_8;
  highp vec4 offset_9;
  highp vec4 tmpvar_10;
  mediump vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  mediump vec4 tmpvar_13;
  offset_9.yzw = vec3(0.0, 0.0, 0.0);
  offset_9.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_9.y = offset_9.x;
  highp float tmpvar_14;
  tmpvar_14 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_8 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = ((_glesVertex + (
    (offset_9 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_1 * normalOut_8) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_7 = tmpvar_15;
  highp vec4 pos_16;
  pos_16 = offsetVertex_7;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = pos_16.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_17));
  tmpvar_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_11.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_18;
  if ((_FogColorNear.w > 0.5)) {
    mediump vec4 fogColor_19;
    highp vec3 tmpvar_20;
    tmpvar_20 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_21;
    tmpvar_21 = max (0.0, (sqrt(
      dot (tmpvar_20, tmpvar_20)
    ) - _FogStartDistance));
    highp float tmpvar_22;
    tmpvar_22 = min (max ((
      (1.0 - exp((-(
        (_FogIntensity * tmpvar_21)
      ) * (_FogIntensity * tmpvar_21))))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_23;
    tmpvar_23 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3(clamp (exp(
      (-((_FogColorIntensity * tmpvar_21)) * (_FogColorIntensity * tmpvar_21))
    ), 0.0, 1.0)));
    fogColor_19.xyz = tmpvar_23;
    fogColor_19.w = tmpvar_22;
    tmpvar_18 = fogColor_19;
  } else {
    mediump vec4 fogColor_24;
    highp vec3 tmpvar_25;
    tmpvar_25 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_26;
    tmpvar_26 = max (0.0, (sqrt(
      dot (tmpvar_25, tmpvar_25)
    ) - _FogStartDistance));
    highp float tmpvar_27;
    highp float tmpvar_28;
    tmpvar_28 = (_FogEndDistance - _FogStartDistance);
    tmpvar_27 = min (max ((
      (((500.0 * _FogIntensity) * tmpvar_26) / max (0.1, tmpvar_28))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_29;
    tmpvar_29 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3((1.0 - clamp (
      (((1000.0 * _FogColorIntensity) * tmpvar_26) / max (0.1, tmpvar_28))
    , 0.0, 1.0))));
    fogColor_24.xyz = tmpvar_29;
    fogColor_24.w = tmpvar_27;
    tmpvar_18 = fogColor_24;
  };
  tmpvar_13.w = 1.0;
  mediump vec3 tmpvar_30;
  tmpvar_30 = tmpvar_1.xyz;
  mediump vec4 wTangent_31;
  mediump vec3 wNormal_32;
  highp vec3 norm_33;
  norm_33 = tmpvar_30;
  highp mat3 tmpvar_34;
  tmpvar_34[0] = unity_WorldToObject[0].xyz;
  tmpvar_34[1] = unity_WorldToObject[1].xyz;
  tmpvar_34[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_35;
  tmpvar_35 = normalize((norm_33 * tmpvar_34));
  wNormal_32 = tmpvar_35;
  highp vec3 dir_36;
  dir_36 = tmpvar_3.xyz;
  highp mat3 tmpvar_37;
  tmpvar_37[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_37[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_37[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize((tmpvar_37 * dir_36));
  wTangent_31.xyz = tmpvar_38;
  wTangent_31.w = (_glesTANGENT.w * unity_WorldTransformParams.w);
  mediump vec3 tmpvar_39;
  tmpvar_39 = (((wNormal_32.yzx * wTangent_31.zxy) - (wNormal_32.zxy * wTangent_31.yzx)) * wTangent_31.w);
  mediump vec3 tmpvar_40;
  tmpvar_40.x = wTangent_31.x;
  tmpvar_40.y = tmpvar_39.x;
  tmpvar_40.z = wNormal_32.x;
  mediump vec3 tmpvar_41;
  tmpvar_41.x = wTangent_31.y;
  tmpvar_41.y = tmpvar_39.y;
  tmpvar_41.z = wNormal_32.y;
  mediump vec3 tmpvar_42;
  tmpvar_42.x = wTangent_31.z;
  tmpvar_42.y = tmpvar_39.z;
  tmpvar_42.z = wNormal_32.z;
  highp vec4 tmpvar_43;
  tmpvar_43 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_6.xz = (tmpvar_43.xz - ((tmpvar_43.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_6.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize((tmpvar_43.xyz - adjCamPos_6));
  tmpvar_12 = tmpvar_44;
  mediump float tmpvar_45;
  tmpvar_45 = cos(_CamRotate);
  cost_5 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = sin(_CamRotate);
  sint_4 = tmpvar_46;
  highp mat2 tmpvar_47;
  tmpvar_47[0].x = cost_5;
  tmpvar_47[0].y = -(sint_4);
  tmpvar_47[1].x = sint_4;
  tmpvar_47[1].y = cost_5;
  tmpvar_12.xz = (tmpvar_47 * tmpvar_12.xz);
  highp vec3 tmpvar_48;
  tmpvar_48 = (_WorldSpaceCameraPos - tmpvar_43.xyz);
  tmpvar_13.xyz = tmpvar_48;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_COLOR0 = tmpvar_2;
  xlv_COLOR1 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_1.xyz;
  xlv_TEXCOORD2 = tmpvar_12;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_40;
  xlv_TEXCOORD6 = tmpvar_41;
  xlv_TEXCOORD7 = tmpvar_42;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
uniform highp vec4 _RimColor;
uniform highp float _RimPower;
uniform highp float _RimIntensity;
uniform sampler2D _NormalMap;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec3 normalFromMap_1;
  mediump vec4 Maskmap_2;
  mediump vec4 finalColor_3;
  mediump vec4 base_color1_4;
  mediump vec4 base_color0_5;
  mediump vec2 flow_dir_6;
  mediump float flow_scale1_7;
  mediump float flow_scale0_8;
  mediump vec3 flowAll_9;
  mediump float time_10;
  mediump vec2 uv_11;
  mediump vec2 UV_12;
  highp vec2 tmpvar_13;
  tmpvar_13 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_12 = tmpvar_13;
  highp vec2 tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_USpeed * _Time.y);
  tmpvar_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (_VSpeed * _Time.y);
  tmpvar_14.y = tmpvar_16;
  UV_12 = (UV_12 + tmpvar_14);
  highp vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_15;
  tmpvar_17.y = tmpvar_16;
  highp vec2 tmpvar_18;
  tmpvar_18 = (UV_12 + tmpvar_17);
  uv_11 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = _Time.y;
  time_10 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_FlowMap, uv_11).xyz;
  flowAll_9 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((_Speed * time_10) + flowAll_9.z));
  flow_scale0_8 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = fract(((
    (_Speed * time_10)
   + flowAll_9.z) + 0.5));
  flow_scale1_7 = tmpvar_22;
  flowAll_9.xy = (2.0 * (flowAll_9.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_23;
  tmpvar_23.x = _FlowSignX;
  tmpvar_23.y = _FlowSignY;
  flowAll_9.xy = (flowAll_9.xy * tmpvar_23);
  highp vec2 tmpvar_24;
  tmpvar_24 = (flowAll_9.xy * _FlowIntensity);
  flow_dir_6 = tmpvar_24;
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_11 + (flow_dir_6 * flow_scale0_8));
  mediump vec2 tmpvar_26;
  tmpvar_26 = (uv_11 + (flow_dir_6 * flow_scale1_7));
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color0_5 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MainTex, tmpvar_26);
  base_color1_4 = tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix (base_color0_5, base_color1_4, vec4(abs((2.0 * 
    (flow_scale0_8 - 0.5)
  ))));
  finalColor_3.w = 0.0;
  finalColor_3.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_29.x * xlv_COLOR0.x)));
  finalColor_3.xyz = (finalColor_3.xyz * (1.0 + (tmpvar_29.x * _EmissionScaler)));
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_2 = tmpvar_30;
  finalColor_3.xyz = (finalColor_3.xyz + ((_MaskColor.xyz * Maskmap_2.y) * _MaskScale));
  mediump vec3 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_32;
  tmpvar_32 = textureCube (_EnvTex, tmpvar_31);
  finalColor_3.xyz = (finalColor_3.xyz + ((tmpvar_32.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_3.w = (tmpvar_29.w * _BloomFactor);
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_NormalMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  normalFromMap_1 = tmpvar_33;
  mediump vec3 o_34;
  o_34.x = dot (xlv_TEXCOORD5, normalFromMap_1);
  o_34.y = dot (xlv_TEXCOORD6, normalFromMap_1);
  o_34.z = dot (xlv_TEXCOORD7, normalFromMap_1);
  mediump float tmpvar_35;
  tmpvar_35 = (1.0 - clamp (dot (
    normalize(xlv_TEXCOORD4.xyz)
  , o_34), 0.0, 1.0));
  highp float tmpvar_36;
  tmpvar_36 = pow (tmpvar_35, _RimPower);
  finalColor_3.xyz = (finalColor_3.xyz + ((_RimColor.xyz * tmpvar_36) * _RimIntensity));
  finalColor_3.xyz = mix (finalColor_3.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  gl_FragData[0] = finalColor_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_HEIGHT" "FRESNEL" "UseNormalMap" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_WorldTransformParams;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _glesNormal;
  mediump vec4 tmpvar_3;
  tmpvar_3 = _glesTANGENT;
  highp float sint_4;
  highp float cost_5;
  highp vec3 adjCamPos_6;
  mediump vec4 offsetVertex_7;
  mediump float normalOut_8;
  highp vec4 offset_9;
  mediump vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  mediump vec4 tmpvar_12;
  offset_9.yzw = vec3(0.0, 0.0, 0.0);
  offset_9.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_9.y = offset_9.x;
  highp float tmpvar_13;
  tmpvar_13 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_8 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = ((_glesVertex + (
    (offset_9 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_2 * normalOut_8) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_7 = tmpvar_14;
  highp vec4 pos_15;
  pos_15 = offsetVertex_7;
  highp vec4 tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = pos_15.xyz;
  tmpvar_16 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_17));
  tmpvar_10.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_10.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_21;
  mediump float fogFactor_22;
  mediump vec3 fogColor_23;
  mediump vec3 heightFogColor_24;
  highp float HeightFogFactor_25;
  mediump vec3 atomesphereFogColor_26;
  mediump float h_27;
  highp float linearFogDensity_28;
  mediump float len_29;
  highp float tmpvar_30;
  tmpvar_30 = sqrt(dot (tmpvar_20, tmpvar_20));
  len_29 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (((len_29 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_28 = (tmpvar_31 * (2.0 - tmpvar_31));
  if ((len_29 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_28 = (linearFogDensity_28 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_32;
  tmpvar_32 = min (pow (linearFogDensity_28, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_28 = tmpvar_32;
  mediump float tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((tmpvar_19.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_33 = tmpvar_34;
  h_27 = (tmpvar_33 * (2.0 - tmpvar_33));
  highp vec3 tmpvar_35;
  tmpvar_35 = (_HeigtFogColBase.xyz + (h_27 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_26 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (atomesphereFogColor_26, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_29 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_26 = tmpvar_36;
  mediump float tmpvar_37;
  mediump float r_38;
  mediump float f_39;
  mediump float u_40;
  mediump float l_41;
  mediump float fogInt_42;
  fogInt_42 = 1.0;
  highp float tmpvar_43;
  tmpvar_43 = (_HeigtFogParams.x * tmpvar_20.y);
  highp float tmpvar_44;
  tmpvar_44 = abs(tmpvar_43);
  if ((tmpvar_44 > 0.01)) {
    highp float tmpvar_45;
    tmpvar_45 = exp(-(tmpvar_43));
    fogInt_42 = ((1.0 - tmpvar_45) / tmpvar_43);
  };
  highp float tmpvar_46;
  tmpvar_46 = sqrt(dot (tmpvar_20, tmpvar_20));
  l_41 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = (l_41 * _HeigtFogParams.y);
  u_40 = tmpvar_47;
  fogInt_42 = (fogInt_42 * u_40);
  mediump float tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((l_41 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_48 = tmpvar_49;
  r_38 = (tmpvar_48 * (2.0 - tmpvar_48));
  r_38 = ((r_38 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_39 = ((1.0 - clamp (
    exp2(-(fogInt_42))
  , 0.0, 1.0)) * r_38);
  highp float tmpvar_50;
  tmpvar_50 = min (f_39, _HeigtFogColBase.w);
  tmpvar_37 = tmpvar_50;
  HeightFogFactor_25 = tmpvar_37;
  highp vec3 tmpvar_51;
  tmpvar_51 = _Mihoyo_FogColor.xyz;
  heightFogColor_24 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = ((heightFogColor_24 * HeightFogFactor_25) + ((atomesphereFogColor_26 * tmpvar_32) * (1.0 - HeightFogFactor_25)));
  fogColor_23 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = ((1.0 - tmpvar_32) * (1.0 - HeightFogFactor_25));
  fogFactor_22 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54.xyz = fogColor_23;
  tmpvar_54.w = fogFactor_22;
  tmpvar_21 = tmpvar_54;
  tmpvar_18 = tmpvar_21;
  tmpvar_12.w = 1.0;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_2.xyz;
  mediump vec4 wTangent_56;
  mediump vec3 wNormal_57;
  highp vec3 norm_58;
  norm_58 = tmpvar_55;
  highp mat3 tmpvar_59;
  tmpvar_59[0] = unity_WorldToObject[0].xyz;
  tmpvar_59[1] = unity_WorldToObject[1].xyz;
  tmpvar_59[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize((norm_58 * tmpvar_59));
  wNormal_57 = tmpvar_60;
  highp vec3 dir_61;
  dir_61 = tmpvar_3.xyz;
  highp mat3 tmpvar_62;
  tmpvar_62[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_62[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_62[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((tmpvar_62 * dir_61));
  wTangent_56.xyz = tmpvar_63;
  wTangent_56.w = (_glesTANGENT.w * unity_WorldTransformParams.w);
  mediump vec3 tmpvar_64;
  tmpvar_64 = (((wNormal_57.yzx * wTangent_56.zxy) - (wNormal_57.zxy * wTangent_56.yzx)) * wTangent_56.w);
  mediump vec3 tmpvar_65;
  tmpvar_65.x = wTangent_56.x;
  tmpvar_65.y = tmpvar_64.x;
  tmpvar_65.z = wNormal_57.x;
  mediump vec3 tmpvar_66;
  tmpvar_66.x = wTangent_56.y;
  tmpvar_66.y = tmpvar_64.y;
  tmpvar_66.z = wNormal_57.y;
  mediump vec3 tmpvar_67;
  tmpvar_67.x = wTangent_56.z;
  tmpvar_67.y = tmpvar_64.z;
  tmpvar_67.z = wNormal_57.z;
  highp vec4 tmpvar_68;
  tmpvar_68 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_6.xz = (tmpvar_68.xz - ((tmpvar_68.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_6.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((tmpvar_68.xyz - adjCamPos_6));
  tmpvar_11 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = cos(_CamRotate);
  cost_5 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = sin(_CamRotate);
  sint_4 = tmpvar_71;
  highp mat2 tmpvar_72;
  tmpvar_72[0].x = cost_5;
  tmpvar_72[0].y = -(sint_4);
  tmpvar_72[1].x = sint_4;
  tmpvar_72[1].y = cost_5;
  tmpvar_11.xz = (tmpvar_72 * tmpvar_11.xz);
  highp vec3 tmpvar_73;
  tmpvar_73 = (_WorldSpaceCameraPos - tmpvar_68.xyz);
  tmpvar_12.xyz = tmpvar_73;
  gl_Position = tmpvar_16;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_COLOR0 = tmpvar_1;
  xlv_COLOR1 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_2.xyz;
  xlv_TEXCOORD2 = tmpvar_11;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_65;
  xlv_TEXCOORD6 = tmpvar_66;
  xlv_TEXCOORD7 = tmpvar_67;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
uniform highp vec4 _RimColor;
uniform highp float _RimPower;
uniform highp float _RimIntensity;
uniform sampler2D _NormalMap;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec3 normalFromMap_1;
  mediump vec4 Maskmap_2;
  mediump vec4 finalColor_3;
  mediump vec4 base_color1_4;
  mediump vec4 base_color0_5;
  mediump vec2 flow_dir_6;
  mediump float flow_scale1_7;
  mediump float flow_scale0_8;
  mediump vec3 flowAll_9;
  mediump float time_10;
  mediump vec2 uv_11;
  mediump vec2 UV_12;
  highp vec2 tmpvar_13;
  tmpvar_13 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_12 = tmpvar_13;
  highp vec2 tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_USpeed * _Time.y);
  tmpvar_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (_VSpeed * _Time.y);
  tmpvar_14.y = tmpvar_16;
  UV_12 = (UV_12 + tmpvar_14);
  highp vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_15;
  tmpvar_17.y = tmpvar_16;
  highp vec2 tmpvar_18;
  tmpvar_18 = (UV_12 + tmpvar_17);
  uv_11 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = _Time.y;
  time_10 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_FlowMap, uv_11).xyz;
  flowAll_9 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((_Speed * time_10) + flowAll_9.z));
  flow_scale0_8 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = fract(((
    (_Speed * time_10)
   + flowAll_9.z) + 0.5));
  flow_scale1_7 = tmpvar_22;
  flowAll_9.xy = (2.0 * (flowAll_9.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_23;
  tmpvar_23.x = _FlowSignX;
  tmpvar_23.y = _FlowSignY;
  flowAll_9.xy = (flowAll_9.xy * tmpvar_23);
  highp vec2 tmpvar_24;
  tmpvar_24 = (flowAll_9.xy * _FlowIntensity);
  flow_dir_6 = tmpvar_24;
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_11 + (flow_dir_6 * flow_scale0_8));
  mediump vec2 tmpvar_26;
  tmpvar_26 = (uv_11 + (flow_dir_6 * flow_scale1_7));
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color0_5 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MainTex, tmpvar_26);
  base_color1_4 = tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix (base_color0_5, base_color1_4, vec4(abs((2.0 * 
    (flow_scale0_8 - 0.5)
  ))));
  finalColor_3.w = 0.0;
  finalColor_3.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_29.x * xlv_COLOR0.x)));
  finalColor_3.xyz = (finalColor_3.xyz * (1.0 + (tmpvar_29.x * _EmissionScaler)));
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_2 = tmpvar_30;
  finalColor_3.xyz = (finalColor_3.xyz + ((_MaskColor.xyz * Maskmap_2.y) * _MaskScale));
  mediump vec3 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_32;
  tmpvar_32 = textureCube (_EnvTex, tmpvar_31);
  finalColor_3.xyz = (finalColor_3.xyz + ((tmpvar_32.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_3.w = (tmpvar_29.w * _BloomFactor);
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_NormalMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  normalFromMap_1 = tmpvar_33;
  mediump vec3 o_34;
  o_34.x = dot (xlv_TEXCOORD5, normalFromMap_1);
  o_34.y = dot (xlv_TEXCOORD6, normalFromMap_1);
  o_34.z = dot (xlv_TEXCOORD7, normalFromMap_1);
  mediump float tmpvar_35;
  tmpvar_35 = (1.0 - clamp (dot (
    normalize(xlv_TEXCOORD4.xyz)
  , o_34), 0.0, 1.0));
  highp float tmpvar_36;
  tmpvar_36 = pow (tmpvar_35, _RimPower);
  finalColor_3.xyz = (finalColor_3.xyz + ((_RimColor.xyz * tmpvar_36) * _RimIntensity));
  finalColor_3.xyz = (xlv_COLOR1.xyz + (finalColor_3.xyz * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  gl_FragData[0] = finalColor_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_HEIGHT" "FRESNEL" "UseNormalMap" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_WorldTransformParams;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _glesNormal;
  mediump vec4 tmpvar_3;
  tmpvar_3 = _glesTANGENT;
  highp float sint_4;
  highp float cost_5;
  highp vec3 adjCamPos_6;
  mediump vec4 offsetVertex_7;
  mediump float normalOut_8;
  highp vec4 offset_9;
  mediump vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  mediump vec4 tmpvar_12;
  offset_9.yzw = vec3(0.0, 0.0, 0.0);
  offset_9.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_9.y = offset_9.x;
  highp float tmpvar_13;
  tmpvar_13 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_8 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = ((_glesVertex + (
    (offset_9 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_2 * normalOut_8) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_7 = tmpvar_14;
  highp vec4 pos_15;
  pos_15 = offsetVertex_7;
  highp vec4 tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = pos_15.xyz;
  tmpvar_16 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_17));
  tmpvar_10.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_10.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_21;
  mediump float fogFactor_22;
  mediump vec3 fogColor_23;
  mediump vec3 heightFogColor_24;
  highp float HeightFogFactor_25;
  mediump vec3 atomesphereFogColor_26;
  mediump float h_27;
  highp float linearFogDensity_28;
  mediump float len_29;
  highp float tmpvar_30;
  tmpvar_30 = sqrt(dot (tmpvar_20, tmpvar_20));
  len_29 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (((len_29 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_28 = (tmpvar_31 * (2.0 - tmpvar_31));
  if ((len_29 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_28 = (linearFogDensity_28 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_32;
  tmpvar_32 = min (pow (linearFogDensity_28, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_28 = tmpvar_32;
  mediump float tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((tmpvar_19.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_33 = tmpvar_34;
  h_27 = (tmpvar_33 * (2.0 - tmpvar_33));
  highp vec3 tmpvar_35;
  tmpvar_35 = (_HeigtFogColBase.xyz + (h_27 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_26 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (atomesphereFogColor_26, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_29 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_26 = tmpvar_36;
  mediump float tmpvar_37;
  mediump float r_38;
  mediump float f_39;
  mediump float u_40;
  mediump float l_41;
  mediump float fogInt_42;
  fogInt_42 = 1.0;
  highp float tmpvar_43;
  tmpvar_43 = (_HeigtFogParams.x * tmpvar_20.y);
  highp float tmpvar_44;
  tmpvar_44 = abs(tmpvar_43);
  if ((tmpvar_44 > 0.01)) {
    highp float tmpvar_45;
    tmpvar_45 = exp(-(tmpvar_43));
    fogInt_42 = ((1.0 - tmpvar_45) / tmpvar_43);
  };
  highp float tmpvar_46;
  tmpvar_46 = sqrt(dot (tmpvar_20, tmpvar_20));
  l_41 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = (l_41 * _HeigtFogParams.y);
  u_40 = tmpvar_47;
  fogInt_42 = (fogInt_42 * u_40);
  mediump float tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((l_41 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_48 = tmpvar_49;
  r_38 = (tmpvar_48 * (2.0 - tmpvar_48));
  r_38 = ((r_38 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_39 = ((1.0 - clamp (
    exp2(-(fogInt_42))
  , 0.0, 1.0)) * r_38);
  highp float tmpvar_50;
  tmpvar_50 = min (f_39, _HeigtFogColBase.w);
  tmpvar_37 = tmpvar_50;
  HeightFogFactor_25 = tmpvar_37;
  highp vec3 tmpvar_51;
  tmpvar_51 = _Mihoyo_FogColor.xyz;
  heightFogColor_24 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = ((heightFogColor_24 * HeightFogFactor_25) + ((atomesphereFogColor_26 * tmpvar_32) * (1.0 - HeightFogFactor_25)));
  fogColor_23 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = ((1.0 - tmpvar_32) * (1.0 - HeightFogFactor_25));
  fogFactor_22 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54.xyz = fogColor_23;
  tmpvar_54.w = fogFactor_22;
  tmpvar_21 = tmpvar_54;
  tmpvar_18 = tmpvar_21;
  tmpvar_12.w = 1.0;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_2.xyz;
  mediump vec4 wTangent_56;
  mediump vec3 wNormal_57;
  highp vec3 norm_58;
  norm_58 = tmpvar_55;
  highp mat3 tmpvar_59;
  tmpvar_59[0] = unity_WorldToObject[0].xyz;
  tmpvar_59[1] = unity_WorldToObject[1].xyz;
  tmpvar_59[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize((norm_58 * tmpvar_59));
  wNormal_57 = tmpvar_60;
  highp vec3 dir_61;
  dir_61 = tmpvar_3.xyz;
  highp mat3 tmpvar_62;
  tmpvar_62[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_62[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_62[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((tmpvar_62 * dir_61));
  wTangent_56.xyz = tmpvar_63;
  wTangent_56.w = (_glesTANGENT.w * unity_WorldTransformParams.w);
  mediump vec3 tmpvar_64;
  tmpvar_64 = (((wNormal_57.yzx * wTangent_56.zxy) - (wNormal_57.zxy * wTangent_56.yzx)) * wTangent_56.w);
  mediump vec3 tmpvar_65;
  tmpvar_65.x = wTangent_56.x;
  tmpvar_65.y = tmpvar_64.x;
  tmpvar_65.z = wNormal_57.x;
  mediump vec3 tmpvar_66;
  tmpvar_66.x = wTangent_56.y;
  tmpvar_66.y = tmpvar_64.y;
  tmpvar_66.z = wNormal_57.y;
  mediump vec3 tmpvar_67;
  tmpvar_67.x = wTangent_56.z;
  tmpvar_67.y = tmpvar_64.z;
  tmpvar_67.z = wNormal_57.z;
  highp vec4 tmpvar_68;
  tmpvar_68 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_6.xz = (tmpvar_68.xz - ((tmpvar_68.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_6.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((tmpvar_68.xyz - adjCamPos_6));
  tmpvar_11 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = cos(_CamRotate);
  cost_5 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = sin(_CamRotate);
  sint_4 = tmpvar_71;
  highp mat2 tmpvar_72;
  tmpvar_72[0].x = cost_5;
  tmpvar_72[0].y = -(sint_4);
  tmpvar_72[1].x = sint_4;
  tmpvar_72[1].y = cost_5;
  tmpvar_11.xz = (tmpvar_72 * tmpvar_11.xz);
  highp vec3 tmpvar_73;
  tmpvar_73 = (_WorldSpaceCameraPos - tmpvar_68.xyz);
  tmpvar_12.xyz = tmpvar_73;
  gl_Position = tmpvar_16;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_COLOR0 = tmpvar_1;
  xlv_COLOR1 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_2.xyz;
  xlv_TEXCOORD2 = tmpvar_11;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_65;
  xlv_TEXCOORD6 = tmpvar_66;
  xlv_TEXCOORD7 = tmpvar_67;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
uniform highp vec4 _RimColor;
uniform highp float _RimPower;
uniform highp float _RimIntensity;
uniform sampler2D _NormalMap;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec3 normalFromMap_1;
  mediump vec4 Maskmap_2;
  mediump vec4 finalColor_3;
  mediump vec4 base_color1_4;
  mediump vec4 base_color0_5;
  mediump vec2 flow_dir_6;
  mediump float flow_scale1_7;
  mediump float flow_scale0_8;
  mediump vec3 flowAll_9;
  mediump float time_10;
  mediump vec2 uv_11;
  mediump vec2 UV_12;
  highp vec2 tmpvar_13;
  tmpvar_13 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_12 = tmpvar_13;
  highp vec2 tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_USpeed * _Time.y);
  tmpvar_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (_VSpeed * _Time.y);
  tmpvar_14.y = tmpvar_16;
  UV_12 = (UV_12 + tmpvar_14);
  highp vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_15;
  tmpvar_17.y = tmpvar_16;
  highp vec2 tmpvar_18;
  tmpvar_18 = (UV_12 + tmpvar_17);
  uv_11 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = _Time.y;
  time_10 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_FlowMap, uv_11).xyz;
  flowAll_9 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((_Speed * time_10) + flowAll_9.z));
  flow_scale0_8 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = fract(((
    (_Speed * time_10)
   + flowAll_9.z) + 0.5));
  flow_scale1_7 = tmpvar_22;
  flowAll_9.xy = (2.0 * (flowAll_9.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_23;
  tmpvar_23.x = _FlowSignX;
  tmpvar_23.y = _FlowSignY;
  flowAll_9.xy = (flowAll_9.xy * tmpvar_23);
  highp vec2 tmpvar_24;
  tmpvar_24 = (flowAll_9.xy * _FlowIntensity);
  flow_dir_6 = tmpvar_24;
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_11 + (flow_dir_6 * flow_scale0_8));
  mediump vec2 tmpvar_26;
  tmpvar_26 = (uv_11 + (flow_dir_6 * flow_scale1_7));
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color0_5 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MainTex, tmpvar_26);
  base_color1_4 = tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix (base_color0_5, base_color1_4, vec4(abs((2.0 * 
    (flow_scale0_8 - 0.5)
  ))));
  finalColor_3.w = 0.0;
  finalColor_3.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_29.x * xlv_COLOR0.x)));
  finalColor_3.xyz = (finalColor_3.xyz * (1.0 + (tmpvar_29.x * _EmissionScaler)));
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_2 = tmpvar_30;
  finalColor_3.xyz = (finalColor_3.xyz + ((_MaskColor.xyz * Maskmap_2.y) * _MaskScale));
  mediump vec3 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_32;
  tmpvar_32 = textureCube (_EnvTex, tmpvar_31);
  finalColor_3.xyz = (finalColor_3.xyz + ((tmpvar_32.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_3.w = (tmpvar_29.w * _BloomFactor);
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_NormalMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  normalFromMap_1 = tmpvar_33;
  mediump vec3 o_34;
  o_34.x = dot (xlv_TEXCOORD5, normalFromMap_1);
  o_34.y = dot (xlv_TEXCOORD6, normalFromMap_1);
  o_34.z = dot (xlv_TEXCOORD7, normalFromMap_1);
  mediump float tmpvar_35;
  tmpvar_35 = (1.0 - clamp (dot (
    normalize(xlv_TEXCOORD4.xyz)
  , o_34), 0.0, 1.0));
  highp float tmpvar_36;
  tmpvar_36 = pow (tmpvar_35, _RimPower);
  finalColor_3.xyz = (finalColor_3.xyz + ((_RimColor.xyz * tmpvar_36) * _RimIntensity));
  finalColor_3.xyz = (xlv_COLOR1.xyz + (finalColor_3.xyz * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  gl_FragData[0] = finalColor_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_HEIGHT" "FRESNEL" "UseNormalMap" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_WorldTransformParams;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _glesNormal;
  mediump vec4 tmpvar_3;
  tmpvar_3 = _glesTANGENT;
  highp float sint_4;
  highp float cost_5;
  highp vec3 adjCamPos_6;
  mediump vec4 offsetVertex_7;
  mediump float normalOut_8;
  highp vec4 offset_9;
  mediump vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  mediump vec4 tmpvar_12;
  offset_9.yzw = vec3(0.0, 0.0, 0.0);
  offset_9.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_9.y = offset_9.x;
  highp float tmpvar_13;
  tmpvar_13 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_8 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = ((_glesVertex + (
    (offset_9 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_2 * normalOut_8) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_7 = tmpvar_14;
  highp vec4 pos_15;
  pos_15 = offsetVertex_7;
  highp vec4 tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = pos_15.xyz;
  tmpvar_16 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_17));
  tmpvar_10.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_10.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_21;
  mediump float fogFactor_22;
  mediump vec3 fogColor_23;
  mediump vec3 heightFogColor_24;
  highp float HeightFogFactor_25;
  mediump vec3 atomesphereFogColor_26;
  mediump float h_27;
  highp float linearFogDensity_28;
  mediump float len_29;
  highp float tmpvar_30;
  tmpvar_30 = sqrt(dot (tmpvar_20, tmpvar_20));
  len_29 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (((len_29 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_28 = (tmpvar_31 * (2.0 - tmpvar_31));
  if ((len_29 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_28 = (linearFogDensity_28 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_32;
  tmpvar_32 = min (pow (linearFogDensity_28, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_28 = tmpvar_32;
  mediump float tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((tmpvar_19.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_33 = tmpvar_34;
  h_27 = (tmpvar_33 * (2.0 - tmpvar_33));
  highp vec3 tmpvar_35;
  tmpvar_35 = (_HeigtFogColBase.xyz + (h_27 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_26 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (atomesphereFogColor_26, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_29 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_26 = tmpvar_36;
  mediump float tmpvar_37;
  mediump float r_38;
  mediump float f_39;
  mediump float u_40;
  mediump float l_41;
  mediump float fogInt_42;
  fogInt_42 = 1.0;
  highp float tmpvar_43;
  tmpvar_43 = (_HeigtFogParams.x * tmpvar_20.y);
  highp float tmpvar_44;
  tmpvar_44 = abs(tmpvar_43);
  if ((tmpvar_44 > 0.01)) {
    highp float tmpvar_45;
    tmpvar_45 = exp(-(tmpvar_43));
    fogInt_42 = ((1.0 - tmpvar_45) / tmpvar_43);
  };
  highp float tmpvar_46;
  tmpvar_46 = sqrt(dot (tmpvar_20, tmpvar_20));
  l_41 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = (l_41 * _HeigtFogParams.y);
  u_40 = tmpvar_47;
  fogInt_42 = (fogInt_42 * u_40);
  mediump float tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((l_41 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_48 = tmpvar_49;
  r_38 = (tmpvar_48 * (2.0 - tmpvar_48));
  r_38 = ((r_38 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_39 = ((1.0 - clamp (
    exp2(-(fogInt_42))
  , 0.0, 1.0)) * r_38);
  highp float tmpvar_50;
  tmpvar_50 = min (f_39, _HeigtFogColBase.w);
  tmpvar_37 = tmpvar_50;
  HeightFogFactor_25 = tmpvar_37;
  highp vec3 tmpvar_51;
  tmpvar_51 = _Mihoyo_FogColor.xyz;
  heightFogColor_24 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = ((heightFogColor_24 * HeightFogFactor_25) + ((atomesphereFogColor_26 * tmpvar_32) * (1.0 - HeightFogFactor_25)));
  fogColor_23 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = ((1.0 - tmpvar_32) * (1.0 - HeightFogFactor_25));
  fogFactor_22 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54.xyz = fogColor_23;
  tmpvar_54.w = fogFactor_22;
  tmpvar_21 = tmpvar_54;
  tmpvar_18 = tmpvar_21;
  tmpvar_12.w = 1.0;
  mediump vec3 tmpvar_55;
  tmpvar_55 = tmpvar_2.xyz;
  mediump vec4 wTangent_56;
  mediump vec3 wNormal_57;
  highp vec3 norm_58;
  norm_58 = tmpvar_55;
  highp mat3 tmpvar_59;
  tmpvar_59[0] = unity_WorldToObject[0].xyz;
  tmpvar_59[1] = unity_WorldToObject[1].xyz;
  tmpvar_59[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize((norm_58 * tmpvar_59));
  wNormal_57 = tmpvar_60;
  highp vec3 dir_61;
  dir_61 = tmpvar_3.xyz;
  highp mat3 tmpvar_62;
  tmpvar_62[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_62[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_62[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize((tmpvar_62 * dir_61));
  wTangent_56.xyz = tmpvar_63;
  wTangent_56.w = (_glesTANGENT.w * unity_WorldTransformParams.w);
  mediump vec3 tmpvar_64;
  tmpvar_64 = (((wNormal_57.yzx * wTangent_56.zxy) - (wNormal_57.zxy * wTangent_56.yzx)) * wTangent_56.w);
  mediump vec3 tmpvar_65;
  tmpvar_65.x = wTangent_56.x;
  tmpvar_65.y = tmpvar_64.x;
  tmpvar_65.z = wNormal_57.x;
  mediump vec3 tmpvar_66;
  tmpvar_66.x = wTangent_56.y;
  tmpvar_66.y = tmpvar_64.y;
  tmpvar_66.z = wNormal_57.y;
  mediump vec3 tmpvar_67;
  tmpvar_67.x = wTangent_56.z;
  tmpvar_67.y = tmpvar_64.z;
  tmpvar_67.z = wNormal_57.z;
  highp vec4 tmpvar_68;
  tmpvar_68 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_6.xz = (tmpvar_68.xz - ((tmpvar_68.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_6.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((tmpvar_68.xyz - adjCamPos_6));
  tmpvar_11 = tmpvar_69;
  mediump float tmpvar_70;
  tmpvar_70 = cos(_CamRotate);
  cost_5 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = sin(_CamRotate);
  sint_4 = tmpvar_71;
  highp mat2 tmpvar_72;
  tmpvar_72[0].x = cost_5;
  tmpvar_72[0].y = -(sint_4);
  tmpvar_72[1].x = sint_4;
  tmpvar_72[1].y = cost_5;
  tmpvar_11.xz = (tmpvar_72 * tmpvar_11.xz);
  highp vec3 tmpvar_73;
  tmpvar_73 = (_WorldSpaceCameraPos - tmpvar_68.xyz);
  tmpvar_12.xyz = tmpvar_73;
  gl_Position = tmpvar_16;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_COLOR0 = tmpvar_1;
  xlv_COLOR1 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_2.xyz;
  xlv_TEXCOORD2 = tmpvar_11;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_65;
  xlv_TEXCOORD6 = tmpvar_66;
  xlv_TEXCOORD7 = tmpvar_67;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
uniform highp vec4 _RimColor;
uniform highp float _RimPower;
uniform highp float _RimIntensity;
uniform sampler2D _NormalMap;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec3 normalFromMap_1;
  mediump vec4 Maskmap_2;
  mediump vec4 finalColor_3;
  mediump vec4 base_color1_4;
  mediump vec4 base_color0_5;
  mediump vec2 flow_dir_6;
  mediump float flow_scale1_7;
  mediump float flow_scale0_8;
  mediump vec3 flowAll_9;
  mediump float time_10;
  mediump vec2 uv_11;
  mediump vec2 UV_12;
  highp vec2 tmpvar_13;
  tmpvar_13 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_12 = tmpvar_13;
  highp vec2 tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_USpeed * _Time.y);
  tmpvar_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (_VSpeed * _Time.y);
  tmpvar_14.y = tmpvar_16;
  UV_12 = (UV_12 + tmpvar_14);
  highp vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_15;
  tmpvar_17.y = tmpvar_16;
  highp vec2 tmpvar_18;
  tmpvar_18 = (UV_12 + tmpvar_17);
  uv_11 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = _Time.y;
  time_10 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_FlowMap, uv_11).xyz;
  flowAll_9 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((_Speed * time_10) + flowAll_9.z));
  flow_scale0_8 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = fract(((
    (_Speed * time_10)
   + flowAll_9.z) + 0.5));
  flow_scale1_7 = tmpvar_22;
  flowAll_9.xy = (2.0 * (flowAll_9.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_23;
  tmpvar_23.x = _FlowSignX;
  tmpvar_23.y = _FlowSignY;
  flowAll_9.xy = (flowAll_9.xy * tmpvar_23);
  highp vec2 tmpvar_24;
  tmpvar_24 = (flowAll_9.xy * _FlowIntensity);
  flow_dir_6 = tmpvar_24;
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_11 + (flow_dir_6 * flow_scale0_8));
  mediump vec2 tmpvar_26;
  tmpvar_26 = (uv_11 + (flow_dir_6 * flow_scale1_7));
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color0_5 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MainTex, tmpvar_26);
  base_color1_4 = tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix (base_color0_5, base_color1_4, vec4(abs((2.0 * 
    (flow_scale0_8 - 0.5)
  ))));
  finalColor_3.w = 0.0;
  finalColor_3.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_29.x * xlv_COLOR0.x)));
  finalColor_3.xyz = (finalColor_3.xyz * (1.0 + (tmpvar_29.x * _EmissionScaler)));
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_2 = tmpvar_30;
  finalColor_3.xyz = (finalColor_3.xyz + ((_MaskColor.xyz * Maskmap_2.y) * _MaskScale));
  mediump vec3 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_32;
  tmpvar_32 = textureCube (_EnvTex, tmpvar_31);
  finalColor_3.xyz = (finalColor_3.xyz + ((tmpvar_32.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_3.w = (tmpvar_29.w * _BloomFactor);
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_NormalMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  normalFromMap_1 = tmpvar_33;
  mediump vec3 o_34;
  o_34.x = dot (xlv_TEXCOORD5, normalFromMap_1);
  o_34.y = dot (xlv_TEXCOORD6, normalFromMap_1);
  o_34.z = dot (xlv_TEXCOORD7, normalFromMap_1);
  mediump float tmpvar_35;
  tmpvar_35 = (1.0 - clamp (dot (
    normalize(xlv_TEXCOORD4.xyz)
  , o_34), 0.0, 1.0));
  highp float tmpvar_36;
  tmpvar_36 = pow (tmpvar_35, _RimPower);
  finalColor_3.xyz = (finalColor_3.xyz + ((_RimColor.xyz * tmpvar_36) * _RimIntensity));
  finalColor_3.xyz = (xlv_COLOR1.xyz + (finalColor_3.xyz * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  gl_FragData[0] = finalColor_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FRESNEL" "UseNormalMap" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_WorldTransformParams;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _glesNormal;
  mediump vec4 tmpvar_3;
  tmpvar_3 = _glesTANGENT;
  highp float sint_4;
  highp float cost_5;
  highp vec3 adjCamPos_6;
  mediump vec4 offsetVertex_7;
  mediump float normalOut_8;
  highp vec4 offset_9;
  mediump vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  mediump vec4 tmpvar_12;
  offset_9.yzw = vec3(0.0, 0.0, 0.0);
  offset_9.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_9.y = offset_9.x;
  highp float tmpvar_13;
  tmpvar_13 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_8 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = ((_glesVertex + (
    (offset_9 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_2 * normalOut_8) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_7 = tmpvar_14;
  highp vec4 pos_15;
  pos_15 = offsetVertex_7;
  highp vec4 tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = pos_15.xyz;
  tmpvar_16 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_17));
  tmpvar_10.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_10.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_21;
  mediump float fogFactor_22;
  mediump vec3 fogColor_23;
  mediump vec3 heightFogColor_24;
  highp float HeightFogFactor_25;
  mediump vec3 atomesphereFogColor_26;
  mediump float h_27;
  highp float linearFogDensity_28;
  mediump float len_29;
  highp float tmpvar_30;
  tmpvar_30 = sqrt(dot (tmpvar_20, tmpvar_20));
  len_29 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (((len_29 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_28 = (tmpvar_31 * (2.0 - tmpvar_31));
  if ((len_29 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_28 = (linearFogDensity_28 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_32;
  tmpvar_32 = min (pow (linearFogDensity_28, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_28 = tmpvar_32;
  mediump float tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((tmpvar_19.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_33 = tmpvar_34;
  h_27 = (tmpvar_33 * (2.0 - tmpvar_33));
  highp vec3 tmpvar_35;
  tmpvar_35 = (_HeigtFogColBase2.xyz + (h_27 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_26 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (atomesphereFogColor_26, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_29 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_26 = tmpvar_36;
  mediump float tmpvar_37;
  mediump float r_38;
  mediump float f_39;
  mediump float u_40;
  mediump float l_41;
  mediump float fogInt_42;
  fogInt_42 = 1.0;
  highp float tmpvar_43;
  tmpvar_43 = (_HeigtFogParams2.x * tmpvar_20.y);
  highp float tmpvar_44;
  tmpvar_44 = abs(tmpvar_43);
  if ((tmpvar_44 > 0.01)) {
    highp float tmpvar_45;
    tmpvar_45 = exp(-(tmpvar_43));
    fogInt_42 = ((1.0 - tmpvar_45) / tmpvar_43);
  };
  highp float tmpvar_46;
  tmpvar_46 = sqrt(dot (tmpvar_20, tmpvar_20));
  l_41 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = (l_41 * _HeigtFogParams2.y);
  u_40 = tmpvar_47;
  fogInt_42 = (fogInt_42 * u_40);
  mediump float tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((l_41 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_48 = tmpvar_49;
  r_38 = (tmpvar_48 * (2.0 - tmpvar_48));
  r_38 = ((r_38 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_39 = ((1.0 - clamp (
    exp2(-(fogInt_42))
  , 0.0, 1.0)) * r_38);
  highp float tmpvar_50;
  tmpvar_50 = min (f_39, _HeigtFogColBase2.w);
  tmpvar_37 = tmpvar_50;
  HeightFogFactor_25 = tmpvar_37;
  highp vec3 tmpvar_51;
  tmpvar_51 = _Mihoyo_FogColor2.xyz;
  heightFogColor_24 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = ((heightFogColor_24 * HeightFogFactor_25) + ((atomesphereFogColor_26 * tmpvar_32) * (1.0 - HeightFogFactor_25)));
  fogColor_23 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = ((1.0 - tmpvar_32) * (1.0 - HeightFogFactor_25));
  fogFactor_22 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54.xyz = fogColor_23;
  tmpvar_54.w = fogFactor_22;
  tmpvar_21 = tmpvar_54;
  highp vec4 tmpvar_55;
  mediump float fogFactor_56;
  mediump vec3 fogColor_57;
  mediump vec3 heightFogColor_58;
  highp float HeightFogFactor_59;
  mediump vec3 atomesphereFogColor_60;
  mediump float h_61;
  highp float linearFogDensity_62;
  mediump float len_63;
  highp float tmpvar_64;
  tmpvar_64 = sqrt(dot (tmpvar_20, tmpvar_20));
  len_63 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (((len_63 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_62 = (tmpvar_65 * (2.0 - tmpvar_65));
  if ((len_63 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_62 = (linearFogDensity_62 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_66;
  tmpvar_66 = min (pow (linearFogDensity_62, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_62 = tmpvar_66;
  mediump float tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((tmpvar_19.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_67 = tmpvar_68;
  h_61 = (tmpvar_67 * (2.0 - tmpvar_67));
  highp vec3 tmpvar_69;
  tmpvar_69 = (_HeigtFogColBase3.xyz + (h_61 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_60 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = mix (atomesphereFogColor_60, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_63 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_60 = tmpvar_70;
  mediump float tmpvar_71;
  mediump float r_72;
  mediump float f_73;
  mediump float u_74;
  mediump float l_75;
  mediump float fogInt_76;
  fogInt_76 = 1.0;
  highp float tmpvar_77;
  tmpvar_77 = (_HeigtFogParams3.x * tmpvar_20.y);
  highp float tmpvar_78;
  tmpvar_78 = abs(tmpvar_77);
  if ((tmpvar_78 > 0.01)) {
    highp float tmpvar_79;
    tmpvar_79 = exp(-(tmpvar_77));
    fogInt_76 = ((1.0 - tmpvar_79) / tmpvar_77);
  };
  highp float tmpvar_80;
  tmpvar_80 = sqrt(dot (tmpvar_20, tmpvar_20));
  l_75 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (l_75 * _HeigtFogParams3.y);
  u_74 = tmpvar_81;
  fogInt_76 = (fogInt_76 * u_74);
  mediump float tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (((l_75 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_82 = tmpvar_83;
  r_72 = (tmpvar_82 * (2.0 - tmpvar_82));
  r_72 = ((r_72 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_73 = ((1.0 - clamp (
    exp2(-(fogInt_76))
  , 0.0, 1.0)) * r_72);
  highp float tmpvar_84;
  tmpvar_84 = min (f_73, _HeigtFogColBase3.w);
  tmpvar_71 = tmpvar_84;
  HeightFogFactor_59 = tmpvar_71;
  highp vec3 tmpvar_85;
  tmpvar_85 = _Mihoyo_FogColor3.xyz;
  heightFogColor_58 = tmpvar_85;
  highp vec3 tmpvar_86;
  tmpvar_86 = ((heightFogColor_58 * HeightFogFactor_59) + ((atomesphereFogColor_60 * tmpvar_66) * (1.0 - HeightFogFactor_59)));
  fogColor_57 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = ((1.0 - tmpvar_66) * (1.0 - HeightFogFactor_59));
  fogFactor_56 = tmpvar_87;
  mediump vec4 tmpvar_88;
  tmpvar_88.xyz = fogColor_57;
  tmpvar_88.w = fogFactor_56;
  tmpvar_55 = tmpvar_88;
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (tmpvar_21, tmpvar_55, vec4(_LerpFactor));
  tmpvar_18 = tmpvar_89;
  tmpvar_12.w = 1.0;
  mediump vec3 tmpvar_90;
  tmpvar_90 = tmpvar_2.xyz;
  mediump vec4 wTangent_91;
  mediump vec3 wNormal_92;
  highp vec3 norm_93;
  norm_93 = tmpvar_90;
  highp mat3 tmpvar_94;
  tmpvar_94[0] = unity_WorldToObject[0].xyz;
  tmpvar_94[1] = unity_WorldToObject[1].xyz;
  tmpvar_94[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_95;
  tmpvar_95 = normalize((norm_93 * tmpvar_94));
  wNormal_92 = tmpvar_95;
  highp vec3 dir_96;
  dir_96 = tmpvar_3.xyz;
  highp mat3 tmpvar_97;
  tmpvar_97[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_97[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_97[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_98;
  tmpvar_98 = normalize((tmpvar_97 * dir_96));
  wTangent_91.xyz = tmpvar_98;
  wTangent_91.w = (_glesTANGENT.w * unity_WorldTransformParams.w);
  mediump vec3 tmpvar_99;
  tmpvar_99 = (((wNormal_92.yzx * wTangent_91.zxy) - (wNormal_92.zxy * wTangent_91.yzx)) * wTangent_91.w);
  mediump vec3 tmpvar_100;
  tmpvar_100.x = wTangent_91.x;
  tmpvar_100.y = tmpvar_99.x;
  tmpvar_100.z = wNormal_92.x;
  mediump vec3 tmpvar_101;
  tmpvar_101.x = wTangent_91.y;
  tmpvar_101.y = tmpvar_99.y;
  tmpvar_101.z = wNormal_92.y;
  mediump vec3 tmpvar_102;
  tmpvar_102.x = wTangent_91.z;
  tmpvar_102.y = tmpvar_99.z;
  tmpvar_102.z = wNormal_92.z;
  highp vec4 tmpvar_103;
  tmpvar_103 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_6.xz = (tmpvar_103.xz - ((tmpvar_103.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_6.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_104;
  tmpvar_104 = normalize((tmpvar_103.xyz - adjCamPos_6));
  tmpvar_11 = tmpvar_104;
  mediump float tmpvar_105;
  tmpvar_105 = cos(_CamRotate);
  cost_5 = tmpvar_105;
  mediump float tmpvar_106;
  tmpvar_106 = sin(_CamRotate);
  sint_4 = tmpvar_106;
  highp mat2 tmpvar_107;
  tmpvar_107[0].x = cost_5;
  tmpvar_107[0].y = -(sint_4);
  tmpvar_107[1].x = sint_4;
  tmpvar_107[1].y = cost_5;
  tmpvar_11.xz = (tmpvar_107 * tmpvar_11.xz);
  highp vec3 tmpvar_108;
  tmpvar_108 = (_WorldSpaceCameraPos - tmpvar_103.xyz);
  tmpvar_12.xyz = tmpvar_108;
  gl_Position = tmpvar_16;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_COLOR0 = tmpvar_1;
  xlv_COLOR1 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_2.xyz;
  xlv_TEXCOORD2 = tmpvar_11;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_100;
  xlv_TEXCOORD6 = tmpvar_101;
  xlv_TEXCOORD7 = tmpvar_102;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
uniform highp vec4 _RimColor;
uniform highp float _RimPower;
uniform highp float _RimIntensity;
uniform sampler2D _NormalMap;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec3 normalFromMap_1;
  mediump vec4 Maskmap_2;
  mediump vec4 finalColor_3;
  mediump vec4 base_color1_4;
  mediump vec4 base_color0_5;
  mediump vec2 flow_dir_6;
  mediump float flow_scale1_7;
  mediump float flow_scale0_8;
  mediump vec3 flowAll_9;
  mediump float time_10;
  mediump vec2 uv_11;
  mediump vec2 UV_12;
  highp vec2 tmpvar_13;
  tmpvar_13 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_12 = tmpvar_13;
  highp vec2 tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_USpeed * _Time.y);
  tmpvar_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (_VSpeed * _Time.y);
  tmpvar_14.y = tmpvar_16;
  UV_12 = (UV_12 + tmpvar_14);
  highp vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_15;
  tmpvar_17.y = tmpvar_16;
  highp vec2 tmpvar_18;
  tmpvar_18 = (UV_12 + tmpvar_17);
  uv_11 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = _Time.y;
  time_10 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_FlowMap, uv_11).xyz;
  flowAll_9 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((_Speed * time_10) + flowAll_9.z));
  flow_scale0_8 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = fract(((
    (_Speed * time_10)
   + flowAll_9.z) + 0.5));
  flow_scale1_7 = tmpvar_22;
  flowAll_9.xy = (2.0 * (flowAll_9.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_23;
  tmpvar_23.x = _FlowSignX;
  tmpvar_23.y = _FlowSignY;
  flowAll_9.xy = (flowAll_9.xy * tmpvar_23);
  highp vec2 tmpvar_24;
  tmpvar_24 = (flowAll_9.xy * _FlowIntensity);
  flow_dir_6 = tmpvar_24;
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_11 + (flow_dir_6 * flow_scale0_8));
  mediump vec2 tmpvar_26;
  tmpvar_26 = (uv_11 + (flow_dir_6 * flow_scale1_7));
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color0_5 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MainTex, tmpvar_26);
  base_color1_4 = tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix (base_color0_5, base_color1_4, vec4(abs((2.0 * 
    (flow_scale0_8 - 0.5)
  ))));
  finalColor_3.w = 0.0;
  finalColor_3.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_29.x * xlv_COLOR0.x)));
  finalColor_3.xyz = (finalColor_3.xyz * (1.0 + (tmpvar_29.x * _EmissionScaler)));
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_2 = tmpvar_30;
  finalColor_3.xyz = (finalColor_3.xyz + ((_MaskColor.xyz * Maskmap_2.y) * _MaskScale));
  mediump vec3 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_32;
  tmpvar_32 = textureCube (_EnvTex, tmpvar_31);
  finalColor_3.xyz = (finalColor_3.xyz + ((tmpvar_32.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_3.w = (tmpvar_29.w * _BloomFactor);
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_NormalMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  normalFromMap_1 = tmpvar_33;
  mediump vec3 o_34;
  o_34.x = dot (xlv_TEXCOORD5, normalFromMap_1);
  o_34.y = dot (xlv_TEXCOORD6, normalFromMap_1);
  o_34.z = dot (xlv_TEXCOORD7, normalFromMap_1);
  mediump float tmpvar_35;
  tmpvar_35 = (1.0 - clamp (dot (
    normalize(xlv_TEXCOORD4.xyz)
  , o_34), 0.0, 1.0));
  highp float tmpvar_36;
  tmpvar_36 = pow (tmpvar_35, _RimPower);
  finalColor_3.xyz = (finalColor_3.xyz + ((_RimColor.xyz * tmpvar_36) * _RimIntensity));
  finalColor_3.xyz = (xlv_COLOR1.xyz + (finalColor_3.xyz * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  gl_FragData[0] = finalColor_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FRESNEL" "UseNormalMap" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_WorldTransformParams;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _glesNormal;
  mediump vec4 tmpvar_3;
  tmpvar_3 = _glesTANGENT;
  highp float sint_4;
  highp float cost_5;
  highp vec3 adjCamPos_6;
  mediump vec4 offsetVertex_7;
  mediump float normalOut_8;
  highp vec4 offset_9;
  mediump vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  mediump vec4 tmpvar_12;
  offset_9.yzw = vec3(0.0, 0.0, 0.0);
  offset_9.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_9.y = offset_9.x;
  highp float tmpvar_13;
  tmpvar_13 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_8 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = ((_glesVertex + (
    (offset_9 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_2 * normalOut_8) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_7 = tmpvar_14;
  highp vec4 pos_15;
  pos_15 = offsetVertex_7;
  highp vec4 tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = pos_15.xyz;
  tmpvar_16 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_17));
  tmpvar_10.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_10.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_21;
  mediump float fogFactor_22;
  mediump vec3 fogColor_23;
  mediump vec3 heightFogColor_24;
  highp float HeightFogFactor_25;
  mediump vec3 atomesphereFogColor_26;
  mediump float h_27;
  highp float linearFogDensity_28;
  mediump float len_29;
  highp float tmpvar_30;
  tmpvar_30 = sqrt(dot (tmpvar_20, tmpvar_20));
  len_29 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (((len_29 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_28 = (tmpvar_31 * (2.0 - tmpvar_31));
  if ((len_29 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_28 = (linearFogDensity_28 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_32;
  tmpvar_32 = min (pow (linearFogDensity_28, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_28 = tmpvar_32;
  mediump float tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((tmpvar_19.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_33 = tmpvar_34;
  h_27 = (tmpvar_33 * (2.0 - tmpvar_33));
  highp vec3 tmpvar_35;
  tmpvar_35 = (_HeigtFogColBase2.xyz + (h_27 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_26 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (atomesphereFogColor_26, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_29 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_26 = tmpvar_36;
  mediump float tmpvar_37;
  mediump float r_38;
  mediump float f_39;
  mediump float u_40;
  mediump float l_41;
  mediump float fogInt_42;
  fogInt_42 = 1.0;
  highp float tmpvar_43;
  tmpvar_43 = (_HeigtFogParams2.x * tmpvar_20.y);
  highp float tmpvar_44;
  tmpvar_44 = abs(tmpvar_43);
  if ((tmpvar_44 > 0.01)) {
    highp float tmpvar_45;
    tmpvar_45 = exp(-(tmpvar_43));
    fogInt_42 = ((1.0 - tmpvar_45) / tmpvar_43);
  };
  highp float tmpvar_46;
  tmpvar_46 = sqrt(dot (tmpvar_20, tmpvar_20));
  l_41 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = (l_41 * _HeigtFogParams2.y);
  u_40 = tmpvar_47;
  fogInt_42 = (fogInt_42 * u_40);
  mediump float tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((l_41 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_48 = tmpvar_49;
  r_38 = (tmpvar_48 * (2.0 - tmpvar_48));
  r_38 = ((r_38 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_39 = ((1.0 - clamp (
    exp2(-(fogInt_42))
  , 0.0, 1.0)) * r_38);
  highp float tmpvar_50;
  tmpvar_50 = min (f_39, _HeigtFogColBase2.w);
  tmpvar_37 = tmpvar_50;
  HeightFogFactor_25 = tmpvar_37;
  highp vec3 tmpvar_51;
  tmpvar_51 = _Mihoyo_FogColor2.xyz;
  heightFogColor_24 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = ((heightFogColor_24 * HeightFogFactor_25) + ((atomesphereFogColor_26 * tmpvar_32) * (1.0 - HeightFogFactor_25)));
  fogColor_23 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = ((1.0 - tmpvar_32) * (1.0 - HeightFogFactor_25));
  fogFactor_22 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54.xyz = fogColor_23;
  tmpvar_54.w = fogFactor_22;
  tmpvar_21 = tmpvar_54;
  highp vec4 tmpvar_55;
  mediump float fogFactor_56;
  mediump vec3 fogColor_57;
  mediump vec3 heightFogColor_58;
  highp float HeightFogFactor_59;
  mediump vec3 atomesphereFogColor_60;
  mediump float h_61;
  highp float linearFogDensity_62;
  mediump float len_63;
  highp float tmpvar_64;
  tmpvar_64 = sqrt(dot (tmpvar_20, tmpvar_20));
  len_63 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (((len_63 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_62 = (tmpvar_65 * (2.0 - tmpvar_65));
  if ((len_63 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_62 = (linearFogDensity_62 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_66;
  tmpvar_66 = min (pow (linearFogDensity_62, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_62 = tmpvar_66;
  mediump float tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((tmpvar_19.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_67 = tmpvar_68;
  h_61 = (tmpvar_67 * (2.0 - tmpvar_67));
  highp vec3 tmpvar_69;
  tmpvar_69 = (_HeigtFogColBase3.xyz + (h_61 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_60 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = mix (atomesphereFogColor_60, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_63 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_60 = tmpvar_70;
  mediump float tmpvar_71;
  mediump float r_72;
  mediump float f_73;
  mediump float u_74;
  mediump float l_75;
  mediump float fogInt_76;
  fogInt_76 = 1.0;
  highp float tmpvar_77;
  tmpvar_77 = (_HeigtFogParams3.x * tmpvar_20.y);
  highp float tmpvar_78;
  tmpvar_78 = abs(tmpvar_77);
  if ((tmpvar_78 > 0.01)) {
    highp float tmpvar_79;
    tmpvar_79 = exp(-(tmpvar_77));
    fogInt_76 = ((1.0 - tmpvar_79) / tmpvar_77);
  };
  highp float tmpvar_80;
  tmpvar_80 = sqrt(dot (tmpvar_20, tmpvar_20));
  l_75 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (l_75 * _HeigtFogParams3.y);
  u_74 = tmpvar_81;
  fogInt_76 = (fogInt_76 * u_74);
  mediump float tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (((l_75 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_82 = tmpvar_83;
  r_72 = (tmpvar_82 * (2.0 - tmpvar_82));
  r_72 = ((r_72 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_73 = ((1.0 - clamp (
    exp2(-(fogInt_76))
  , 0.0, 1.0)) * r_72);
  highp float tmpvar_84;
  tmpvar_84 = min (f_73, _HeigtFogColBase3.w);
  tmpvar_71 = tmpvar_84;
  HeightFogFactor_59 = tmpvar_71;
  highp vec3 tmpvar_85;
  tmpvar_85 = _Mihoyo_FogColor3.xyz;
  heightFogColor_58 = tmpvar_85;
  highp vec3 tmpvar_86;
  tmpvar_86 = ((heightFogColor_58 * HeightFogFactor_59) + ((atomesphereFogColor_60 * tmpvar_66) * (1.0 - HeightFogFactor_59)));
  fogColor_57 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = ((1.0 - tmpvar_66) * (1.0 - HeightFogFactor_59));
  fogFactor_56 = tmpvar_87;
  mediump vec4 tmpvar_88;
  tmpvar_88.xyz = fogColor_57;
  tmpvar_88.w = fogFactor_56;
  tmpvar_55 = tmpvar_88;
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (tmpvar_21, tmpvar_55, vec4(_LerpFactor));
  tmpvar_18 = tmpvar_89;
  tmpvar_12.w = 1.0;
  mediump vec3 tmpvar_90;
  tmpvar_90 = tmpvar_2.xyz;
  mediump vec4 wTangent_91;
  mediump vec3 wNormal_92;
  highp vec3 norm_93;
  norm_93 = tmpvar_90;
  highp mat3 tmpvar_94;
  tmpvar_94[0] = unity_WorldToObject[0].xyz;
  tmpvar_94[1] = unity_WorldToObject[1].xyz;
  tmpvar_94[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_95;
  tmpvar_95 = normalize((norm_93 * tmpvar_94));
  wNormal_92 = tmpvar_95;
  highp vec3 dir_96;
  dir_96 = tmpvar_3.xyz;
  highp mat3 tmpvar_97;
  tmpvar_97[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_97[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_97[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_98;
  tmpvar_98 = normalize((tmpvar_97 * dir_96));
  wTangent_91.xyz = tmpvar_98;
  wTangent_91.w = (_glesTANGENT.w * unity_WorldTransformParams.w);
  mediump vec3 tmpvar_99;
  tmpvar_99 = (((wNormal_92.yzx * wTangent_91.zxy) - (wNormal_92.zxy * wTangent_91.yzx)) * wTangent_91.w);
  mediump vec3 tmpvar_100;
  tmpvar_100.x = wTangent_91.x;
  tmpvar_100.y = tmpvar_99.x;
  tmpvar_100.z = wNormal_92.x;
  mediump vec3 tmpvar_101;
  tmpvar_101.x = wTangent_91.y;
  tmpvar_101.y = tmpvar_99.y;
  tmpvar_101.z = wNormal_92.y;
  mediump vec3 tmpvar_102;
  tmpvar_102.x = wTangent_91.z;
  tmpvar_102.y = tmpvar_99.z;
  tmpvar_102.z = wNormal_92.z;
  highp vec4 tmpvar_103;
  tmpvar_103 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_6.xz = (tmpvar_103.xz - ((tmpvar_103.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_6.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_104;
  tmpvar_104 = normalize((tmpvar_103.xyz - adjCamPos_6));
  tmpvar_11 = tmpvar_104;
  mediump float tmpvar_105;
  tmpvar_105 = cos(_CamRotate);
  cost_5 = tmpvar_105;
  mediump float tmpvar_106;
  tmpvar_106 = sin(_CamRotate);
  sint_4 = tmpvar_106;
  highp mat2 tmpvar_107;
  tmpvar_107[0].x = cost_5;
  tmpvar_107[0].y = -(sint_4);
  tmpvar_107[1].x = sint_4;
  tmpvar_107[1].y = cost_5;
  tmpvar_11.xz = (tmpvar_107 * tmpvar_11.xz);
  highp vec3 tmpvar_108;
  tmpvar_108 = (_WorldSpaceCameraPos - tmpvar_103.xyz);
  tmpvar_12.xyz = tmpvar_108;
  gl_Position = tmpvar_16;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_COLOR0 = tmpvar_1;
  xlv_COLOR1 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_2.xyz;
  xlv_TEXCOORD2 = tmpvar_11;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_100;
  xlv_TEXCOORD6 = tmpvar_101;
  xlv_TEXCOORD7 = tmpvar_102;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
uniform highp vec4 _RimColor;
uniform highp float _RimPower;
uniform highp float _RimIntensity;
uniform sampler2D _NormalMap;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec3 normalFromMap_1;
  mediump vec4 Maskmap_2;
  mediump vec4 finalColor_3;
  mediump vec4 base_color1_4;
  mediump vec4 base_color0_5;
  mediump vec2 flow_dir_6;
  mediump float flow_scale1_7;
  mediump float flow_scale0_8;
  mediump vec3 flowAll_9;
  mediump float time_10;
  mediump vec2 uv_11;
  mediump vec2 UV_12;
  highp vec2 tmpvar_13;
  tmpvar_13 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_12 = tmpvar_13;
  highp vec2 tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_USpeed * _Time.y);
  tmpvar_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (_VSpeed * _Time.y);
  tmpvar_14.y = tmpvar_16;
  UV_12 = (UV_12 + tmpvar_14);
  highp vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_15;
  tmpvar_17.y = tmpvar_16;
  highp vec2 tmpvar_18;
  tmpvar_18 = (UV_12 + tmpvar_17);
  uv_11 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = _Time.y;
  time_10 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_FlowMap, uv_11).xyz;
  flowAll_9 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((_Speed * time_10) + flowAll_9.z));
  flow_scale0_8 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = fract(((
    (_Speed * time_10)
   + flowAll_9.z) + 0.5));
  flow_scale1_7 = tmpvar_22;
  flowAll_9.xy = (2.0 * (flowAll_9.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_23;
  tmpvar_23.x = _FlowSignX;
  tmpvar_23.y = _FlowSignY;
  flowAll_9.xy = (flowAll_9.xy * tmpvar_23);
  highp vec2 tmpvar_24;
  tmpvar_24 = (flowAll_9.xy * _FlowIntensity);
  flow_dir_6 = tmpvar_24;
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_11 + (flow_dir_6 * flow_scale0_8));
  mediump vec2 tmpvar_26;
  tmpvar_26 = (uv_11 + (flow_dir_6 * flow_scale1_7));
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color0_5 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MainTex, tmpvar_26);
  base_color1_4 = tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix (base_color0_5, base_color1_4, vec4(abs((2.0 * 
    (flow_scale0_8 - 0.5)
  ))));
  finalColor_3.w = 0.0;
  finalColor_3.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_29.x * xlv_COLOR0.x)));
  finalColor_3.xyz = (finalColor_3.xyz * (1.0 + (tmpvar_29.x * _EmissionScaler)));
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_2 = tmpvar_30;
  finalColor_3.xyz = (finalColor_3.xyz + ((_MaskColor.xyz * Maskmap_2.y) * _MaskScale));
  mediump vec3 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_32;
  tmpvar_32 = textureCube (_EnvTex, tmpvar_31);
  finalColor_3.xyz = (finalColor_3.xyz + ((tmpvar_32.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_3.w = (tmpvar_29.w * _BloomFactor);
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_NormalMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  normalFromMap_1 = tmpvar_33;
  mediump vec3 o_34;
  o_34.x = dot (xlv_TEXCOORD5, normalFromMap_1);
  o_34.y = dot (xlv_TEXCOORD6, normalFromMap_1);
  o_34.z = dot (xlv_TEXCOORD7, normalFromMap_1);
  mediump float tmpvar_35;
  tmpvar_35 = (1.0 - clamp (dot (
    normalize(xlv_TEXCOORD4.xyz)
  , o_34), 0.0, 1.0));
  highp float tmpvar_36;
  tmpvar_36 = pow (tmpvar_35, _RimPower);
  finalColor_3.xyz = (finalColor_3.xyz + ((_RimColor.xyz * tmpvar_36) * _RimIntensity));
  finalColor_3.xyz = (xlv_COLOR1.xyz + (finalColor_3.xyz * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  gl_FragData[0] = finalColor_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FRESNEL" "UseNormalMap" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_WorldTransformParams;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 tmpvar_1;
  tmpvar_1 = _glesColor;
  mediump vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _glesNormal;
  mediump vec4 tmpvar_3;
  tmpvar_3 = _glesTANGENT;
  highp float sint_4;
  highp float cost_5;
  highp vec3 adjCamPos_6;
  mediump vec4 offsetVertex_7;
  mediump float normalOut_8;
  highp vec4 offset_9;
  mediump vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  mediump vec4 tmpvar_12;
  offset_9.yzw = vec3(0.0, 0.0, 0.0);
  offset_9.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_9.y = offset_9.x;
  highp float tmpvar_13;
  tmpvar_13 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_8 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = ((_glesVertex + (
    (offset_9 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_2 * normalOut_8) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_7 = tmpvar_14;
  highp vec4 pos_15;
  pos_15 = offsetVertex_7;
  highp vec4 tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = pos_15.xyz;
  tmpvar_16 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_17));
  tmpvar_10.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_10.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_21;
  mediump float fogFactor_22;
  mediump vec3 fogColor_23;
  mediump vec3 heightFogColor_24;
  highp float HeightFogFactor_25;
  mediump vec3 atomesphereFogColor_26;
  mediump float h_27;
  highp float linearFogDensity_28;
  mediump float len_29;
  highp float tmpvar_30;
  tmpvar_30 = sqrt(dot (tmpvar_20, tmpvar_20));
  len_29 = tmpvar_30;
  highp float tmpvar_31;
  tmpvar_31 = clamp (((len_29 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_28 = (tmpvar_31 * (2.0 - tmpvar_31));
  if ((len_29 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_28 = (linearFogDensity_28 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_32;
  tmpvar_32 = min (pow (linearFogDensity_28, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_28 = tmpvar_32;
  mediump float tmpvar_33;
  highp float tmpvar_34;
  tmpvar_34 = clamp (((tmpvar_19.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_33 = tmpvar_34;
  h_27 = (tmpvar_33 * (2.0 - tmpvar_33));
  highp vec3 tmpvar_35;
  tmpvar_35 = (_HeigtFogColBase2.xyz + (h_27 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_26 = tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = mix (atomesphereFogColor_26, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_29 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_26 = tmpvar_36;
  mediump float tmpvar_37;
  mediump float r_38;
  mediump float f_39;
  mediump float u_40;
  mediump float l_41;
  mediump float fogInt_42;
  fogInt_42 = 1.0;
  highp float tmpvar_43;
  tmpvar_43 = (_HeigtFogParams2.x * tmpvar_20.y);
  highp float tmpvar_44;
  tmpvar_44 = abs(tmpvar_43);
  if ((tmpvar_44 > 0.01)) {
    highp float tmpvar_45;
    tmpvar_45 = exp(-(tmpvar_43));
    fogInt_42 = ((1.0 - tmpvar_45) / tmpvar_43);
  };
  highp float tmpvar_46;
  tmpvar_46 = sqrt(dot (tmpvar_20, tmpvar_20));
  l_41 = tmpvar_46;
  highp float tmpvar_47;
  tmpvar_47 = (l_41 * _HeigtFogParams2.y);
  u_40 = tmpvar_47;
  fogInt_42 = (fogInt_42 * u_40);
  mediump float tmpvar_48;
  highp float tmpvar_49;
  tmpvar_49 = clamp (((l_41 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_48 = tmpvar_49;
  r_38 = (tmpvar_48 * (2.0 - tmpvar_48));
  r_38 = ((r_38 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_39 = ((1.0 - clamp (
    exp2(-(fogInt_42))
  , 0.0, 1.0)) * r_38);
  highp float tmpvar_50;
  tmpvar_50 = min (f_39, _HeigtFogColBase2.w);
  tmpvar_37 = tmpvar_50;
  HeightFogFactor_25 = tmpvar_37;
  highp vec3 tmpvar_51;
  tmpvar_51 = _Mihoyo_FogColor2.xyz;
  heightFogColor_24 = tmpvar_51;
  highp vec3 tmpvar_52;
  tmpvar_52 = ((heightFogColor_24 * HeightFogFactor_25) + ((atomesphereFogColor_26 * tmpvar_32) * (1.0 - HeightFogFactor_25)));
  fogColor_23 = tmpvar_52;
  highp float tmpvar_53;
  tmpvar_53 = ((1.0 - tmpvar_32) * (1.0 - HeightFogFactor_25));
  fogFactor_22 = tmpvar_53;
  mediump vec4 tmpvar_54;
  tmpvar_54.xyz = fogColor_23;
  tmpvar_54.w = fogFactor_22;
  tmpvar_21 = tmpvar_54;
  highp vec4 tmpvar_55;
  mediump float fogFactor_56;
  mediump vec3 fogColor_57;
  mediump vec3 heightFogColor_58;
  highp float HeightFogFactor_59;
  mediump vec3 atomesphereFogColor_60;
  mediump float h_61;
  highp float linearFogDensity_62;
  mediump float len_63;
  highp float tmpvar_64;
  tmpvar_64 = sqrt(dot (tmpvar_20, tmpvar_20));
  len_63 = tmpvar_64;
  highp float tmpvar_65;
  tmpvar_65 = clamp (((len_63 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_62 = (tmpvar_65 * (2.0 - tmpvar_65));
  if ((len_63 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_62 = (linearFogDensity_62 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_66;
  tmpvar_66 = min (pow (linearFogDensity_62, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_62 = tmpvar_66;
  mediump float tmpvar_67;
  highp float tmpvar_68;
  tmpvar_68 = clamp (((tmpvar_19.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_67 = tmpvar_68;
  h_61 = (tmpvar_67 * (2.0 - tmpvar_67));
  highp vec3 tmpvar_69;
  tmpvar_69 = (_HeigtFogColBase3.xyz + (h_61 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_60 = tmpvar_69;
  highp vec3 tmpvar_70;
  tmpvar_70 = mix (atomesphereFogColor_60, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_63 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_60 = tmpvar_70;
  mediump float tmpvar_71;
  mediump float r_72;
  mediump float f_73;
  mediump float u_74;
  mediump float l_75;
  mediump float fogInt_76;
  fogInt_76 = 1.0;
  highp float tmpvar_77;
  tmpvar_77 = (_HeigtFogParams3.x * tmpvar_20.y);
  highp float tmpvar_78;
  tmpvar_78 = abs(tmpvar_77);
  if ((tmpvar_78 > 0.01)) {
    highp float tmpvar_79;
    tmpvar_79 = exp(-(tmpvar_77));
    fogInt_76 = ((1.0 - tmpvar_79) / tmpvar_77);
  };
  highp float tmpvar_80;
  tmpvar_80 = sqrt(dot (tmpvar_20, tmpvar_20));
  l_75 = tmpvar_80;
  highp float tmpvar_81;
  tmpvar_81 = (l_75 * _HeigtFogParams3.y);
  u_74 = tmpvar_81;
  fogInt_76 = (fogInt_76 * u_74);
  mediump float tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = clamp (((l_75 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_82 = tmpvar_83;
  r_72 = (tmpvar_82 * (2.0 - tmpvar_82));
  r_72 = ((r_72 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_73 = ((1.0 - clamp (
    exp2(-(fogInt_76))
  , 0.0, 1.0)) * r_72);
  highp float tmpvar_84;
  tmpvar_84 = min (f_73, _HeigtFogColBase3.w);
  tmpvar_71 = tmpvar_84;
  HeightFogFactor_59 = tmpvar_71;
  highp vec3 tmpvar_85;
  tmpvar_85 = _Mihoyo_FogColor3.xyz;
  heightFogColor_58 = tmpvar_85;
  highp vec3 tmpvar_86;
  tmpvar_86 = ((heightFogColor_58 * HeightFogFactor_59) + ((atomesphereFogColor_60 * tmpvar_66) * (1.0 - HeightFogFactor_59)));
  fogColor_57 = tmpvar_86;
  highp float tmpvar_87;
  tmpvar_87 = ((1.0 - tmpvar_66) * (1.0 - HeightFogFactor_59));
  fogFactor_56 = tmpvar_87;
  mediump vec4 tmpvar_88;
  tmpvar_88.xyz = fogColor_57;
  tmpvar_88.w = fogFactor_56;
  tmpvar_55 = tmpvar_88;
  highp vec4 tmpvar_89;
  tmpvar_89 = mix (tmpvar_21, tmpvar_55, vec4(_LerpFactor));
  tmpvar_18 = tmpvar_89;
  tmpvar_12.w = 1.0;
  mediump vec3 tmpvar_90;
  tmpvar_90 = tmpvar_2.xyz;
  mediump vec4 wTangent_91;
  mediump vec3 wNormal_92;
  highp vec3 norm_93;
  norm_93 = tmpvar_90;
  highp mat3 tmpvar_94;
  tmpvar_94[0] = unity_WorldToObject[0].xyz;
  tmpvar_94[1] = unity_WorldToObject[1].xyz;
  tmpvar_94[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_95;
  tmpvar_95 = normalize((norm_93 * tmpvar_94));
  wNormal_92 = tmpvar_95;
  highp vec3 dir_96;
  dir_96 = tmpvar_3.xyz;
  highp mat3 tmpvar_97;
  tmpvar_97[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_97[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_97[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_98;
  tmpvar_98 = normalize((tmpvar_97 * dir_96));
  wTangent_91.xyz = tmpvar_98;
  wTangent_91.w = (_glesTANGENT.w * unity_WorldTransformParams.w);
  mediump vec3 tmpvar_99;
  tmpvar_99 = (((wNormal_92.yzx * wTangent_91.zxy) - (wNormal_92.zxy * wTangent_91.yzx)) * wTangent_91.w);
  mediump vec3 tmpvar_100;
  tmpvar_100.x = wTangent_91.x;
  tmpvar_100.y = tmpvar_99.x;
  tmpvar_100.z = wNormal_92.x;
  mediump vec3 tmpvar_101;
  tmpvar_101.x = wTangent_91.y;
  tmpvar_101.y = tmpvar_99.y;
  tmpvar_101.z = wNormal_92.y;
  mediump vec3 tmpvar_102;
  tmpvar_102.x = wTangent_91.z;
  tmpvar_102.y = tmpvar_99.z;
  tmpvar_102.z = wNormal_92.z;
  highp vec4 tmpvar_103;
  tmpvar_103 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_6.xz = (tmpvar_103.xz - ((tmpvar_103.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_6.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_104;
  tmpvar_104 = normalize((tmpvar_103.xyz - adjCamPos_6));
  tmpvar_11 = tmpvar_104;
  mediump float tmpvar_105;
  tmpvar_105 = cos(_CamRotate);
  cost_5 = tmpvar_105;
  mediump float tmpvar_106;
  tmpvar_106 = sin(_CamRotate);
  sint_4 = tmpvar_106;
  highp mat2 tmpvar_107;
  tmpvar_107[0].x = cost_5;
  tmpvar_107[0].y = -(sint_4);
  tmpvar_107[1].x = sint_4;
  tmpvar_107[1].y = cost_5;
  tmpvar_11.xz = (tmpvar_107 * tmpvar_11.xz);
  highp vec3 tmpvar_108;
  tmpvar_108 = (_WorldSpaceCameraPos - tmpvar_103.xyz);
  tmpvar_12.xyz = tmpvar_108;
  gl_Position = tmpvar_16;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_COLOR0 = tmpvar_1;
  xlv_COLOR1 = tmpvar_18;
  xlv_TEXCOORD1 = tmpvar_2.xyz;
  xlv_TEXCOORD2 = tmpvar_11;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_100;
  xlv_TEXCOORD6 = tmpvar_101;
  xlv_TEXCOORD7 = tmpvar_102;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
uniform highp vec4 _RimColor;
uniform highp float _RimPower;
uniform highp float _RimIntensity;
uniform sampler2D _NormalMap;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec3 normalFromMap_1;
  mediump vec4 Maskmap_2;
  mediump vec4 finalColor_3;
  mediump vec4 base_color1_4;
  mediump vec4 base_color0_5;
  mediump vec2 flow_dir_6;
  mediump float flow_scale1_7;
  mediump float flow_scale0_8;
  mediump vec3 flowAll_9;
  mediump float time_10;
  mediump vec2 uv_11;
  mediump vec2 UV_12;
  highp vec2 tmpvar_13;
  tmpvar_13 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_12 = tmpvar_13;
  highp vec2 tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_USpeed * _Time.y);
  tmpvar_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (_VSpeed * _Time.y);
  tmpvar_14.y = tmpvar_16;
  UV_12 = (UV_12 + tmpvar_14);
  highp vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_15;
  tmpvar_17.y = tmpvar_16;
  highp vec2 tmpvar_18;
  tmpvar_18 = (UV_12 + tmpvar_17);
  uv_11 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = _Time.y;
  time_10 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_FlowMap, uv_11).xyz;
  flowAll_9 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((_Speed * time_10) + flowAll_9.z));
  flow_scale0_8 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = fract(((
    (_Speed * time_10)
   + flowAll_9.z) + 0.5));
  flow_scale1_7 = tmpvar_22;
  flowAll_9.xy = (2.0 * (flowAll_9.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_23;
  tmpvar_23.x = _FlowSignX;
  tmpvar_23.y = _FlowSignY;
  flowAll_9.xy = (flowAll_9.xy * tmpvar_23);
  highp vec2 tmpvar_24;
  tmpvar_24 = (flowAll_9.xy * _FlowIntensity);
  flow_dir_6 = tmpvar_24;
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_11 + (flow_dir_6 * flow_scale0_8));
  mediump vec2 tmpvar_26;
  tmpvar_26 = (uv_11 + (flow_dir_6 * flow_scale1_7));
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color0_5 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MainTex, tmpvar_26);
  base_color1_4 = tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix (base_color0_5, base_color1_4, vec4(abs((2.0 * 
    (flow_scale0_8 - 0.5)
  ))));
  finalColor_3.w = 0.0;
  finalColor_3.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_29.x * xlv_COLOR0.x)));
  finalColor_3.xyz = (finalColor_3.xyz * (1.0 + (tmpvar_29.x * _EmissionScaler)));
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_2 = tmpvar_30;
  finalColor_3.xyz = (finalColor_3.xyz + ((_MaskColor.xyz * Maskmap_2.y) * _MaskScale));
  mediump vec3 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_32;
  tmpvar_32 = textureCube (_EnvTex, tmpvar_31);
  finalColor_3.xyz = (finalColor_3.xyz + ((tmpvar_32.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_3.w = (tmpvar_29.w * _BloomFactor);
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_NormalMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  normalFromMap_1 = tmpvar_33;
  mediump vec3 o_34;
  o_34.x = dot (xlv_TEXCOORD5, normalFromMap_1);
  o_34.y = dot (xlv_TEXCOORD6, normalFromMap_1);
  o_34.z = dot (xlv_TEXCOORD7, normalFromMap_1);
  mediump float tmpvar_35;
  tmpvar_35 = (1.0 - clamp (dot (
    normalize(xlv_TEXCOORD4.xyz)
  , o_34), 0.0, 1.0));
  highp float tmpvar_36;
  tmpvar_36 = pow (tmpvar_35, _RimPower);
  finalColor_3.xyz = (finalColor_3.xyz + ((_RimColor.xyz * tmpvar_36) * _RimIntensity));
  finalColor_3.xyz = (xlv_COLOR1.xyz + (finalColor_3.xyz * clamp (xlv_COLOR1.w, 0.0, 1.0)));
  gl_FragData[0] = finalColor_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_UNDERWATER_FOG" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _FogStartDistance;
uniform highp float _FogEndDistance;
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
uniform highp float _UWFogDistStart;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _glesNormal;
  mediump vec4 tmpvar_3;
  tmpvar_3 = _glesColor;
  highp float sint_4;
  highp float cost_5;
  highp vec3 adjCamPos_6;
  mediump vec4 offsetVertex_7;
  mediump float normalOut_8;
  highp vec4 offset_9;
  highp vec4 tmpvar_10;
  mediump vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  mediump vec4 tmpvar_13;
  mediump vec3 tmpvar_14;
  offset_9.yzw = vec3(0.0, 0.0, 0.0);
  offset_9.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_9.y = offset_9.x;
  highp float tmpvar_15;
  tmpvar_15 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_8 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = ((_glesVertex + (
    (offset_9 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_2 * normalOut_8) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_7 = tmpvar_16;
  highp vec4 pos_17;
  pos_17 = offsetVertex_7;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = pos_17.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_18));
  tmpvar_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_11.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_19;
  if ((_FogColorNear.w > 0.5)) {
    mediump vec4 fogColor_20;
    highp vec3 tmpvar_21;
    tmpvar_21 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_22;
    tmpvar_22 = max (0.0, (sqrt(
      dot (tmpvar_21, tmpvar_21)
    ) - _FogStartDistance));
    highp float tmpvar_23;
    tmpvar_23 = min (max ((
      (1.0 - exp((-(
        (_FogIntensity * tmpvar_22)
      ) * (_FogIntensity * tmpvar_22))))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_24;
    tmpvar_24 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3(clamp (exp(
      (-((_FogColorIntensity * tmpvar_22)) * (_FogColorIntensity * tmpvar_22))
    ), 0.0, 1.0)));
    fogColor_20.xyz = tmpvar_24;
    fogColor_20.w = tmpvar_23;
    tmpvar_19 = fogColor_20;
  } else {
    mediump vec4 fogColor_25;
    highp vec3 tmpvar_26;
    tmpvar_26 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_27;
    tmpvar_27 = max (0.0, (sqrt(
      dot (tmpvar_26, tmpvar_26)
    ) - _FogStartDistance));
    highp float tmpvar_28;
    highp float tmpvar_29;
    tmpvar_29 = (_FogEndDistance - _FogStartDistance);
    tmpvar_28 = min (max ((
      (((500.0 * _FogIntensity) * tmpvar_27) / max (0.1, tmpvar_29))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_30;
    tmpvar_30 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3((1.0 - clamp (
      (((1000.0 * _FogColorIntensity) * tmpvar_27) / max (0.1, tmpvar_29))
    , 0.0, 1.0))));
    fogColor_25.xyz = tmpvar_30;
    fogColor_25.w = tmpvar_28;
    tmpvar_19 = fogColor_25;
  };
  tmpvar_13.w = 1.0;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_2.xyz;
  highp vec3 norm_32;
  norm_32 = tmpvar_31;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = unity_WorldToObject[0].xyz;
  tmpvar_33[1] = unity_WorldToObject[1].xyz;
  tmpvar_33[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize(normalize((norm_32 * tmpvar_33)));
  tmpvar_14 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_6.xz = (tmpvar_35.xz - ((tmpvar_35.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_6.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((tmpvar_35.xyz - adjCamPos_6));
  tmpvar_12 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = cos(_CamRotate);
  cost_5 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = sin(_CamRotate);
  sint_4 = tmpvar_38;
  highp mat2 tmpvar_39;
  tmpvar_39[0].x = cost_5;
  tmpvar_39[0].y = -(sint_4);
  tmpvar_39[1].x = sint_4;
  tmpvar_39[1].y = cost_5;
  tmpvar_12.xz = (tmpvar_39 * tmpvar_12.xz);
  highp vec3 tmpvar_40;
  tmpvar_40 = (_WorldSpaceCameraPos - tmpvar_35.xyz);
  tmpvar_13.xyz = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41.xyz = offsetVertex_7.xyz;
  tmpvar_41.w = tmpvar_1.w;
  mediump vec3 fogParam_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (unity_ObjectToWorld * tmpvar_41);
  highp vec2 tmpvar_44;
  tmpvar_44 = (tmpvar_43.xz - _WorldSpaceCameraPos.xz);
  highp float tmpvar_45;
  tmpvar_45 = max (0.0, (sqrt(
    dot (tmpvar_44, tmpvar_44)
  ) - _UWFogDistStart));
  highp float tmpvar_46;
  tmpvar_46 = min (max ((
    (1.0 - exp((-(
      (_UWFogDensity * tmpvar_45)
    ) * (_UWFogDensity * tmpvar_45))))
   * _UWFogEffectLimit), _UWFogEffectStart), _UWFogEffectLimit);
  highp float tmpvar_47;
  tmpvar_47 = clamp (exp((
    -((_UWFogColorNFIntensity * tmpvar_45))
   * 
    (_UWFogColorNFIntensity * tmpvar_45)
  )), 0.0, 1.0);
  fogParam_42.x = tmpvar_47;
  fogParam_42.y = tmpvar_46;
  fogParam_42.z = tmpvar_43.y;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_COLOR0 = tmpvar_3;
  xlv_COLOR1 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_2.xyz;
  xlv_TEXCOORD2 = tmpvar_12;
  xlv_TEXCOORD3 = fogParam_42;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_14;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
uniform highp vec4 _UWFogColorLow;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWHeightFogDensity;
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
uniform highp float _UWHeightRatio;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  if ((xlv_TEXCOORD3.z > _WaterPlaneHeight)) {
    finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  } else {
    mediump vec3 xlat_varinput_32;
    xlat_varinput_32 = xlv_TEXCOORD3;
    mediump vec3 fogParam_33;
    highp float tmpvar_34;
    tmpvar_34 = max (0.0, ((_WaterPlaneHeight - xlv_TEXCOORD3.z) / (_WaterPlaneHeight - _UWFogHeightEnd)));
    highp float tmpvar_35;
    tmpvar_35 = min (max ((
      (1.0 - (_UWHeightFogDensity * tmpvar_34))
     * _UWHeightFogEffectLimit), _UWHeightFogEffectStart), _UWHeightFogEffectLimit);
    highp float tmpvar_36;
    tmpvar_36 = clamp ((_UWFogColorHLIntensity * tmpvar_34), 0.0, 1.0);
    fogParam_33.z = 0.0;
    fogParam_33.y = tmpvar_35;
    fogParam_33.x = tmpvar_36;
    if ((xlv_TEXCOORD3.y > 0.99)) {
      xlat_varinput_32.y = (xlv_TEXCOORD3.y * (1.0 - (tmpvar_34 * _UWHeightRatio)));
      highp float tmpvar_37;
      tmpvar_37 = clamp (xlat_varinput_32.y, _UWCriticalRange, 1.0);
      xlat_varinput_32.y = tmpvar_37;
    };
    fogParam_33.z = (1.0 - xlat_varinput_32.y);
    mediump vec4 tmpvar_38;
    tmpvar_38.w = 0.0;
    tmpvar_38.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_39;
    tmpvar_39 = mix (mix (_UWFogColorFar, _UWFogColorNear, xlv_TEXCOORD3.xxxx), tmpvar_38, fogParam_33.zzzz).xyz;
    finalColor_2.xyz = tmpvar_39;
    mediump vec4 tmpvar_40;
    tmpvar_40.w = 0.0;
    tmpvar_40.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_41;
    tmpvar_41 = mix (mix (_UWFogColorLow, _UWFogColorHigh, fogParam_33.xxxx), tmpvar_40, fogParam_33.yyyy).xyz;
    finalColor_2.xyz = tmpvar_41;
  };
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_UNDERWATER_FOG" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _FogStartDistance;
uniform highp float _FogEndDistance;
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
uniform highp float _UWFogDistStart;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _glesNormal;
  mediump vec4 tmpvar_3;
  tmpvar_3 = _glesColor;
  highp float sint_4;
  highp float cost_5;
  highp vec3 adjCamPos_6;
  mediump vec4 offsetVertex_7;
  mediump float normalOut_8;
  highp vec4 offset_9;
  highp vec4 tmpvar_10;
  mediump vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  mediump vec4 tmpvar_13;
  mediump vec3 tmpvar_14;
  offset_9.yzw = vec3(0.0, 0.0, 0.0);
  offset_9.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_9.y = offset_9.x;
  highp float tmpvar_15;
  tmpvar_15 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_8 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = ((_glesVertex + (
    (offset_9 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_2 * normalOut_8) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_7 = tmpvar_16;
  highp vec4 pos_17;
  pos_17 = offsetVertex_7;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = pos_17.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_18));
  tmpvar_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_11.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_19;
  if ((_FogColorNear.w > 0.5)) {
    mediump vec4 fogColor_20;
    highp vec3 tmpvar_21;
    tmpvar_21 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_22;
    tmpvar_22 = max (0.0, (sqrt(
      dot (tmpvar_21, tmpvar_21)
    ) - _FogStartDistance));
    highp float tmpvar_23;
    tmpvar_23 = min (max ((
      (1.0 - exp((-(
        (_FogIntensity * tmpvar_22)
      ) * (_FogIntensity * tmpvar_22))))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_24;
    tmpvar_24 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3(clamp (exp(
      (-((_FogColorIntensity * tmpvar_22)) * (_FogColorIntensity * tmpvar_22))
    ), 0.0, 1.0)));
    fogColor_20.xyz = tmpvar_24;
    fogColor_20.w = tmpvar_23;
    tmpvar_19 = fogColor_20;
  } else {
    mediump vec4 fogColor_25;
    highp vec3 tmpvar_26;
    tmpvar_26 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_27;
    tmpvar_27 = max (0.0, (sqrt(
      dot (tmpvar_26, tmpvar_26)
    ) - _FogStartDistance));
    highp float tmpvar_28;
    highp float tmpvar_29;
    tmpvar_29 = (_FogEndDistance - _FogStartDistance);
    tmpvar_28 = min (max ((
      (((500.0 * _FogIntensity) * tmpvar_27) / max (0.1, tmpvar_29))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_30;
    tmpvar_30 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3((1.0 - clamp (
      (((1000.0 * _FogColorIntensity) * tmpvar_27) / max (0.1, tmpvar_29))
    , 0.0, 1.0))));
    fogColor_25.xyz = tmpvar_30;
    fogColor_25.w = tmpvar_28;
    tmpvar_19 = fogColor_25;
  };
  tmpvar_13.w = 1.0;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_2.xyz;
  highp vec3 norm_32;
  norm_32 = tmpvar_31;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = unity_WorldToObject[0].xyz;
  tmpvar_33[1] = unity_WorldToObject[1].xyz;
  tmpvar_33[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize(normalize((norm_32 * tmpvar_33)));
  tmpvar_14 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_6.xz = (tmpvar_35.xz - ((tmpvar_35.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_6.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((tmpvar_35.xyz - adjCamPos_6));
  tmpvar_12 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = cos(_CamRotate);
  cost_5 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = sin(_CamRotate);
  sint_4 = tmpvar_38;
  highp mat2 tmpvar_39;
  tmpvar_39[0].x = cost_5;
  tmpvar_39[0].y = -(sint_4);
  tmpvar_39[1].x = sint_4;
  tmpvar_39[1].y = cost_5;
  tmpvar_12.xz = (tmpvar_39 * tmpvar_12.xz);
  highp vec3 tmpvar_40;
  tmpvar_40 = (_WorldSpaceCameraPos - tmpvar_35.xyz);
  tmpvar_13.xyz = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41.xyz = offsetVertex_7.xyz;
  tmpvar_41.w = tmpvar_1.w;
  mediump vec3 fogParam_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (unity_ObjectToWorld * tmpvar_41);
  highp vec2 tmpvar_44;
  tmpvar_44 = (tmpvar_43.xz - _WorldSpaceCameraPos.xz);
  highp float tmpvar_45;
  tmpvar_45 = max (0.0, (sqrt(
    dot (tmpvar_44, tmpvar_44)
  ) - _UWFogDistStart));
  highp float tmpvar_46;
  tmpvar_46 = min (max ((
    (1.0 - exp((-(
      (_UWFogDensity * tmpvar_45)
    ) * (_UWFogDensity * tmpvar_45))))
   * _UWFogEffectLimit), _UWFogEffectStart), _UWFogEffectLimit);
  highp float tmpvar_47;
  tmpvar_47 = clamp (exp((
    -((_UWFogColorNFIntensity * tmpvar_45))
   * 
    (_UWFogColorNFIntensity * tmpvar_45)
  )), 0.0, 1.0);
  fogParam_42.x = tmpvar_47;
  fogParam_42.y = tmpvar_46;
  fogParam_42.z = tmpvar_43.y;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_COLOR0 = tmpvar_3;
  xlv_COLOR1 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_2.xyz;
  xlv_TEXCOORD2 = tmpvar_12;
  xlv_TEXCOORD3 = fogParam_42;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_14;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
uniform highp vec4 _UWFogColorLow;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWHeightFogDensity;
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
uniform highp float _UWHeightRatio;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  if ((xlv_TEXCOORD3.z > _WaterPlaneHeight)) {
    finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  } else {
    mediump vec3 xlat_varinput_32;
    xlat_varinput_32 = xlv_TEXCOORD3;
    mediump vec3 fogParam_33;
    highp float tmpvar_34;
    tmpvar_34 = max (0.0, ((_WaterPlaneHeight - xlv_TEXCOORD3.z) / (_WaterPlaneHeight - _UWFogHeightEnd)));
    highp float tmpvar_35;
    tmpvar_35 = min (max ((
      (1.0 - (_UWHeightFogDensity * tmpvar_34))
     * _UWHeightFogEffectLimit), _UWHeightFogEffectStart), _UWHeightFogEffectLimit);
    highp float tmpvar_36;
    tmpvar_36 = clamp ((_UWFogColorHLIntensity * tmpvar_34), 0.0, 1.0);
    fogParam_33.z = 0.0;
    fogParam_33.y = tmpvar_35;
    fogParam_33.x = tmpvar_36;
    if ((xlv_TEXCOORD3.y > 0.99)) {
      xlat_varinput_32.y = (xlv_TEXCOORD3.y * (1.0 - (tmpvar_34 * _UWHeightRatio)));
      highp float tmpvar_37;
      tmpvar_37 = clamp (xlat_varinput_32.y, _UWCriticalRange, 1.0);
      xlat_varinput_32.y = tmpvar_37;
    };
    fogParam_33.z = (1.0 - xlat_varinput_32.y);
    mediump vec4 tmpvar_38;
    tmpvar_38.w = 0.0;
    tmpvar_38.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_39;
    tmpvar_39 = mix (mix (_UWFogColorFar, _UWFogColorNear, xlv_TEXCOORD3.xxxx), tmpvar_38, fogParam_33.zzzz).xyz;
    finalColor_2.xyz = tmpvar_39;
    mediump vec4 tmpvar_40;
    tmpvar_40.w = 0.0;
    tmpvar_40.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_41;
    tmpvar_41 = mix (mix (_UWFogColorLow, _UWFogColorHigh, fogParam_33.xxxx), tmpvar_40, fogParam_33.yyyy).xyz;
    finalColor_2.xyz = tmpvar_41;
  };
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_UNDERWATER_FOG" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _FogStartDistance;
uniform highp float _FogEndDistance;
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
uniform highp float _UWFogDistStart;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _glesNormal;
  mediump vec4 tmpvar_3;
  tmpvar_3 = _glesColor;
  highp float sint_4;
  highp float cost_5;
  highp vec3 adjCamPos_6;
  mediump vec4 offsetVertex_7;
  mediump float normalOut_8;
  highp vec4 offset_9;
  highp vec4 tmpvar_10;
  mediump vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  mediump vec4 tmpvar_13;
  mediump vec3 tmpvar_14;
  offset_9.yzw = vec3(0.0, 0.0, 0.0);
  offset_9.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_9.y = offset_9.x;
  highp float tmpvar_15;
  tmpvar_15 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_8 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = ((_glesVertex + (
    (offset_9 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_2 * normalOut_8) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_7 = tmpvar_16;
  highp vec4 pos_17;
  pos_17 = offsetVertex_7;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = pos_17.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_18));
  tmpvar_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_11.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_19;
  if ((_FogColorNear.w > 0.5)) {
    mediump vec4 fogColor_20;
    highp vec3 tmpvar_21;
    tmpvar_21 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_22;
    tmpvar_22 = max (0.0, (sqrt(
      dot (tmpvar_21, tmpvar_21)
    ) - _FogStartDistance));
    highp float tmpvar_23;
    tmpvar_23 = min (max ((
      (1.0 - exp((-(
        (_FogIntensity * tmpvar_22)
      ) * (_FogIntensity * tmpvar_22))))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_24;
    tmpvar_24 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3(clamp (exp(
      (-((_FogColorIntensity * tmpvar_22)) * (_FogColorIntensity * tmpvar_22))
    ), 0.0, 1.0)));
    fogColor_20.xyz = tmpvar_24;
    fogColor_20.w = tmpvar_23;
    tmpvar_19 = fogColor_20;
  } else {
    mediump vec4 fogColor_25;
    highp vec3 tmpvar_26;
    tmpvar_26 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_27;
    tmpvar_27 = max (0.0, (sqrt(
      dot (tmpvar_26, tmpvar_26)
    ) - _FogStartDistance));
    highp float tmpvar_28;
    highp float tmpvar_29;
    tmpvar_29 = (_FogEndDistance - _FogStartDistance);
    tmpvar_28 = min (max ((
      (((500.0 * _FogIntensity) * tmpvar_27) / max (0.1, tmpvar_29))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_30;
    tmpvar_30 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3((1.0 - clamp (
      (((1000.0 * _FogColorIntensity) * tmpvar_27) / max (0.1, tmpvar_29))
    , 0.0, 1.0))));
    fogColor_25.xyz = tmpvar_30;
    fogColor_25.w = tmpvar_28;
    tmpvar_19 = fogColor_25;
  };
  tmpvar_13.w = 1.0;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_2.xyz;
  highp vec3 norm_32;
  norm_32 = tmpvar_31;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = unity_WorldToObject[0].xyz;
  tmpvar_33[1] = unity_WorldToObject[1].xyz;
  tmpvar_33[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize(normalize((norm_32 * tmpvar_33)));
  tmpvar_14 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_6.xz = (tmpvar_35.xz - ((tmpvar_35.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_6.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((tmpvar_35.xyz - adjCamPos_6));
  tmpvar_12 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = cos(_CamRotate);
  cost_5 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = sin(_CamRotate);
  sint_4 = tmpvar_38;
  highp mat2 tmpvar_39;
  tmpvar_39[0].x = cost_5;
  tmpvar_39[0].y = -(sint_4);
  tmpvar_39[1].x = sint_4;
  tmpvar_39[1].y = cost_5;
  tmpvar_12.xz = (tmpvar_39 * tmpvar_12.xz);
  highp vec3 tmpvar_40;
  tmpvar_40 = (_WorldSpaceCameraPos - tmpvar_35.xyz);
  tmpvar_13.xyz = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41.xyz = offsetVertex_7.xyz;
  tmpvar_41.w = tmpvar_1.w;
  mediump vec3 fogParam_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (unity_ObjectToWorld * tmpvar_41);
  highp vec2 tmpvar_44;
  tmpvar_44 = (tmpvar_43.xz - _WorldSpaceCameraPos.xz);
  highp float tmpvar_45;
  tmpvar_45 = max (0.0, (sqrt(
    dot (tmpvar_44, tmpvar_44)
  ) - _UWFogDistStart));
  highp float tmpvar_46;
  tmpvar_46 = min (max ((
    (1.0 - exp((-(
      (_UWFogDensity * tmpvar_45)
    ) * (_UWFogDensity * tmpvar_45))))
   * _UWFogEffectLimit), _UWFogEffectStart), _UWFogEffectLimit);
  highp float tmpvar_47;
  tmpvar_47 = clamp (exp((
    -((_UWFogColorNFIntensity * tmpvar_45))
   * 
    (_UWFogColorNFIntensity * tmpvar_45)
  )), 0.0, 1.0);
  fogParam_42.x = tmpvar_47;
  fogParam_42.y = tmpvar_46;
  fogParam_42.z = tmpvar_43.y;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_COLOR0 = tmpvar_3;
  xlv_COLOR1 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_2.xyz;
  xlv_TEXCOORD2 = tmpvar_12;
  xlv_TEXCOORD3 = fogParam_42;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_14;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
uniform highp vec4 _UWFogColorLow;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWHeightFogDensity;
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
uniform highp float _UWHeightRatio;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  if ((xlv_TEXCOORD3.z > _WaterPlaneHeight)) {
    finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  } else {
    mediump vec3 xlat_varinput_32;
    xlat_varinput_32 = xlv_TEXCOORD3;
    mediump vec3 fogParam_33;
    highp float tmpvar_34;
    tmpvar_34 = max (0.0, ((_WaterPlaneHeight - xlv_TEXCOORD3.z) / (_WaterPlaneHeight - _UWFogHeightEnd)));
    highp float tmpvar_35;
    tmpvar_35 = min (max ((
      (1.0 - (_UWHeightFogDensity * tmpvar_34))
     * _UWHeightFogEffectLimit), _UWHeightFogEffectStart), _UWHeightFogEffectLimit);
    highp float tmpvar_36;
    tmpvar_36 = clamp ((_UWFogColorHLIntensity * tmpvar_34), 0.0, 1.0);
    fogParam_33.z = 0.0;
    fogParam_33.y = tmpvar_35;
    fogParam_33.x = tmpvar_36;
    if ((xlv_TEXCOORD3.y > 0.99)) {
      xlat_varinput_32.y = (xlv_TEXCOORD3.y * (1.0 - (tmpvar_34 * _UWHeightRatio)));
      highp float tmpvar_37;
      tmpvar_37 = clamp (xlat_varinput_32.y, _UWCriticalRange, 1.0);
      xlat_varinput_32.y = tmpvar_37;
    };
    fogParam_33.z = (1.0 - xlat_varinput_32.y);
    mediump vec4 tmpvar_38;
    tmpvar_38.w = 0.0;
    tmpvar_38.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_39;
    tmpvar_39 = mix (mix (_UWFogColorFar, _UWFogColorNear, xlv_TEXCOORD3.xxxx), tmpvar_38, fogParam_33.zzzz).xyz;
    finalColor_2.xyz = tmpvar_39;
    mediump vec4 tmpvar_40;
    tmpvar_40.w = 0.0;
    tmpvar_40.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_41;
    tmpvar_41 = mix (mix (_UWFogColorLow, _UWFogColorHigh, fogParam_33.xxxx), tmpvar_40, fogParam_33.yyyy).xyz;
    finalColor_2.xyz = tmpvar_41;
  };
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_UNDERWATER_FOG" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _FogStartDistance;
uniform highp float _FogEndDistance;
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
uniform highp float _UWFogDistStart;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _glesNormal;
  mediump vec4 tmpvar_3;
  tmpvar_3 = _glesColor;
  highp float sint_4;
  highp float cost_5;
  highp vec3 adjCamPos_6;
  mediump vec4 offsetVertex_7;
  mediump float normalOut_8;
  highp vec4 offset_9;
  highp vec4 tmpvar_10;
  mediump vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  mediump vec4 tmpvar_13;
  mediump vec3 tmpvar_14;
  offset_9.yzw = vec3(0.0, 0.0, 0.0);
  offset_9.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_9.y = offset_9.x;
  highp float tmpvar_15;
  tmpvar_15 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_8 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = ((_glesVertex + (
    (offset_9 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_2 * normalOut_8) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_7 = tmpvar_16;
  highp vec4 pos_17;
  pos_17 = offsetVertex_7;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = pos_17.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_18));
  tmpvar_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_11.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_19;
  if ((_FogColorNear.w > 0.5)) {
    mediump vec4 fogColor_20;
    highp vec3 tmpvar_21;
    tmpvar_21 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_22;
    tmpvar_22 = max (0.0, (sqrt(
      dot (tmpvar_21, tmpvar_21)
    ) - _FogStartDistance));
    highp float tmpvar_23;
    tmpvar_23 = min (max ((
      (1.0 - exp((-(
        (_FogIntensity * tmpvar_22)
      ) * (_FogIntensity * tmpvar_22))))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_24;
    tmpvar_24 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3(clamp (exp(
      (-((_FogColorIntensity * tmpvar_22)) * (_FogColorIntensity * tmpvar_22))
    ), 0.0, 1.0)));
    fogColor_20.xyz = tmpvar_24;
    fogColor_20.w = tmpvar_23;
    tmpvar_19 = fogColor_20;
  } else {
    mediump vec4 fogColor_25;
    highp vec3 tmpvar_26;
    tmpvar_26 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_27;
    tmpvar_27 = max (0.0, (sqrt(
      dot (tmpvar_26, tmpvar_26)
    ) - _FogStartDistance));
    highp float tmpvar_28;
    highp float tmpvar_29;
    tmpvar_29 = (_FogEndDistance - _FogStartDistance);
    tmpvar_28 = min (max ((
      (((500.0 * _FogIntensity) * tmpvar_27) / max (0.1, tmpvar_29))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_30;
    tmpvar_30 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3((1.0 - clamp (
      (((1000.0 * _FogColorIntensity) * tmpvar_27) / max (0.1, tmpvar_29))
    , 0.0, 1.0))));
    fogColor_25.xyz = tmpvar_30;
    fogColor_25.w = tmpvar_28;
    tmpvar_19 = fogColor_25;
  };
  tmpvar_13.w = 1.0;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_2.xyz;
  highp vec3 norm_32;
  norm_32 = tmpvar_31;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = unity_WorldToObject[0].xyz;
  tmpvar_33[1] = unity_WorldToObject[1].xyz;
  tmpvar_33[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize(normalize((norm_32 * tmpvar_33)));
  tmpvar_14 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_6.xz = (tmpvar_35.xz - ((tmpvar_35.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_6.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((tmpvar_35.xyz - adjCamPos_6));
  tmpvar_12 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = cos(_CamRotate);
  cost_5 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = sin(_CamRotate);
  sint_4 = tmpvar_38;
  highp mat2 tmpvar_39;
  tmpvar_39[0].x = cost_5;
  tmpvar_39[0].y = -(sint_4);
  tmpvar_39[1].x = sint_4;
  tmpvar_39[1].y = cost_5;
  tmpvar_12.xz = (tmpvar_39 * tmpvar_12.xz);
  highp vec3 tmpvar_40;
  tmpvar_40 = (_WorldSpaceCameraPos - tmpvar_35.xyz);
  tmpvar_13.xyz = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41.xyz = offsetVertex_7.xyz;
  tmpvar_41.w = tmpvar_1.w;
  mediump vec3 fogParam_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (unity_ObjectToWorld * tmpvar_41);
  highp vec2 tmpvar_44;
  tmpvar_44 = (tmpvar_43.xz - _WorldSpaceCameraPos.xz);
  highp float tmpvar_45;
  tmpvar_45 = max (0.0, (sqrt(
    dot (tmpvar_44, tmpvar_44)
  ) - _UWFogDistStart));
  highp float tmpvar_46;
  tmpvar_46 = min (max ((
    (1.0 - exp((-(
      (_UWFogDensity * tmpvar_45)
    ) * (_UWFogDensity * tmpvar_45))))
   * _UWFogEffectLimit), _UWFogEffectStart), _UWFogEffectLimit);
  highp float tmpvar_47;
  tmpvar_47 = clamp (exp((
    -((_UWFogColorNFIntensity * tmpvar_45))
   * 
    (_UWFogColorNFIntensity * tmpvar_45)
  )), 0.0, 1.0);
  fogParam_42.x = tmpvar_47;
  fogParam_42.y = tmpvar_46;
  fogParam_42.z = tmpvar_43.y;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_COLOR0 = tmpvar_3;
  xlv_COLOR1 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_2.xyz;
  xlv_TEXCOORD2 = tmpvar_12;
  xlv_TEXCOORD3 = fogParam_42;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_14;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
uniform highp vec4 _UWFogColorLow;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWHeightFogDensity;
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
uniform highp float _UWHeightRatio;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  if ((xlv_TEXCOORD3.z > _WaterPlaneHeight)) {
    finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  } else {
    mediump vec3 xlat_varinput_32;
    xlat_varinput_32 = xlv_TEXCOORD3;
    mediump vec3 fogParam_33;
    highp float tmpvar_34;
    tmpvar_34 = max (0.0, ((_WaterPlaneHeight - xlv_TEXCOORD3.z) / (_WaterPlaneHeight - _UWFogHeightEnd)));
    highp float tmpvar_35;
    tmpvar_35 = min (max ((
      (1.0 - (_UWHeightFogDensity * tmpvar_34))
     * _UWHeightFogEffectLimit), _UWHeightFogEffectStart), _UWHeightFogEffectLimit);
    highp float tmpvar_36;
    tmpvar_36 = clamp ((_UWFogColorHLIntensity * tmpvar_34), 0.0, 1.0);
    fogParam_33.z = 0.0;
    fogParam_33.y = tmpvar_35;
    fogParam_33.x = tmpvar_36;
    if ((xlv_TEXCOORD3.y > 0.99)) {
      xlat_varinput_32.y = (xlv_TEXCOORD3.y * (1.0 - (tmpvar_34 * _UWHeightRatio)));
      highp float tmpvar_37;
      tmpvar_37 = clamp (xlat_varinput_32.y, _UWCriticalRange, 1.0);
      xlat_varinput_32.y = tmpvar_37;
    };
    fogParam_33.z = (1.0 - xlat_varinput_32.y);
    mediump vec4 tmpvar_38;
    tmpvar_38.w = 0.0;
    tmpvar_38.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_39;
    tmpvar_39 = mix (mix (_UWFogColorFar, _UWFogColorNear, xlv_TEXCOORD3.xxxx), tmpvar_38, fogParam_33.zzzz).xyz;
    finalColor_2.xyz = tmpvar_39;
    mediump vec4 tmpvar_40;
    tmpvar_40.w = 0.0;
    tmpvar_40.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_41;
    tmpvar_41 = mix (mix (_UWFogColorLow, _UWFogColorHigh, fogParam_33.xxxx), tmpvar_40, fogParam_33.yyyy).xyz;
    finalColor_2.xyz = tmpvar_41;
  };
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_UNDERWATER_FOG" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _FogStartDistance;
uniform highp float _FogEndDistance;
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
uniform highp float _UWFogDistStart;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _glesNormal;
  mediump vec4 tmpvar_3;
  tmpvar_3 = _glesColor;
  highp float sint_4;
  highp float cost_5;
  highp vec3 adjCamPos_6;
  mediump vec4 offsetVertex_7;
  mediump float normalOut_8;
  highp vec4 offset_9;
  highp vec4 tmpvar_10;
  mediump vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  mediump vec4 tmpvar_13;
  mediump vec3 tmpvar_14;
  offset_9.yzw = vec3(0.0, 0.0, 0.0);
  offset_9.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_9.y = offset_9.x;
  highp float tmpvar_15;
  tmpvar_15 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_8 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = ((_glesVertex + (
    (offset_9 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_2 * normalOut_8) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_7 = tmpvar_16;
  highp vec4 pos_17;
  pos_17 = offsetVertex_7;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = pos_17.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_18));
  tmpvar_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_11.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_19;
  if ((_FogColorNear.w > 0.5)) {
    mediump vec4 fogColor_20;
    highp vec3 tmpvar_21;
    tmpvar_21 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_22;
    tmpvar_22 = max (0.0, (sqrt(
      dot (tmpvar_21, tmpvar_21)
    ) - _FogStartDistance));
    highp float tmpvar_23;
    tmpvar_23 = min (max ((
      (1.0 - exp((-(
        (_FogIntensity * tmpvar_22)
      ) * (_FogIntensity * tmpvar_22))))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_24;
    tmpvar_24 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3(clamp (exp(
      (-((_FogColorIntensity * tmpvar_22)) * (_FogColorIntensity * tmpvar_22))
    ), 0.0, 1.0)));
    fogColor_20.xyz = tmpvar_24;
    fogColor_20.w = tmpvar_23;
    tmpvar_19 = fogColor_20;
  } else {
    mediump vec4 fogColor_25;
    highp vec3 tmpvar_26;
    tmpvar_26 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_27;
    tmpvar_27 = max (0.0, (sqrt(
      dot (tmpvar_26, tmpvar_26)
    ) - _FogStartDistance));
    highp float tmpvar_28;
    highp float tmpvar_29;
    tmpvar_29 = (_FogEndDistance - _FogStartDistance);
    tmpvar_28 = min (max ((
      (((500.0 * _FogIntensity) * tmpvar_27) / max (0.1, tmpvar_29))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_30;
    tmpvar_30 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3((1.0 - clamp (
      (((1000.0 * _FogColorIntensity) * tmpvar_27) / max (0.1, tmpvar_29))
    , 0.0, 1.0))));
    fogColor_25.xyz = tmpvar_30;
    fogColor_25.w = tmpvar_28;
    tmpvar_19 = fogColor_25;
  };
  tmpvar_13.w = 1.0;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_2.xyz;
  highp vec3 norm_32;
  norm_32 = tmpvar_31;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = unity_WorldToObject[0].xyz;
  tmpvar_33[1] = unity_WorldToObject[1].xyz;
  tmpvar_33[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize(normalize((norm_32 * tmpvar_33)));
  tmpvar_14 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_6.xz = (tmpvar_35.xz - ((tmpvar_35.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_6.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((tmpvar_35.xyz - adjCamPos_6));
  tmpvar_12 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = cos(_CamRotate);
  cost_5 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = sin(_CamRotate);
  sint_4 = tmpvar_38;
  highp mat2 tmpvar_39;
  tmpvar_39[0].x = cost_5;
  tmpvar_39[0].y = -(sint_4);
  tmpvar_39[1].x = sint_4;
  tmpvar_39[1].y = cost_5;
  tmpvar_12.xz = (tmpvar_39 * tmpvar_12.xz);
  highp vec3 tmpvar_40;
  tmpvar_40 = (_WorldSpaceCameraPos - tmpvar_35.xyz);
  tmpvar_13.xyz = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41.xyz = offsetVertex_7.xyz;
  tmpvar_41.w = tmpvar_1.w;
  mediump vec3 fogParam_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (unity_ObjectToWorld * tmpvar_41);
  highp vec2 tmpvar_44;
  tmpvar_44 = (tmpvar_43.xz - _WorldSpaceCameraPos.xz);
  highp float tmpvar_45;
  tmpvar_45 = max (0.0, (sqrt(
    dot (tmpvar_44, tmpvar_44)
  ) - _UWFogDistStart));
  highp float tmpvar_46;
  tmpvar_46 = min (max ((
    (1.0 - exp((-(
      (_UWFogDensity * tmpvar_45)
    ) * (_UWFogDensity * tmpvar_45))))
   * _UWFogEffectLimit), _UWFogEffectStart), _UWFogEffectLimit);
  highp float tmpvar_47;
  tmpvar_47 = clamp (exp((
    -((_UWFogColorNFIntensity * tmpvar_45))
   * 
    (_UWFogColorNFIntensity * tmpvar_45)
  )), 0.0, 1.0);
  fogParam_42.x = tmpvar_47;
  fogParam_42.y = tmpvar_46;
  fogParam_42.z = tmpvar_43.y;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_COLOR0 = tmpvar_3;
  xlv_COLOR1 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_2.xyz;
  xlv_TEXCOORD2 = tmpvar_12;
  xlv_TEXCOORD3 = fogParam_42;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_14;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
uniform highp vec4 _UWFogColorLow;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWHeightFogDensity;
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
uniform highp float _UWHeightRatio;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  if ((xlv_TEXCOORD3.z > _WaterPlaneHeight)) {
    finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  } else {
    mediump vec3 xlat_varinput_32;
    xlat_varinput_32 = xlv_TEXCOORD3;
    mediump vec3 fogParam_33;
    highp float tmpvar_34;
    tmpvar_34 = max (0.0, ((_WaterPlaneHeight - xlv_TEXCOORD3.z) / (_WaterPlaneHeight - _UWFogHeightEnd)));
    highp float tmpvar_35;
    tmpvar_35 = min (max ((
      (1.0 - (_UWHeightFogDensity * tmpvar_34))
     * _UWHeightFogEffectLimit), _UWHeightFogEffectStart), _UWHeightFogEffectLimit);
    highp float tmpvar_36;
    tmpvar_36 = clamp ((_UWFogColorHLIntensity * tmpvar_34), 0.0, 1.0);
    fogParam_33.z = 0.0;
    fogParam_33.y = tmpvar_35;
    fogParam_33.x = tmpvar_36;
    if ((xlv_TEXCOORD3.y > 0.99)) {
      xlat_varinput_32.y = (xlv_TEXCOORD3.y * (1.0 - (tmpvar_34 * _UWHeightRatio)));
      highp float tmpvar_37;
      tmpvar_37 = clamp (xlat_varinput_32.y, _UWCriticalRange, 1.0);
      xlat_varinput_32.y = tmpvar_37;
    };
    fogParam_33.z = (1.0 - xlat_varinput_32.y);
    mediump vec4 tmpvar_38;
    tmpvar_38.w = 0.0;
    tmpvar_38.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_39;
    tmpvar_39 = mix (mix (_UWFogColorFar, _UWFogColorNear, xlv_TEXCOORD3.xxxx), tmpvar_38, fogParam_33.zzzz).xyz;
    finalColor_2.xyz = tmpvar_39;
    mediump vec4 tmpvar_40;
    tmpvar_40.w = 0.0;
    tmpvar_40.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_41;
    tmpvar_41 = mix (mix (_UWFogColorLow, _UWFogColorHigh, fogParam_33.xxxx), tmpvar_40, fogParam_33.yyyy).xyz;
    finalColor_2.xyz = tmpvar_41;
  };
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_UNDERWATER_FOG" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _FogStartDistance;
uniform highp float _FogEndDistance;
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
uniform highp float _UWFogDistStart;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _glesNormal;
  mediump vec4 tmpvar_3;
  tmpvar_3 = _glesColor;
  highp float sint_4;
  highp float cost_5;
  highp vec3 adjCamPos_6;
  mediump vec4 offsetVertex_7;
  mediump float normalOut_8;
  highp vec4 offset_9;
  highp vec4 tmpvar_10;
  mediump vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  mediump vec4 tmpvar_13;
  mediump vec3 tmpvar_14;
  offset_9.yzw = vec3(0.0, 0.0, 0.0);
  offset_9.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_9.y = offset_9.x;
  highp float tmpvar_15;
  tmpvar_15 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_8 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = ((_glesVertex + (
    (offset_9 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_2 * normalOut_8) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_7 = tmpvar_16;
  highp vec4 pos_17;
  pos_17 = offsetVertex_7;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = pos_17.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_18));
  tmpvar_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_11.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_19;
  if ((_FogColorNear.w > 0.5)) {
    mediump vec4 fogColor_20;
    highp vec3 tmpvar_21;
    tmpvar_21 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_22;
    tmpvar_22 = max (0.0, (sqrt(
      dot (tmpvar_21, tmpvar_21)
    ) - _FogStartDistance));
    highp float tmpvar_23;
    tmpvar_23 = min (max ((
      (1.0 - exp((-(
        (_FogIntensity * tmpvar_22)
      ) * (_FogIntensity * tmpvar_22))))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_24;
    tmpvar_24 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3(clamp (exp(
      (-((_FogColorIntensity * tmpvar_22)) * (_FogColorIntensity * tmpvar_22))
    ), 0.0, 1.0)));
    fogColor_20.xyz = tmpvar_24;
    fogColor_20.w = tmpvar_23;
    tmpvar_19 = fogColor_20;
  } else {
    mediump vec4 fogColor_25;
    highp vec3 tmpvar_26;
    tmpvar_26 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_27;
    tmpvar_27 = max (0.0, (sqrt(
      dot (tmpvar_26, tmpvar_26)
    ) - _FogStartDistance));
    highp float tmpvar_28;
    highp float tmpvar_29;
    tmpvar_29 = (_FogEndDistance - _FogStartDistance);
    tmpvar_28 = min (max ((
      (((500.0 * _FogIntensity) * tmpvar_27) / max (0.1, tmpvar_29))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_30;
    tmpvar_30 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3((1.0 - clamp (
      (((1000.0 * _FogColorIntensity) * tmpvar_27) / max (0.1, tmpvar_29))
    , 0.0, 1.0))));
    fogColor_25.xyz = tmpvar_30;
    fogColor_25.w = tmpvar_28;
    tmpvar_19 = fogColor_25;
  };
  tmpvar_13.w = 1.0;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_2.xyz;
  highp vec3 norm_32;
  norm_32 = tmpvar_31;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = unity_WorldToObject[0].xyz;
  tmpvar_33[1] = unity_WorldToObject[1].xyz;
  tmpvar_33[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize(normalize((norm_32 * tmpvar_33)));
  tmpvar_14 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_6.xz = (tmpvar_35.xz - ((tmpvar_35.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_6.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((tmpvar_35.xyz - adjCamPos_6));
  tmpvar_12 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = cos(_CamRotate);
  cost_5 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = sin(_CamRotate);
  sint_4 = tmpvar_38;
  highp mat2 tmpvar_39;
  tmpvar_39[0].x = cost_5;
  tmpvar_39[0].y = -(sint_4);
  tmpvar_39[1].x = sint_4;
  tmpvar_39[1].y = cost_5;
  tmpvar_12.xz = (tmpvar_39 * tmpvar_12.xz);
  highp vec3 tmpvar_40;
  tmpvar_40 = (_WorldSpaceCameraPos - tmpvar_35.xyz);
  tmpvar_13.xyz = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41.xyz = offsetVertex_7.xyz;
  tmpvar_41.w = tmpvar_1.w;
  mediump vec3 fogParam_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (unity_ObjectToWorld * tmpvar_41);
  highp vec2 tmpvar_44;
  tmpvar_44 = (tmpvar_43.xz - _WorldSpaceCameraPos.xz);
  highp float tmpvar_45;
  tmpvar_45 = max (0.0, (sqrt(
    dot (tmpvar_44, tmpvar_44)
  ) - _UWFogDistStart));
  highp float tmpvar_46;
  tmpvar_46 = min (max ((
    (1.0 - exp((-(
      (_UWFogDensity * tmpvar_45)
    ) * (_UWFogDensity * tmpvar_45))))
   * _UWFogEffectLimit), _UWFogEffectStart), _UWFogEffectLimit);
  highp float tmpvar_47;
  tmpvar_47 = clamp (exp((
    -((_UWFogColorNFIntensity * tmpvar_45))
   * 
    (_UWFogColorNFIntensity * tmpvar_45)
  )), 0.0, 1.0);
  fogParam_42.x = tmpvar_47;
  fogParam_42.y = tmpvar_46;
  fogParam_42.z = tmpvar_43.y;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_COLOR0 = tmpvar_3;
  xlv_COLOR1 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_2.xyz;
  xlv_TEXCOORD2 = tmpvar_12;
  xlv_TEXCOORD3 = fogParam_42;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_14;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
uniform highp vec4 _UWFogColorLow;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWHeightFogDensity;
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
uniform highp float _UWHeightRatio;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  if ((xlv_TEXCOORD3.z > _WaterPlaneHeight)) {
    finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  } else {
    mediump vec3 xlat_varinput_32;
    xlat_varinput_32 = xlv_TEXCOORD3;
    mediump vec3 fogParam_33;
    highp float tmpvar_34;
    tmpvar_34 = max (0.0, ((_WaterPlaneHeight - xlv_TEXCOORD3.z) / (_WaterPlaneHeight - _UWFogHeightEnd)));
    highp float tmpvar_35;
    tmpvar_35 = min (max ((
      (1.0 - (_UWHeightFogDensity * tmpvar_34))
     * _UWHeightFogEffectLimit), _UWHeightFogEffectStart), _UWHeightFogEffectLimit);
    highp float tmpvar_36;
    tmpvar_36 = clamp ((_UWFogColorHLIntensity * tmpvar_34), 0.0, 1.0);
    fogParam_33.z = 0.0;
    fogParam_33.y = tmpvar_35;
    fogParam_33.x = tmpvar_36;
    if ((xlv_TEXCOORD3.y > 0.99)) {
      xlat_varinput_32.y = (xlv_TEXCOORD3.y * (1.0 - (tmpvar_34 * _UWHeightRatio)));
      highp float tmpvar_37;
      tmpvar_37 = clamp (xlat_varinput_32.y, _UWCriticalRange, 1.0);
      xlat_varinput_32.y = tmpvar_37;
    };
    fogParam_33.z = (1.0 - xlat_varinput_32.y);
    mediump vec4 tmpvar_38;
    tmpvar_38.w = 0.0;
    tmpvar_38.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_39;
    tmpvar_39 = mix (mix (_UWFogColorFar, _UWFogColorNear, xlv_TEXCOORD3.xxxx), tmpvar_38, fogParam_33.zzzz).xyz;
    finalColor_2.xyz = tmpvar_39;
    mediump vec4 tmpvar_40;
    tmpvar_40.w = 0.0;
    tmpvar_40.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_41;
    tmpvar_41 = mix (mix (_UWFogColorLow, _UWFogColorHigh, fogParam_33.xxxx), tmpvar_40, fogParam_33.yyyy).xyz;
    finalColor_2.xyz = tmpvar_41;
  };
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_HEIGHT" "_UNDERWATER_FOG" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
uniform highp float _UWFogDistStart;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _glesNormal;
  highp float sint_4;
  highp float cost_5;
  highp vec3 adjCamPos_6;
  mediump vec4 offsetVertex_7;
  mediump float normalOut_8;
  highp vec4 offset_9;
  mediump vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  mediump vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  offset_9.yzw = vec3(0.0, 0.0, 0.0);
  offset_9.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_9.y = offset_9.x;
  highp float tmpvar_14;
  tmpvar_14 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_8 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = ((_glesVertex + (
    (offset_9 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_3 * normalOut_8) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_7 = tmpvar_15;
  highp vec4 pos_16;
  pos_16 = offsetVertex_7;
  highp vec4 tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = pos_16.xyz;
  tmpvar_17 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_18));
  tmpvar_10.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_10.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_22;
  mediump float fogFactor_23;
  mediump vec3 fogColor_24;
  mediump vec3 heightFogColor_25;
  highp float HeightFogFactor_26;
  mediump vec3 atomesphereFogColor_27;
  mediump float h_28;
  highp float linearFogDensity_29;
  mediump float len_30;
  highp float tmpvar_31;
  tmpvar_31 = sqrt(dot (tmpvar_21, tmpvar_21));
  len_30 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (((len_30 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_29 = (tmpvar_32 * (2.0 - tmpvar_32));
  if ((len_30 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_29 = (linearFogDensity_29 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_33;
  tmpvar_33 = min (pow (linearFogDensity_29, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_29 = tmpvar_33;
  mediump float tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((tmpvar_20.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_34 = tmpvar_35;
  h_28 = (tmpvar_34 * (2.0 - tmpvar_34));
  highp vec3 tmpvar_36;
  tmpvar_36 = (_HeigtFogColBase.xyz + (h_28 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_27 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (atomesphereFogColor_27, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_30 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_27 = tmpvar_37;
  mediump float tmpvar_38;
  mediump float r_39;
  mediump float f_40;
  mediump float u_41;
  mediump float l_42;
  mediump float fogInt_43;
  fogInt_43 = 1.0;
  highp float tmpvar_44;
  tmpvar_44 = (_HeigtFogParams.x * tmpvar_21.y);
  highp float tmpvar_45;
  tmpvar_45 = abs(tmpvar_44);
  if ((tmpvar_45 > 0.01)) {
    highp float tmpvar_46;
    tmpvar_46 = exp(-(tmpvar_44));
    fogInt_43 = ((1.0 - tmpvar_46) / tmpvar_44);
  };
  highp float tmpvar_47;
  tmpvar_47 = sqrt(dot (tmpvar_21, tmpvar_21));
  l_42 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = (l_42 * _HeigtFogParams.y);
  u_41 = tmpvar_48;
  fogInt_43 = (fogInt_43 * u_41);
  mediump float tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((l_42 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_49 = tmpvar_50;
  r_39 = (tmpvar_49 * (2.0 - tmpvar_49));
  r_39 = ((r_39 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_40 = ((1.0 - clamp (
    exp2(-(fogInt_43))
  , 0.0, 1.0)) * r_39);
  highp float tmpvar_51;
  tmpvar_51 = min (f_40, _HeigtFogColBase.w);
  tmpvar_38 = tmpvar_51;
  HeightFogFactor_26 = tmpvar_38;
  highp vec3 tmpvar_52;
  tmpvar_52 = _Mihoyo_FogColor.xyz;
  heightFogColor_25 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = ((heightFogColor_25 * HeightFogFactor_26) + ((atomesphereFogColor_27 * tmpvar_33) * (1.0 - HeightFogFactor_26)));
  fogColor_24 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = ((1.0 - tmpvar_33) * (1.0 - HeightFogFactor_26));
  fogFactor_23 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55.xyz = fogColor_24;
  tmpvar_55.w = fogFactor_23;
  tmpvar_22 = tmpvar_55;
  tmpvar_19 = tmpvar_22;
  tmpvar_12.w = 1.0;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_3.xyz;
  highp vec3 norm_57;
  norm_57 = tmpvar_56;
  highp mat3 tmpvar_58;
  tmpvar_58[0] = unity_WorldToObject[0].xyz;
  tmpvar_58[1] = unity_WorldToObject[1].xyz;
  tmpvar_58[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(normalize((norm_57 * tmpvar_58)));
  tmpvar_13 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_6.xz = (tmpvar_60.xz - ((tmpvar_60.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_6.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize((tmpvar_60.xyz - adjCamPos_6));
  tmpvar_11 = tmpvar_61;
  mediump float tmpvar_62;
  tmpvar_62 = cos(_CamRotate);
  cost_5 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = sin(_CamRotate);
  sint_4 = tmpvar_63;
  highp mat2 tmpvar_64;
  tmpvar_64[0].x = cost_5;
  tmpvar_64[0].y = -(sint_4);
  tmpvar_64[1].x = sint_4;
  tmpvar_64[1].y = cost_5;
  tmpvar_11.xz = (tmpvar_64 * tmpvar_11.xz);
  highp vec3 tmpvar_65;
  tmpvar_65 = (_WorldSpaceCameraPos - tmpvar_60.xyz);
  tmpvar_12.xyz = tmpvar_65;
  highp vec4 tmpvar_66;
  tmpvar_66.xyz = offsetVertex_7.xyz;
  tmpvar_66.w = tmpvar_1.w;
  mediump vec3 fogParam_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = (unity_ObjectToWorld * tmpvar_66);
  highp vec2 tmpvar_69;
  tmpvar_69 = (tmpvar_68.xz - _WorldSpaceCameraPos.xz);
  highp float tmpvar_70;
  tmpvar_70 = max (0.0, (sqrt(
    dot (tmpvar_69, tmpvar_69)
  ) - _UWFogDistStart));
  highp float tmpvar_71;
  tmpvar_71 = min (max ((
    (1.0 - exp((-(
      (_UWFogDensity * tmpvar_70)
    ) * (_UWFogDensity * tmpvar_70))))
   * _UWFogEffectLimit), _UWFogEffectStart), _UWFogEffectLimit);
  highp float tmpvar_72;
  tmpvar_72 = clamp (exp((
    -((_UWFogColorNFIntensity * tmpvar_70))
   * 
    (_UWFogColorNFIntensity * tmpvar_70)
  )), 0.0, 1.0);
  fogParam_67.x = tmpvar_72;
  fogParam_67.y = tmpvar_71;
  fogParam_67.z = tmpvar_68.y;
  gl_Position = tmpvar_17;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_COLOR0 = tmpvar_2;
  xlv_COLOR1 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_3.xyz;
  xlv_TEXCOORD2 = tmpvar_11;
  xlv_TEXCOORD3 = fogParam_67;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
uniform highp vec4 _UWFogColorLow;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWHeightFogDensity;
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
uniform highp float _UWHeightRatio;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  if ((xlv_TEXCOORD3.z > _WaterPlaneHeight)) {
    finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  } else {
    mediump vec3 xlat_varinput_32;
    xlat_varinput_32 = xlv_TEXCOORD3;
    mediump vec3 fogParam_33;
    highp float tmpvar_34;
    tmpvar_34 = max (0.0, ((_WaterPlaneHeight - xlv_TEXCOORD3.z) / (_WaterPlaneHeight - _UWFogHeightEnd)));
    highp float tmpvar_35;
    tmpvar_35 = min (max ((
      (1.0 - (_UWHeightFogDensity * tmpvar_34))
     * _UWHeightFogEffectLimit), _UWHeightFogEffectStart), _UWHeightFogEffectLimit);
    highp float tmpvar_36;
    tmpvar_36 = clamp ((_UWFogColorHLIntensity * tmpvar_34), 0.0, 1.0);
    fogParam_33.z = 0.0;
    fogParam_33.y = tmpvar_35;
    fogParam_33.x = tmpvar_36;
    if ((xlv_TEXCOORD3.y > 0.99)) {
      xlat_varinput_32.y = (xlv_TEXCOORD3.y * (1.0 - (tmpvar_34 * _UWHeightRatio)));
      highp float tmpvar_37;
      tmpvar_37 = clamp (xlat_varinput_32.y, _UWCriticalRange, 1.0);
      xlat_varinput_32.y = tmpvar_37;
    };
    fogParam_33.z = (1.0 - xlat_varinput_32.y);
    mediump vec4 tmpvar_38;
    tmpvar_38.w = 0.0;
    tmpvar_38.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_39;
    tmpvar_39 = mix (mix (_UWFogColorFar, _UWFogColorNear, xlv_TEXCOORD3.xxxx), tmpvar_38, fogParam_33.zzzz).xyz;
    finalColor_2.xyz = tmpvar_39;
    mediump vec4 tmpvar_40;
    tmpvar_40.w = 0.0;
    tmpvar_40.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_41;
    tmpvar_41 = mix (mix (_UWFogColorLow, _UWFogColorHigh, fogParam_33.xxxx), tmpvar_40, fogParam_33.yyyy).xyz;
    finalColor_2.xyz = tmpvar_41;
  };
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_HEIGHT" "_UNDERWATER_FOG" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
uniform highp float _UWFogDistStart;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _glesNormal;
  highp float sint_4;
  highp float cost_5;
  highp vec3 adjCamPos_6;
  mediump vec4 offsetVertex_7;
  mediump float normalOut_8;
  highp vec4 offset_9;
  mediump vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  mediump vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  offset_9.yzw = vec3(0.0, 0.0, 0.0);
  offset_9.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_9.y = offset_9.x;
  highp float tmpvar_14;
  tmpvar_14 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_8 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = ((_glesVertex + (
    (offset_9 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_3 * normalOut_8) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_7 = tmpvar_15;
  highp vec4 pos_16;
  pos_16 = offsetVertex_7;
  highp vec4 tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = pos_16.xyz;
  tmpvar_17 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_18));
  tmpvar_10.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_10.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_22;
  mediump float fogFactor_23;
  mediump vec3 fogColor_24;
  mediump vec3 heightFogColor_25;
  highp float HeightFogFactor_26;
  mediump vec3 atomesphereFogColor_27;
  mediump float h_28;
  highp float linearFogDensity_29;
  mediump float len_30;
  highp float tmpvar_31;
  tmpvar_31 = sqrt(dot (tmpvar_21, tmpvar_21));
  len_30 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (((len_30 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_29 = (tmpvar_32 * (2.0 - tmpvar_32));
  if ((len_30 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_29 = (linearFogDensity_29 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_33;
  tmpvar_33 = min (pow (linearFogDensity_29, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_29 = tmpvar_33;
  mediump float tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((tmpvar_20.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_34 = tmpvar_35;
  h_28 = (tmpvar_34 * (2.0 - tmpvar_34));
  highp vec3 tmpvar_36;
  tmpvar_36 = (_HeigtFogColBase.xyz + (h_28 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_27 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (atomesphereFogColor_27, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_30 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_27 = tmpvar_37;
  mediump float tmpvar_38;
  mediump float r_39;
  mediump float f_40;
  mediump float u_41;
  mediump float l_42;
  mediump float fogInt_43;
  fogInt_43 = 1.0;
  highp float tmpvar_44;
  tmpvar_44 = (_HeigtFogParams.x * tmpvar_21.y);
  highp float tmpvar_45;
  tmpvar_45 = abs(tmpvar_44);
  if ((tmpvar_45 > 0.01)) {
    highp float tmpvar_46;
    tmpvar_46 = exp(-(tmpvar_44));
    fogInt_43 = ((1.0 - tmpvar_46) / tmpvar_44);
  };
  highp float tmpvar_47;
  tmpvar_47 = sqrt(dot (tmpvar_21, tmpvar_21));
  l_42 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = (l_42 * _HeigtFogParams.y);
  u_41 = tmpvar_48;
  fogInt_43 = (fogInt_43 * u_41);
  mediump float tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((l_42 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_49 = tmpvar_50;
  r_39 = (tmpvar_49 * (2.0 - tmpvar_49));
  r_39 = ((r_39 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_40 = ((1.0 - clamp (
    exp2(-(fogInt_43))
  , 0.0, 1.0)) * r_39);
  highp float tmpvar_51;
  tmpvar_51 = min (f_40, _HeigtFogColBase.w);
  tmpvar_38 = tmpvar_51;
  HeightFogFactor_26 = tmpvar_38;
  highp vec3 tmpvar_52;
  tmpvar_52 = _Mihoyo_FogColor.xyz;
  heightFogColor_25 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = ((heightFogColor_25 * HeightFogFactor_26) + ((atomesphereFogColor_27 * tmpvar_33) * (1.0 - HeightFogFactor_26)));
  fogColor_24 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = ((1.0 - tmpvar_33) * (1.0 - HeightFogFactor_26));
  fogFactor_23 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55.xyz = fogColor_24;
  tmpvar_55.w = fogFactor_23;
  tmpvar_22 = tmpvar_55;
  tmpvar_19 = tmpvar_22;
  tmpvar_12.w = 1.0;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_3.xyz;
  highp vec3 norm_57;
  norm_57 = tmpvar_56;
  highp mat3 tmpvar_58;
  tmpvar_58[0] = unity_WorldToObject[0].xyz;
  tmpvar_58[1] = unity_WorldToObject[1].xyz;
  tmpvar_58[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(normalize((norm_57 * tmpvar_58)));
  tmpvar_13 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_6.xz = (tmpvar_60.xz - ((tmpvar_60.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_6.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize((tmpvar_60.xyz - adjCamPos_6));
  tmpvar_11 = tmpvar_61;
  mediump float tmpvar_62;
  tmpvar_62 = cos(_CamRotate);
  cost_5 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = sin(_CamRotate);
  sint_4 = tmpvar_63;
  highp mat2 tmpvar_64;
  tmpvar_64[0].x = cost_5;
  tmpvar_64[0].y = -(sint_4);
  tmpvar_64[1].x = sint_4;
  tmpvar_64[1].y = cost_5;
  tmpvar_11.xz = (tmpvar_64 * tmpvar_11.xz);
  highp vec3 tmpvar_65;
  tmpvar_65 = (_WorldSpaceCameraPos - tmpvar_60.xyz);
  tmpvar_12.xyz = tmpvar_65;
  highp vec4 tmpvar_66;
  tmpvar_66.xyz = offsetVertex_7.xyz;
  tmpvar_66.w = tmpvar_1.w;
  mediump vec3 fogParam_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = (unity_ObjectToWorld * tmpvar_66);
  highp vec2 tmpvar_69;
  tmpvar_69 = (tmpvar_68.xz - _WorldSpaceCameraPos.xz);
  highp float tmpvar_70;
  tmpvar_70 = max (0.0, (sqrt(
    dot (tmpvar_69, tmpvar_69)
  ) - _UWFogDistStart));
  highp float tmpvar_71;
  tmpvar_71 = min (max ((
    (1.0 - exp((-(
      (_UWFogDensity * tmpvar_70)
    ) * (_UWFogDensity * tmpvar_70))))
   * _UWFogEffectLimit), _UWFogEffectStart), _UWFogEffectLimit);
  highp float tmpvar_72;
  tmpvar_72 = clamp (exp((
    -((_UWFogColorNFIntensity * tmpvar_70))
   * 
    (_UWFogColorNFIntensity * tmpvar_70)
  )), 0.0, 1.0);
  fogParam_67.x = tmpvar_72;
  fogParam_67.y = tmpvar_71;
  fogParam_67.z = tmpvar_68.y;
  gl_Position = tmpvar_17;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_COLOR0 = tmpvar_2;
  xlv_COLOR1 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_3.xyz;
  xlv_TEXCOORD2 = tmpvar_11;
  xlv_TEXCOORD3 = fogParam_67;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
uniform highp vec4 _UWFogColorLow;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWHeightFogDensity;
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
uniform highp float _UWHeightRatio;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  if ((xlv_TEXCOORD3.z > _WaterPlaneHeight)) {
    finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  } else {
    mediump vec3 xlat_varinput_32;
    xlat_varinput_32 = xlv_TEXCOORD3;
    mediump vec3 fogParam_33;
    highp float tmpvar_34;
    tmpvar_34 = max (0.0, ((_WaterPlaneHeight - xlv_TEXCOORD3.z) / (_WaterPlaneHeight - _UWFogHeightEnd)));
    highp float tmpvar_35;
    tmpvar_35 = min (max ((
      (1.0 - (_UWHeightFogDensity * tmpvar_34))
     * _UWHeightFogEffectLimit), _UWHeightFogEffectStart), _UWHeightFogEffectLimit);
    highp float tmpvar_36;
    tmpvar_36 = clamp ((_UWFogColorHLIntensity * tmpvar_34), 0.0, 1.0);
    fogParam_33.z = 0.0;
    fogParam_33.y = tmpvar_35;
    fogParam_33.x = tmpvar_36;
    if ((xlv_TEXCOORD3.y > 0.99)) {
      xlat_varinput_32.y = (xlv_TEXCOORD3.y * (1.0 - (tmpvar_34 * _UWHeightRatio)));
      highp float tmpvar_37;
      tmpvar_37 = clamp (xlat_varinput_32.y, _UWCriticalRange, 1.0);
      xlat_varinput_32.y = tmpvar_37;
    };
    fogParam_33.z = (1.0 - xlat_varinput_32.y);
    mediump vec4 tmpvar_38;
    tmpvar_38.w = 0.0;
    tmpvar_38.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_39;
    tmpvar_39 = mix (mix (_UWFogColorFar, _UWFogColorNear, xlv_TEXCOORD3.xxxx), tmpvar_38, fogParam_33.zzzz).xyz;
    finalColor_2.xyz = tmpvar_39;
    mediump vec4 tmpvar_40;
    tmpvar_40.w = 0.0;
    tmpvar_40.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_41;
    tmpvar_41 = mix (mix (_UWFogColorLow, _UWFogColorHigh, fogParam_33.xxxx), tmpvar_40, fogParam_33.yyyy).xyz;
    finalColor_2.xyz = tmpvar_41;
  };
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_HEIGHT" "_UNDERWATER_FOG" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
uniform highp float _UWFogDistStart;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _glesNormal;
  highp float sint_4;
  highp float cost_5;
  highp vec3 adjCamPos_6;
  mediump vec4 offsetVertex_7;
  mediump float normalOut_8;
  highp vec4 offset_9;
  mediump vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  mediump vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  offset_9.yzw = vec3(0.0, 0.0, 0.0);
  offset_9.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_9.y = offset_9.x;
  highp float tmpvar_14;
  tmpvar_14 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_8 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = ((_glesVertex + (
    (offset_9 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_3 * normalOut_8) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_7 = tmpvar_15;
  highp vec4 pos_16;
  pos_16 = offsetVertex_7;
  highp vec4 tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = pos_16.xyz;
  tmpvar_17 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_18));
  tmpvar_10.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_10.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_22;
  mediump float fogFactor_23;
  mediump vec3 fogColor_24;
  mediump vec3 heightFogColor_25;
  highp float HeightFogFactor_26;
  mediump vec3 atomesphereFogColor_27;
  mediump float h_28;
  highp float linearFogDensity_29;
  mediump float len_30;
  highp float tmpvar_31;
  tmpvar_31 = sqrt(dot (tmpvar_21, tmpvar_21));
  len_30 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (((len_30 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_29 = (tmpvar_32 * (2.0 - tmpvar_32));
  if ((len_30 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_29 = (linearFogDensity_29 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_33;
  tmpvar_33 = min (pow (linearFogDensity_29, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_29 = tmpvar_33;
  mediump float tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((tmpvar_20.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_34 = tmpvar_35;
  h_28 = (tmpvar_34 * (2.0 - tmpvar_34));
  highp vec3 tmpvar_36;
  tmpvar_36 = (_HeigtFogColBase.xyz + (h_28 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_27 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (atomesphereFogColor_27, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_30 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_27 = tmpvar_37;
  mediump float tmpvar_38;
  mediump float r_39;
  mediump float f_40;
  mediump float u_41;
  mediump float l_42;
  mediump float fogInt_43;
  fogInt_43 = 1.0;
  highp float tmpvar_44;
  tmpvar_44 = (_HeigtFogParams.x * tmpvar_21.y);
  highp float tmpvar_45;
  tmpvar_45 = abs(tmpvar_44);
  if ((tmpvar_45 > 0.01)) {
    highp float tmpvar_46;
    tmpvar_46 = exp(-(tmpvar_44));
    fogInt_43 = ((1.0 - tmpvar_46) / tmpvar_44);
  };
  highp float tmpvar_47;
  tmpvar_47 = sqrt(dot (tmpvar_21, tmpvar_21));
  l_42 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = (l_42 * _HeigtFogParams.y);
  u_41 = tmpvar_48;
  fogInt_43 = (fogInt_43 * u_41);
  mediump float tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((l_42 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_49 = tmpvar_50;
  r_39 = (tmpvar_49 * (2.0 - tmpvar_49));
  r_39 = ((r_39 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_40 = ((1.0 - clamp (
    exp2(-(fogInt_43))
  , 0.0, 1.0)) * r_39);
  highp float tmpvar_51;
  tmpvar_51 = min (f_40, _HeigtFogColBase.w);
  tmpvar_38 = tmpvar_51;
  HeightFogFactor_26 = tmpvar_38;
  highp vec3 tmpvar_52;
  tmpvar_52 = _Mihoyo_FogColor.xyz;
  heightFogColor_25 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = ((heightFogColor_25 * HeightFogFactor_26) + ((atomesphereFogColor_27 * tmpvar_33) * (1.0 - HeightFogFactor_26)));
  fogColor_24 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = ((1.0 - tmpvar_33) * (1.0 - HeightFogFactor_26));
  fogFactor_23 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55.xyz = fogColor_24;
  tmpvar_55.w = fogFactor_23;
  tmpvar_22 = tmpvar_55;
  tmpvar_19 = tmpvar_22;
  tmpvar_12.w = 1.0;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_3.xyz;
  highp vec3 norm_57;
  norm_57 = tmpvar_56;
  highp mat3 tmpvar_58;
  tmpvar_58[0] = unity_WorldToObject[0].xyz;
  tmpvar_58[1] = unity_WorldToObject[1].xyz;
  tmpvar_58[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(normalize((norm_57 * tmpvar_58)));
  tmpvar_13 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_6.xz = (tmpvar_60.xz - ((tmpvar_60.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_6.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize((tmpvar_60.xyz - adjCamPos_6));
  tmpvar_11 = tmpvar_61;
  mediump float tmpvar_62;
  tmpvar_62 = cos(_CamRotate);
  cost_5 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = sin(_CamRotate);
  sint_4 = tmpvar_63;
  highp mat2 tmpvar_64;
  tmpvar_64[0].x = cost_5;
  tmpvar_64[0].y = -(sint_4);
  tmpvar_64[1].x = sint_4;
  tmpvar_64[1].y = cost_5;
  tmpvar_11.xz = (tmpvar_64 * tmpvar_11.xz);
  highp vec3 tmpvar_65;
  tmpvar_65 = (_WorldSpaceCameraPos - tmpvar_60.xyz);
  tmpvar_12.xyz = tmpvar_65;
  highp vec4 tmpvar_66;
  tmpvar_66.xyz = offsetVertex_7.xyz;
  tmpvar_66.w = tmpvar_1.w;
  mediump vec3 fogParam_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = (unity_ObjectToWorld * tmpvar_66);
  highp vec2 tmpvar_69;
  tmpvar_69 = (tmpvar_68.xz - _WorldSpaceCameraPos.xz);
  highp float tmpvar_70;
  tmpvar_70 = max (0.0, (sqrt(
    dot (tmpvar_69, tmpvar_69)
  ) - _UWFogDistStart));
  highp float tmpvar_71;
  tmpvar_71 = min (max ((
    (1.0 - exp((-(
      (_UWFogDensity * tmpvar_70)
    ) * (_UWFogDensity * tmpvar_70))))
   * _UWFogEffectLimit), _UWFogEffectStart), _UWFogEffectLimit);
  highp float tmpvar_72;
  tmpvar_72 = clamp (exp((
    -((_UWFogColorNFIntensity * tmpvar_70))
   * 
    (_UWFogColorNFIntensity * tmpvar_70)
  )), 0.0, 1.0);
  fogParam_67.x = tmpvar_72;
  fogParam_67.y = tmpvar_71;
  fogParam_67.z = tmpvar_68.y;
  gl_Position = tmpvar_17;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_COLOR0 = tmpvar_2;
  xlv_COLOR1 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_3.xyz;
  xlv_TEXCOORD2 = tmpvar_11;
  xlv_TEXCOORD3 = fogParam_67;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
uniform highp vec4 _UWFogColorLow;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWHeightFogDensity;
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
uniform highp float _UWHeightRatio;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  if ((xlv_TEXCOORD3.z > _WaterPlaneHeight)) {
    finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  } else {
    mediump vec3 xlat_varinput_32;
    xlat_varinput_32 = xlv_TEXCOORD3;
    mediump vec3 fogParam_33;
    highp float tmpvar_34;
    tmpvar_34 = max (0.0, ((_WaterPlaneHeight - xlv_TEXCOORD3.z) / (_WaterPlaneHeight - _UWFogHeightEnd)));
    highp float tmpvar_35;
    tmpvar_35 = min (max ((
      (1.0 - (_UWHeightFogDensity * tmpvar_34))
     * _UWHeightFogEffectLimit), _UWHeightFogEffectStart), _UWHeightFogEffectLimit);
    highp float tmpvar_36;
    tmpvar_36 = clamp ((_UWFogColorHLIntensity * tmpvar_34), 0.0, 1.0);
    fogParam_33.z = 0.0;
    fogParam_33.y = tmpvar_35;
    fogParam_33.x = tmpvar_36;
    if ((xlv_TEXCOORD3.y > 0.99)) {
      xlat_varinput_32.y = (xlv_TEXCOORD3.y * (1.0 - (tmpvar_34 * _UWHeightRatio)));
      highp float tmpvar_37;
      tmpvar_37 = clamp (xlat_varinput_32.y, _UWCriticalRange, 1.0);
      xlat_varinput_32.y = tmpvar_37;
    };
    fogParam_33.z = (1.0 - xlat_varinput_32.y);
    mediump vec4 tmpvar_38;
    tmpvar_38.w = 0.0;
    tmpvar_38.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_39;
    tmpvar_39 = mix (mix (_UWFogColorFar, _UWFogColorNear, xlv_TEXCOORD3.xxxx), tmpvar_38, fogParam_33.zzzz).xyz;
    finalColor_2.xyz = tmpvar_39;
    mediump vec4 tmpvar_40;
    tmpvar_40.w = 0.0;
    tmpvar_40.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_41;
    tmpvar_41 = mix (mix (_UWFogColorLow, _UWFogColorHigh, fogParam_33.xxxx), tmpvar_40, fogParam_33.yyyy).xyz;
    finalColor_2.xyz = tmpvar_41;
  };
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "_UNDERWATER_FOG" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
uniform highp float _UWFogDistStart;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _glesNormal;
  highp float sint_4;
  highp float cost_5;
  highp vec3 adjCamPos_6;
  mediump vec4 offsetVertex_7;
  mediump float normalOut_8;
  highp vec4 offset_9;
  mediump vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  mediump vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  offset_9.yzw = vec3(0.0, 0.0, 0.0);
  offset_9.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_9.y = offset_9.x;
  highp float tmpvar_14;
  tmpvar_14 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_8 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = ((_glesVertex + (
    (offset_9 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_3 * normalOut_8) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_7 = tmpvar_15;
  highp vec4 pos_16;
  pos_16 = offsetVertex_7;
  highp vec4 tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = pos_16.xyz;
  tmpvar_17 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_18));
  tmpvar_10.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_10.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_22;
  mediump float fogFactor_23;
  mediump vec3 fogColor_24;
  mediump vec3 heightFogColor_25;
  highp float HeightFogFactor_26;
  mediump vec3 atomesphereFogColor_27;
  mediump float h_28;
  highp float linearFogDensity_29;
  mediump float len_30;
  highp float tmpvar_31;
  tmpvar_31 = sqrt(dot (tmpvar_21, tmpvar_21));
  len_30 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (((len_30 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_29 = (tmpvar_32 * (2.0 - tmpvar_32));
  if ((len_30 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_29 = (linearFogDensity_29 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_33;
  tmpvar_33 = min (pow (linearFogDensity_29, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_29 = tmpvar_33;
  mediump float tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((tmpvar_20.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_34 = tmpvar_35;
  h_28 = (tmpvar_34 * (2.0 - tmpvar_34));
  highp vec3 tmpvar_36;
  tmpvar_36 = (_HeigtFogColBase2.xyz + (h_28 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_27 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (atomesphereFogColor_27, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_30 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_27 = tmpvar_37;
  mediump float tmpvar_38;
  mediump float r_39;
  mediump float f_40;
  mediump float u_41;
  mediump float l_42;
  mediump float fogInt_43;
  fogInt_43 = 1.0;
  highp float tmpvar_44;
  tmpvar_44 = (_HeigtFogParams2.x * tmpvar_21.y);
  highp float tmpvar_45;
  tmpvar_45 = abs(tmpvar_44);
  if ((tmpvar_45 > 0.01)) {
    highp float tmpvar_46;
    tmpvar_46 = exp(-(tmpvar_44));
    fogInt_43 = ((1.0 - tmpvar_46) / tmpvar_44);
  };
  highp float tmpvar_47;
  tmpvar_47 = sqrt(dot (tmpvar_21, tmpvar_21));
  l_42 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = (l_42 * _HeigtFogParams2.y);
  u_41 = tmpvar_48;
  fogInt_43 = (fogInt_43 * u_41);
  mediump float tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((l_42 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_49 = tmpvar_50;
  r_39 = (tmpvar_49 * (2.0 - tmpvar_49));
  r_39 = ((r_39 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_40 = ((1.0 - clamp (
    exp2(-(fogInt_43))
  , 0.0, 1.0)) * r_39);
  highp float tmpvar_51;
  tmpvar_51 = min (f_40, _HeigtFogColBase2.w);
  tmpvar_38 = tmpvar_51;
  HeightFogFactor_26 = tmpvar_38;
  highp vec3 tmpvar_52;
  tmpvar_52 = _Mihoyo_FogColor2.xyz;
  heightFogColor_25 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = ((heightFogColor_25 * HeightFogFactor_26) + ((atomesphereFogColor_27 * tmpvar_33) * (1.0 - HeightFogFactor_26)));
  fogColor_24 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = ((1.0 - tmpvar_33) * (1.0 - HeightFogFactor_26));
  fogFactor_23 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55.xyz = fogColor_24;
  tmpvar_55.w = fogFactor_23;
  tmpvar_22 = tmpvar_55;
  highp vec4 tmpvar_56;
  mediump float fogFactor_57;
  mediump vec3 fogColor_58;
  mediump vec3 heightFogColor_59;
  highp float HeightFogFactor_60;
  mediump vec3 atomesphereFogColor_61;
  mediump float h_62;
  highp float linearFogDensity_63;
  mediump float len_64;
  highp float tmpvar_65;
  tmpvar_65 = sqrt(dot (tmpvar_21, tmpvar_21));
  len_64 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = clamp (((len_64 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_63 = (tmpvar_66 * (2.0 - tmpvar_66));
  if ((len_64 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_63 = (linearFogDensity_63 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_67;
  tmpvar_67 = min (pow (linearFogDensity_63, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_63 = tmpvar_67;
  mediump float tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((tmpvar_20.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_68 = tmpvar_69;
  h_62 = (tmpvar_68 * (2.0 - tmpvar_68));
  highp vec3 tmpvar_70;
  tmpvar_70 = (_HeigtFogColBase3.xyz + (h_62 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_61 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = mix (atomesphereFogColor_61, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_64 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_61 = tmpvar_71;
  mediump float tmpvar_72;
  mediump float r_73;
  mediump float f_74;
  mediump float u_75;
  mediump float l_76;
  mediump float fogInt_77;
  fogInt_77 = 1.0;
  highp float tmpvar_78;
  tmpvar_78 = (_HeigtFogParams3.x * tmpvar_21.y);
  highp float tmpvar_79;
  tmpvar_79 = abs(tmpvar_78);
  if ((tmpvar_79 > 0.01)) {
    highp float tmpvar_80;
    tmpvar_80 = exp(-(tmpvar_78));
    fogInt_77 = ((1.0 - tmpvar_80) / tmpvar_78);
  };
  highp float tmpvar_81;
  tmpvar_81 = sqrt(dot (tmpvar_21, tmpvar_21));
  l_76 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (l_76 * _HeigtFogParams3.y);
  u_75 = tmpvar_82;
  fogInt_77 = (fogInt_77 * u_75);
  mediump float tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = clamp (((l_76 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_83 = tmpvar_84;
  r_73 = (tmpvar_83 * (2.0 - tmpvar_83));
  r_73 = ((r_73 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_74 = ((1.0 - clamp (
    exp2(-(fogInt_77))
  , 0.0, 1.0)) * r_73);
  highp float tmpvar_85;
  tmpvar_85 = min (f_74, _HeigtFogColBase3.w);
  tmpvar_72 = tmpvar_85;
  HeightFogFactor_60 = tmpvar_72;
  highp vec3 tmpvar_86;
  tmpvar_86 = _Mihoyo_FogColor3.xyz;
  heightFogColor_59 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = ((heightFogColor_59 * HeightFogFactor_60) + ((atomesphereFogColor_61 * tmpvar_67) * (1.0 - HeightFogFactor_60)));
  fogColor_58 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = ((1.0 - tmpvar_67) * (1.0 - HeightFogFactor_60));
  fogFactor_57 = tmpvar_88;
  mediump vec4 tmpvar_89;
  tmpvar_89.xyz = fogColor_58;
  tmpvar_89.w = fogFactor_57;
  tmpvar_56 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (tmpvar_22, tmpvar_56, vec4(_LerpFactor));
  tmpvar_19 = tmpvar_90;
  tmpvar_12.w = 1.0;
  mediump vec3 tmpvar_91;
  tmpvar_91 = tmpvar_3.xyz;
  highp vec3 norm_92;
  norm_92 = tmpvar_91;
  highp mat3 tmpvar_93;
  tmpvar_93[0] = unity_WorldToObject[0].xyz;
  tmpvar_93[1] = unity_WorldToObject[1].xyz;
  tmpvar_93[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_94;
  tmpvar_94 = normalize(normalize((norm_92 * tmpvar_93)));
  tmpvar_13 = tmpvar_94;
  highp vec4 tmpvar_95;
  tmpvar_95 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_6.xz = (tmpvar_95.xz - ((tmpvar_95.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_6.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_96;
  tmpvar_96 = normalize((tmpvar_95.xyz - adjCamPos_6));
  tmpvar_11 = tmpvar_96;
  mediump float tmpvar_97;
  tmpvar_97 = cos(_CamRotate);
  cost_5 = tmpvar_97;
  mediump float tmpvar_98;
  tmpvar_98 = sin(_CamRotate);
  sint_4 = tmpvar_98;
  highp mat2 tmpvar_99;
  tmpvar_99[0].x = cost_5;
  tmpvar_99[0].y = -(sint_4);
  tmpvar_99[1].x = sint_4;
  tmpvar_99[1].y = cost_5;
  tmpvar_11.xz = (tmpvar_99 * tmpvar_11.xz);
  highp vec3 tmpvar_100;
  tmpvar_100 = (_WorldSpaceCameraPos - tmpvar_95.xyz);
  tmpvar_12.xyz = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101.xyz = offsetVertex_7.xyz;
  tmpvar_101.w = tmpvar_1.w;
  mediump vec3 fogParam_102;
  highp vec4 tmpvar_103;
  tmpvar_103 = (unity_ObjectToWorld * tmpvar_101);
  highp vec2 tmpvar_104;
  tmpvar_104 = (tmpvar_103.xz - _WorldSpaceCameraPos.xz);
  highp float tmpvar_105;
  tmpvar_105 = max (0.0, (sqrt(
    dot (tmpvar_104, tmpvar_104)
  ) - _UWFogDistStart));
  highp float tmpvar_106;
  tmpvar_106 = min (max ((
    (1.0 - exp((-(
      (_UWFogDensity * tmpvar_105)
    ) * (_UWFogDensity * tmpvar_105))))
   * _UWFogEffectLimit), _UWFogEffectStart), _UWFogEffectLimit);
  highp float tmpvar_107;
  tmpvar_107 = clamp (exp((
    -((_UWFogColorNFIntensity * tmpvar_105))
   * 
    (_UWFogColorNFIntensity * tmpvar_105)
  )), 0.0, 1.0);
  fogParam_102.x = tmpvar_107;
  fogParam_102.y = tmpvar_106;
  fogParam_102.z = tmpvar_103.y;
  gl_Position = tmpvar_17;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_COLOR0 = tmpvar_2;
  xlv_COLOR1 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_3.xyz;
  xlv_TEXCOORD2 = tmpvar_11;
  xlv_TEXCOORD3 = fogParam_102;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
uniform highp vec4 _UWFogColorLow;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWHeightFogDensity;
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
uniform highp float _UWHeightRatio;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  if ((xlv_TEXCOORD3.z > _WaterPlaneHeight)) {
    finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  } else {
    mediump vec3 xlat_varinput_32;
    xlat_varinput_32 = xlv_TEXCOORD3;
    mediump vec3 fogParam_33;
    highp float tmpvar_34;
    tmpvar_34 = max (0.0, ((_WaterPlaneHeight - xlv_TEXCOORD3.z) / (_WaterPlaneHeight - _UWFogHeightEnd)));
    highp float tmpvar_35;
    tmpvar_35 = min (max ((
      (1.0 - (_UWHeightFogDensity * tmpvar_34))
     * _UWHeightFogEffectLimit), _UWHeightFogEffectStart), _UWHeightFogEffectLimit);
    highp float tmpvar_36;
    tmpvar_36 = clamp ((_UWFogColorHLIntensity * tmpvar_34), 0.0, 1.0);
    fogParam_33.z = 0.0;
    fogParam_33.y = tmpvar_35;
    fogParam_33.x = tmpvar_36;
    if ((xlv_TEXCOORD3.y > 0.99)) {
      xlat_varinput_32.y = (xlv_TEXCOORD3.y * (1.0 - (tmpvar_34 * _UWHeightRatio)));
      highp float tmpvar_37;
      tmpvar_37 = clamp (xlat_varinput_32.y, _UWCriticalRange, 1.0);
      xlat_varinput_32.y = tmpvar_37;
    };
    fogParam_33.z = (1.0 - xlat_varinput_32.y);
    mediump vec4 tmpvar_38;
    tmpvar_38.w = 0.0;
    tmpvar_38.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_39;
    tmpvar_39 = mix (mix (_UWFogColorFar, _UWFogColorNear, xlv_TEXCOORD3.xxxx), tmpvar_38, fogParam_33.zzzz).xyz;
    finalColor_2.xyz = tmpvar_39;
    mediump vec4 tmpvar_40;
    tmpvar_40.w = 0.0;
    tmpvar_40.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_41;
    tmpvar_41 = mix (mix (_UWFogColorLow, _UWFogColorHigh, fogParam_33.xxxx), tmpvar_40, fogParam_33.yyyy).xyz;
    finalColor_2.xyz = tmpvar_41;
  };
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "_UNDERWATER_FOG" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
uniform highp float _UWFogDistStart;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _glesNormal;
  highp float sint_4;
  highp float cost_5;
  highp vec3 adjCamPos_6;
  mediump vec4 offsetVertex_7;
  mediump float normalOut_8;
  highp vec4 offset_9;
  mediump vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  mediump vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  offset_9.yzw = vec3(0.0, 0.0, 0.0);
  offset_9.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_9.y = offset_9.x;
  highp float tmpvar_14;
  tmpvar_14 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_8 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = ((_glesVertex + (
    (offset_9 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_3 * normalOut_8) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_7 = tmpvar_15;
  highp vec4 pos_16;
  pos_16 = offsetVertex_7;
  highp vec4 tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = pos_16.xyz;
  tmpvar_17 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_18));
  tmpvar_10.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_10.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_22;
  mediump float fogFactor_23;
  mediump vec3 fogColor_24;
  mediump vec3 heightFogColor_25;
  highp float HeightFogFactor_26;
  mediump vec3 atomesphereFogColor_27;
  mediump float h_28;
  highp float linearFogDensity_29;
  mediump float len_30;
  highp float tmpvar_31;
  tmpvar_31 = sqrt(dot (tmpvar_21, tmpvar_21));
  len_30 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (((len_30 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_29 = (tmpvar_32 * (2.0 - tmpvar_32));
  if ((len_30 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_29 = (linearFogDensity_29 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_33;
  tmpvar_33 = min (pow (linearFogDensity_29, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_29 = tmpvar_33;
  mediump float tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((tmpvar_20.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_34 = tmpvar_35;
  h_28 = (tmpvar_34 * (2.0 - tmpvar_34));
  highp vec3 tmpvar_36;
  tmpvar_36 = (_HeigtFogColBase2.xyz + (h_28 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_27 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (atomesphereFogColor_27, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_30 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_27 = tmpvar_37;
  mediump float tmpvar_38;
  mediump float r_39;
  mediump float f_40;
  mediump float u_41;
  mediump float l_42;
  mediump float fogInt_43;
  fogInt_43 = 1.0;
  highp float tmpvar_44;
  tmpvar_44 = (_HeigtFogParams2.x * tmpvar_21.y);
  highp float tmpvar_45;
  tmpvar_45 = abs(tmpvar_44);
  if ((tmpvar_45 > 0.01)) {
    highp float tmpvar_46;
    tmpvar_46 = exp(-(tmpvar_44));
    fogInt_43 = ((1.0 - tmpvar_46) / tmpvar_44);
  };
  highp float tmpvar_47;
  tmpvar_47 = sqrt(dot (tmpvar_21, tmpvar_21));
  l_42 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = (l_42 * _HeigtFogParams2.y);
  u_41 = tmpvar_48;
  fogInt_43 = (fogInt_43 * u_41);
  mediump float tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((l_42 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_49 = tmpvar_50;
  r_39 = (tmpvar_49 * (2.0 - tmpvar_49));
  r_39 = ((r_39 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_40 = ((1.0 - clamp (
    exp2(-(fogInt_43))
  , 0.0, 1.0)) * r_39);
  highp float tmpvar_51;
  tmpvar_51 = min (f_40, _HeigtFogColBase2.w);
  tmpvar_38 = tmpvar_51;
  HeightFogFactor_26 = tmpvar_38;
  highp vec3 tmpvar_52;
  tmpvar_52 = _Mihoyo_FogColor2.xyz;
  heightFogColor_25 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = ((heightFogColor_25 * HeightFogFactor_26) + ((atomesphereFogColor_27 * tmpvar_33) * (1.0 - HeightFogFactor_26)));
  fogColor_24 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = ((1.0 - tmpvar_33) * (1.0 - HeightFogFactor_26));
  fogFactor_23 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55.xyz = fogColor_24;
  tmpvar_55.w = fogFactor_23;
  tmpvar_22 = tmpvar_55;
  highp vec4 tmpvar_56;
  mediump float fogFactor_57;
  mediump vec3 fogColor_58;
  mediump vec3 heightFogColor_59;
  highp float HeightFogFactor_60;
  mediump vec3 atomesphereFogColor_61;
  mediump float h_62;
  highp float linearFogDensity_63;
  mediump float len_64;
  highp float tmpvar_65;
  tmpvar_65 = sqrt(dot (tmpvar_21, tmpvar_21));
  len_64 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = clamp (((len_64 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_63 = (tmpvar_66 * (2.0 - tmpvar_66));
  if ((len_64 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_63 = (linearFogDensity_63 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_67;
  tmpvar_67 = min (pow (linearFogDensity_63, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_63 = tmpvar_67;
  mediump float tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((tmpvar_20.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_68 = tmpvar_69;
  h_62 = (tmpvar_68 * (2.0 - tmpvar_68));
  highp vec3 tmpvar_70;
  tmpvar_70 = (_HeigtFogColBase3.xyz + (h_62 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_61 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = mix (atomesphereFogColor_61, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_64 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_61 = tmpvar_71;
  mediump float tmpvar_72;
  mediump float r_73;
  mediump float f_74;
  mediump float u_75;
  mediump float l_76;
  mediump float fogInt_77;
  fogInt_77 = 1.0;
  highp float tmpvar_78;
  tmpvar_78 = (_HeigtFogParams3.x * tmpvar_21.y);
  highp float tmpvar_79;
  tmpvar_79 = abs(tmpvar_78);
  if ((tmpvar_79 > 0.01)) {
    highp float tmpvar_80;
    tmpvar_80 = exp(-(tmpvar_78));
    fogInt_77 = ((1.0 - tmpvar_80) / tmpvar_78);
  };
  highp float tmpvar_81;
  tmpvar_81 = sqrt(dot (tmpvar_21, tmpvar_21));
  l_76 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (l_76 * _HeigtFogParams3.y);
  u_75 = tmpvar_82;
  fogInt_77 = (fogInt_77 * u_75);
  mediump float tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = clamp (((l_76 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_83 = tmpvar_84;
  r_73 = (tmpvar_83 * (2.0 - tmpvar_83));
  r_73 = ((r_73 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_74 = ((1.0 - clamp (
    exp2(-(fogInt_77))
  , 0.0, 1.0)) * r_73);
  highp float tmpvar_85;
  tmpvar_85 = min (f_74, _HeigtFogColBase3.w);
  tmpvar_72 = tmpvar_85;
  HeightFogFactor_60 = tmpvar_72;
  highp vec3 tmpvar_86;
  tmpvar_86 = _Mihoyo_FogColor3.xyz;
  heightFogColor_59 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = ((heightFogColor_59 * HeightFogFactor_60) + ((atomesphereFogColor_61 * tmpvar_67) * (1.0 - HeightFogFactor_60)));
  fogColor_58 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = ((1.0 - tmpvar_67) * (1.0 - HeightFogFactor_60));
  fogFactor_57 = tmpvar_88;
  mediump vec4 tmpvar_89;
  tmpvar_89.xyz = fogColor_58;
  tmpvar_89.w = fogFactor_57;
  tmpvar_56 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (tmpvar_22, tmpvar_56, vec4(_LerpFactor));
  tmpvar_19 = tmpvar_90;
  tmpvar_12.w = 1.0;
  mediump vec3 tmpvar_91;
  tmpvar_91 = tmpvar_3.xyz;
  highp vec3 norm_92;
  norm_92 = tmpvar_91;
  highp mat3 tmpvar_93;
  tmpvar_93[0] = unity_WorldToObject[0].xyz;
  tmpvar_93[1] = unity_WorldToObject[1].xyz;
  tmpvar_93[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_94;
  tmpvar_94 = normalize(normalize((norm_92 * tmpvar_93)));
  tmpvar_13 = tmpvar_94;
  highp vec4 tmpvar_95;
  tmpvar_95 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_6.xz = (tmpvar_95.xz - ((tmpvar_95.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_6.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_96;
  tmpvar_96 = normalize((tmpvar_95.xyz - adjCamPos_6));
  tmpvar_11 = tmpvar_96;
  mediump float tmpvar_97;
  tmpvar_97 = cos(_CamRotate);
  cost_5 = tmpvar_97;
  mediump float tmpvar_98;
  tmpvar_98 = sin(_CamRotate);
  sint_4 = tmpvar_98;
  highp mat2 tmpvar_99;
  tmpvar_99[0].x = cost_5;
  tmpvar_99[0].y = -(sint_4);
  tmpvar_99[1].x = sint_4;
  tmpvar_99[1].y = cost_5;
  tmpvar_11.xz = (tmpvar_99 * tmpvar_11.xz);
  highp vec3 tmpvar_100;
  tmpvar_100 = (_WorldSpaceCameraPos - tmpvar_95.xyz);
  tmpvar_12.xyz = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101.xyz = offsetVertex_7.xyz;
  tmpvar_101.w = tmpvar_1.w;
  mediump vec3 fogParam_102;
  highp vec4 tmpvar_103;
  tmpvar_103 = (unity_ObjectToWorld * tmpvar_101);
  highp vec2 tmpvar_104;
  tmpvar_104 = (tmpvar_103.xz - _WorldSpaceCameraPos.xz);
  highp float tmpvar_105;
  tmpvar_105 = max (0.0, (sqrt(
    dot (tmpvar_104, tmpvar_104)
  ) - _UWFogDistStart));
  highp float tmpvar_106;
  tmpvar_106 = min (max ((
    (1.0 - exp((-(
      (_UWFogDensity * tmpvar_105)
    ) * (_UWFogDensity * tmpvar_105))))
   * _UWFogEffectLimit), _UWFogEffectStart), _UWFogEffectLimit);
  highp float tmpvar_107;
  tmpvar_107 = clamp (exp((
    -((_UWFogColorNFIntensity * tmpvar_105))
   * 
    (_UWFogColorNFIntensity * tmpvar_105)
  )), 0.0, 1.0);
  fogParam_102.x = tmpvar_107;
  fogParam_102.y = tmpvar_106;
  fogParam_102.z = tmpvar_103.y;
  gl_Position = tmpvar_17;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_COLOR0 = tmpvar_2;
  xlv_COLOR1 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_3.xyz;
  xlv_TEXCOORD2 = tmpvar_11;
  xlv_TEXCOORD3 = fogParam_102;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
uniform highp vec4 _UWFogColorLow;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWHeightFogDensity;
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
uniform highp float _UWHeightRatio;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  if ((xlv_TEXCOORD3.z > _WaterPlaneHeight)) {
    finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  } else {
    mediump vec3 xlat_varinput_32;
    xlat_varinput_32 = xlv_TEXCOORD3;
    mediump vec3 fogParam_33;
    highp float tmpvar_34;
    tmpvar_34 = max (0.0, ((_WaterPlaneHeight - xlv_TEXCOORD3.z) / (_WaterPlaneHeight - _UWFogHeightEnd)));
    highp float tmpvar_35;
    tmpvar_35 = min (max ((
      (1.0 - (_UWHeightFogDensity * tmpvar_34))
     * _UWHeightFogEffectLimit), _UWHeightFogEffectStart), _UWHeightFogEffectLimit);
    highp float tmpvar_36;
    tmpvar_36 = clamp ((_UWFogColorHLIntensity * tmpvar_34), 0.0, 1.0);
    fogParam_33.z = 0.0;
    fogParam_33.y = tmpvar_35;
    fogParam_33.x = tmpvar_36;
    if ((xlv_TEXCOORD3.y > 0.99)) {
      xlat_varinput_32.y = (xlv_TEXCOORD3.y * (1.0 - (tmpvar_34 * _UWHeightRatio)));
      highp float tmpvar_37;
      tmpvar_37 = clamp (xlat_varinput_32.y, _UWCriticalRange, 1.0);
      xlat_varinput_32.y = tmpvar_37;
    };
    fogParam_33.z = (1.0 - xlat_varinput_32.y);
    mediump vec4 tmpvar_38;
    tmpvar_38.w = 0.0;
    tmpvar_38.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_39;
    tmpvar_39 = mix (mix (_UWFogColorFar, _UWFogColorNear, xlv_TEXCOORD3.xxxx), tmpvar_38, fogParam_33.zzzz).xyz;
    finalColor_2.xyz = tmpvar_39;
    mediump vec4 tmpvar_40;
    tmpvar_40.w = 0.0;
    tmpvar_40.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_41;
    tmpvar_41 = mix (mix (_UWFogColorLow, _UWFogColorHigh, fogParam_33.xxxx), tmpvar_40, fogParam_33.yyyy).xyz;
    finalColor_2.xyz = tmpvar_41;
  };
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "_UNDERWATER_FOG" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
uniform highp float _UWFogDistStart;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _glesNormal;
  highp float sint_4;
  highp float cost_5;
  highp vec3 adjCamPos_6;
  mediump vec4 offsetVertex_7;
  mediump float normalOut_8;
  highp vec4 offset_9;
  mediump vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  mediump vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  offset_9.yzw = vec3(0.0, 0.0, 0.0);
  offset_9.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_9.y = offset_9.x;
  highp float tmpvar_14;
  tmpvar_14 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_8 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = ((_glesVertex + (
    (offset_9 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_3 * normalOut_8) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_7 = tmpvar_15;
  highp vec4 pos_16;
  pos_16 = offsetVertex_7;
  highp vec4 tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = pos_16.xyz;
  tmpvar_17 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_18));
  tmpvar_10.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_10.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_22;
  mediump float fogFactor_23;
  mediump vec3 fogColor_24;
  mediump vec3 heightFogColor_25;
  highp float HeightFogFactor_26;
  mediump vec3 atomesphereFogColor_27;
  mediump float h_28;
  highp float linearFogDensity_29;
  mediump float len_30;
  highp float tmpvar_31;
  tmpvar_31 = sqrt(dot (tmpvar_21, tmpvar_21));
  len_30 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (((len_30 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_29 = (tmpvar_32 * (2.0 - tmpvar_32));
  if ((len_30 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_29 = (linearFogDensity_29 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_33;
  tmpvar_33 = min (pow (linearFogDensity_29, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_29 = tmpvar_33;
  mediump float tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((tmpvar_20.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_34 = tmpvar_35;
  h_28 = (tmpvar_34 * (2.0 - tmpvar_34));
  highp vec3 tmpvar_36;
  tmpvar_36 = (_HeigtFogColBase2.xyz + (h_28 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_27 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (atomesphereFogColor_27, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_30 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_27 = tmpvar_37;
  mediump float tmpvar_38;
  mediump float r_39;
  mediump float f_40;
  mediump float u_41;
  mediump float l_42;
  mediump float fogInt_43;
  fogInt_43 = 1.0;
  highp float tmpvar_44;
  tmpvar_44 = (_HeigtFogParams2.x * tmpvar_21.y);
  highp float tmpvar_45;
  tmpvar_45 = abs(tmpvar_44);
  if ((tmpvar_45 > 0.01)) {
    highp float tmpvar_46;
    tmpvar_46 = exp(-(tmpvar_44));
    fogInt_43 = ((1.0 - tmpvar_46) / tmpvar_44);
  };
  highp float tmpvar_47;
  tmpvar_47 = sqrt(dot (tmpvar_21, tmpvar_21));
  l_42 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = (l_42 * _HeigtFogParams2.y);
  u_41 = tmpvar_48;
  fogInt_43 = (fogInt_43 * u_41);
  mediump float tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((l_42 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_49 = tmpvar_50;
  r_39 = (tmpvar_49 * (2.0 - tmpvar_49));
  r_39 = ((r_39 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_40 = ((1.0 - clamp (
    exp2(-(fogInt_43))
  , 0.0, 1.0)) * r_39);
  highp float tmpvar_51;
  tmpvar_51 = min (f_40, _HeigtFogColBase2.w);
  tmpvar_38 = tmpvar_51;
  HeightFogFactor_26 = tmpvar_38;
  highp vec3 tmpvar_52;
  tmpvar_52 = _Mihoyo_FogColor2.xyz;
  heightFogColor_25 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = ((heightFogColor_25 * HeightFogFactor_26) + ((atomesphereFogColor_27 * tmpvar_33) * (1.0 - HeightFogFactor_26)));
  fogColor_24 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = ((1.0 - tmpvar_33) * (1.0 - HeightFogFactor_26));
  fogFactor_23 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55.xyz = fogColor_24;
  tmpvar_55.w = fogFactor_23;
  tmpvar_22 = tmpvar_55;
  highp vec4 tmpvar_56;
  mediump float fogFactor_57;
  mediump vec3 fogColor_58;
  mediump vec3 heightFogColor_59;
  highp float HeightFogFactor_60;
  mediump vec3 atomesphereFogColor_61;
  mediump float h_62;
  highp float linearFogDensity_63;
  mediump float len_64;
  highp float tmpvar_65;
  tmpvar_65 = sqrt(dot (tmpvar_21, tmpvar_21));
  len_64 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = clamp (((len_64 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_63 = (tmpvar_66 * (2.0 - tmpvar_66));
  if ((len_64 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_63 = (linearFogDensity_63 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_67;
  tmpvar_67 = min (pow (linearFogDensity_63, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_63 = tmpvar_67;
  mediump float tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((tmpvar_20.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_68 = tmpvar_69;
  h_62 = (tmpvar_68 * (2.0 - tmpvar_68));
  highp vec3 tmpvar_70;
  tmpvar_70 = (_HeigtFogColBase3.xyz + (h_62 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_61 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = mix (atomesphereFogColor_61, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_64 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_61 = tmpvar_71;
  mediump float tmpvar_72;
  mediump float r_73;
  mediump float f_74;
  mediump float u_75;
  mediump float l_76;
  mediump float fogInt_77;
  fogInt_77 = 1.0;
  highp float tmpvar_78;
  tmpvar_78 = (_HeigtFogParams3.x * tmpvar_21.y);
  highp float tmpvar_79;
  tmpvar_79 = abs(tmpvar_78);
  if ((tmpvar_79 > 0.01)) {
    highp float tmpvar_80;
    tmpvar_80 = exp(-(tmpvar_78));
    fogInt_77 = ((1.0 - tmpvar_80) / tmpvar_78);
  };
  highp float tmpvar_81;
  tmpvar_81 = sqrt(dot (tmpvar_21, tmpvar_21));
  l_76 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (l_76 * _HeigtFogParams3.y);
  u_75 = tmpvar_82;
  fogInt_77 = (fogInt_77 * u_75);
  mediump float tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = clamp (((l_76 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_83 = tmpvar_84;
  r_73 = (tmpvar_83 * (2.0 - tmpvar_83));
  r_73 = ((r_73 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_74 = ((1.0 - clamp (
    exp2(-(fogInt_77))
  , 0.0, 1.0)) * r_73);
  highp float tmpvar_85;
  tmpvar_85 = min (f_74, _HeigtFogColBase3.w);
  tmpvar_72 = tmpvar_85;
  HeightFogFactor_60 = tmpvar_72;
  highp vec3 tmpvar_86;
  tmpvar_86 = _Mihoyo_FogColor3.xyz;
  heightFogColor_59 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = ((heightFogColor_59 * HeightFogFactor_60) + ((atomesphereFogColor_61 * tmpvar_67) * (1.0 - HeightFogFactor_60)));
  fogColor_58 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = ((1.0 - tmpvar_67) * (1.0 - HeightFogFactor_60));
  fogFactor_57 = tmpvar_88;
  mediump vec4 tmpvar_89;
  tmpvar_89.xyz = fogColor_58;
  tmpvar_89.w = fogFactor_57;
  tmpvar_56 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (tmpvar_22, tmpvar_56, vec4(_LerpFactor));
  tmpvar_19 = tmpvar_90;
  tmpvar_12.w = 1.0;
  mediump vec3 tmpvar_91;
  tmpvar_91 = tmpvar_3.xyz;
  highp vec3 norm_92;
  norm_92 = tmpvar_91;
  highp mat3 tmpvar_93;
  tmpvar_93[0] = unity_WorldToObject[0].xyz;
  tmpvar_93[1] = unity_WorldToObject[1].xyz;
  tmpvar_93[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_94;
  tmpvar_94 = normalize(normalize((norm_92 * tmpvar_93)));
  tmpvar_13 = tmpvar_94;
  highp vec4 tmpvar_95;
  tmpvar_95 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_6.xz = (tmpvar_95.xz - ((tmpvar_95.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_6.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_96;
  tmpvar_96 = normalize((tmpvar_95.xyz - adjCamPos_6));
  tmpvar_11 = tmpvar_96;
  mediump float tmpvar_97;
  tmpvar_97 = cos(_CamRotate);
  cost_5 = tmpvar_97;
  mediump float tmpvar_98;
  tmpvar_98 = sin(_CamRotate);
  sint_4 = tmpvar_98;
  highp mat2 tmpvar_99;
  tmpvar_99[0].x = cost_5;
  tmpvar_99[0].y = -(sint_4);
  tmpvar_99[1].x = sint_4;
  tmpvar_99[1].y = cost_5;
  tmpvar_11.xz = (tmpvar_99 * tmpvar_11.xz);
  highp vec3 tmpvar_100;
  tmpvar_100 = (_WorldSpaceCameraPos - tmpvar_95.xyz);
  tmpvar_12.xyz = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101.xyz = offsetVertex_7.xyz;
  tmpvar_101.w = tmpvar_1.w;
  mediump vec3 fogParam_102;
  highp vec4 tmpvar_103;
  tmpvar_103 = (unity_ObjectToWorld * tmpvar_101);
  highp vec2 tmpvar_104;
  tmpvar_104 = (tmpvar_103.xz - _WorldSpaceCameraPos.xz);
  highp float tmpvar_105;
  tmpvar_105 = max (0.0, (sqrt(
    dot (tmpvar_104, tmpvar_104)
  ) - _UWFogDistStart));
  highp float tmpvar_106;
  tmpvar_106 = min (max ((
    (1.0 - exp((-(
      (_UWFogDensity * tmpvar_105)
    ) * (_UWFogDensity * tmpvar_105))))
   * _UWFogEffectLimit), _UWFogEffectStart), _UWFogEffectLimit);
  highp float tmpvar_107;
  tmpvar_107 = clamp (exp((
    -((_UWFogColorNFIntensity * tmpvar_105))
   * 
    (_UWFogColorNFIntensity * tmpvar_105)
  )), 0.0, 1.0);
  fogParam_102.x = tmpvar_107;
  fogParam_102.y = tmpvar_106;
  fogParam_102.z = tmpvar_103.y;
  gl_Position = tmpvar_17;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_COLOR0 = tmpvar_2;
  xlv_COLOR1 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_3.xyz;
  xlv_TEXCOORD2 = tmpvar_11;
  xlv_TEXCOORD3 = fogParam_102;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
uniform highp vec4 _UWFogColorLow;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWHeightFogDensity;
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
uniform highp float _UWHeightRatio;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  if ((xlv_TEXCOORD3.z > _WaterPlaneHeight)) {
    finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  } else {
    mediump vec3 xlat_varinput_32;
    xlat_varinput_32 = xlv_TEXCOORD3;
    mediump vec3 fogParam_33;
    highp float tmpvar_34;
    tmpvar_34 = max (0.0, ((_WaterPlaneHeight - xlv_TEXCOORD3.z) / (_WaterPlaneHeight - _UWFogHeightEnd)));
    highp float tmpvar_35;
    tmpvar_35 = min (max ((
      (1.0 - (_UWHeightFogDensity * tmpvar_34))
     * _UWHeightFogEffectLimit), _UWHeightFogEffectStart), _UWHeightFogEffectLimit);
    highp float tmpvar_36;
    tmpvar_36 = clamp ((_UWFogColorHLIntensity * tmpvar_34), 0.0, 1.0);
    fogParam_33.z = 0.0;
    fogParam_33.y = tmpvar_35;
    fogParam_33.x = tmpvar_36;
    if ((xlv_TEXCOORD3.y > 0.99)) {
      xlat_varinput_32.y = (xlv_TEXCOORD3.y * (1.0 - (tmpvar_34 * _UWHeightRatio)));
      highp float tmpvar_37;
      tmpvar_37 = clamp (xlat_varinput_32.y, _UWCriticalRange, 1.0);
      xlat_varinput_32.y = tmpvar_37;
    };
    fogParam_33.z = (1.0 - xlat_varinput_32.y);
    mediump vec4 tmpvar_38;
    tmpvar_38.w = 0.0;
    tmpvar_38.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_39;
    tmpvar_39 = mix (mix (_UWFogColorFar, _UWFogColorNear, xlv_TEXCOORD3.xxxx), tmpvar_38, fogParam_33.zzzz).xyz;
    finalColor_2.xyz = tmpvar_39;
    mediump vec4 tmpvar_40;
    tmpvar_40.w = 0.0;
    tmpvar_40.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_41;
    tmpvar_41 = mix (mix (_UWFogColorLow, _UWFogColorHigh, fogParam_33.xxxx), tmpvar_40, fogParam_33.yyyy).xyz;
    finalColor_2.xyz = tmpvar_41;
  };
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_UNDERWATER_FOG" "UseNormalMap" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_WorldTransformParams;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _FogStartDistance;
uniform highp float _FogEndDistance;
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
uniform highp float _UWFogDistStart;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _glesNormal;
  mediump vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  tmpvar_3 = _glesColor;
  tmpvar_4 = _glesTANGENT;
  highp float sint_5;
  highp float cost_6;
  highp vec3 adjCamPos_7;
  mediump vec4 offsetVertex_8;
  mediump float normalOut_9;
  highp vec4 offset_10;
  highp vec4 tmpvar_11;
  mediump vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  mediump vec4 tmpvar_14;
  offset_10.yzw = vec3(0.0, 0.0, 0.0);
  offset_10.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_10.y = offset_10.x;
  highp float tmpvar_15;
  tmpvar_15 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_9 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = ((_glesVertex + (
    (offset_10 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_2 * normalOut_9) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_8 = tmpvar_16;
  highp vec4 pos_17;
  pos_17 = offsetVertex_8;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = pos_17.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_18));
  tmpvar_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_12.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_19;
  if ((_FogColorNear.w > 0.5)) {
    mediump vec4 fogColor_20;
    highp vec3 tmpvar_21;
    tmpvar_21 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_22;
    tmpvar_22 = max (0.0, (sqrt(
      dot (tmpvar_21, tmpvar_21)
    ) - _FogStartDistance));
    highp float tmpvar_23;
    tmpvar_23 = min (max ((
      (1.0 - exp((-(
        (_FogIntensity * tmpvar_22)
      ) * (_FogIntensity * tmpvar_22))))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_24;
    tmpvar_24 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3(clamp (exp(
      (-((_FogColorIntensity * tmpvar_22)) * (_FogColorIntensity * tmpvar_22))
    ), 0.0, 1.0)));
    fogColor_20.xyz = tmpvar_24;
    fogColor_20.w = tmpvar_23;
    tmpvar_19 = fogColor_20;
  } else {
    mediump vec4 fogColor_25;
    highp vec3 tmpvar_26;
    tmpvar_26 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_27;
    tmpvar_27 = max (0.0, (sqrt(
      dot (tmpvar_26, tmpvar_26)
    ) - _FogStartDistance));
    highp float tmpvar_28;
    highp float tmpvar_29;
    tmpvar_29 = (_FogEndDistance - _FogStartDistance);
    tmpvar_28 = min (max ((
      (((500.0 * _FogIntensity) * tmpvar_27) / max (0.1, tmpvar_29))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_30;
    tmpvar_30 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3((1.0 - clamp (
      (((1000.0 * _FogColorIntensity) * tmpvar_27) / max (0.1, tmpvar_29))
    , 0.0, 1.0))));
    fogColor_25.xyz = tmpvar_30;
    fogColor_25.w = tmpvar_28;
    tmpvar_19 = fogColor_25;
  };
  tmpvar_14.w = 1.0;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_2.xyz;
  mediump vec4 wTangent_32;
  mediump vec3 wNormal_33;
  highp vec3 norm_34;
  norm_34 = tmpvar_31;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = unity_WorldToObject[0].xyz;
  tmpvar_35[1] = unity_WorldToObject[1].xyz;
  tmpvar_35[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((norm_34 * tmpvar_35));
  wNormal_33 = tmpvar_36;
  highp vec3 dir_37;
  dir_37 = tmpvar_4.xyz;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_38[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_38[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((tmpvar_38 * dir_37));
  wTangent_32.xyz = tmpvar_39;
  wTangent_32.w = (_glesTANGENT.w * unity_WorldTransformParams.w);
  mediump vec3 tmpvar_40;
  tmpvar_40 = (((wNormal_33.yzx * wTangent_32.zxy) - (wNormal_33.zxy * wTangent_32.yzx)) * wTangent_32.w);
  mediump vec3 tmpvar_41;
  tmpvar_41.x = wTangent_32.x;
  tmpvar_41.y = tmpvar_40.x;
  tmpvar_41.z = wNormal_33.x;
  mediump vec3 tmpvar_42;
  tmpvar_42.x = wTangent_32.y;
  tmpvar_42.y = tmpvar_40.y;
  tmpvar_42.z = wNormal_33.y;
  mediump vec3 tmpvar_43;
  tmpvar_43.x = wTangent_32.z;
  tmpvar_43.y = tmpvar_40.z;
  tmpvar_43.z = wNormal_33.z;
  highp vec4 tmpvar_44;
  tmpvar_44 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_7.xz = (tmpvar_44.xz - ((tmpvar_44.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_7.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize((tmpvar_44.xyz - adjCamPos_7));
  tmpvar_13 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = cos(_CamRotate);
  cost_6 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = sin(_CamRotate);
  sint_5 = tmpvar_47;
  highp mat2 tmpvar_48;
  tmpvar_48[0].x = cost_6;
  tmpvar_48[0].y = -(sint_5);
  tmpvar_48[1].x = sint_5;
  tmpvar_48[1].y = cost_6;
  tmpvar_13.xz = (tmpvar_48 * tmpvar_13.xz);
  highp vec3 tmpvar_49;
  tmpvar_49 = (_WorldSpaceCameraPos - tmpvar_44.xyz);
  tmpvar_14.xyz = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = offsetVertex_8.xyz;
  tmpvar_50.w = tmpvar_1.w;
  mediump vec3 fogParam_51;
  highp vec4 tmpvar_52;
  tmpvar_52 = (unity_ObjectToWorld * tmpvar_50);
  highp vec2 tmpvar_53;
  tmpvar_53 = (tmpvar_52.xz - _WorldSpaceCameraPos.xz);
  highp float tmpvar_54;
  tmpvar_54 = max (0.0, (sqrt(
    dot (tmpvar_53, tmpvar_53)
  ) - _UWFogDistStart));
  highp float tmpvar_55;
  tmpvar_55 = min (max ((
    (1.0 - exp((-(
      (_UWFogDensity * tmpvar_54)
    ) * (_UWFogDensity * tmpvar_54))))
   * _UWFogEffectLimit), _UWFogEffectStart), _UWFogEffectLimit);
  highp float tmpvar_56;
  tmpvar_56 = clamp (exp((
    -((_UWFogColorNFIntensity * tmpvar_54))
   * 
    (_UWFogColorNFIntensity * tmpvar_54)
  )), 0.0, 1.0);
  fogParam_51.x = tmpvar_56;
  fogParam_51.y = tmpvar_55;
  fogParam_51.z = tmpvar_52.y;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = tmpvar_12;
  xlv_COLOR0 = tmpvar_3;
  xlv_COLOR1 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_2.xyz;
  xlv_TEXCOORD2 = tmpvar_13;
  xlv_TEXCOORD3 = fogParam_51;
  xlv_TEXCOORD4 = tmpvar_14;
  xlv_TEXCOORD5 = tmpvar_41;
  xlv_TEXCOORD6 = tmpvar_42;
  xlv_TEXCOORD7 = tmpvar_43;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
uniform highp vec4 _UWFogColorLow;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWHeightFogDensity;
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
uniform highp float _UWHeightRatio;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  if ((xlv_TEXCOORD3.z > _WaterPlaneHeight)) {
    finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  } else {
    mediump vec3 xlat_varinput_32;
    xlat_varinput_32 = xlv_TEXCOORD3;
    mediump vec3 fogParam_33;
    highp float tmpvar_34;
    tmpvar_34 = max (0.0, ((_WaterPlaneHeight - xlv_TEXCOORD3.z) / (_WaterPlaneHeight - _UWFogHeightEnd)));
    highp float tmpvar_35;
    tmpvar_35 = min (max ((
      (1.0 - (_UWHeightFogDensity * tmpvar_34))
     * _UWHeightFogEffectLimit), _UWHeightFogEffectStart), _UWHeightFogEffectLimit);
    highp float tmpvar_36;
    tmpvar_36 = clamp ((_UWFogColorHLIntensity * tmpvar_34), 0.0, 1.0);
    fogParam_33.z = 0.0;
    fogParam_33.y = tmpvar_35;
    fogParam_33.x = tmpvar_36;
    if ((xlv_TEXCOORD3.y > 0.99)) {
      xlat_varinput_32.y = (xlv_TEXCOORD3.y * (1.0 - (tmpvar_34 * _UWHeightRatio)));
      highp float tmpvar_37;
      tmpvar_37 = clamp (xlat_varinput_32.y, _UWCriticalRange, 1.0);
      xlat_varinput_32.y = tmpvar_37;
    };
    fogParam_33.z = (1.0 - xlat_varinput_32.y);
    mediump vec4 tmpvar_38;
    tmpvar_38.w = 0.0;
    tmpvar_38.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_39;
    tmpvar_39 = mix (mix (_UWFogColorFar, _UWFogColorNear, xlv_TEXCOORD3.xxxx), tmpvar_38, fogParam_33.zzzz).xyz;
    finalColor_2.xyz = tmpvar_39;
    mediump vec4 tmpvar_40;
    tmpvar_40.w = 0.0;
    tmpvar_40.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_41;
    tmpvar_41 = mix (mix (_UWFogColorLow, _UWFogColorHigh, fogParam_33.xxxx), tmpvar_40, fogParam_33.yyyy).xyz;
    finalColor_2.xyz = tmpvar_41;
  };
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_UNDERWATER_FOG" "UseNormalMap" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_WorldTransformParams;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _FogStartDistance;
uniform highp float _FogEndDistance;
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
uniform highp float _UWFogDistStart;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _glesNormal;
  mediump vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  tmpvar_3 = _glesColor;
  tmpvar_4 = _glesTANGENT;
  highp float sint_5;
  highp float cost_6;
  highp vec3 adjCamPos_7;
  mediump vec4 offsetVertex_8;
  mediump float normalOut_9;
  highp vec4 offset_10;
  highp vec4 tmpvar_11;
  mediump vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  mediump vec4 tmpvar_14;
  offset_10.yzw = vec3(0.0, 0.0, 0.0);
  offset_10.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_10.y = offset_10.x;
  highp float tmpvar_15;
  tmpvar_15 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_9 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = ((_glesVertex + (
    (offset_10 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_2 * normalOut_9) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_8 = tmpvar_16;
  highp vec4 pos_17;
  pos_17 = offsetVertex_8;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = pos_17.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_18));
  tmpvar_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_12.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_19;
  if ((_FogColorNear.w > 0.5)) {
    mediump vec4 fogColor_20;
    highp vec3 tmpvar_21;
    tmpvar_21 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_22;
    tmpvar_22 = max (0.0, (sqrt(
      dot (tmpvar_21, tmpvar_21)
    ) - _FogStartDistance));
    highp float tmpvar_23;
    tmpvar_23 = min (max ((
      (1.0 - exp((-(
        (_FogIntensity * tmpvar_22)
      ) * (_FogIntensity * tmpvar_22))))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_24;
    tmpvar_24 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3(clamp (exp(
      (-((_FogColorIntensity * tmpvar_22)) * (_FogColorIntensity * tmpvar_22))
    ), 0.0, 1.0)));
    fogColor_20.xyz = tmpvar_24;
    fogColor_20.w = tmpvar_23;
    tmpvar_19 = fogColor_20;
  } else {
    mediump vec4 fogColor_25;
    highp vec3 tmpvar_26;
    tmpvar_26 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_27;
    tmpvar_27 = max (0.0, (sqrt(
      dot (tmpvar_26, tmpvar_26)
    ) - _FogStartDistance));
    highp float tmpvar_28;
    highp float tmpvar_29;
    tmpvar_29 = (_FogEndDistance - _FogStartDistance);
    tmpvar_28 = min (max ((
      (((500.0 * _FogIntensity) * tmpvar_27) / max (0.1, tmpvar_29))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_30;
    tmpvar_30 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3((1.0 - clamp (
      (((1000.0 * _FogColorIntensity) * tmpvar_27) / max (0.1, tmpvar_29))
    , 0.0, 1.0))));
    fogColor_25.xyz = tmpvar_30;
    fogColor_25.w = tmpvar_28;
    tmpvar_19 = fogColor_25;
  };
  tmpvar_14.w = 1.0;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_2.xyz;
  mediump vec4 wTangent_32;
  mediump vec3 wNormal_33;
  highp vec3 norm_34;
  norm_34 = tmpvar_31;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = unity_WorldToObject[0].xyz;
  tmpvar_35[1] = unity_WorldToObject[1].xyz;
  tmpvar_35[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((norm_34 * tmpvar_35));
  wNormal_33 = tmpvar_36;
  highp vec3 dir_37;
  dir_37 = tmpvar_4.xyz;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_38[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_38[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((tmpvar_38 * dir_37));
  wTangent_32.xyz = tmpvar_39;
  wTangent_32.w = (_glesTANGENT.w * unity_WorldTransformParams.w);
  mediump vec3 tmpvar_40;
  tmpvar_40 = (((wNormal_33.yzx * wTangent_32.zxy) - (wNormal_33.zxy * wTangent_32.yzx)) * wTangent_32.w);
  mediump vec3 tmpvar_41;
  tmpvar_41.x = wTangent_32.x;
  tmpvar_41.y = tmpvar_40.x;
  tmpvar_41.z = wNormal_33.x;
  mediump vec3 tmpvar_42;
  tmpvar_42.x = wTangent_32.y;
  tmpvar_42.y = tmpvar_40.y;
  tmpvar_42.z = wNormal_33.y;
  mediump vec3 tmpvar_43;
  tmpvar_43.x = wTangent_32.z;
  tmpvar_43.y = tmpvar_40.z;
  tmpvar_43.z = wNormal_33.z;
  highp vec4 tmpvar_44;
  tmpvar_44 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_7.xz = (tmpvar_44.xz - ((tmpvar_44.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_7.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize((tmpvar_44.xyz - adjCamPos_7));
  tmpvar_13 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = cos(_CamRotate);
  cost_6 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = sin(_CamRotate);
  sint_5 = tmpvar_47;
  highp mat2 tmpvar_48;
  tmpvar_48[0].x = cost_6;
  tmpvar_48[0].y = -(sint_5);
  tmpvar_48[1].x = sint_5;
  tmpvar_48[1].y = cost_6;
  tmpvar_13.xz = (tmpvar_48 * tmpvar_13.xz);
  highp vec3 tmpvar_49;
  tmpvar_49 = (_WorldSpaceCameraPos - tmpvar_44.xyz);
  tmpvar_14.xyz = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = offsetVertex_8.xyz;
  tmpvar_50.w = tmpvar_1.w;
  mediump vec3 fogParam_51;
  highp vec4 tmpvar_52;
  tmpvar_52 = (unity_ObjectToWorld * tmpvar_50);
  highp vec2 tmpvar_53;
  tmpvar_53 = (tmpvar_52.xz - _WorldSpaceCameraPos.xz);
  highp float tmpvar_54;
  tmpvar_54 = max (0.0, (sqrt(
    dot (tmpvar_53, tmpvar_53)
  ) - _UWFogDistStart));
  highp float tmpvar_55;
  tmpvar_55 = min (max ((
    (1.0 - exp((-(
      (_UWFogDensity * tmpvar_54)
    ) * (_UWFogDensity * tmpvar_54))))
   * _UWFogEffectLimit), _UWFogEffectStart), _UWFogEffectLimit);
  highp float tmpvar_56;
  tmpvar_56 = clamp (exp((
    -((_UWFogColorNFIntensity * tmpvar_54))
   * 
    (_UWFogColorNFIntensity * tmpvar_54)
  )), 0.0, 1.0);
  fogParam_51.x = tmpvar_56;
  fogParam_51.y = tmpvar_55;
  fogParam_51.z = tmpvar_52.y;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = tmpvar_12;
  xlv_COLOR0 = tmpvar_3;
  xlv_COLOR1 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_2.xyz;
  xlv_TEXCOORD2 = tmpvar_13;
  xlv_TEXCOORD3 = fogParam_51;
  xlv_TEXCOORD4 = tmpvar_14;
  xlv_TEXCOORD5 = tmpvar_41;
  xlv_TEXCOORD6 = tmpvar_42;
  xlv_TEXCOORD7 = tmpvar_43;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
uniform highp vec4 _UWFogColorLow;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWHeightFogDensity;
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
uniform highp float _UWHeightRatio;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  if ((xlv_TEXCOORD3.z > _WaterPlaneHeight)) {
    finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  } else {
    mediump vec3 xlat_varinput_32;
    xlat_varinput_32 = xlv_TEXCOORD3;
    mediump vec3 fogParam_33;
    highp float tmpvar_34;
    tmpvar_34 = max (0.0, ((_WaterPlaneHeight - xlv_TEXCOORD3.z) / (_WaterPlaneHeight - _UWFogHeightEnd)));
    highp float tmpvar_35;
    tmpvar_35 = min (max ((
      (1.0 - (_UWHeightFogDensity * tmpvar_34))
     * _UWHeightFogEffectLimit), _UWHeightFogEffectStart), _UWHeightFogEffectLimit);
    highp float tmpvar_36;
    tmpvar_36 = clamp ((_UWFogColorHLIntensity * tmpvar_34), 0.0, 1.0);
    fogParam_33.z = 0.0;
    fogParam_33.y = tmpvar_35;
    fogParam_33.x = tmpvar_36;
    if ((xlv_TEXCOORD3.y > 0.99)) {
      xlat_varinput_32.y = (xlv_TEXCOORD3.y * (1.0 - (tmpvar_34 * _UWHeightRatio)));
      highp float tmpvar_37;
      tmpvar_37 = clamp (xlat_varinput_32.y, _UWCriticalRange, 1.0);
      xlat_varinput_32.y = tmpvar_37;
    };
    fogParam_33.z = (1.0 - xlat_varinput_32.y);
    mediump vec4 tmpvar_38;
    tmpvar_38.w = 0.0;
    tmpvar_38.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_39;
    tmpvar_39 = mix (mix (_UWFogColorFar, _UWFogColorNear, xlv_TEXCOORD3.xxxx), tmpvar_38, fogParam_33.zzzz).xyz;
    finalColor_2.xyz = tmpvar_39;
    mediump vec4 tmpvar_40;
    tmpvar_40.w = 0.0;
    tmpvar_40.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_41;
    tmpvar_41 = mix (mix (_UWFogColorLow, _UWFogColorHigh, fogParam_33.xxxx), tmpvar_40, fogParam_33.yyyy).xyz;
    finalColor_2.xyz = tmpvar_41;
  };
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_UNDERWATER_FOG" "UseNormalMap" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_WorldTransformParams;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _FogStartDistance;
uniform highp float _FogEndDistance;
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
uniform highp float _UWFogDistStart;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _glesNormal;
  mediump vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  tmpvar_3 = _glesColor;
  tmpvar_4 = _glesTANGENT;
  highp float sint_5;
  highp float cost_6;
  highp vec3 adjCamPos_7;
  mediump vec4 offsetVertex_8;
  mediump float normalOut_9;
  highp vec4 offset_10;
  highp vec4 tmpvar_11;
  mediump vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  mediump vec4 tmpvar_14;
  offset_10.yzw = vec3(0.0, 0.0, 0.0);
  offset_10.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_10.y = offset_10.x;
  highp float tmpvar_15;
  tmpvar_15 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_9 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = ((_glesVertex + (
    (offset_10 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_2 * normalOut_9) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_8 = tmpvar_16;
  highp vec4 pos_17;
  pos_17 = offsetVertex_8;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = pos_17.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_18));
  tmpvar_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_12.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_19;
  if ((_FogColorNear.w > 0.5)) {
    mediump vec4 fogColor_20;
    highp vec3 tmpvar_21;
    tmpvar_21 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_22;
    tmpvar_22 = max (0.0, (sqrt(
      dot (tmpvar_21, tmpvar_21)
    ) - _FogStartDistance));
    highp float tmpvar_23;
    tmpvar_23 = min (max ((
      (1.0 - exp((-(
        (_FogIntensity * tmpvar_22)
      ) * (_FogIntensity * tmpvar_22))))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_24;
    tmpvar_24 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3(clamp (exp(
      (-((_FogColorIntensity * tmpvar_22)) * (_FogColorIntensity * tmpvar_22))
    ), 0.0, 1.0)));
    fogColor_20.xyz = tmpvar_24;
    fogColor_20.w = tmpvar_23;
    tmpvar_19 = fogColor_20;
  } else {
    mediump vec4 fogColor_25;
    highp vec3 tmpvar_26;
    tmpvar_26 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_27;
    tmpvar_27 = max (0.0, (sqrt(
      dot (tmpvar_26, tmpvar_26)
    ) - _FogStartDistance));
    highp float tmpvar_28;
    highp float tmpvar_29;
    tmpvar_29 = (_FogEndDistance - _FogStartDistance);
    tmpvar_28 = min (max ((
      (((500.0 * _FogIntensity) * tmpvar_27) / max (0.1, tmpvar_29))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_30;
    tmpvar_30 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3((1.0 - clamp (
      (((1000.0 * _FogColorIntensity) * tmpvar_27) / max (0.1, tmpvar_29))
    , 0.0, 1.0))));
    fogColor_25.xyz = tmpvar_30;
    fogColor_25.w = tmpvar_28;
    tmpvar_19 = fogColor_25;
  };
  tmpvar_14.w = 1.0;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_2.xyz;
  mediump vec4 wTangent_32;
  mediump vec3 wNormal_33;
  highp vec3 norm_34;
  norm_34 = tmpvar_31;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = unity_WorldToObject[0].xyz;
  tmpvar_35[1] = unity_WorldToObject[1].xyz;
  tmpvar_35[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((norm_34 * tmpvar_35));
  wNormal_33 = tmpvar_36;
  highp vec3 dir_37;
  dir_37 = tmpvar_4.xyz;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_38[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_38[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((tmpvar_38 * dir_37));
  wTangent_32.xyz = tmpvar_39;
  wTangent_32.w = (_glesTANGENT.w * unity_WorldTransformParams.w);
  mediump vec3 tmpvar_40;
  tmpvar_40 = (((wNormal_33.yzx * wTangent_32.zxy) - (wNormal_33.zxy * wTangent_32.yzx)) * wTangent_32.w);
  mediump vec3 tmpvar_41;
  tmpvar_41.x = wTangent_32.x;
  tmpvar_41.y = tmpvar_40.x;
  tmpvar_41.z = wNormal_33.x;
  mediump vec3 tmpvar_42;
  tmpvar_42.x = wTangent_32.y;
  tmpvar_42.y = tmpvar_40.y;
  tmpvar_42.z = wNormal_33.y;
  mediump vec3 tmpvar_43;
  tmpvar_43.x = wTangent_32.z;
  tmpvar_43.y = tmpvar_40.z;
  tmpvar_43.z = wNormal_33.z;
  highp vec4 tmpvar_44;
  tmpvar_44 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_7.xz = (tmpvar_44.xz - ((tmpvar_44.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_7.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize((tmpvar_44.xyz - adjCamPos_7));
  tmpvar_13 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = cos(_CamRotate);
  cost_6 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = sin(_CamRotate);
  sint_5 = tmpvar_47;
  highp mat2 tmpvar_48;
  tmpvar_48[0].x = cost_6;
  tmpvar_48[0].y = -(sint_5);
  tmpvar_48[1].x = sint_5;
  tmpvar_48[1].y = cost_6;
  tmpvar_13.xz = (tmpvar_48 * tmpvar_13.xz);
  highp vec3 tmpvar_49;
  tmpvar_49 = (_WorldSpaceCameraPos - tmpvar_44.xyz);
  tmpvar_14.xyz = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = offsetVertex_8.xyz;
  tmpvar_50.w = tmpvar_1.w;
  mediump vec3 fogParam_51;
  highp vec4 tmpvar_52;
  tmpvar_52 = (unity_ObjectToWorld * tmpvar_50);
  highp vec2 tmpvar_53;
  tmpvar_53 = (tmpvar_52.xz - _WorldSpaceCameraPos.xz);
  highp float tmpvar_54;
  tmpvar_54 = max (0.0, (sqrt(
    dot (tmpvar_53, tmpvar_53)
  ) - _UWFogDistStart));
  highp float tmpvar_55;
  tmpvar_55 = min (max ((
    (1.0 - exp((-(
      (_UWFogDensity * tmpvar_54)
    ) * (_UWFogDensity * tmpvar_54))))
   * _UWFogEffectLimit), _UWFogEffectStart), _UWFogEffectLimit);
  highp float tmpvar_56;
  tmpvar_56 = clamp (exp((
    -((_UWFogColorNFIntensity * tmpvar_54))
   * 
    (_UWFogColorNFIntensity * tmpvar_54)
  )), 0.0, 1.0);
  fogParam_51.x = tmpvar_56;
  fogParam_51.y = tmpvar_55;
  fogParam_51.z = tmpvar_52.y;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = tmpvar_12;
  xlv_COLOR0 = tmpvar_3;
  xlv_COLOR1 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_2.xyz;
  xlv_TEXCOORD2 = tmpvar_13;
  xlv_TEXCOORD3 = fogParam_51;
  xlv_TEXCOORD4 = tmpvar_14;
  xlv_TEXCOORD5 = tmpvar_41;
  xlv_TEXCOORD6 = tmpvar_42;
  xlv_TEXCOORD7 = tmpvar_43;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
uniform highp vec4 _UWFogColorLow;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWHeightFogDensity;
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
uniform highp float _UWHeightRatio;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  if ((xlv_TEXCOORD3.z > _WaterPlaneHeight)) {
    finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  } else {
    mediump vec3 xlat_varinput_32;
    xlat_varinput_32 = xlv_TEXCOORD3;
    mediump vec3 fogParam_33;
    highp float tmpvar_34;
    tmpvar_34 = max (0.0, ((_WaterPlaneHeight - xlv_TEXCOORD3.z) / (_WaterPlaneHeight - _UWFogHeightEnd)));
    highp float tmpvar_35;
    tmpvar_35 = min (max ((
      (1.0 - (_UWHeightFogDensity * tmpvar_34))
     * _UWHeightFogEffectLimit), _UWHeightFogEffectStart), _UWHeightFogEffectLimit);
    highp float tmpvar_36;
    tmpvar_36 = clamp ((_UWFogColorHLIntensity * tmpvar_34), 0.0, 1.0);
    fogParam_33.z = 0.0;
    fogParam_33.y = tmpvar_35;
    fogParam_33.x = tmpvar_36;
    if ((xlv_TEXCOORD3.y > 0.99)) {
      xlat_varinput_32.y = (xlv_TEXCOORD3.y * (1.0 - (tmpvar_34 * _UWHeightRatio)));
      highp float tmpvar_37;
      tmpvar_37 = clamp (xlat_varinput_32.y, _UWCriticalRange, 1.0);
      xlat_varinput_32.y = tmpvar_37;
    };
    fogParam_33.z = (1.0 - xlat_varinput_32.y);
    mediump vec4 tmpvar_38;
    tmpvar_38.w = 0.0;
    tmpvar_38.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_39;
    tmpvar_39 = mix (mix (_UWFogColorFar, _UWFogColorNear, xlv_TEXCOORD3.xxxx), tmpvar_38, fogParam_33.zzzz).xyz;
    finalColor_2.xyz = tmpvar_39;
    mediump vec4 tmpvar_40;
    tmpvar_40.w = 0.0;
    tmpvar_40.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_41;
    tmpvar_41 = mix (mix (_UWFogColorLow, _UWFogColorHigh, fogParam_33.xxxx), tmpvar_40, fogParam_33.yyyy).xyz;
    finalColor_2.xyz = tmpvar_41;
  };
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_UNDERWATER_FOG" "UseNormalMap" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_WorldTransformParams;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _FogStartDistance;
uniform highp float _FogEndDistance;
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
uniform highp float _UWFogDistStart;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _glesNormal;
  mediump vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  tmpvar_3 = _glesColor;
  tmpvar_4 = _glesTANGENT;
  highp float sint_5;
  highp float cost_6;
  highp vec3 adjCamPos_7;
  mediump vec4 offsetVertex_8;
  mediump float normalOut_9;
  highp vec4 offset_10;
  highp vec4 tmpvar_11;
  mediump vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  mediump vec4 tmpvar_14;
  offset_10.yzw = vec3(0.0, 0.0, 0.0);
  offset_10.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_10.y = offset_10.x;
  highp float tmpvar_15;
  tmpvar_15 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_9 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = ((_glesVertex + (
    (offset_10 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_2 * normalOut_9) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_8 = tmpvar_16;
  highp vec4 pos_17;
  pos_17 = offsetVertex_8;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = pos_17.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_18));
  tmpvar_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_12.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_19;
  if ((_FogColorNear.w > 0.5)) {
    mediump vec4 fogColor_20;
    highp vec3 tmpvar_21;
    tmpvar_21 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_22;
    tmpvar_22 = max (0.0, (sqrt(
      dot (tmpvar_21, tmpvar_21)
    ) - _FogStartDistance));
    highp float tmpvar_23;
    tmpvar_23 = min (max ((
      (1.0 - exp((-(
        (_FogIntensity * tmpvar_22)
      ) * (_FogIntensity * tmpvar_22))))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_24;
    tmpvar_24 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3(clamp (exp(
      (-((_FogColorIntensity * tmpvar_22)) * (_FogColorIntensity * tmpvar_22))
    ), 0.0, 1.0)));
    fogColor_20.xyz = tmpvar_24;
    fogColor_20.w = tmpvar_23;
    tmpvar_19 = fogColor_20;
  } else {
    mediump vec4 fogColor_25;
    highp vec3 tmpvar_26;
    tmpvar_26 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_27;
    tmpvar_27 = max (0.0, (sqrt(
      dot (tmpvar_26, tmpvar_26)
    ) - _FogStartDistance));
    highp float tmpvar_28;
    highp float tmpvar_29;
    tmpvar_29 = (_FogEndDistance - _FogStartDistance);
    tmpvar_28 = min (max ((
      (((500.0 * _FogIntensity) * tmpvar_27) / max (0.1, tmpvar_29))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_30;
    tmpvar_30 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3((1.0 - clamp (
      (((1000.0 * _FogColorIntensity) * tmpvar_27) / max (0.1, tmpvar_29))
    , 0.0, 1.0))));
    fogColor_25.xyz = tmpvar_30;
    fogColor_25.w = tmpvar_28;
    tmpvar_19 = fogColor_25;
  };
  tmpvar_14.w = 1.0;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_2.xyz;
  mediump vec4 wTangent_32;
  mediump vec3 wNormal_33;
  highp vec3 norm_34;
  norm_34 = tmpvar_31;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = unity_WorldToObject[0].xyz;
  tmpvar_35[1] = unity_WorldToObject[1].xyz;
  tmpvar_35[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((norm_34 * tmpvar_35));
  wNormal_33 = tmpvar_36;
  highp vec3 dir_37;
  dir_37 = tmpvar_4.xyz;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_38[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_38[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((tmpvar_38 * dir_37));
  wTangent_32.xyz = tmpvar_39;
  wTangent_32.w = (_glesTANGENT.w * unity_WorldTransformParams.w);
  mediump vec3 tmpvar_40;
  tmpvar_40 = (((wNormal_33.yzx * wTangent_32.zxy) - (wNormal_33.zxy * wTangent_32.yzx)) * wTangent_32.w);
  mediump vec3 tmpvar_41;
  tmpvar_41.x = wTangent_32.x;
  tmpvar_41.y = tmpvar_40.x;
  tmpvar_41.z = wNormal_33.x;
  mediump vec3 tmpvar_42;
  tmpvar_42.x = wTangent_32.y;
  tmpvar_42.y = tmpvar_40.y;
  tmpvar_42.z = wNormal_33.y;
  mediump vec3 tmpvar_43;
  tmpvar_43.x = wTangent_32.z;
  tmpvar_43.y = tmpvar_40.z;
  tmpvar_43.z = wNormal_33.z;
  highp vec4 tmpvar_44;
  tmpvar_44 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_7.xz = (tmpvar_44.xz - ((tmpvar_44.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_7.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize((tmpvar_44.xyz - adjCamPos_7));
  tmpvar_13 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = cos(_CamRotate);
  cost_6 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = sin(_CamRotate);
  sint_5 = tmpvar_47;
  highp mat2 tmpvar_48;
  tmpvar_48[0].x = cost_6;
  tmpvar_48[0].y = -(sint_5);
  tmpvar_48[1].x = sint_5;
  tmpvar_48[1].y = cost_6;
  tmpvar_13.xz = (tmpvar_48 * tmpvar_13.xz);
  highp vec3 tmpvar_49;
  tmpvar_49 = (_WorldSpaceCameraPos - tmpvar_44.xyz);
  tmpvar_14.xyz = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = offsetVertex_8.xyz;
  tmpvar_50.w = tmpvar_1.w;
  mediump vec3 fogParam_51;
  highp vec4 tmpvar_52;
  tmpvar_52 = (unity_ObjectToWorld * tmpvar_50);
  highp vec2 tmpvar_53;
  tmpvar_53 = (tmpvar_52.xz - _WorldSpaceCameraPos.xz);
  highp float tmpvar_54;
  tmpvar_54 = max (0.0, (sqrt(
    dot (tmpvar_53, tmpvar_53)
  ) - _UWFogDistStart));
  highp float tmpvar_55;
  tmpvar_55 = min (max ((
    (1.0 - exp((-(
      (_UWFogDensity * tmpvar_54)
    ) * (_UWFogDensity * tmpvar_54))))
   * _UWFogEffectLimit), _UWFogEffectStart), _UWFogEffectLimit);
  highp float tmpvar_56;
  tmpvar_56 = clamp (exp((
    -((_UWFogColorNFIntensity * tmpvar_54))
   * 
    (_UWFogColorNFIntensity * tmpvar_54)
  )), 0.0, 1.0);
  fogParam_51.x = tmpvar_56;
  fogParam_51.y = tmpvar_55;
  fogParam_51.z = tmpvar_52.y;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = tmpvar_12;
  xlv_COLOR0 = tmpvar_3;
  xlv_COLOR1 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_2.xyz;
  xlv_TEXCOORD2 = tmpvar_13;
  xlv_TEXCOORD3 = fogParam_51;
  xlv_TEXCOORD4 = tmpvar_14;
  xlv_TEXCOORD5 = tmpvar_41;
  xlv_TEXCOORD6 = tmpvar_42;
  xlv_TEXCOORD7 = tmpvar_43;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
uniform highp vec4 _UWFogColorLow;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWHeightFogDensity;
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
uniform highp float _UWHeightRatio;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  if ((xlv_TEXCOORD3.z > _WaterPlaneHeight)) {
    finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  } else {
    mediump vec3 xlat_varinput_32;
    xlat_varinput_32 = xlv_TEXCOORD3;
    mediump vec3 fogParam_33;
    highp float tmpvar_34;
    tmpvar_34 = max (0.0, ((_WaterPlaneHeight - xlv_TEXCOORD3.z) / (_WaterPlaneHeight - _UWFogHeightEnd)));
    highp float tmpvar_35;
    tmpvar_35 = min (max ((
      (1.0 - (_UWHeightFogDensity * tmpvar_34))
     * _UWHeightFogEffectLimit), _UWHeightFogEffectStart), _UWHeightFogEffectLimit);
    highp float tmpvar_36;
    tmpvar_36 = clamp ((_UWFogColorHLIntensity * tmpvar_34), 0.0, 1.0);
    fogParam_33.z = 0.0;
    fogParam_33.y = tmpvar_35;
    fogParam_33.x = tmpvar_36;
    if ((xlv_TEXCOORD3.y > 0.99)) {
      xlat_varinput_32.y = (xlv_TEXCOORD3.y * (1.0 - (tmpvar_34 * _UWHeightRatio)));
      highp float tmpvar_37;
      tmpvar_37 = clamp (xlat_varinput_32.y, _UWCriticalRange, 1.0);
      xlat_varinput_32.y = tmpvar_37;
    };
    fogParam_33.z = (1.0 - xlat_varinput_32.y);
    mediump vec4 tmpvar_38;
    tmpvar_38.w = 0.0;
    tmpvar_38.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_39;
    tmpvar_39 = mix (mix (_UWFogColorFar, _UWFogColorNear, xlv_TEXCOORD3.xxxx), tmpvar_38, fogParam_33.zzzz).xyz;
    finalColor_2.xyz = tmpvar_39;
    mediump vec4 tmpvar_40;
    tmpvar_40.w = 0.0;
    tmpvar_40.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_41;
    tmpvar_41 = mix (mix (_UWFogColorLow, _UWFogColorHigh, fogParam_33.xxxx), tmpvar_40, fogParam_33.yyyy).xyz;
    finalColor_2.xyz = tmpvar_41;
  };
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_UNDERWATER_FOG" "UseNormalMap" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_WorldTransformParams;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _FogStartDistance;
uniform highp float _FogEndDistance;
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
uniform highp float _UWFogDistStart;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _glesNormal;
  mediump vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  tmpvar_3 = _glesColor;
  tmpvar_4 = _glesTANGENT;
  highp float sint_5;
  highp float cost_6;
  highp vec3 adjCamPos_7;
  mediump vec4 offsetVertex_8;
  mediump float normalOut_9;
  highp vec4 offset_10;
  highp vec4 tmpvar_11;
  mediump vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  mediump vec4 tmpvar_14;
  offset_10.yzw = vec3(0.0, 0.0, 0.0);
  offset_10.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_10.y = offset_10.x;
  highp float tmpvar_15;
  tmpvar_15 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_9 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = ((_glesVertex + (
    (offset_10 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_2 * normalOut_9) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_8 = tmpvar_16;
  highp vec4 pos_17;
  pos_17 = offsetVertex_8;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = pos_17.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_18));
  tmpvar_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_12.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_19;
  if ((_FogColorNear.w > 0.5)) {
    mediump vec4 fogColor_20;
    highp vec3 tmpvar_21;
    tmpvar_21 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_22;
    tmpvar_22 = max (0.0, (sqrt(
      dot (tmpvar_21, tmpvar_21)
    ) - _FogStartDistance));
    highp float tmpvar_23;
    tmpvar_23 = min (max ((
      (1.0 - exp((-(
        (_FogIntensity * tmpvar_22)
      ) * (_FogIntensity * tmpvar_22))))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_24;
    tmpvar_24 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3(clamp (exp(
      (-((_FogColorIntensity * tmpvar_22)) * (_FogColorIntensity * tmpvar_22))
    ), 0.0, 1.0)));
    fogColor_20.xyz = tmpvar_24;
    fogColor_20.w = tmpvar_23;
    tmpvar_19 = fogColor_20;
  } else {
    mediump vec4 fogColor_25;
    highp vec3 tmpvar_26;
    tmpvar_26 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_27;
    tmpvar_27 = max (0.0, (sqrt(
      dot (tmpvar_26, tmpvar_26)
    ) - _FogStartDistance));
    highp float tmpvar_28;
    highp float tmpvar_29;
    tmpvar_29 = (_FogEndDistance - _FogStartDistance);
    tmpvar_28 = min (max ((
      (((500.0 * _FogIntensity) * tmpvar_27) / max (0.1, tmpvar_29))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_30;
    tmpvar_30 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3((1.0 - clamp (
      (((1000.0 * _FogColorIntensity) * tmpvar_27) / max (0.1, tmpvar_29))
    , 0.0, 1.0))));
    fogColor_25.xyz = tmpvar_30;
    fogColor_25.w = tmpvar_28;
    tmpvar_19 = fogColor_25;
  };
  tmpvar_14.w = 1.0;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_2.xyz;
  mediump vec4 wTangent_32;
  mediump vec3 wNormal_33;
  highp vec3 norm_34;
  norm_34 = tmpvar_31;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = unity_WorldToObject[0].xyz;
  tmpvar_35[1] = unity_WorldToObject[1].xyz;
  tmpvar_35[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((norm_34 * tmpvar_35));
  wNormal_33 = tmpvar_36;
  highp vec3 dir_37;
  dir_37 = tmpvar_4.xyz;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_38[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_38[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((tmpvar_38 * dir_37));
  wTangent_32.xyz = tmpvar_39;
  wTangent_32.w = (_glesTANGENT.w * unity_WorldTransformParams.w);
  mediump vec3 tmpvar_40;
  tmpvar_40 = (((wNormal_33.yzx * wTangent_32.zxy) - (wNormal_33.zxy * wTangent_32.yzx)) * wTangent_32.w);
  mediump vec3 tmpvar_41;
  tmpvar_41.x = wTangent_32.x;
  tmpvar_41.y = tmpvar_40.x;
  tmpvar_41.z = wNormal_33.x;
  mediump vec3 tmpvar_42;
  tmpvar_42.x = wTangent_32.y;
  tmpvar_42.y = tmpvar_40.y;
  tmpvar_42.z = wNormal_33.y;
  mediump vec3 tmpvar_43;
  tmpvar_43.x = wTangent_32.z;
  tmpvar_43.y = tmpvar_40.z;
  tmpvar_43.z = wNormal_33.z;
  highp vec4 tmpvar_44;
  tmpvar_44 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_7.xz = (tmpvar_44.xz - ((tmpvar_44.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_7.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize((tmpvar_44.xyz - adjCamPos_7));
  tmpvar_13 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = cos(_CamRotate);
  cost_6 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = sin(_CamRotate);
  sint_5 = tmpvar_47;
  highp mat2 tmpvar_48;
  tmpvar_48[0].x = cost_6;
  tmpvar_48[0].y = -(sint_5);
  tmpvar_48[1].x = sint_5;
  tmpvar_48[1].y = cost_6;
  tmpvar_13.xz = (tmpvar_48 * tmpvar_13.xz);
  highp vec3 tmpvar_49;
  tmpvar_49 = (_WorldSpaceCameraPos - tmpvar_44.xyz);
  tmpvar_14.xyz = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = offsetVertex_8.xyz;
  tmpvar_50.w = tmpvar_1.w;
  mediump vec3 fogParam_51;
  highp vec4 tmpvar_52;
  tmpvar_52 = (unity_ObjectToWorld * tmpvar_50);
  highp vec2 tmpvar_53;
  tmpvar_53 = (tmpvar_52.xz - _WorldSpaceCameraPos.xz);
  highp float tmpvar_54;
  tmpvar_54 = max (0.0, (sqrt(
    dot (tmpvar_53, tmpvar_53)
  ) - _UWFogDistStart));
  highp float tmpvar_55;
  tmpvar_55 = min (max ((
    (1.0 - exp((-(
      (_UWFogDensity * tmpvar_54)
    ) * (_UWFogDensity * tmpvar_54))))
   * _UWFogEffectLimit), _UWFogEffectStart), _UWFogEffectLimit);
  highp float tmpvar_56;
  tmpvar_56 = clamp (exp((
    -((_UWFogColorNFIntensity * tmpvar_54))
   * 
    (_UWFogColorNFIntensity * tmpvar_54)
  )), 0.0, 1.0);
  fogParam_51.x = tmpvar_56;
  fogParam_51.y = tmpvar_55;
  fogParam_51.z = tmpvar_52.y;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = tmpvar_12;
  xlv_COLOR0 = tmpvar_3;
  xlv_COLOR1 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_2.xyz;
  xlv_TEXCOORD2 = tmpvar_13;
  xlv_TEXCOORD3 = fogParam_51;
  xlv_TEXCOORD4 = tmpvar_14;
  xlv_TEXCOORD5 = tmpvar_41;
  xlv_TEXCOORD6 = tmpvar_42;
  xlv_TEXCOORD7 = tmpvar_43;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
uniform highp vec4 _UWFogColorLow;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWHeightFogDensity;
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
uniform highp float _UWHeightRatio;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  if ((xlv_TEXCOORD3.z > _WaterPlaneHeight)) {
    finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  } else {
    mediump vec3 xlat_varinput_32;
    xlat_varinput_32 = xlv_TEXCOORD3;
    mediump vec3 fogParam_33;
    highp float tmpvar_34;
    tmpvar_34 = max (0.0, ((_WaterPlaneHeight - xlv_TEXCOORD3.z) / (_WaterPlaneHeight - _UWFogHeightEnd)));
    highp float tmpvar_35;
    tmpvar_35 = min (max ((
      (1.0 - (_UWHeightFogDensity * tmpvar_34))
     * _UWHeightFogEffectLimit), _UWHeightFogEffectStart), _UWHeightFogEffectLimit);
    highp float tmpvar_36;
    tmpvar_36 = clamp ((_UWFogColorHLIntensity * tmpvar_34), 0.0, 1.0);
    fogParam_33.z = 0.0;
    fogParam_33.y = tmpvar_35;
    fogParam_33.x = tmpvar_36;
    if ((xlv_TEXCOORD3.y > 0.99)) {
      xlat_varinput_32.y = (xlv_TEXCOORD3.y * (1.0 - (tmpvar_34 * _UWHeightRatio)));
      highp float tmpvar_37;
      tmpvar_37 = clamp (xlat_varinput_32.y, _UWCriticalRange, 1.0);
      xlat_varinput_32.y = tmpvar_37;
    };
    fogParam_33.z = (1.0 - xlat_varinput_32.y);
    mediump vec4 tmpvar_38;
    tmpvar_38.w = 0.0;
    tmpvar_38.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_39;
    tmpvar_39 = mix (mix (_UWFogColorFar, _UWFogColorNear, xlv_TEXCOORD3.xxxx), tmpvar_38, fogParam_33.zzzz).xyz;
    finalColor_2.xyz = tmpvar_39;
    mediump vec4 tmpvar_40;
    tmpvar_40.w = 0.0;
    tmpvar_40.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_41;
    tmpvar_41 = mix (mix (_UWFogColorLow, _UWFogColorHigh, fogParam_33.xxxx), tmpvar_40, fogParam_33.yyyy).xyz;
    finalColor_2.xyz = tmpvar_41;
  };
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_UNDERWATER_FOG" "UseNormalMap" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_WorldTransformParams;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _FogStartDistance;
uniform highp float _FogEndDistance;
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
uniform highp float _UWFogDistStart;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _glesNormal;
  mediump vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  tmpvar_3 = _glesColor;
  tmpvar_4 = _glesTANGENT;
  highp float sint_5;
  highp float cost_6;
  highp vec3 adjCamPos_7;
  mediump vec4 offsetVertex_8;
  mediump float normalOut_9;
  highp vec4 offset_10;
  highp vec4 tmpvar_11;
  mediump vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  mediump vec4 tmpvar_14;
  offset_10.yzw = vec3(0.0, 0.0, 0.0);
  offset_10.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_10.y = offset_10.x;
  highp float tmpvar_15;
  tmpvar_15 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_9 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = ((_glesVertex + (
    (offset_10 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_2 * normalOut_9) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_8 = tmpvar_16;
  highp vec4 pos_17;
  pos_17 = offsetVertex_8;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = pos_17.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_18));
  tmpvar_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_12.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_19;
  if ((_FogColorNear.w > 0.5)) {
    mediump vec4 fogColor_20;
    highp vec3 tmpvar_21;
    tmpvar_21 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_22;
    tmpvar_22 = max (0.0, (sqrt(
      dot (tmpvar_21, tmpvar_21)
    ) - _FogStartDistance));
    highp float tmpvar_23;
    tmpvar_23 = min (max ((
      (1.0 - exp((-(
        (_FogIntensity * tmpvar_22)
      ) * (_FogIntensity * tmpvar_22))))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_24;
    tmpvar_24 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3(clamp (exp(
      (-((_FogColorIntensity * tmpvar_22)) * (_FogColorIntensity * tmpvar_22))
    ), 0.0, 1.0)));
    fogColor_20.xyz = tmpvar_24;
    fogColor_20.w = tmpvar_23;
    tmpvar_19 = fogColor_20;
  } else {
    mediump vec4 fogColor_25;
    highp vec3 tmpvar_26;
    tmpvar_26 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_27;
    tmpvar_27 = max (0.0, (sqrt(
      dot (tmpvar_26, tmpvar_26)
    ) - _FogStartDistance));
    highp float tmpvar_28;
    highp float tmpvar_29;
    tmpvar_29 = (_FogEndDistance - _FogStartDistance);
    tmpvar_28 = min (max ((
      (((500.0 * _FogIntensity) * tmpvar_27) / max (0.1, tmpvar_29))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_30;
    tmpvar_30 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3((1.0 - clamp (
      (((1000.0 * _FogColorIntensity) * tmpvar_27) / max (0.1, tmpvar_29))
    , 0.0, 1.0))));
    fogColor_25.xyz = tmpvar_30;
    fogColor_25.w = tmpvar_28;
    tmpvar_19 = fogColor_25;
  };
  tmpvar_14.w = 1.0;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_2.xyz;
  mediump vec4 wTangent_32;
  mediump vec3 wNormal_33;
  highp vec3 norm_34;
  norm_34 = tmpvar_31;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = unity_WorldToObject[0].xyz;
  tmpvar_35[1] = unity_WorldToObject[1].xyz;
  tmpvar_35[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((norm_34 * tmpvar_35));
  wNormal_33 = tmpvar_36;
  highp vec3 dir_37;
  dir_37 = tmpvar_4.xyz;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_38[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_38[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((tmpvar_38 * dir_37));
  wTangent_32.xyz = tmpvar_39;
  wTangent_32.w = (_glesTANGENT.w * unity_WorldTransformParams.w);
  mediump vec3 tmpvar_40;
  tmpvar_40 = (((wNormal_33.yzx * wTangent_32.zxy) - (wNormal_33.zxy * wTangent_32.yzx)) * wTangent_32.w);
  mediump vec3 tmpvar_41;
  tmpvar_41.x = wTangent_32.x;
  tmpvar_41.y = tmpvar_40.x;
  tmpvar_41.z = wNormal_33.x;
  mediump vec3 tmpvar_42;
  tmpvar_42.x = wTangent_32.y;
  tmpvar_42.y = tmpvar_40.y;
  tmpvar_42.z = wNormal_33.y;
  mediump vec3 tmpvar_43;
  tmpvar_43.x = wTangent_32.z;
  tmpvar_43.y = tmpvar_40.z;
  tmpvar_43.z = wNormal_33.z;
  highp vec4 tmpvar_44;
  tmpvar_44 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_7.xz = (tmpvar_44.xz - ((tmpvar_44.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_7.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize((tmpvar_44.xyz - adjCamPos_7));
  tmpvar_13 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = cos(_CamRotate);
  cost_6 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = sin(_CamRotate);
  sint_5 = tmpvar_47;
  highp mat2 tmpvar_48;
  tmpvar_48[0].x = cost_6;
  tmpvar_48[0].y = -(sint_5);
  tmpvar_48[1].x = sint_5;
  tmpvar_48[1].y = cost_6;
  tmpvar_13.xz = (tmpvar_48 * tmpvar_13.xz);
  highp vec3 tmpvar_49;
  tmpvar_49 = (_WorldSpaceCameraPos - tmpvar_44.xyz);
  tmpvar_14.xyz = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = offsetVertex_8.xyz;
  tmpvar_50.w = tmpvar_1.w;
  mediump vec3 fogParam_51;
  highp vec4 tmpvar_52;
  tmpvar_52 = (unity_ObjectToWorld * tmpvar_50);
  highp vec2 tmpvar_53;
  tmpvar_53 = (tmpvar_52.xz - _WorldSpaceCameraPos.xz);
  highp float tmpvar_54;
  tmpvar_54 = max (0.0, (sqrt(
    dot (tmpvar_53, tmpvar_53)
  ) - _UWFogDistStart));
  highp float tmpvar_55;
  tmpvar_55 = min (max ((
    (1.0 - exp((-(
      (_UWFogDensity * tmpvar_54)
    ) * (_UWFogDensity * tmpvar_54))))
   * _UWFogEffectLimit), _UWFogEffectStart), _UWFogEffectLimit);
  highp float tmpvar_56;
  tmpvar_56 = clamp (exp((
    -((_UWFogColorNFIntensity * tmpvar_54))
   * 
    (_UWFogColorNFIntensity * tmpvar_54)
  )), 0.0, 1.0);
  fogParam_51.x = tmpvar_56;
  fogParam_51.y = tmpvar_55;
  fogParam_51.z = tmpvar_52.y;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = tmpvar_12;
  xlv_COLOR0 = tmpvar_3;
  xlv_COLOR1 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_2.xyz;
  xlv_TEXCOORD2 = tmpvar_13;
  xlv_TEXCOORD3 = fogParam_51;
  xlv_TEXCOORD4 = tmpvar_14;
  xlv_TEXCOORD5 = tmpvar_41;
  xlv_TEXCOORD6 = tmpvar_42;
  xlv_TEXCOORD7 = tmpvar_43;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
uniform highp vec4 _UWFogColorLow;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWHeightFogDensity;
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
uniform highp float _UWHeightRatio;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  if ((xlv_TEXCOORD3.z > _WaterPlaneHeight)) {
    finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  } else {
    mediump vec3 xlat_varinput_32;
    xlat_varinput_32 = xlv_TEXCOORD3;
    mediump vec3 fogParam_33;
    highp float tmpvar_34;
    tmpvar_34 = max (0.0, ((_WaterPlaneHeight - xlv_TEXCOORD3.z) / (_WaterPlaneHeight - _UWFogHeightEnd)));
    highp float tmpvar_35;
    tmpvar_35 = min (max ((
      (1.0 - (_UWHeightFogDensity * tmpvar_34))
     * _UWHeightFogEffectLimit), _UWHeightFogEffectStart), _UWHeightFogEffectLimit);
    highp float tmpvar_36;
    tmpvar_36 = clamp ((_UWFogColorHLIntensity * tmpvar_34), 0.0, 1.0);
    fogParam_33.z = 0.0;
    fogParam_33.y = tmpvar_35;
    fogParam_33.x = tmpvar_36;
    if ((xlv_TEXCOORD3.y > 0.99)) {
      xlat_varinput_32.y = (xlv_TEXCOORD3.y * (1.0 - (tmpvar_34 * _UWHeightRatio)));
      highp float tmpvar_37;
      tmpvar_37 = clamp (xlat_varinput_32.y, _UWCriticalRange, 1.0);
      xlat_varinput_32.y = tmpvar_37;
    };
    fogParam_33.z = (1.0 - xlat_varinput_32.y);
    mediump vec4 tmpvar_38;
    tmpvar_38.w = 0.0;
    tmpvar_38.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_39;
    tmpvar_39 = mix (mix (_UWFogColorFar, _UWFogColorNear, xlv_TEXCOORD3.xxxx), tmpvar_38, fogParam_33.zzzz).xyz;
    finalColor_2.xyz = tmpvar_39;
    mediump vec4 tmpvar_40;
    tmpvar_40.w = 0.0;
    tmpvar_40.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_41;
    tmpvar_41 = mix (mix (_UWFogColorLow, _UWFogColorHigh, fogParam_33.xxxx), tmpvar_40, fogParam_33.yyyy).xyz;
    finalColor_2.xyz = tmpvar_41;
  };
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_HEIGHT" "_UNDERWATER_FOG" "UseNormalMap" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_WorldTransformParams;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
uniform highp float _UWFogDistStart;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _glesNormal;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp float sint_5;
  highp float cost_6;
  highp vec3 adjCamPos_7;
  mediump vec4 offsetVertex_8;
  mediump float normalOut_9;
  highp vec4 offset_10;
  mediump vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  mediump vec4 tmpvar_13;
  offset_10.yzw = vec3(0.0, 0.0, 0.0);
  offset_10.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_10.y = offset_10.x;
  highp float tmpvar_14;
  tmpvar_14 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_9 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = ((_glesVertex + (
    (offset_10 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_3 * normalOut_9) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_8 = tmpvar_15;
  highp vec4 pos_16;
  pos_16 = offsetVertex_8;
  highp vec4 tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = pos_16.xyz;
  tmpvar_17 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_18));
  tmpvar_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_11.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_22;
  mediump float fogFactor_23;
  mediump vec3 fogColor_24;
  mediump vec3 heightFogColor_25;
  highp float HeightFogFactor_26;
  mediump vec3 atomesphereFogColor_27;
  mediump float h_28;
  highp float linearFogDensity_29;
  mediump float len_30;
  highp float tmpvar_31;
  tmpvar_31 = sqrt(dot (tmpvar_21, tmpvar_21));
  len_30 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (((len_30 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_29 = (tmpvar_32 * (2.0 - tmpvar_32));
  if ((len_30 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_29 = (linearFogDensity_29 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_33;
  tmpvar_33 = min (pow (linearFogDensity_29, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_29 = tmpvar_33;
  mediump float tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((tmpvar_20.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_34 = tmpvar_35;
  h_28 = (tmpvar_34 * (2.0 - tmpvar_34));
  highp vec3 tmpvar_36;
  tmpvar_36 = (_HeigtFogColBase.xyz + (h_28 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_27 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (atomesphereFogColor_27, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_30 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_27 = tmpvar_37;
  mediump float tmpvar_38;
  mediump float r_39;
  mediump float f_40;
  mediump float u_41;
  mediump float l_42;
  mediump float fogInt_43;
  fogInt_43 = 1.0;
  highp float tmpvar_44;
  tmpvar_44 = (_HeigtFogParams.x * tmpvar_21.y);
  highp float tmpvar_45;
  tmpvar_45 = abs(tmpvar_44);
  if ((tmpvar_45 > 0.01)) {
    highp float tmpvar_46;
    tmpvar_46 = exp(-(tmpvar_44));
    fogInt_43 = ((1.0 - tmpvar_46) / tmpvar_44);
  };
  highp float tmpvar_47;
  tmpvar_47 = sqrt(dot (tmpvar_21, tmpvar_21));
  l_42 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = (l_42 * _HeigtFogParams.y);
  u_41 = tmpvar_48;
  fogInt_43 = (fogInt_43 * u_41);
  mediump float tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((l_42 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_49 = tmpvar_50;
  r_39 = (tmpvar_49 * (2.0 - tmpvar_49));
  r_39 = ((r_39 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_40 = ((1.0 - clamp (
    exp2(-(fogInt_43))
  , 0.0, 1.0)) * r_39);
  highp float tmpvar_51;
  tmpvar_51 = min (f_40, _HeigtFogColBase.w);
  tmpvar_38 = tmpvar_51;
  HeightFogFactor_26 = tmpvar_38;
  highp vec3 tmpvar_52;
  tmpvar_52 = _Mihoyo_FogColor.xyz;
  heightFogColor_25 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = ((heightFogColor_25 * HeightFogFactor_26) + ((atomesphereFogColor_27 * tmpvar_33) * (1.0 - HeightFogFactor_26)));
  fogColor_24 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = ((1.0 - tmpvar_33) * (1.0 - HeightFogFactor_26));
  fogFactor_23 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55.xyz = fogColor_24;
  tmpvar_55.w = fogFactor_23;
  tmpvar_22 = tmpvar_55;
  tmpvar_19 = tmpvar_22;
  tmpvar_13.w = 1.0;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_3.xyz;
  mediump vec4 wTangent_57;
  mediump vec3 wNormal_58;
  highp vec3 norm_59;
  norm_59 = tmpvar_56;
  highp mat3 tmpvar_60;
  tmpvar_60[0] = unity_WorldToObject[0].xyz;
  tmpvar_60[1] = unity_WorldToObject[1].xyz;
  tmpvar_60[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize((norm_59 * tmpvar_60));
  wNormal_58 = tmpvar_61;
  highp vec3 dir_62;
  dir_62 = tmpvar_4.xyz;
  highp mat3 tmpvar_63;
  tmpvar_63[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_63[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_63[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((tmpvar_63 * dir_62));
  wTangent_57.xyz = tmpvar_64;
  wTangent_57.w = (_glesTANGENT.w * unity_WorldTransformParams.w);
  mediump vec3 tmpvar_65;
  tmpvar_65 = (((wNormal_58.yzx * wTangent_57.zxy) - (wNormal_58.zxy * wTangent_57.yzx)) * wTangent_57.w);
  mediump vec3 tmpvar_66;
  tmpvar_66.x = wTangent_57.x;
  tmpvar_66.y = tmpvar_65.x;
  tmpvar_66.z = wNormal_58.x;
  mediump vec3 tmpvar_67;
  tmpvar_67.x = wTangent_57.y;
  tmpvar_67.y = tmpvar_65.y;
  tmpvar_67.z = wNormal_58.y;
  mediump vec3 tmpvar_68;
  tmpvar_68.x = wTangent_57.z;
  tmpvar_68.y = tmpvar_65.z;
  tmpvar_68.z = wNormal_58.z;
  highp vec4 tmpvar_69;
  tmpvar_69 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_7.xz = (tmpvar_69.xz - ((tmpvar_69.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_7.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_70;
  tmpvar_70 = normalize((tmpvar_69.xyz - adjCamPos_7));
  tmpvar_12 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = cos(_CamRotate);
  cost_6 = tmpvar_71;
  mediump float tmpvar_72;
  tmpvar_72 = sin(_CamRotate);
  sint_5 = tmpvar_72;
  highp mat2 tmpvar_73;
  tmpvar_73[0].x = cost_6;
  tmpvar_73[0].y = -(sint_5);
  tmpvar_73[1].x = sint_5;
  tmpvar_73[1].y = cost_6;
  tmpvar_12.xz = (tmpvar_73 * tmpvar_12.xz);
  highp vec3 tmpvar_74;
  tmpvar_74 = (_WorldSpaceCameraPos - tmpvar_69.xyz);
  tmpvar_13.xyz = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75.xyz = offsetVertex_8.xyz;
  tmpvar_75.w = tmpvar_1.w;
  mediump vec3 fogParam_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = (unity_ObjectToWorld * tmpvar_75);
  highp vec2 tmpvar_78;
  tmpvar_78 = (tmpvar_77.xz - _WorldSpaceCameraPos.xz);
  highp float tmpvar_79;
  tmpvar_79 = max (0.0, (sqrt(
    dot (tmpvar_78, tmpvar_78)
  ) - _UWFogDistStart));
  highp float tmpvar_80;
  tmpvar_80 = min (max ((
    (1.0 - exp((-(
      (_UWFogDensity * tmpvar_79)
    ) * (_UWFogDensity * tmpvar_79))))
   * _UWFogEffectLimit), _UWFogEffectStart), _UWFogEffectLimit);
  highp float tmpvar_81;
  tmpvar_81 = clamp (exp((
    -((_UWFogColorNFIntensity * tmpvar_79))
   * 
    (_UWFogColorNFIntensity * tmpvar_79)
  )), 0.0, 1.0);
  fogParam_76.x = tmpvar_81;
  fogParam_76.y = tmpvar_80;
  fogParam_76.z = tmpvar_77.y;
  gl_Position = tmpvar_17;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_COLOR0 = tmpvar_2;
  xlv_COLOR1 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_3.xyz;
  xlv_TEXCOORD2 = tmpvar_12;
  xlv_TEXCOORD3 = fogParam_76;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_66;
  xlv_TEXCOORD6 = tmpvar_67;
  xlv_TEXCOORD7 = tmpvar_68;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
uniform highp vec4 _UWFogColorLow;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWHeightFogDensity;
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
uniform highp float _UWHeightRatio;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  if ((xlv_TEXCOORD3.z > _WaterPlaneHeight)) {
    finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  } else {
    mediump vec3 xlat_varinput_32;
    xlat_varinput_32 = xlv_TEXCOORD3;
    mediump vec3 fogParam_33;
    highp float tmpvar_34;
    tmpvar_34 = max (0.0, ((_WaterPlaneHeight - xlv_TEXCOORD3.z) / (_WaterPlaneHeight - _UWFogHeightEnd)));
    highp float tmpvar_35;
    tmpvar_35 = min (max ((
      (1.0 - (_UWHeightFogDensity * tmpvar_34))
     * _UWHeightFogEffectLimit), _UWHeightFogEffectStart), _UWHeightFogEffectLimit);
    highp float tmpvar_36;
    tmpvar_36 = clamp ((_UWFogColorHLIntensity * tmpvar_34), 0.0, 1.0);
    fogParam_33.z = 0.0;
    fogParam_33.y = tmpvar_35;
    fogParam_33.x = tmpvar_36;
    if ((xlv_TEXCOORD3.y > 0.99)) {
      xlat_varinput_32.y = (xlv_TEXCOORD3.y * (1.0 - (tmpvar_34 * _UWHeightRatio)));
      highp float tmpvar_37;
      tmpvar_37 = clamp (xlat_varinput_32.y, _UWCriticalRange, 1.0);
      xlat_varinput_32.y = tmpvar_37;
    };
    fogParam_33.z = (1.0 - xlat_varinput_32.y);
    mediump vec4 tmpvar_38;
    tmpvar_38.w = 0.0;
    tmpvar_38.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_39;
    tmpvar_39 = mix (mix (_UWFogColorFar, _UWFogColorNear, xlv_TEXCOORD3.xxxx), tmpvar_38, fogParam_33.zzzz).xyz;
    finalColor_2.xyz = tmpvar_39;
    mediump vec4 tmpvar_40;
    tmpvar_40.w = 0.0;
    tmpvar_40.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_41;
    tmpvar_41 = mix (mix (_UWFogColorLow, _UWFogColorHigh, fogParam_33.xxxx), tmpvar_40, fogParam_33.yyyy).xyz;
    finalColor_2.xyz = tmpvar_41;
  };
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_HEIGHT" "_UNDERWATER_FOG" "UseNormalMap" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_WorldTransformParams;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
uniform highp float _UWFogDistStart;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _glesNormal;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp float sint_5;
  highp float cost_6;
  highp vec3 adjCamPos_7;
  mediump vec4 offsetVertex_8;
  mediump float normalOut_9;
  highp vec4 offset_10;
  mediump vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  mediump vec4 tmpvar_13;
  offset_10.yzw = vec3(0.0, 0.0, 0.0);
  offset_10.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_10.y = offset_10.x;
  highp float tmpvar_14;
  tmpvar_14 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_9 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = ((_glesVertex + (
    (offset_10 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_3 * normalOut_9) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_8 = tmpvar_15;
  highp vec4 pos_16;
  pos_16 = offsetVertex_8;
  highp vec4 tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = pos_16.xyz;
  tmpvar_17 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_18));
  tmpvar_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_11.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_22;
  mediump float fogFactor_23;
  mediump vec3 fogColor_24;
  mediump vec3 heightFogColor_25;
  highp float HeightFogFactor_26;
  mediump vec3 atomesphereFogColor_27;
  mediump float h_28;
  highp float linearFogDensity_29;
  mediump float len_30;
  highp float tmpvar_31;
  tmpvar_31 = sqrt(dot (tmpvar_21, tmpvar_21));
  len_30 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (((len_30 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_29 = (tmpvar_32 * (2.0 - tmpvar_32));
  if ((len_30 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_29 = (linearFogDensity_29 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_33;
  tmpvar_33 = min (pow (linearFogDensity_29, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_29 = tmpvar_33;
  mediump float tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((tmpvar_20.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_34 = tmpvar_35;
  h_28 = (tmpvar_34 * (2.0 - tmpvar_34));
  highp vec3 tmpvar_36;
  tmpvar_36 = (_HeigtFogColBase.xyz + (h_28 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_27 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (atomesphereFogColor_27, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_30 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_27 = tmpvar_37;
  mediump float tmpvar_38;
  mediump float r_39;
  mediump float f_40;
  mediump float u_41;
  mediump float l_42;
  mediump float fogInt_43;
  fogInt_43 = 1.0;
  highp float tmpvar_44;
  tmpvar_44 = (_HeigtFogParams.x * tmpvar_21.y);
  highp float tmpvar_45;
  tmpvar_45 = abs(tmpvar_44);
  if ((tmpvar_45 > 0.01)) {
    highp float tmpvar_46;
    tmpvar_46 = exp(-(tmpvar_44));
    fogInt_43 = ((1.0 - tmpvar_46) / tmpvar_44);
  };
  highp float tmpvar_47;
  tmpvar_47 = sqrt(dot (tmpvar_21, tmpvar_21));
  l_42 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = (l_42 * _HeigtFogParams.y);
  u_41 = tmpvar_48;
  fogInt_43 = (fogInt_43 * u_41);
  mediump float tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((l_42 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_49 = tmpvar_50;
  r_39 = (tmpvar_49 * (2.0 - tmpvar_49));
  r_39 = ((r_39 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_40 = ((1.0 - clamp (
    exp2(-(fogInt_43))
  , 0.0, 1.0)) * r_39);
  highp float tmpvar_51;
  tmpvar_51 = min (f_40, _HeigtFogColBase.w);
  tmpvar_38 = tmpvar_51;
  HeightFogFactor_26 = tmpvar_38;
  highp vec3 tmpvar_52;
  tmpvar_52 = _Mihoyo_FogColor.xyz;
  heightFogColor_25 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = ((heightFogColor_25 * HeightFogFactor_26) + ((atomesphereFogColor_27 * tmpvar_33) * (1.0 - HeightFogFactor_26)));
  fogColor_24 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = ((1.0 - tmpvar_33) * (1.0 - HeightFogFactor_26));
  fogFactor_23 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55.xyz = fogColor_24;
  tmpvar_55.w = fogFactor_23;
  tmpvar_22 = tmpvar_55;
  tmpvar_19 = tmpvar_22;
  tmpvar_13.w = 1.0;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_3.xyz;
  mediump vec4 wTangent_57;
  mediump vec3 wNormal_58;
  highp vec3 norm_59;
  norm_59 = tmpvar_56;
  highp mat3 tmpvar_60;
  tmpvar_60[0] = unity_WorldToObject[0].xyz;
  tmpvar_60[1] = unity_WorldToObject[1].xyz;
  tmpvar_60[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize((norm_59 * tmpvar_60));
  wNormal_58 = tmpvar_61;
  highp vec3 dir_62;
  dir_62 = tmpvar_4.xyz;
  highp mat3 tmpvar_63;
  tmpvar_63[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_63[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_63[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((tmpvar_63 * dir_62));
  wTangent_57.xyz = tmpvar_64;
  wTangent_57.w = (_glesTANGENT.w * unity_WorldTransformParams.w);
  mediump vec3 tmpvar_65;
  tmpvar_65 = (((wNormal_58.yzx * wTangent_57.zxy) - (wNormal_58.zxy * wTangent_57.yzx)) * wTangent_57.w);
  mediump vec3 tmpvar_66;
  tmpvar_66.x = wTangent_57.x;
  tmpvar_66.y = tmpvar_65.x;
  tmpvar_66.z = wNormal_58.x;
  mediump vec3 tmpvar_67;
  tmpvar_67.x = wTangent_57.y;
  tmpvar_67.y = tmpvar_65.y;
  tmpvar_67.z = wNormal_58.y;
  mediump vec3 tmpvar_68;
  tmpvar_68.x = wTangent_57.z;
  tmpvar_68.y = tmpvar_65.z;
  tmpvar_68.z = wNormal_58.z;
  highp vec4 tmpvar_69;
  tmpvar_69 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_7.xz = (tmpvar_69.xz - ((tmpvar_69.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_7.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_70;
  tmpvar_70 = normalize((tmpvar_69.xyz - adjCamPos_7));
  tmpvar_12 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = cos(_CamRotate);
  cost_6 = tmpvar_71;
  mediump float tmpvar_72;
  tmpvar_72 = sin(_CamRotate);
  sint_5 = tmpvar_72;
  highp mat2 tmpvar_73;
  tmpvar_73[0].x = cost_6;
  tmpvar_73[0].y = -(sint_5);
  tmpvar_73[1].x = sint_5;
  tmpvar_73[1].y = cost_6;
  tmpvar_12.xz = (tmpvar_73 * tmpvar_12.xz);
  highp vec3 tmpvar_74;
  tmpvar_74 = (_WorldSpaceCameraPos - tmpvar_69.xyz);
  tmpvar_13.xyz = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75.xyz = offsetVertex_8.xyz;
  tmpvar_75.w = tmpvar_1.w;
  mediump vec3 fogParam_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = (unity_ObjectToWorld * tmpvar_75);
  highp vec2 tmpvar_78;
  tmpvar_78 = (tmpvar_77.xz - _WorldSpaceCameraPos.xz);
  highp float tmpvar_79;
  tmpvar_79 = max (0.0, (sqrt(
    dot (tmpvar_78, tmpvar_78)
  ) - _UWFogDistStart));
  highp float tmpvar_80;
  tmpvar_80 = min (max ((
    (1.0 - exp((-(
      (_UWFogDensity * tmpvar_79)
    ) * (_UWFogDensity * tmpvar_79))))
   * _UWFogEffectLimit), _UWFogEffectStart), _UWFogEffectLimit);
  highp float tmpvar_81;
  tmpvar_81 = clamp (exp((
    -((_UWFogColorNFIntensity * tmpvar_79))
   * 
    (_UWFogColorNFIntensity * tmpvar_79)
  )), 0.0, 1.0);
  fogParam_76.x = tmpvar_81;
  fogParam_76.y = tmpvar_80;
  fogParam_76.z = tmpvar_77.y;
  gl_Position = tmpvar_17;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_COLOR0 = tmpvar_2;
  xlv_COLOR1 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_3.xyz;
  xlv_TEXCOORD2 = tmpvar_12;
  xlv_TEXCOORD3 = fogParam_76;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_66;
  xlv_TEXCOORD6 = tmpvar_67;
  xlv_TEXCOORD7 = tmpvar_68;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
uniform highp vec4 _UWFogColorLow;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWHeightFogDensity;
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
uniform highp float _UWHeightRatio;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  if ((xlv_TEXCOORD3.z > _WaterPlaneHeight)) {
    finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  } else {
    mediump vec3 xlat_varinput_32;
    xlat_varinput_32 = xlv_TEXCOORD3;
    mediump vec3 fogParam_33;
    highp float tmpvar_34;
    tmpvar_34 = max (0.0, ((_WaterPlaneHeight - xlv_TEXCOORD3.z) / (_WaterPlaneHeight - _UWFogHeightEnd)));
    highp float tmpvar_35;
    tmpvar_35 = min (max ((
      (1.0 - (_UWHeightFogDensity * tmpvar_34))
     * _UWHeightFogEffectLimit), _UWHeightFogEffectStart), _UWHeightFogEffectLimit);
    highp float tmpvar_36;
    tmpvar_36 = clamp ((_UWFogColorHLIntensity * tmpvar_34), 0.0, 1.0);
    fogParam_33.z = 0.0;
    fogParam_33.y = tmpvar_35;
    fogParam_33.x = tmpvar_36;
    if ((xlv_TEXCOORD3.y > 0.99)) {
      xlat_varinput_32.y = (xlv_TEXCOORD3.y * (1.0 - (tmpvar_34 * _UWHeightRatio)));
      highp float tmpvar_37;
      tmpvar_37 = clamp (xlat_varinput_32.y, _UWCriticalRange, 1.0);
      xlat_varinput_32.y = tmpvar_37;
    };
    fogParam_33.z = (1.0 - xlat_varinput_32.y);
    mediump vec4 tmpvar_38;
    tmpvar_38.w = 0.0;
    tmpvar_38.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_39;
    tmpvar_39 = mix (mix (_UWFogColorFar, _UWFogColorNear, xlv_TEXCOORD3.xxxx), tmpvar_38, fogParam_33.zzzz).xyz;
    finalColor_2.xyz = tmpvar_39;
    mediump vec4 tmpvar_40;
    tmpvar_40.w = 0.0;
    tmpvar_40.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_41;
    tmpvar_41 = mix (mix (_UWFogColorLow, _UWFogColorHigh, fogParam_33.xxxx), tmpvar_40, fogParam_33.yyyy).xyz;
    finalColor_2.xyz = tmpvar_41;
  };
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_HEIGHT" "_UNDERWATER_FOG" "UseNormalMap" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_WorldTransformParams;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
uniform highp float _UWFogDistStart;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _glesNormal;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp float sint_5;
  highp float cost_6;
  highp vec3 adjCamPos_7;
  mediump vec4 offsetVertex_8;
  mediump float normalOut_9;
  highp vec4 offset_10;
  mediump vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  mediump vec4 tmpvar_13;
  offset_10.yzw = vec3(0.0, 0.0, 0.0);
  offset_10.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_10.y = offset_10.x;
  highp float tmpvar_14;
  tmpvar_14 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_9 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = ((_glesVertex + (
    (offset_10 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_3 * normalOut_9) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_8 = tmpvar_15;
  highp vec4 pos_16;
  pos_16 = offsetVertex_8;
  highp vec4 tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = pos_16.xyz;
  tmpvar_17 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_18));
  tmpvar_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_11.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_22;
  mediump float fogFactor_23;
  mediump vec3 fogColor_24;
  mediump vec3 heightFogColor_25;
  highp float HeightFogFactor_26;
  mediump vec3 atomesphereFogColor_27;
  mediump float h_28;
  highp float linearFogDensity_29;
  mediump float len_30;
  highp float tmpvar_31;
  tmpvar_31 = sqrt(dot (tmpvar_21, tmpvar_21));
  len_30 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (((len_30 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_29 = (tmpvar_32 * (2.0 - tmpvar_32));
  if ((len_30 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_29 = (linearFogDensity_29 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_33;
  tmpvar_33 = min (pow (linearFogDensity_29, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_29 = tmpvar_33;
  mediump float tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((tmpvar_20.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_34 = tmpvar_35;
  h_28 = (tmpvar_34 * (2.0 - tmpvar_34));
  highp vec3 tmpvar_36;
  tmpvar_36 = (_HeigtFogColBase.xyz + (h_28 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_27 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (atomesphereFogColor_27, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_30 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_27 = tmpvar_37;
  mediump float tmpvar_38;
  mediump float r_39;
  mediump float f_40;
  mediump float u_41;
  mediump float l_42;
  mediump float fogInt_43;
  fogInt_43 = 1.0;
  highp float tmpvar_44;
  tmpvar_44 = (_HeigtFogParams.x * tmpvar_21.y);
  highp float tmpvar_45;
  tmpvar_45 = abs(tmpvar_44);
  if ((tmpvar_45 > 0.01)) {
    highp float tmpvar_46;
    tmpvar_46 = exp(-(tmpvar_44));
    fogInt_43 = ((1.0 - tmpvar_46) / tmpvar_44);
  };
  highp float tmpvar_47;
  tmpvar_47 = sqrt(dot (tmpvar_21, tmpvar_21));
  l_42 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = (l_42 * _HeigtFogParams.y);
  u_41 = tmpvar_48;
  fogInt_43 = (fogInt_43 * u_41);
  mediump float tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((l_42 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_49 = tmpvar_50;
  r_39 = (tmpvar_49 * (2.0 - tmpvar_49));
  r_39 = ((r_39 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_40 = ((1.0 - clamp (
    exp2(-(fogInt_43))
  , 0.0, 1.0)) * r_39);
  highp float tmpvar_51;
  tmpvar_51 = min (f_40, _HeigtFogColBase.w);
  tmpvar_38 = tmpvar_51;
  HeightFogFactor_26 = tmpvar_38;
  highp vec3 tmpvar_52;
  tmpvar_52 = _Mihoyo_FogColor.xyz;
  heightFogColor_25 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = ((heightFogColor_25 * HeightFogFactor_26) + ((atomesphereFogColor_27 * tmpvar_33) * (1.0 - HeightFogFactor_26)));
  fogColor_24 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = ((1.0 - tmpvar_33) * (1.0 - HeightFogFactor_26));
  fogFactor_23 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55.xyz = fogColor_24;
  tmpvar_55.w = fogFactor_23;
  tmpvar_22 = tmpvar_55;
  tmpvar_19 = tmpvar_22;
  tmpvar_13.w = 1.0;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_3.xyz;
  mediump vec4 wTangent_57;
  mediump vec3 wNormal_58;
  highp vec3 norm_59;
  norm_59 = tmpvar_56;
  highp mat3 tmpvar_60;
  tmpvar_60[0] = unity_WorldToObject[0].xyz;
  tmpvar_60[1] = unity_WorldToObject[1].xyz;
  tmpvar_60[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize((norm_59 * tmpvar_60));
  wNormal_58 = tmpvar_61;
  highp vec3 dir_62;
  dir_62 = tmpvar_4.xyz;
  highp mat3 tmpvar_63;
  tmpvar_63[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_63[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_63[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((tmpvar_63 * dir_62));
  wTangent_57.xyz = tmpvar_64;
  wTangent_57.w = (_glesTANGENT.w * unity_WorldTransformParams.w);
  mediump vec3 tmpvar_65;
  tmpvar_65 = (((wNormal_58.yzx * wTangent_57.zxy) - (wNormal_58.zxy * wTangent_57.yzx)) * wTangent_57.w);
  mediump vec3 tmpvar_66;
  tmpvar_66.x = wTangent_57.x;
  tmpvar_66.y = tmpvar_65.x;
  tmpvar_66.z = wNormal_58.x;
  mediump vec3 tmpvar_67;
  tmpvar_67.x = wTangent_57.y;
  tmpvar_67.y = tmpvar_65.y;
  tmpvar_67.z = wNormal_58.y;
  mediump vec3 tmpvar_68;
  tmpvar_68.x = wTangent_57.z;
  tmpvar_68.y = tmpvar_65.z;
  tmpvar_68.z = wNormal_58.z;
  highp vec4 tmpvar_69;
  tmpvar_69 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_7.xz = (tmpvar_69.xz - ((tmpvar_69.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_7.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_70;
  tmpvar_70 = normalize((tmpvar_69.xyz - adjCamPos_7));
  tmpvar_12 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = cos(_CamRotate);
  cost_6 = tmpvar_71;
  mediump float tmpvar_72;
  tmpvar_72 = sin(_CamRotate);
  sint_5 = tmpvar_72;
  highp mat2 tmpvar_73;
  tmpvar_73[0].x = cost_6;
  tmpvar_73[0].y = -(sint_5);
  tmpvar_73[1].x = sint_5;
  tmpvar_73[1].y = cost_6;
  tmpvar_12.xz = (tmpvar_73 * tmpvar_12.xz);
  highp vec3 tmpvar_74;
  tmpvar_74 = (_WorldSpaceCameraPos - tmpvar_69.xyz);
  tmpvar_13.xyz = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75.xyz = offsetVertex_8.xyz;
  tmpvar_75.w = tmpvar_1.w;
  mediump vec3 fogParam_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = (unity_ObjectToWorld * tmpvar_75);
  highp vec2 tmpvar_78;
  tmpvar_78 = (tmpvar_77.xz - _WorldSpaceCameraPos.xz);
  highp float tmpvar_79;
  tmpvar_79 = max (0.0, (sqrt(
    dot (tmpvar_78, tmpvar_78)
  ) - _UWFogDistStart));
  highp float tmpvar_80;
  tmpvar_80 = min (max ((
    (1.0 - exp((-(
      (_UWFogDensity * tmpvar_79)
    ) * (_UWFogDensity * tmpvar_79))))
   * _UWFogEffectLimit), _UWFogEffectStart), _UWFogEffectLimit);
  highp float tmpvar_81;
  tmpvar_81 = clamp (exp((
    -((_UWFogColorNFIntensity * tmpvar_79))
   * 
    (_UWFogColorNFIntensity * tmpvar_79)
  )), 0.0, 1.0);
  fogParam_76.x = tmpvar_81;
  fogParam_76.y = tmpvar_80;
  fogParam_76.z = tmpvar_77.y;
  gl_Position = tmpvar_17;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_COLOR0 = tmpvar_2;
  xlv_COLOR1 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_3.xyz;
  xlv_TEXCOORD2 = tmpvar_12;
  xlv_TEXCOORD3 = fogParam_76;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_66;
  xlv_TEXCOORD6 = tmpvar_67;
  xlv_TEXCOORD7 = tmpvar_68;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
uniform highp vec4 _UWFogColorLow;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWHeightFogDensity;
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
uniform highp float _UWHeightRatio;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  if ((xlv_TEXCOORD3.z > _WaterPlaneHeight)) {
    finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  } else {
    mediump vec3 xlat_varinput_32;
    xlat_varinput_32 = xlv_TEXCOORD3;
    mediump vec3 fogParam_33;
    highp float tmpvar_34;
    tmpvar_34 = max (0.0, ((_WaterPlaneHeight - xlv_TEXCOORD3.z) / (_WaterPlaneHeight - _UWFogHeightEnd)));
    highp float tmpvar_35;
    tmpvar_35 = min (max ((
      (1.0 - (_UWHeightFogDensity * tmpvar_34))
     * _UWHeightFogEffectLimit), _UWHeightFogEffectStart), _UWHeightFogEffectLimit);
    highp float tmpvar_36;
    tmpvar_36 = clamp ((_UWFogColorHLIntensity * tmpvar_34), 0.0, 1.0);
    fogParam_33.z = 0.0;
    fogParam_33.y = tmpvar_35;
    fogParam_33.x = tmpvar_36;
    if ((xlv_TEXCOORD3.y > 0.99)) {
      xlat_varinput_32.y = (xlv_TEXCOORD3.y * (1.0 - (tmpvar_34 * _UWHeightRatio)));
      highp float tmpvar_37;
      tmpvar_37 = clamp (xlat_varinput_32.y, _UWCriticalRange, 1.0);
      xlat_varinput_32.y = tmpvar_37;
    };
    fogParam_33.z = (1.0 - xlat_varinput_32.y);
    mediump vec4 tmpvar_38;
    tmpvar_38.w = 0.0;
    tmpvar_38.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_39;
    tmpvar_39 = mix (mix (_UWFogColorFar, _UWFogColorNear, xlv_TEXCOORD3.xxxx), tmpvar_38, fogParam_33.zzzz).xyz;
    finalColor_2.xyz = tmpvar_39;
    mediump vec4 tmpvar_40;
    tmpvar_40.w = 0.0;
    tmpvar_40.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_41;
    tmpvar_41 = mix (mix (_UWFogColorLow, _UWFogColorHigh, fogParam_33.xxxx), tmpvar_40, fogParam_33.yyyy).xyz;
    finalColor_2.xyz = tmpvar_41;
  };
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "_UNDERWATER_FOG" "UseNormalMap" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_WorldTransformParams;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
uniform highp float _UWFogDistStart;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _glesNormal;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp float sint_5;
  highp float cost_6;
  highp vec3 adjCamPos_7;
  mediump vec4 offsetVertex_8;
  mediump float normalOut_9;
  highp vec4 offset_10;
  mediump vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  mediump vec4 tmpvar_13;
  offset_10.yzw = vec3(0.0, 0.0, 0.0);
  offset_10.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_10.y = offset_10.x;
  highp float tmpvar_14;
  tmpvar_14 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_9 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = ((_glesVertex + (
    (offset_10 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_3 * normalOut_9) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_8 = tmpvar_15;
  highp vec4 pos_16;
  pos_16 = offsetVertex_8;
  highp vec4 tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = pos_16.xyz;
  tmpvar_17 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_18));
  tmpvar_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_11.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_22;
  mediump float fogFactor_23;
  mediump vec3 fogColor_24;
  mediump vec3 heightFogColor_25;
  highp float HeightFogFactor_26;
  mediump vec3 atomesphereFogColor_27;
  mediump float h_28;
  highp float linearFogDensity_29;
  mediump float len_30;
  highp float tmpvar_31;
  tmpvar_31 = sqrt(dot (tmpvar_21, tmpvar_21));
  len_30 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (((len_30 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_29 = (tmpvar_32 * (2.0 - tmpvar_32));
  if ((len_30 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_29 = (linearFogDensity_29 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_33;
  tmpvar_33 = min (pow (linearFogDensity_29, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_29 = tmpvar_33;
  mediump float tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((tmpvar_20.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_34 = tmpvar_35;
  h_28 = (tmpvar_34 * (2.0 - tmpvar_34));
  highp vec3 tmpvar_36;
  tmpvar_36 = (_HeigtFogColBase2.xyz + (h_28 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_27 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (atomesphereFogColor_27, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_30 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_27 = tmpvar_37;
  mediump float tmpvar_38;
  mediump float r_39;
  mediump float f_40;
  mediump float u_41;
  mediump float l_42;
  mediump float fogInt_43;
  fogInt_43 = 1.0;
  highp float tmpvar_44;
  tmpvar_44 = (_HeigtFogParams2.x * tmpvar_21.y);
  highp float tmpvar_45;
  tmpvar_45 = abs(tmpvar_44);
  if ((tmpvar_45 > 0.01)) {
    highp float tmpvar_46;
    tmpvar_46 = exp(-(tmpvar_44));
    fogInt_43 = ((1.0 - tmpvar_46) / tmpvar_44);
  };
  highp float tmpvar_47;
  tmpvar_47 = sqrt(dot (tmpvar_21, tmpvar_21));
  l_42 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = (l_42 * _HeigtFogParams2.y);
  u_41 = tmpvar_48;
  fogInt_43 = (fogInt_43 * u_41);
  mediump float tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((l_42 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_49 = tmpvar_50;
  r_39 = (tmpvar_49 * (2.0 - tmpvar_49));
  r_39 = ((r_39 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_40 = ((1.0 - clamp (
    exp2(-(fogInt_43))
  , 0.0, 1.0)) * r_39);
  highp float tmpvar_51;
  tmpvar_51 = min (f_40, _HeigtFogColBase2.w);
  tmpvar_38 = tmpvar_51;
  HeightFogFactor_26 = tmpvar_38;
  highp vec3 tmpvar_52;
  tmpvar_52 = _Mihoyo_FogColor2.xyz;
  heightFogColor_25 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = ((heightFogColor_25 * HeightFogFactor_26) + ((atomesphereFogColor_27 * tmpvar_33) * (1.0 - HeightFogFactor_26)));
  fogColor_24 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = ((1.0 - tmpvar_33) * (1.0 - HeightFogFactor_26));
  fogFactor_23 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55.xyz = fogColor_24;
  tmpvar_55.w = fogFactor_23;
  tmpvar_22 = tmpvar_55;
  highp vec4 tmpvar_56;
  mediump float fogFactor_57;
  mediump vec3 fogColor_58;
  mediump vec3 heightFogColor_59;
  highp float HeightFogFactor_60;
  mediump vec3 atomesphereFogColor_61;
  mediump float h_62;
  highp float linearFogDensity_63;
  mediump float len_64;
  highp float tmpvar_65;
  tmpvar_65 = sqrt(dot (tmpvar_21, tmpvar_21));
  len_64 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = clamp (((len_64 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_63 = (tmpvar_66 * (2.0 - tmpvar_66));
  if ((len_64 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_63 = (linearFogDensity_63 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_67;
  tmpvar_67 = min (pow (linearFogDensity_63, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_63 = tmpvar_67;
  mediump float tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((tmpvar_20.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_68 = tmpvar_69;
  h_62 = (tmpvar_68 * (2.0 - tmpvar_68));
  highp vec3 tmpvar_70;
  tmpvar_70 = (_HeigtFogColBase3.xyz + (h_62 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_61 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = mix (atomesphereFogColor_61, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_64 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_61 = tmpvar_71;
  mediump float tmpvar_72;
  mediump float r_73;
  mediump float f_74;
  mediump float u_75;
  mediump float l_76;
  mediump float fogInt_77;
  fogInt_77 = 1.0;
  highp float tmpvar_78;
  tmpvar_78 = (_HeigtFogParams3.x * tmpvar_21.y);
  highp float tmpvar_79;
  tmpvar_79 = abs(tmpvar_78);
  if ((tmpvar_79 > 0.01)) {
    highp float tmpvar_80;
    tmpvar_80 = exp(-(tmpvar_78));
    fogInt_77 = ((1.0 - tmpvar_80) / tmpvar_78);
  };
  highp float tmpvar_81;
  tmpvar_81 = sqrt(dot (tmpvar_21, tmpvar_21));
  l_76 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (l_76 * _HeigtFogParams3.y);
  u_75 = tmpvar_82;
  fogInt_77 = (fogInt_77 * u_75);
  mediump float tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = clamp (((l_76 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_83 = tmpvar_84;
  r_73 = (tmpvar_83 * (2.0 - tmpvar_83));
  r_73 = ((r_73 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_74 = ((1.0 - clamp (
    exp2(-(fogInt_77))
  , 0.0, 1.0)) * r_73);
  highp float tmpvar_85;
  tmpvar_85 = min (f_74, _HeigtFogColBase3.w);
  tmpvar_72 = tmpvar_85;
  HeightFogFactor_60 = tmpvar_72;
  highp vec3 tmpvar_86;
  tmpvar_86 = _Mihoyo_FogColor3.xyz;
  heightFogColor_59 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = ((heightFogColor_59 * HeightFogFactor_60) + ((atomesphereFogColor_61 * tmpvar_67) * (1.0 - HeightFogFactor_60)));
  fogColor_58 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = ((1.0 - tmpvar_67) * (1.0 - HeightFogFactor_60));
  fogFactor_57 = tmpvar_88;
  mediump vec4 tmpvar_89;
  tmpvar_89.xyz = fogColor_58;
  tmpvar_89.w = fogFactor_57;
  tmpvar_56 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (tmpvar_22, tmpvar_56, vec4(_LerpFactor));
  tmpvar_19 = tmpvar_90;
  tmpvar_13.w = 1.0;
  mediump vec3 tmpvar_91;
  tmpvar_91 = tmpvar_3.xyz;
  mediump vec4 wTangent_92;
  mediump vec3 wNormal_93;
  highp vec3 norm_94;
  norm_94 = tmpvar_91;
  highp mat3 tmpvar_95;
  tmpvar_95[0] = unity_WorldToObject[0].xyz;
  tmpvar_95[1] = unity_WorldToObject[1].xyz;
  tmpvar_95[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_96;
  tmpvar_96 = normalize((norm_94 * tmpvar_95));
  wNormal_93 = tmpvar_96;
  highp vec3 dir_97;
  dir_97 = tmpvar_4.xyz;
  highp mat3 tmpvar_98;
  tmpvar_98[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_98[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_98[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_99;
  tmpvar_99 = normalize((tmpvar_98 * dir_97));
  wTangent_92.xyz = tmpvar_99;
  wTangent_92.w = (_glesTANGENT.w * unity_WorldTransformParams.w);
  mediump vec3 tmpvar_100;
  tmpvar_100 = (((wNormal_93.yzx * wTangent_92.zxy) - (wNormal_93.zxy * wTangent_92.yzx)) * wTangent_92.w);
  mediump vec3 tmpvar_101;
  tmpvar_101.x = wTangent_92.x;
  tmpvar_101.y = tmpvar_100.x;
  tmpvar_101.z = wNormal_93.x;
  mediump vec3 tmpvar_102;
  tmpvar_102.x = wTangent_92.y;
  tmpvar_102.y = tmpvar_100.y;
  tmpvar_102.z = wNormal_93.y;
  mediump vec3 tmpvar_103;
  tmpvar_103.x = wTangent_92.z;
  tmpvar_103.y = tmpvar_100.z;
  tmpvar_103.z = wNormal_93.z;
  highp vec4 tmpvar_104;
  tmpvar_104 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_7.xz = (tmpvar_104.xz - ((tmpvar_104.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_7.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_105;
  tmpvar_105 = normalize((tmpvar_104.xyz - adjCamPos_7));
  tmpvar_12 = tmpvar_105;
  mediump float tmpvar_106;
  tmpvar_106 = cos(_CamRotate);
  cost_6 = tmpvar_106;
  mediump float tmpvar_107;
  tmpvar_107 = sin(_CamRotate);
  sint_5 = tmpvar_107;
  highp mat2 tmpvar_108;
  tmpvar_108[0].x = cost_6;
  tmpvar_108[0].y = -(sint_5);
  tmpvar_108[1].x = sint_5;
  tmpvar_108[1].y = cost_6;
  tmpvar_12.xz = (tmpvar_108 * tmpvar_12.xz);
  highp vec3 tmpvar_109;
  tmpvar_109 = (_WorldSpaceCameraPos - tmpvar_104.xyz);
  tmpvar_13.xyz = tmpvar_109;
  highp vec4 tmpvar_110;
  tmpvar_110.xyz = offsetVertex_8.xyz;
  tmpvar_110.w = tmpvar_1.w;
  mediump vec3 fogParam_111;
  highp vec4 tmpvar_112;
  tmpvar_112 = (unity_ObjectToWorld * tmpvar_110);
  highp vec2 tmpvar_113;
  tmpvar_113 = (tmpvar_112.xz - _WorldSpaceCameraPos.xz);
  highp float tmpvar_114;
  tmpvar_114 = max (0.0, (sqrt(
    dot (tmpvar_113, tmpvar_113)
  ) - _UWFogDistStart));
  highp float tmpvar_115;
  tmpvar_115 = min (max ((
    (1.0 - exp((-(
      (_UWFogDensity * tmpvar_114)
    ) * (_UWFogDensity * tmpvar_114))))
   * _UWFogEffectLimit), _UWFogEffectStart), _UWFogEffectLimit);
  highp float tmpvar_116;
  tmpvar_116 = clamp (exp((
    -((_UWFogColorNFIntensity * tmpvar_114))
   * 
    (_UWFogColorNFIntensity * tmpvar_114)
  )), 0.0, 1.0);
  fogParam_111.x = tmpvar_116;
  fogParam_111.y = tmpvar_115;
  fogParam_111.z = tmpvar_112.y;
  gl_Position = tmpvar_17;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_COLOR0 = tmpvar_2;
  xlv_COLOR1 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_3.xyz;
  xlv_TEXCOORD2 = tmpvar_12;
  xlv_TEXCOORD3 = fogParam_111;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_101;
  xlv_TEXCOORD6 = tmpvar_102;
  xlv_TEXCOORD7 = tmpvar_103;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
uniform highp vec4 _UWFogColorLow;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWHeightFogDensity;
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
uniform highp float _UWHeightRatio;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  if ((xlv_TEXCOORD3.z > _WaterPlaneHeight)) {
    finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  } else {
    mediump vec3 xlat_varinput_32;
    xlat_varinput_32 = xlv_TEXCOORD3;
    mediump vec3 fogParam_33;
    highp float tmpvar_34;
    tmpvar_34 = max (0.0, ((_WaterPlaneHeight - xlv_TEXCOORD3.z) / (_WaterPlaneHeight - _UWFogHeightEnd)));
    highp float tmpvar_35;
    tmpvar_35 = min (max ((
      (1.0 - (_UWHeightFogDensity * tmpvar_34))
     * _UWHeightFogEffectLimit), _UWHeightFogEffectStart), _UWHeightFogEffectLimit);
    highp float tmpvar_36;
    tmpvar_36 = clamp ((_UWFogColorHLIntensity * tmpvar_34), 0.0, 1.0);
    fogParam_33.z = 0.0;
    fogParam_33.y = tmpvar_35;
    fogParam_33.x = tmpvar_36;
    if ((xlv_TEXCOORD3.y > 0.99)) {
      xlat_varinput_32.y = (xlv_TEXCOORD3.y * (1.0 - (tmpvar_34 * _UWHeightRatio)));
      highp float tmpvar_37;
      tmpvar_37 = clamp (xlat_varinput_32.y, _UWCriticalRange, 1.0);
      xlat_varinput_32.y = tmpvar_37;
    };
    fogParam_33.z = (1.0 - xlat_varinput_32.y);
    mediump vec4 tmpvar_38;
    tmpvar_38.w = 0.0;
    tmpvar_38.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_39;
    tmpvar_39 = mix (mix (_UWFogColorFar, _UWFogColorNear, xlv_TEXCOORD3.xxxx), tmpvar_38, fogParam_33.zzzz).xyz;
    finalColor_2.xyz = tmpvar_39;
    mediump vec4 tmpvar_40;
    tmpvar_40.w = 0.0;
    tmpvar_40.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_41;
    tmpvar_41 = mix (mix (_UWFogColorLow, _UWFogColorHigh, fogParam_33.xxxx), tmpvar_40, fogParam_33.yyyy).xyz;
    finalColor_2.xyz = tmpvar_41;
  };
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "_UNDERWATER_FOG" "UseNormalMap" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_WorldTransformParams;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
uniform highp float _UWFogDistStart;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _glesNormal;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp float sint_5;
  highp float cost_6;
  highp vec3 adjCamPos_7;
  mediump vec4 offsetVertex_8;
  mediump float normalOut_9;
  highp vec4 offset_10;
  mediump vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  mediump vec4 tmpvar_13;
  offset_10.yzw = vec3(0.0, 0.0, 0.0);
  offset_10.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_10.y = offset_10.x;
  highp float tmpvar_14;
  tmpvar_14 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_9 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = ((_glesVertex + (
    (offset_10 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_3 * normalOut_9) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_8 = tmpvar_15;
  highp vec4 pos_16;
  pos_16 = offsetVertex_8;
  highp vec4 tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = pos_16.xyz;
  tmpvar_17 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_18));
  tmpvar_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_11.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_22;
  mediump float fogFactor_23;
  mediump vec3 fogColor_24;
  mediump vec3 heightFogColor_25;
  highp float HeightFogFactor_26;
  mediump vec3 atomesphereFogColor_27;
  mediump float h_28;
  highp float linearFogDensity_29;
  mediump float len_30;
  highp float tmpvar_31;
  tmpvar_31 = sqrt(dot (tmpvar_21, tmpvar_21));
  len_30 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (((len_30 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_29 = (tmpvar_32 * (2.0 - tmpvar_32));
  if ((len_30 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_29 = (linearFogDensity_29 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_33;
  tmpvar_33 = min (pow (linearFogDensity_29, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_29 = tmpvar_33;
  mediump float tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((tmpvar_20.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_34 = tmpvar_35;
  h_28 = (tmpvar_34 * (2.0 - tmpvar_34));
  highp vec3 tmpvar_36;
  tmpvar_36 = (_HeigtFogColBase2.xyz + (h_28 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_27 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (atomesphereFogColor_27, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_30 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_27 = tmpvar_37;
  mediump float tmpvar_38;
  mediump float r_39;
  mediump float f_40;
  mediump float u_41;
  mediump float l_42;
  mediump float fogInt_43;
  fogInt_43 = 1.0;
  highp float tmpvar_44;
  tmpvar_44 = (_HeigtFogParams2.x * tmpvar_21.y);
  highp float tmpvar_45;
  tmpvar_45 = abs(tmpvar_44);
  if ((tmpvar_45 > 0.01)) {
    highp float tmpvar_46;
    tmpvar_46 = exp(-(tmpvar_44));
    fogInt_43 = ((1.0 - tmpvar_46) / tmpvar_44);
  };
  highp float tmpvar_47;
  tmpvar_47 = sqrt(dot (tmpvar_21, tmpvar_21));
  l_42 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = (l_42 * _HeigtFogParams2.y);
  u_41 = tmpvar_48;
  fogInt_43 = (fogInt_43 * u_41);
  mediump float tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((l_42 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_49 = tmpvar_50;
  r_39 = (tmpvar_49 * (2.0 - tmpvar_49));
  r_39 = ((r_39 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_40 = ((1.0 - clamp (
    exp2(-(fogInt_43))
  , 0.0, 1.0)) * r_39);
  highp float tmpvar_51;
  tmpvar_51 = min (f_40, _HeigtFogColBase2.w);
  tmpvar_38 = tmpvar_51;
  HeightFogFactor_26 = tmpvar_38;
  highp vec3 tmpvar_52;
  tmpvar_52 = _Mihoyo_FogColor2.xyz;
  heightFogColor_25 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = ((heightFogColor_25 * HeightFogFactor_26) + ((atomesphereFogColor_27 * tmpvar_33) * (1.0 - HeightFogFactor_26)));
  fogColor_24 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = ((1.0 - tmpvar_33) * (1.0 - HeightFogFactor_26));
  fogFactor_23 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55.xyz = fogColor_24;
  tmpvar_55.w = fogFactor_23;
  tmpvar_22 = tmpvar_55;
  highp vec4 tmpvar_56;
  mediump float fogFactor_57;
  mediump vec3 fogColor_58;
  mediump vec3 heightFogColor_59;
  highp float HeightFogFactor_60;
  mediump vec3 atomesphereFogColor_61;
  mediump float h_62;
  highp float linearFogDensity_63;
  mediump float len_64;
  highp float tmpvar_65;
  tmpvar_65 = sqrt(dot (tmpvar_21, tmpvar_21));
  len_64 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = clamp (((len_64 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_63 = (tmpvar_66 * (2.0 - tmpvar_66));
  if ((len_64 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_63 = (linearFogDensity_63 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_67;
  tmpvar_67 = min (pow (linearFogDensity_63, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_63 = tmpvar_67;
  mediump float tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((tmpvar_20.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_68 = tmpvar_69;
  h_62 = (tmpvar_68 * (2.0 - tmpvar_68));
  highp vec3 tmpvar_70;
  tmpvar_70 = (_HeigtFogColBase3.xyz + (h_62 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_61 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = mix (atomesphereFogColor_61, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_64 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_61 = tmpvar_71;
  mediump float tmpvar_72;
  mediump float r_73;
  mediump float f_74;
  mediump float u_75;
  mediump float l_76;
  mediump float fogInt_77;
  fogInt_77 = 1.0;
  highp float tmpvar_78;
  tmpvar_78 = (_HeigtFogParams3.x * tmpvar_21.y);
  highp float tmpvar_79;
  tmpvar_79 = abs(tmpvar_78);
  if ((tmpvar_79 > 0.01)) {
    highp float tmpvar_80;
    tmpvar_80 = exp(-(tmpvar_78));
    fogInt_77 = ((1.0 - tmpvar_80) / tmpvar_78);
  };
  highp float tmpvar_81;
  tmpvar_81 = sqrt(dot (tmpvar_21, tmpvar_21));
  l_76 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (l_76 * _HeigtFogParams3.y);
  u_75 = tmpvar_82;
  fogInt_77 = (fogInt_77 * u_75);
  mediump float tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = clamp (((l_76 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_83 = tmpvar_84;
  r_73 = (tmpvar_83 * (2.0 - tmpvar_83));
  r_73 = ((r_73 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_74 = ((1.0 - clamp (
    exp2(-(fogInt_77))
  , 0.0, 1.0)) * r_73);
  highp float tmpvar_85;
  tmpvar_85 = min (f_74, _HeigtFogColBase3.w);
  tmpvar_72 = tmpvar_85;
  HeightFogFactor_60 = tmpvar_72;
  highp vec3 tmpvar_86;
  tmpvar_86 = _Mihoyo_FogColor3.xyz;
  heightFogColor_59 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = ((heightFogColor_59 * HeightFogFactor_60) + ((atomesphereFogColor_61 * tmpvar_67) * (1.0 - HeightFogFactor_60)));
  fogColor_58 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = ((1.0 - tmpvar_67) * (1.0 - HeightFogFactor_60));
  fogFactor_57 = tmpvar_88;
  mediump vec4 tmpvar_89;
  tmpvar_89.xyz = fogColor_58;
  tmpvar_89.w = fogFactor_57;
  tmpvar_56 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (tmpvar_22, tmpvar_56, vec4(_LerpFactor));
  tmpvar_19 = tmpvar_90;
  tmpvar_13.w = 1.0;
  mediump vec3 tmpvar_91;
  tmpvar_91 = tmpvar_3.xyz;
  mediump vec4 wTangent_92;
  mediump vec3 wNormal_93;
  highp vec3 norm_94;
  norm_94 = tmpvar_91;
  highp mat3 tmpvar_95;
  tmpvar_95[0] = unity_WorldToObject[0].xyz;
  tmpvar_95[1] = unity_WorldToObject[1].xyz;
  tmpvar_95[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_96;
  tmpvar_96 = normalize((norm_94 * tmpvar_95));
  wNormal_93 = tmpvar_96;
  highp vec3 dir_97;
  dir_97 = tmpvar_4.xyz;
  highp mat3 tmpvar_98;
  tmpvar_98[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_98[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_98[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_99;
  tmpvar_99 = normalize((tmpvar_98 * dir_97));
  wTangent_92.xyz = tmpvar_99;
  wTangent_92.w = (_glesTANGENT.w * unity_WorldTransformParams.w);
  mediump vec3 tmpvar_100;
  tmpvar_100 = (((wNormal_93.yzx * wTangent_92.zxy) - (wNormal_93.zxy * wTangent_92.yzx)) * wTangent_92.w);
  mediump vec3 tmpvar_101;
  tmpvar_101.x = wTangent_92.x;
  tmpvar_101.y = tmpvar_100.x;
  tmpvar_101.z = wNormal_93.x;
  mediump vec3 tmpvar_102;
  tmpvar_102.x = wTangent_92.y;
  tmpvar_102.y = tmpvar_100.y;
  tmpvar_102.z = wNormal_93.y;
  mediump vec3 tmpvar_103;
  tmpvar_103.x = wTangent_92.z;
  tmpvar_103.y = tmpvar_100.z;
  tmpvar_103.z = wNormal_93.z;
  highp vec4 tmpvar_104;
  tmpvar_104 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_7.xz = (tmpvar_104.xz - ((tmpvar_104.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_7.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_105;
  tmpvar_105 = normalize((tmpvar_104.xyz - adjCamPos_7));
  tmpvar_12 = tmpvar_105;
  mediump float tmpvar_106;
  tmpvar_106 = cos(_CamRotate);
  cost_6 = tmpvar_106;
  mediump float tmpvar_107;
  tmpvar_107 = sin(_CamRotate);
  sint_5 = tmpvar_107;
  highp mat2 tmpvar_108;
  tmpvar_108[0].x = cost_6;
  tmpvar_108[0].y = -(sint_5);
  tmpvar_108[1].x = sint_5;
  tmpvar_108[1].y = cost_6;
  tmpvar_12.xz = (tmpvar_108 * tmpvar_12.xz);
  highp vec3 tmpvar_109;
  tmpvar_109 = (_WorldSpaceCameraPos - tmpvar_104.xyz);
  tmpvar_13.xyz = tmpvar_109;
  highp vec4 tmpvar_110;
  tmpvar_110.xyz = offsetVertex_8.xyz;
  tmpvar_110.w = tmpvar_1.w;
  mediump vec3 fogParam_111;
  highp vec4 tmpvar_112;
  tmpvar_112 = (unity_ObjectToWorld * tmpvar_110);
  highp vec2 tmpvar_113;
  tmpvar_113 = (tmpvar_112.xz - _WorldSpaceCameraPos.xz);
  highp float tmpvar_114;
  tmpvar_114 = max (0.0, (sqrt(
    dot (tmpvar_113, tmpvar_113)
  ) - _UWFogDistStart));
  highp float tmpvar_115;
  tmpvar_115 = min (max ((
    (1.0 - exp((-(
      (_UWFogDensity * tmpvar_114)
    ) * (_UWFogDensity * tmpvar_114))))
   * _UWFogEffectLimit), _UWFogEffectStart), _UWFogEffectLimit);
  highp float tmpvar_116;
  tmpvar_116 = clamp (exp((
    -((_UWFogColorNFIntensity * tmpvar_114))
   * 
    (_UWFogColorNFIntensity * tmpvar_114)
  )), 0.0, 1.0);
  fogParam_111.x = tmpvar_116;
  fogParam_111.y = tmpvar_115;
  fogParam_111.z = tmpvar_112.y;
  gl_Position = tmpvar_17;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_COLOR0 = tmpvar_2;
  xlv_COLOR1 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_3.xyz;
  xlv_TEXCOORD2 = tmpvar_12;
  xlv_TEXCOORD3 = fogParam_111;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_101;
  xlv_TEXCOORD6 = tmpvar_102;
  xlv_TEXCOORD7 = tmpvar_103;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
uniform highp vec4 _UWFogColorLow;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWHeightFogDensity;
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
uniform highp float _UWHeightRatio;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  if ((xlv_TEXCOORD3.z > _WaterPlaneHeight)) {
    finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  } else {
    mediump vec3 xlat_varinput_32;
    xlat_varinput_32 = xlv_TEXCOORD3;
    mediump vec3 fogParam_33;
    highp float tmpvar_34;
    tmpvar_34 = max (0.0, ((_WaterPlaneHeight - xlv_TEXCOORD3.z) / (_WaterPlaneHeight - _UWFogHeightEnd)));
    highp float tmpvar_35;
    tmpvar_35 = min (max ((
      (1.0 - (_UWHeightFogDensity * tmpvar_34))
     * _UWHeightFogEffectLimit), _UWHeightFogEffectStart), _UWHeightFogEffectLimit);
    highp float tmpvar_36;
    tmpvar_36 = clamp ((_UWFogColorHLIntensity * tmpvar_34), 0.0, 1.0);
    fogParam_33.z = 0.0;
    fogParam_33.y = tmpvar_35;
    fogParam_33.x = tmpvar_36;
    if ((xlv_TEXCOORD3.y > 0.99)) {
      xlat_varinput_32.y = (xlv_TEXCOORD3.y * (1.0 - (tmpvar_34 * _UWHeightRatio)));
      highp float tmpvar_37;
      tmpvar_37 = clamp (xlat_varinput_32.y, _UWCriticalRange, 1.0);
      xlat_varinput_32.y = tmpvar_37;
    };
    fogParam_33.z = (1.0 - xlat_varinput_32.y);
    mediump vec4 tmpvar_38;
    tmpvar_38.w = 0.0;
    tmpvar_38.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_39;
    tmpvar_39 = mix (mix (_UWFogColorFar, _UWFogColorNear, xlv_TEXCOORD3.xxxx), tmpvar_38, fogParam_33.zzzz).xyz;
    finalColor_2.xyz = tmpvar_39;
    mediump vec4 tmpvar_40;
    tmpvar_40.w = 0.0;
    tmpvar_40.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_41;
    tmpvar_41 = mix (mix (_UWFogColorLow, _UWFogColorHigh, fogParam_33.xxxx), tmpvar_40, fogParam_33.yyyy).xyz;
    finalColor_2.xyz = tmpvar_41;
  };
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "_UNDERWATER_FOG" "UseNormalMap" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_WorldTransformParams;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
uniform highp float _UWFogDistStart;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _glesNormal;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp float sint_5;
  highp float cost_6;
  highp vec3 adjCamPos_7;
  mediump vec4 offsetVertex_8;
  mediump float normalOut_9;
  highp vec4 offset_10;
  mediump vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  mediump vec4 tmpvar_13;
  offset_10.yzw = vec3(0.0, 0.0, 0.0);
  offset_10.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_10.y = offset_10.x;
  highp float tmpvar_14;
  tmpvar_14 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_9 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = ((_glesVertex + (
    (offset_10 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_3 * normalOut_9) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_8 = tmpvar_15;
  highp vec4 pos_16;
  pos_16 = offsetVertex_8;
  highp vec4 tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = pos_16.xyz;
  tmpvar_17 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_18));
  tmpvar_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_11.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_22;
  mediump float fogFactor_23;
  mediump vec3 fogColor_24;
  mediump vec3 heightFogColor_25;
  highp float HeightFogFactor_26;
  mediump vec3 atomesphereFogColor_27;
  mediump float h_28;
  highp float linearFogDensity_29;
  mediump float len_30;
  highp float tmpvar_31;
  tmpvar_31 = sqrt(dot (tmpvar_21, tmpvar_21));
  len_30 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (((len_30 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_29 = (tmpvar_32 * (2.0 - tmpvar_32));
  if ((len_30 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_29 = (linearFogDensity_29 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_33;
  tmpvar_33 = min (pow (linearFogDensity_29, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_29 = tmpvar_33;
  mediump float tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((tmpvar_20.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_34 = tmpvar_35;
  h_28 = (tmpvar_34 * (2.0 - tmpvar_34));
  highp vec3 tmpvar_36;
  tmpvar_36 = (_HeigtFogColBase2.xyz + (h_28 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_27 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (atomesphereFogColor_27, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_30 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_27 = tmpvar_37;
  mediump float tmpvar_38;
  mediump float r_39;
  mediump float f_40;
  mediump float u_41;
  mediump float l_42;
  mediump float fogInt_43;
  fogInt_43 = 1.0;
  highp float tmpvar_44;
  tmpvar_44 = (_HeigtFogParams2.x * tmpvar_21.y);
  highp float tmpvar_45;
  tmpvar_45 = abs(tmpvar_44);
  if ((tmpvar_45 > 0.01)) {
    highp float tmpvar_46;
    tmpvar_46 = exp(-(tmpvar_44));
    fogInt_43 = ((1.0 - tmpvar_46) / tmpvar_44);
  };
  highp float tmpvar_47;
  tmpvar_47 = sqrt(dot (tmpvar_21, tmpvar_21));
  l_42 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = (l_42 * _HeigtFogParams2.y);
  u_41 = tmpvar_48;
  fogInt_43 = (fogInt_43 * u_41);
  mediump float tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((l_42 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_49 = tmpvar_50;
  r_39 = (tmpvar_49 * (2.0 - tmpvar_49));
  r_39 = ((r_39 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_40 = ((1.0 - clamp (
    exp2(-(fogInt_43))
  , 0.0, 1.0)) * r_39);
  highp float tmpvar_51;
  tmpvar_51 = min (f_40, _HeigtFogColBase2.w);
  tmpvar_38 = tmpvar_51;
  HeightFogFactor_26 = tmpvar_38;
  highp vec3 tmpvar_52;
  tmpvar_52 = _Mihoyo_FogColor2.xyz;
  heightFogColor_25 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = ((heightFogColor_25 * HeightFogFactor_26) + ((atomesphereFogColor_27 * tmpvar_33) * (1.0 - HeightFogFactor_26)));
  fogColor_24 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = ((1.0 - tmpvar_33) * (1.0 - HeightFogFactor_26));
  fogFactor_23 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55.xyz = fogColor_24;
  tmpvar_55.w = fogFactor_23;
  tmpvar_22 = tmpvar_55;
  highp vec4 tmpvar_56;
  mediump float fogFactor_57;
  mediump vec3 fogColor_58;
  mediump vec3 heightFogColor_59;
  highp float HeightFogFactor_60;
  mediump vec3 atomesphereFogColor_61;
  mediump float h_62;
  highp float linearFogDensity_63;
  mediump float len_64;
  highp float tmpvar_65;
  tmpvar_65 = sqrt(dot (tmpvar_21, tmpvar_21));
  len_64 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = clamp (((len_64 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_63 = (tmpvar_66 * (2.0 - tmpvar_66));
  if ((len_64 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_63 = (linearFogDensity_63 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_67;
  tmpvar_67 = min (pow (linearFogDensity_63, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_63 = tmpvar_67;
  mediump float tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((tmpvar_20.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_68 = tmpvar_69;
  h_62 = (tmpvar_68 * (2.0 - tmpvar_68));
  highp vec3 tmpvar_70;
  tmpvar_70 = (_HeigtFogColBase3.xyz + (h_62 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_61 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = mix (atomesphereFogColor_61, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_64 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_61 = tmpvar_71;
  mediump float tmpvar_72;
  mediump float r_73;
  mediump float f_74;
  mediump float u_75;
  mediump float l_76;
  mediump float fogInt_77;
  fogInt_77 = 1.0;
  highp float tmpvar_78;
  tmpvar_78 = (_HeigtFogParams3.x * tmpvar_21.y);
  highp float tmpvar_79;
  tmpvar_79 = abs(tmpvar_78);
  if ((tmpvar_79 > 0.01)) {
    highp float tmpvar_80;
    tmpvar_80 = exp(-(tmpvar_78));
    fogInt_77 = ((1.0 - tmpvar_80) / tmpvar_78);
  };
  highp float tmpvar_81;
  tmpvar_81 = sqrt(dot (tmpvar_21, tmpvar_21));
  l_76 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (l_76 * _HeigtFogParams3.y);
  u_75 = tmpvar_82;
  fogInt_77 = (fogInt_77 * u_75);
  mediump float tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = clamp (((l_76 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_83 = tmpvar_84;
  r_73 = (tmpvar_83 * (2.0 - tmpvar_83));
  r_73 = ((r_73 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_74 = ((1.0 - clamp (
    exp2(-(fogInt_77))
  , 0.0, 1.0)) * r_73);
  highp float tmpvar_85;
  tmpvar_85 = min (f_74, _HeigtFogColBase3.w);
  tmpvar_72 = tmpvar_85;
  HeightFogFactor_60 = tmpvar_72;
  highp vec3 tmpvar_86;
  tmpvar_86 = _Mihoyo_FogColor3.xyz;
  heightFogColor_59 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = ((heightFogColor_59 * HeightFogFactor_60) + ((atomesphereFogColor_61 * tmpvar_67) * (1.0 - HeightFogFactor_60)));
  fogColor_58 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = ((1.0 - tmpvar_67) * (1.0 - HeightFogFactor_60));
  fogFactor_57 = tmpvar_88;
  mediump vec4 tmpvar_89;
  tmpvar_89.xyz = fogColor_58;
  tmpvar_89.w = fogFactor_57;
  tmpvar_56 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (tmpvar_22, tmpvar_56, vec4(_LerpFactor));
  tmpvar_19 = tmpvar_90;
  tmpvar_13.w = 1.0;
  mediump vec3 tmpvar_91;
  tmpvar_91 = tmpvar_3.xyz;
  mediump vec4 wTangent_92;
  mediump vec3 wNormal_93;
  highp vec3 norm_94;
  norm_94 = tmpvar_91;
  highp mat3 tmpvar_95;
  tmpvar_95[0] = unity_WorldToObject[0].xyz;
  tmpvar_95[1] = unity_WorldToObject[1].xyz;
  tmpvar_95[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_96;
  tmpvar_96 = normalize((norm_94 * tmpvar_95));
  wNormal_93 = tmpvar_96;
  highp vec3 dir_97;
  dir_97 = tmpvar_4.xyz;
  highp mat3 tmpvar_98;
  tmpvar_98[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_98[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_98[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_99;
  tmpvar_99 = normalize((tmpvar_98 * dir_97));
  wTangent_92.xyz = tmpvar_99;
  wTangent_92.w = (_glesTANGENT.w * unity_WorldTransformParams.w);
  mediump vec3 tmpvar_100;
  tmpvar_100 = (((wNormal_93.yzx * wTangent_92.zxy) - (wNormal_93.zxy * wTangent_92.yzx)) * wTangent_92.w);
  mediump vec3 tmpvar_101;
  tmpvar_101.x = wTangent_92.x;
  tmpvar_101.y = tmpvar_100.x;
  tmpvar_101.z = wNormal_93.x;
  mediump vec3 tmpvar_102;
  tmpvar_102.x = wTangent_92.y;
  tmpvar_102.y = tmpvar_100.y;
  tmpvar_102.z = wNormal_93.y;
  mediump vec3 tmpvar_103;
  tmpvar_103.x = wTangent_92.z;
  tmpvar_103.y = tmpvar_100.z;
  tmpvar_103.z = wNormal_93.z;
  highp vec4 tmpvar_104;
  tmpvar_104 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_7.xz = (tmpvar_104.xz - ((tmpvar_104.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_7.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_105;
  tmpvar_105 = normalize((tmpvar_104.xyz - adjCamPos_7));
  tmpvar_12 = tmpvar_105;
  mediump float tmpvar_106;
  tmpvar_106 = cos(_CamRotate);
  cost_6 = tmpvar_106;
  mediump float tmpvar_107;
  tmpvar_107 = sin(_CamRotate);
  sint_5 = tmpvar_107;
  highp mat2 tmpvar_108;
  tmpvar_108[0].x = cost_6;
  tmpvar_108[0].y = -(sint_5);
  tmpvar_108[1].x = sint_5;
  tmpvar_108[1].y = cost_6;
  tmpvar_12.xz = (tmpvar_108 * tmpvar_12.xz);
  highp vec3 tmpvar_109;
  tmpvar_109 = (_WorldSpaceCameraPos - tmpvar_104.xyz);
  tmpvar_13.xyz = tmpvar_109;
  highp vec4 tmpvar_110;
  tmpvar_110.xyz = offsetVertex_8.xyz;
  tmpvar_110.w = tmpvar_1.w;
  mediump vec3 fogParam_111;
  highp vec4 tmpvar_112;
  tmpvar_112 = (unity_ObjectToWorld * tmpvar_110);
  highp vec2 tmpvar_113;
  tmpvar_113 = (tmpvar_112.xz - _WorldSpaceCameraPos.xz);
  highp float tmpvar_114;
  tmpvar_114 = max (0.0, (sqrt(
    dot (tmpvar_113, tmpvar_113)
  ) - _UWFogDistStart));
  highp float tmpvar_115;
  tmpvar_115 = min (max ((
    (1.0 - exp((-(
      (_UWFogDensity * tmpvar_114)
    ) * (_UWFogDensity * tmpvar_114))))
   * _UWFogEffectLimit), _UWFogEffectStart), _UWFogEffectLimit);
  highp float tmpvar_116;
  tmpvar_116 = clamp (exp((
    -((_UWFogColorNFIntensity * tmpvar_114))
   * 
    (_UWFogColorNFIntensity * tmpvar_114)
  )), 0.0, 1.0);
  fogParam_111.x = tmpvar_116;
  fogParam_111.y = tmpvar_115;
  fogParam_111.z = tmpvar_112.y;
  gl_Position = tmpvar_17;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_COLOR0 = tmpvar_2;
  xlv_COLOR1 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_3.xyz;
  xlv_TEXCOORD2 = tmpvar_12;
  xlv_TEXCOORD3 = fogParam_111;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_101;
  xlv_TEXCOORD6 = tmpvar_102;
  xlv_TEXCOORD7 = tmpvar_103;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
uniform highp vec4 _UWFogColorLow;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWHeightFogDensity;
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
uniform highp float _UWHeightRatio;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  if ((xlv_TEXCOORD3.z > _WaterPlaneHeight)) {
    finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  } else {
    mediump vec3 xlat_varinput_32;
    xlat_varinput_32 = xlv_TEXCOORD3;
    mediump vec3 fogParam_33;
    highp float tmpvar_34;
    tmpvar_34 = max (0.0, ((_WaterPlaneHeight - xlv_TEXCOORD3.z) / (_WaterPlaneHeight - _UWFogHeightEnd)));
    highp float tmpvar_35;
    tmpvar_35 = min (max ((
      (1.0 - (_UWHeightFogDensity * tmpvar_34))
     * _UWHeightFogEffectLimit), _UWHeightFogEffectStart), _UWHeightFogEffectLimit);
    highp float tmpvar_36;
    tmpvar_36 = clamp ((_UWFogColorHLIntensity * tmpvar_34), 0.0, 1.0);
    fogParam_33.z = 0.0;
    fogParam_33.y = tmpvar_35;
    fogParam_33.x = tmpvar_36;
    if ((xlv_TEXCOORD3.y > 0.99)) {
      xlat_varinput_32.y = (xlv_TEXCOORD3.y * (1.0 - (tmpvar_34 * _UWHeightRatio)));
      highp float tmpvar_37;
      tmpvar_37 = clamp (xlat_varinput_32.y, _UWCriticalRange, 1.0);
      xlat_varinput_32.y = tmpvar_37;
    };
    fogParam_33.z = (1.0 - xlat_varinput_32.y);
    mediump vec4 tmpvar_38;
    tmpvar_38.w = 0.0;
    tmpvar_38.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_39;
    tmpvar_39 = mix (mix (_UWFogColorFar, _UWFogColorNear, xlv_TEXCOORD3.xxxx), tmpvar_38, fogParam_33.zzzz).xyz;
    finalColor_2.xyz = tmpvar_39;
    mediump vec4 tmpvar_40;
    tmpvar_40.w = 0.0;
    tmpvar_40.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_41;
    tmpvar_41 = mix (mix (_UWFogColorLow, _UWFogColorHigh, fogParam_33.xxxx), tmpvar_40, fogParam_33.yyyy).xyz;
    finalColor_2.xyz = tmpvar_41;
  };
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_UNDERWATER_FOG" "FRESNEL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _FogStartDistance;
uniform highp float _FogEndDistance;
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
uniform highp float _UWFogDistStart;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _glesNormal;
  mediump vec4 tmpvar_3;
  tmpvar_3 = _glesColor;
  highp float sint_4;
  highp float cost_5;
  highp vec3 adjCamPos_6;
  mediump vec4 offsetVertex_7;
  mediump float normalOut_8;
  highp vec4 offset_9;
  highp vec4 tmpvar_10;
  mediump vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  mediump vec4 tmpvar_13;
  mediump vec3 tmpvar_14;
  offset_9.yzw = vec3(0.0, 0.0, 0.0);
  offset_9.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_9.y = offset_9.x;
  highp float tmpvar_15;
  tmpvar_15 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_8 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = ((_glesVertex + (
    (offset_9 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_2 * normalOut_8) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_7 = tmpvar_16;
  highp vec4 pos_17;
  pos_17 = offsetVertex_7;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = pos_17.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_18));
  tmpvar_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_11.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_19;
  if ((_FogColorNear.w > 0.5)) {
    mediump vec4 fogColor_20;
    highp vec3 tmpvar_21;
    tmpvar_21 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_22;
    tmpvar_22 = max (0.0, (sqrt(
      dot (tmpvar_21, tmpvar_21)
    ) - _FogStartDistance));
    highp float tmpvar_23;
    tmpvar_23 = min (max ((
      (1.0 - exp((-(
        (_FogIntensity * tmpvar_22)
      ) * (_FogIntensity * tmpvar_22))))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_24;
    tmpvar_24 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3(clamp (exp(
      (-((_FogColorIntensity * tmpvar_22)) * (_FogColorIntensity * tmpvar_22))
    ), 0.0, 1.0)));
    fogColor_20.xyz = tmpvar_24;
    fogColor_20.w = tmpvar_23;
    tmpvar_19 = fogColor_20;
  } else {
    mediump vec4 fogColor_25;
    highp vec3 tmpvar_26;
    tmpvar_26 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_27;
    tmpvar_27 = max (0.0, (sqrt(
      dot (tmpvar_26, tmpvar_26)
    ) - _FogStartDistance));
    highp float tmpvar_28;
    highp float tmpvar_29;
    tmpvar_29 = (_FogEndDistance - _FogStartDistance);
    tmpvar_28 = min (max ((
      (((500.0 * _FogIntensity) * tmpvar_27) / max (0.1, tmpvar_29))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_30;
    tmpvar_30 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3((1.0 - clamp (
      (((1000.0 * _FogColorIntensity) * tmpvar_27) / max (0.1, tmpvar_29))
    , 0.0, 1.0))));
    fogColor_25.xyz = tmpvar_30;
    fogColor_25.w = tmpvar_28;
    tmpvar_19 = fogColor_25;
  };
  tmpvar_13.w = 1.0;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_2.xyz;
  highp vec3 norm_32;
  norm_32 = tmpvar_31;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = unity_WorldToObject[0].xyz;
  tmpvar_33[1] = unity_WorldToObject[1].xyz;
  tmpvar_33[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize(normalize((norm_32 * tmpvar_33)));
  tmpvar_14 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_6.xz = (tmpvar_35.xz - ((tmpvar_35.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_6.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((tmpvar_35.xyz - adjCamPos_6));
  tmpvar_12 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = cos(_CamRotate);
  cost_5 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = sin(_CamRotate);
  sint_4 = tmpvar_38;
  highp mat2 tmpvar_39;
  tmpvar_39[0].x = cost_5;
  tmpvar_39[0].y = -(sint_4);
  tmpvar_39[1].x = sint_4;
  tmpvar_39[1].y = cost_5;
  tmpvar_12.xz = (tmpvar_39 * tmpvar_12.xz);
  highp vec3 tmpvar_40;
  tmpvar_40 = (_WorldSpaceCameraPos - tmpvar_35.xyz);
  tmpvar_13.xyz = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41.xyz = offsetVertex_7.xyz;
  tmpvar_41.w = tmpvar_1.w;
  mediump vec3 fogParam_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (unity_ObjectToWorld * tmpvar_41);
  highp vec2 tmpvar_44;
  tmpvar_44 = (tmpvar_43.xz - _WorldSpaceCameraPos.xz);
  highp float tmpvar_45;
  tmpvar_45 = max (0.0, (sqrt(
    dot (tmpvar_44, tmpvar_44)
  ) - _UWFogDistStart));
  highp float tmpvar_46;
  tmpvar_46 = min (max ((
    (1.0 - exp((-(
      (_UWFogDensity * tmpvar_45)
    ) * (_UWFogDensity * tmpvar_45))))
   * _UWFogEffectLimit), _UWFogEffectStart), _UWFogEffectLimit);
  highp float tmpvar_47;
  tmpvar_47 = clamp (exp((
    -((_UWFogColorNFIntensity * tmpvar_45))
   * 
    (_UWFogColorNFIntensity * tmpvar_45)
  )), 0.0, 1.0);
  fogParam_42.x = tmpvar_47;
  fogParam_42.y = tmpvar_46;
  fogParam_42.z = tmpvar_43.y;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_COLOR0 = tmpvar_3;
  xlv_COLOR1 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_2.xyz;
  xlv_TEXCOORD2 = tmpvar_12;
  xlv_TEXCOORD3 = fogParam_42;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_14;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
uniform highp vec4 _UWFogColorLow;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWHeightFogDensity;
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
uniform highp float _UWHeightRatio;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
uniform highp vec4 _RimColor;
uniform highp float _RimPower;
uniform highp float _RimIntensity;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  mediump float tmpvar_32;
  tmpvar_32 = (1.0 - clamp (dot (
    normalize(xlv_TEXCOORD4.xyz)
  , xlv_TEXCOORD5), 0.0, 1.0));
  highp float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, _RimPower);
  finalColor_2.xyz = (finalColor_2.xyz + ((_RimColor.xyz * tmpvar_33) * _RimIntensity));
  if ((xlv_TEXCOORD3.z > _WaterPlaneHeight)) {
    finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  } else {
    mediump vec3 xlat_varinput_34;
    xlat_varinput_34 = xlv_TEXCOORD3;
    mediump vec3 fogParam_35;
    highp float tmpvar_36;
    tmpvar_36 = max (0.0, ((_WaterPlaneHeight - xlv_TEXCOORD3.z) / (_WaterPlaneHeight - _UWFogHeightEnd)));
    highp float tmpvar_37;
    tmpvar_37 = min (max ((
      (1.0 - (_UWHeightFogDensity * tmpvar_36))
     * _UWHeightFogEffectLimit), _UWHeightFogEffectStart), _UWHeightFogEffectLimit);
    highp float tmpvar_38;
    tmpvar_38 = clamp ((_UWFogColorHLIntensity * tmpvar_36), 0.0, 1.0);
    fogParam_35.z = 0.0;
    fogParam_35.y = tmpvar_37;
    fogParam_35.x = tmpvar_38;
    if ((xlv_TEXCOORD3.y > 0.99)) {
      xlat_varinput_34.y = (xlv_TEXCOORD3.y * (1.0 - (tmpvar_36 * _UWHeightRatio)));
      highp float tmpvar_39;
      tmpvar_39 = clamp (xlat_varinput_34.y, _UWCriticalRange, 1.0);
      xlat_varinput_34.y = tmpvar_39;
    };
    fogParam_35.z = (1.0 - xlat_varinput_34.y);
    mediump vec4 tmpvar_40;
    tmpvar_40.w = 0.0;
    tmpvar_40.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_41;
    tmpvar_41 = mix (mix (_UWFogColorFar, _UWFogColorNear, xlv_TEXCOORD3.xxxx), tmpvar_40, fogParam_35.zzzz).xyz;
    finalColor_2.xyz = tmpvar_41;
    mediump vec4 tmpvar_42;
    tmpvar_42.w = 0.0;
    tmpvar_42.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_43;
    tmpvar_43 = mix (mix (_UWFogColorLow, _UWFogColorHigh, fogParam_35.xxxx), tmpvar_42, fogParam_35.yyyy).xyz;
    finalColor_2.xyz = tmpvar_43;
  };
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_UNDERWATER_FOG" "FRESNEL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _FogStartDistance;
uniform highp float _FogEndDistance;
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
uniform highp float _UWFogDistStart;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _glesNormal;
  mediump vec4 tmpvar_3;
  tmpvar_3 = _glesColor;
  highp float sint_4;
  highp float cost_5;
  highp vec3 adjCamPos_6;
  mediump vec4 offsetVertex_7;
  mediump float normalOut_8;
  highp vec4 offset_9;
  highp vec4 tmpvar_10;
  mediump vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  mediump vec4 tmpvar_13;
  mediump vec3 tmpvar_14;
  offset_9.yzw = vec3(0.0, 0.0, 0.0);
  offset_9.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_9.y = offset_9.x;
  highp float tmpvar_15;
  tmpvar_15 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_8 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = ((_glesVertex + (
    (offset_9 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_2 * normalOut_8) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_7 = tmpvar_16;
  highp vec4 pos_17;
  pos_17 = offsetVertex_7;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = pos_17.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_18));
  tmpvar_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_11.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_19;
  if ((_FogColorNear.w > 0.5)) {
    mediump vec4 fogColor_20;
    highp vec3 tmpvar_21;
    tmpvar_21 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_22;
    tmpvar_22 = max (0.0, (sqrt(
      dot (tmpvar_21, tmpvar_21)
    ) - _FogStartDistance));
    highp float tmpvar_23;
    tmpvar_23 = min (max ((
      (1.0 - exp((-(
        (_FogIntensity * tmpvar_22)
      ) * (_FogIntensity * tmpvar_22))))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_24;
    tmpvar_24 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3(clamp (exp(
      (-((_FogColorIntensity * tmpvar_22)) * (_FogColorIntensity * tmpvar_22))
    ), 0.0, 1.0)));
    fogColor_20.xyz = tmpvar_24;
    fogColor_20.w = tmpvar_23;
    tmpvar_19 = fogColor_20;
  } else {
    mediump vec4 fogColor_25;
    highp vec3 tmpvar_26;
    tmpvar_26 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_27;
    tmpvar_27 = max (0.0, (sqrt(
      dot (tmpvar_26, tmpvar_26)
    ) - _FogStartDistance));
    highp float tmpvar_28;
    highp float tmpvar_29;
    tmpvar_29 = (_FogEndDistance - _FogStartDistance);
    tmpvar_28 = min (max ((
      (((500.0 * _FogIntensity) * tmpvar_27) / max (0.1, tmpvar_29))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_30;
    tmpvar_30 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3((1.0 - clamp (
      (((1000.0 * _FogColorIntensity) * tmpvar_27) / max (0.1, tmpvar_29))
    , 0.0, 1.0))));
    fogColor_25.xyz = tmpvar_30;
    fogColor_25.w = tmpvar_28;
    tmpvar_19 = fogColor_25;
  };
  tmpvar_13.w = 1.0;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_2.xyz;
  highp vec3 norm_32;
  norm_32 = tmpvar_31;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = unity_WorldToObject[0].xyz;
  tmpvar_33[1] = unity_WorldToObject[1].xyz;
  tmpvar_33[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize(normalize((norm_32 * tmpvar_33)));
  tmpvar_14 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_6.xz = (tmpvar_35.xz - ((tmpvar_35.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_6.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((tmpvar_35.xyz - adjCamPos_6));
  tmpvar_12 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = cos(_CamRotate);
  cost_5 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = sin(_CamRotate);
  sint_4 = tmpvar_38;
  highp mat2 tmpvar_39;
  tmpvar_39[0].x = cost_5;
  tmpvar_39[0].y = -(sint_4);
  tmpvar_39[1].x = sint_4;
  tmpvar_39[1].y = cost_5;
  tmpvar_12.xz = (tmpvar_39 * tmpvar_12.xz);
  highp vec3 tmpvar_40;
  tmpvar_40 = (_WorldSpaceCameraPos - tmpvar_35.xyz);
  tmpvar_13.xyz = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41.xyz = offsetVertex_7.xyz;
  tmpvar_41.w = tmpvar_1.w;
  mediump vec3 fogParam_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (unity_ObjectToWorld * tmpvar_41);
  highp vec2 tmpvar_44;
  tmpvar_44 = (tmpvar_43.xz - _WorldSpaceCameraPos.xz);
  highp float tmpvar_45;
  tmpvar_45 = max (0.0, (sqrt(
    dot (tmpvar_44, tmpvar_44)
  ) - _UWFogDistStart));
  highp float tmpvar_46;
  tmpvar_46 = min (max ((
    (1.0 - exp((-(
      (_UWFogDensity * tmpvar_45)
    ) * (_UWFogDensity * tmpvar_45))))
   * _UWFogEffectLimit), _UWFogEffectStart), _UWFogEffectLimit);
  highp float tmpvar_47;
  tmpvar_47 = clamp (exp((
    -((_UWFogColorNFIntensity * tmpvar_45))
   * 
    (_UWFogColorNFIntensity * tmpvar_45)
  )), 0.0, 1.0);
  fogParam_42.x = tmpvar_47;
  fogParam_42.y = tmpvar_46;
  fogParam_42.z = tmpvar_43.y;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_COLOR0 = tmpvar_3;
  xlv_COLOR1 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_2.xyz;
  xlv_TEXCOORD2 = tmpvar_12;
  xlv_TEXCOORD3 = fogParam_42;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_14;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
uniform highp vec4 _UWFogColorLow;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWHeightFogDensity;
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
uniform highp float _UWHeightRatio;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
uniform highp vec4 _RimColor;
uniform highp float _RimPower;
uniform highp float _RimIntensity;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  mediump float tmpvar_32;
  tmpvar_32 = (1.0 - clamp (dot (
    normalize(xlv_TEXCOORD4.xyz)
  , xlv_TEXCOORD5), 0.0, 1.0));
  highp float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, _RimPower);
  finalColor_2.xyz = (finalColor_2.xyz + ((_RimColor.xyz * tmpvar_33) * _RimIntensity));
  if ((xlv_TEXCOORD3.z > _WaterPlaneHeight)) {
    finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  } else {
    mediump vec3 xlat_varinput_34;
    xlat_varinput_34 = xlv_TEXCOORD3;
    mediump vec3 fogParam_35;
    highp float tmpvar_36;
    tmpvar_36 = max (0.0, ((_WaterPlaneHeight - xlv_TEXCOORD3.z) / (_WaterPlaneHeight - _UWFogHeightEnd)));
    highp float tmpvar_37;
    tmpvar_37 = min (max ((
      (1.0 - (_UWHeightFogDensity * tmpvar_36))
     * _UWHeightFogEffectLimit), _UWHeightFogEffectStart), _UWHeightFogEffectLimit);
    highp float tmpvar_38;
    tmpvar_38 = clamp ((_UWFogColorHLIntensity * tmpvar_36), 0.0, 1.0);
    fogParam_35.z = 0.0;
    fogParam_35.y = tmpvar_37;
    fogParam_35.x = tmpvar_38;
    if ((xlv_TEXCOORD3.y > 0.99)) {
      xlat_varinput_34.y = (xlv_TEXCOORD3.y * (1.0 - (tmpvar_36 * _UWHeightRatio)));
      highp float tmpvar_39;
      tmpvar_39 = clamp (xlat_varinput_34.y, _UWCriticalRange, 1.0);
      xlat_varinput_34.y = tmpvar_39;
    };
    fogParam_35.z = (1.0 - xlat_varinput_34.y);
    mediump vec4 tmpvar_40;
    tmpvar_40.w = 0.0;
    tmpvar_40.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_41;
    tmpvar_41 = mix (mix (_UWFogColorFar, _UWFogColorNear, xlv_TEXCOORD3.xxxx), tmpvar_40, fogParam_35.zzzz).xyz;
    finalColor_2.xyz = tmpvar_41;
    mediump vec4 tmpvar_42;
    tmpvar_42.w = 0.0;
    tmpvar_42.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_43;
    tmpvar_43 = mix (mix (_UWFogColorLow, _UWFogColorHigh, fogParam_35.xxxx), tmpvar_42, fogParam_35.yyyy).xyz;
    finalColor_2.xyz = tmpvar_43;
  };
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_UNDERWATER_FOG" "FRESNEL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _FogStartDistance;
uniform highp float _FogEndDistance;
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
uniform highp float _UWFogDistStart;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _glesNormal;
  mediump vec4 tmpvar_3;
  tmpvar_3 = _glesColor;
  highp float sint_4;
  highp float cost_5;
  highp vec3 adjCamPos_6;
  mediump vec4 offsetVertex_7;
  mediump float normalOut_8;
  highp vec4 offset_9;
  highp vec4 tmpvar_10;
  mediump vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  mediump vec4 tmpvar_13;
  mediump vec3 tmpvar_14;
  offset_9.yzw = vec3(0.0, 0.0, 0.0);
  offset_9.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_9.y = offset_9.x;
  highp float tmpvar_15;
  tmpvar_15 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_8 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = ((_glesVertex + (
    (offset_9 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_2 * normalOut_8) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_7 = tmpvar_16;
  highp vec4 pos_17;
  pos_17 = offsetVertex_7;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = pos_17.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_18));
  tmpvar_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_11.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_19;
  if ((_FogColorNear.w > 0.5)) {
    mediump vec4 fogColor_20;
    highp vec3 tmpvar_21;
    tmpvar_21 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_22;
    tmpvar_22 = max (0.0, (sqrt(
      dot (tmpvar_21, tmpvar_21)
    ) - _FogStartDistance));
    highp float tmpvar_23;
    tmpvar_23 = min (max ((
      (1.0 - exp((-(
        (_FogIntensity * tmpvar_22)
      ) * (_FogIntensity * tmpvar_22))))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_24;
    tmpvar_24 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3(clamp (exp(
      (-((_FogColorIntensity * tmpvar_22)) * (_FogColorIntensity * tmpvar_22))
    ), 0.0, 1.0)));
    fogColor_20.xyz = tmpvar_24;
    fogColor_20.w = tmpvar_23;
    tmpvar_19 = fogColor_20;
  } else {
    mediump vec4 fogColor_25;
    highp vec3 tmpvar_26;
    tmpvar_26 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_27;
    tmpvar_27 = max (0.0, (sqrt(
      dot (tmpvar_26, tmpvar_26)
    ) - _FogStartDistance));
    highp float tmpvar_28;
    highp float tmpvar_29;
    tmpvar_29 = (_FogEndDistance - _FogStartDistance);
    tmpvar_28 = min (max ((
      (((500.0 * _FogIntensity) * tmpvar_27) / max (0.1, tmpvar_29))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_30;
    tmpvar_30 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3((1.0 - clamp (
      (((1000.0 * _FogColorIntensity) * tmpvar_27) / max (0.1, tmpvar_29))
    , 0.0, 1.0))));
    fogColor_25.xyz = tmpvar_30;
    fogColor_25.w = tmpvar_28;
    tmpvar_19 = fogColor_25;
  };
  tmpvar_13.w = 1.0;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_2.xyz;
  highp vec3 norm_32;
  norm_32 = tmpvar_31;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = unity_WorldToObject[0].xyz;
  tmpvar_33[1] = unity_WorldToObject[1].xyz;
  tmpvar_33[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize(normalize((norm_32 * tmpvar_33)));
  tmpvar_14 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_6.xz = (tmpvar_35.xz - ((tmpvar_35.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_6.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((tmpvar_35.xyz - adjCamPos_6));
  tmpvar_12 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = cos(_CamRotate);
  cost_5 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = sin(_CamRotate);
  sint_4 = tmpvar_38;
  highp mat2 tmpvar_39;
  tmpvar_39[0].x = cost_5;
  tmpvar_39[0].y = -(sint_4);
  tmpvar_39[1].x = sint_4;
  tmpvar_39[1].y = cost_5;
  tmpvar_12.xz = (tmpvar_39 * tmpvar_12.xz);
  highp vec3 tmpvar_40;
  tmpvar_40 = (_WorldSpaceCameraPos - tmpvar_35.xyz);
  tmpvar_13.xyz = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41.xyz = offsetVertex_7.xyz;
  tmpvar_41.w = tmpvar_1.w;
  mediump vec3 fogParam_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (unity_ObjectToWorld * tmpvar_41);
  highp vec2 tmpvar_44;
  tmpvar_44 = (tmpvar_43.xz - _WorldSpaceCameraPos.xz);
  highp float tmpvar_45;
  tmpvar_45 = max (0.0, (sqrt(
    dot (tmpvar_44, tmpvar_44)
  ) - _UWFogDistStart));
  highp float tmpvar_46;
  tmpvar_46 = min (max ((
    (1.0 - exp((-(
      (_UWFogDensity * tmpvar_45)
    ) * (_UWFogDensity * tmpvar_45))))
   * _UWFogEffectLimit), _UWFogEffectStart), _UWFogEffectLimit);
  highp float tmpvar_47;
  tmpvar_47 = clamp (exp((
    -((_UWFogColorNFIntensity * tmpvar_45))
   * 
    (_UWFogColorNFIntensity * tmpvar_45)
  )), 0.0, 1.0);
  fogParam_42.x = tmpvar_47;
  fogParam_42.y = tmpvar_46;
  fogParam_42.z = tmpvar_43.y;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_COLOR0 = tmpvar_3;
  xlv_COLOR1 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_2.xyz;
  xlv_TEXCOORD2 = tmpvar_12;
  xlv_TEXCOORD3 = fogParam_42;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_14;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
uniform highp vec4 _UWFogColorLow;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWHeightFogDensity;
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
uniform highp float _UWHeightRatio;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
uniform highp vec4 _RimColor;
uniform highp float _RimPower;
uniform highp float _RimIntensity;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  mediump float tmpvar_32;
  tmpvar_32 = (1.0 - clamp (dot (
    normalize(xlv_TEXCOORD4.xyz)
  , xlv_TEXCOORD5), 0.0, 1.0));
  highp float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, _RimPower);
  finalColor_2.xyz = (finalColor_2.xyz + ((_RimColor.xyz * tmpvar_33) * _RimIntensity));
  if ((xlv_TEXCOORD3.z > _WaterPlaneHeight)) {
    finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  } else {
    mediump vec3 xlat_varinput_34;
    xlat_varinput_34 = xlv_TEXCOORD3;
    mediump vec3 fogParam_35;
    highp float tmpvar_36;
    tmpvar_36 = max (0.0, ((_WaterPlaneHeight - xlv_TEXCOORD3.z) / (_WaterPlaneHeight - _UWFogHeightEnd)));
    highp float tmpvar_37;
    tmpvar_37 = min (max ((
      (1.0 - (_UWHeightFogDensity * tmpvar_36))
     * _UWHeightFogEffectLimit), _UWHeightFogEffectStart), _UWHeightFogEffectLimit);
    highp float tmpvar_38;
    tmpvar_38 = clamp ((_UWFogColorHLIntensity * tmpvar_36), 0.0, 1.0);
    fogParam_35.z = 0.0;
    fogParam_35.y = tmpvar_37;
    fogParam_35.x = tmpvar_38;
    if ((xlv_TEXCOORD3.y > 0.99)) {
      xlat_varinput_34.y = (xlv_TEXCOORD3.y * (1.0 - (tmpvar_36 * _UWHeightRatio)));
      highp float tmpvar_39;
      tmpvar_39 = clamp (xlat_varinput_34.y, _UWCriticalRange, 1.0);
      xlat_varinput_34.y = tmpvar_39;
    };
    fogParam_35.z = (1.0 - xlat_varinput_34.y);
    mediump vec4 tmpvar_40;
    tmpvar_40.w = 0.0;
    tmpvar_40.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_41;
    tmpvar_41 = mix (mix (_UWFogColorFar, _UWFogColorNear, xlv_TEXCOORD3.xxxx), tmpvar_40, fogParam_35.zzzz).xyz;
    finalColor_2.xyz = tmpvar_41;
    mediump vec4 tmpvar_42;
    tmpvar_42.w = 0.0;
    tmpvar_42.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_43;
    tmpvar_43 = mix (mix (_UWFogColorLow, _UWFogColorHigh, fogParam_35.xxxx), tmpvar_42, fogParam_35.yyyy).xyz;
    finalColor_2.xyz = tmpvar_43;
  };
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_UNDERWATER_FOG" "FRESNEL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _FogStartDistance;
uniform highp float _FogEndDistance;
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
uniform highp float _UWFogDistStart;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _glesNormal;
  mediump vec4 tmpvar_3;
  tmpvar_3 = _glesColor;
  highp float sint_4;
  highp float cost_5;
  highp vec3 adjCamPos_6;
  mediump vec4 offsetVertex_7;
  mediump float normalOut_8;
  highp vec4 offset_9;
  highp vec4 tmpvar_10;
  mediump vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  mediump vec4 tmpvar_13;
  mediump vec3 tmpvar_14;
  offset_9.yzw = vec3(0.0, 0.0, 0.0);
  offset_9.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_9.y = offset_9.x;
  highp float tmpvar_15;
  tmpvar_15 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_8 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = ((_glesVertex + (
    (offset_9 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_2 * normalOut_8) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_7 = tmpvar_16;
  highp vec4 pos_17;
  pos_17 = offsetVertex_7;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = pos_17.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_18));
  tmpvar_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_11.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_19;
  if ((_FogColorNear.w > 0.5)) {
    mediump vec4 fogColor_20;
    highp vec3 tmpvar_21;
    tmpvar_21 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_22;
    tmpvar_22 = max (0.0, (sqrt(
      dot (tmpvar_21, tmpvar_21)
    ) - _FogStartDistance));
    highp float tmpvar_23;
    tmpvar_23 = min (max ((
      (1.0 - exp((-(
        (_FogIntensity * tmpvar_22)
      ) * (_FogIntensity * tmpvar_22))))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_24;
    tmpvar_24 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3(clamp (exp(
      (-((_FogColorIntensity * tmpvar_22)) * (_FogColorIntensity * tmpvar_22))
    ), 0.0, 1.0)));
    fogColor_20.xyz = tmpvar_24;
    fogColor_20.w = tmpvar_23;
    tmpvar_19 = fogColor_20;
  } else {
    mediump vec4 fogColor_25;
    highp vec3 tmpvar_26;
    tmpvar_26 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_27;
    tmpvar_27 = max (0.0, (sqrt(
      dot (tmpvar_26, tmpvar_26)
    ) - _FogStartDistance));
    highp float tmpvar_28;
    highp float tmpvar_29;
    tmpvar_29 = (_FogEndDistance - _FogStartDistance);
    tmpvar_28 = min (max ((
      (((500.0 * _FogIntensity) * tmpvar_27) / max (0.1, tmpvar_29))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_30;
    tmpvar_30 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3((1.0 - clamp (
      (((1000.0 * _FogColorIntensity) * tmpvar_27) / max (0.1, tmpvar_29))
    , 0.0, 1.0))));
    fogColor_25.xyz = tmpvar_30;
    fogColor_25.w = tmpvar_28;
    tmpvar_19 = fogColor_25;
  };
  tmpvar_13.w = 1.0;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_2.xyz;
  highp vec3 norm_32;
  norm_32 = tmpvar_31;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = unity_WorldToObject[0].xyz;
  tmpvar_33[1] = unity_WorldToObject[1].xyz;
  tmpvar_33[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize(normalize((norm_32 * tmpvar_33)));
  tmpvar_14 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_6.xz = (tmpvar_35.xz - ((tmpvar_35.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_6.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((tmpvar_35.xyz - adjCamPos_6));
  tmpvar_12 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = cos(_CamRotate);
  cost_5 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = sin(_CamRotate);
  sint_4 = tmpvar_38;
  highp mat2 tmpvar_39;
  tmpvar_39[0].x = cost_5;
  tmpvar_39[0].y = -(sint_4);
  tmpvar_39[1].x = sint_4;
  tmpvar_39[1].y = cost_5;
  tmpvar_12.xz = (tmpvar_39 * tmpvar_12.xz);
  highp vec3 tmpvar_40;
  tmpvar_40 = (_WorldSpaceCameraPos - tmpvar_35.xyz);
  tmpvar_13.xyz = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41.xyz = offsetVertex_7.xyz;
  tmpvar_41.w = tmpvar_1.w;
  mediump vec3 fogParam_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (unity_ObjectToWorld * tmpvar_41);
  highp vec2 tmpvar_44;
  tmpvar_44 = (tmpvar_43.xz - _WorldSpaceCameraPos.xz);
  highp float tmpvar_45;
  tmpvar_45 = max (0.0, (sqrt(
    dot (tmpvar_44, tmpvar_44)
  ) - _UWFogDistStart));
  highp float tmpvar_46;
  tmpvar_46 = min (max ((
    (1.0 - exp((-(
      (_UWFogDensity * tmpvar_45)
    ) * (_UWFogDensity * tmpvar_45))))
   * _UWFogEffectLimit), _UWFogEffectStart), _UWFogEffectLimit);
  highp float tmpvar_47;
  tmpvar_47 = clamp (exp((
    -((_UWFogColorNFIntensity * tmpvar_45))
   * 
    (_UWFogColorNFIntensity * tmpvar_45)
  )), 0.0, 1.0);
  fogParam_42.x = tmpvar_47;
  fogParam_42.y = tmpvar_46;
  fogParam_42.z = tmpvar_43.y;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_COLOR0 = tmpvar_3;
  xlv_COLOR1 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_2.xyz;
  xlv_TEXCOORD2 = tmpvar_12;
  xlv_TEXCOORD3 = fogParam_42;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_14;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
uniform highp vec4 _UWFogColorLow;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWHeightFogDensity;
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
uniform highp float _UWHeightRatio;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
uniform highp vec4 _RimColor;
uniform highp float _RimPower;
uniform highp float _RimIntensity;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  mediump float tmpvar_32;
  tmpvar_32 = (1.0 - clamp (dot (
    normalize(xlv_TEXCOORD4.xyz)
  , xlv_TEXCOORD5), 0.0, 1.0));
  highp float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, _RimPower);
  finalColor_2.xyz = (finalColor_2.xyz + ((_RimColor.xyz * tmpvar_33) * _RimIntensity));
  if ((xlv_TEXCOORD3.z > _WaterPlaneHeight)) {
    finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  } else {
    mediump vec3 xlat_varinput_34;
    xlat_varinput_34 = xlv_TEXCOORD3;
    mediump vec3 fogParam_35;
    highp float tmpvar_36;
    tmpvar_36 = max (0.0, ((_WaterPlaneHeight - xlv_TEXCOORD3.z) / (_WaterPlaneHeight - _UWFogHeightEnd)));
    highp float tmpvar_37;
    tmpvar_37 = min (max ((
      (1.0 - (_UWHeightFogDensity * tmpvar_36))
     * _UWHeightFogEffectLimit), _UWHeightFogEffectStart), _UWHeightFogEffectLimit);
    highp float tmpvar_38;
    tmpvar_38 = clamp ((_UWFogColorHLIntensity * tmpvar_36), 0.0, 1.0);
    fogParam_35.z = 0.0;
    fogParam_35.y = tmpvar_37;
    fogParam_35.x = tmpvar_38;
    if ((xlv_TEXCOORD3.y > 0.99)) {
      xlat_varinput_34.y = (xlv_TEXCOORD3.y * (1.0 - (tmpvar_36 * _UWHeightRatio)));
      highp float tmpvar_39;
      tmpvar_39 = clamp (xlat_varinput_34.y, _UWCriticalRange, 1.0);
      xlat_varinput_34.y = tmpvar_39;
    };
    fogParam_35.z = (1.0 - xlat_varinput_34.y);
    mediump vec4 tmpvar_40;
    tmpvar_40.w = 0.0;
    tmpvar_40.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_41;
    tmpvar_41 = mix (mix (_UWFogColorFar, _UWFogColorNear, xlv_TEXCOORD3.xxxx), tmpvar_40, fogParam_35.zzzz).xyz;
    finalColor_2.xyz = tmpvar_41;
    mediump vec4 tmpvar_42;
    tmpvar_42.w = 0.0;
    tmpvar_42.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_43;
    tmpvar_43 = mix (mix (_UWFogColorLow, _UWFogColorHigh, fogParam_35.xxxx), tmpvar_42, fogParam_35.yyyy).xyz;
    finalColor_2.xyz = tmpvar_43;
  };
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_UNDERWATER_FOG" "FRESNEL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _FogStartDistance;
uniform highp float _FogEndDistance;
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
uniform highp float _UWFogDistStart;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _glesNormal;
  mediump vec4 tmpvar_3;
  tmpvar_3 = _glesColor;
  highp float sint_4;
  highp float cost_5;
  highp vec3 adjCamPos_6;
  mediump vec4 offsetVertex_7;
  mediump float normalOut_8;
  highp vec4 offset_9;
  highp vec4 tmpvar_10;
  mediump vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  mediump vec4 tmpvar_13;
  mediump vec3 tmpvar_14;
  offset_9.yzw = vec3(0.0, 0.0, 0.0);
  offset_9.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_9.y = offset_9.x;
  highp float tmpvar_15;
  tmpvar_15 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_8 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = ((_glesVertex + (
    (offset_9 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_2 * normalOut_8) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_7 = tmpvar_16;
  highp vec4 pos_17;
  pos_17 = offsetVertex_7;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = pos_17.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_18));
  tmpvar_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_11.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_19;
  if ((_FogColorNear.w > 0.5)) {
    mediump vec4 fogColor_20;
    highp vec3 tmpvar_21;
    tmpvar_21 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_22;
    tmpvar_22 = max (0.0, (sqrt(
      dot (tmpvar_21, tmpvar_21)
    ) - _FogStartDistance));
    highp float tmpvar_23;
    tmpvar_23 = min (max ((
      (1.0 - exp((-(
        (_FogIntensity * tmpvar_22)
      ) * (_FogIntensity * tmpvar_22))))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_24;
    tmpvar_24 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3(clamp (exp(
      (-((_FogColorIntensity * tmpvar_22)) * (_FogColorIntensity * tmpvar_22))
    ), 0.0, 1.0)));
    fogColor_20.xyz = tmpvar_24;
    fogColor_20.w = tmpvar_23;
    tmpvar_19 = fogColor_20;
  } else {
    mediump vec4 fogColor_25;
    highp vec3 tmpvar_26;
    tmpvar_26 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_27;
    tmpvar_27 = max (0.0, (sqrt(
      dot (tmpvar_26, tmpvar_26)
    ) - _FogStartDistance));
    highp float tmpvar_28;
    highp float tmpvar_29;
    tmpvar_29 = (_FogEndDistance - _FogStartDistance);
    tmpvar_28 = min (max ((
      (((500.0 * _FogIntensity) * tmpvar_27) / max (0.1, tmpvar_29))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_30;
    tmpvar_30 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3((1.0 - clamp (
      (((1000.0 * _FogColorIntensity) * tmpvar_27) / max (0.1, tmpvar_29))
    , 0.0, 1.0))));
    fogColor_25.xyz = tmpvar_30;
    fogColor_25.w = tmpvar_28;
    tmpvar_19 = fogColor_25;
  };
  tmpvar_13.w = 1.0;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_2.xyz;
  highp vec3 norm_32;
  norm_32 = tmpvar_31;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = unity_WorldToObject[0].xyz;
  tmpvar_33[1] = unity_WorldToObject[1].xyz;
  tmpvar_33[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize(normalize((norm_32 * tmpvar_33)));
  tmpvar_14 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_6.xz = (tmpvar_35.xz - ((tmpvar_35.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_6.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((tmpvar_35.xyz - adjCamPos_6));
  tmpvar_12 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = cos(_CamRotate);
  cost_5 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = sin(_CamRotate);
  sint_4 = tmpvar_38;
  highp mat2 tmpvar_39;
  tmpvar_39[0].x = cost_5;
  tmpvar_39[0].y = -(sint_4);
  tmpvar_39[1].x = sint_4;
  tmpvar_39[1].y = cost_5;
  tmpvar_12.xz = (tmpvar_39 * tmpvar_12.xz);
  highp vec3 tmpvar_40;
  tmpvar_40 = (_WorldSpaceCameraPos - tmpvar_35.xyz);
  tmpvar_13.xyz = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41.xyz = offsetVertex_7.xyz;
  tmpvar_41.w = tmpvar_1.w;
  mediump vec3 fogParam_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (unity_ObjectToWorld * tmpvar_41);
  highp vec2 tmpvar_44;
  tmpvar_44 = (tmpvar_43.xz - _WorldSpaceCameraPos.xz);
  highp float tmpvar_45;
  tmpvar_45 = max (0.0, (sqrt(
    dot (tmpvar_44, tmpvar_44)
  ) - _UWFogDistStart));
  highp float tmpvar_46;
  tmpvar_46 = min (max ((
    (1.0 - exp((-(
      (_UWFogDensity * tmpvar_45)
    ) * (_UWFogDensity * tmpvar_45))))
   * _UWFogEffectLimit), _UWFogEffectStart), _UWFogEffectLimit);
  highp float tmpvar_47;
  tmpvar_47 = clamp (exp((
    -((_UWFogColorNFIntensity * tmpvar_45))
   * 
    (_UWFogColorNFIntensity * tmpvar_45)
  )), 0.0, 1.0);
  fogParam_42.x = tmpvar_47;
  fogParam_42.y = tmpvar_46;
  fogParam_42.z = tmpvar_43.y;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_COLOR0 = tmpvar_3;
  xlv_COLOR1 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_2.xyz;
  xlv_TEXCOORD2 = tmpvar_12;
  xlv_TEXCOORD3 = fogParam_42;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_14;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
uniform highp vec4 _UWFogColorLow;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWHeightFogDensity;
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
uniform highp float _UWHeightRatio;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
uniform highp vec4 _RimColor;
uniform highp float _RimPower;
uniform highp float _RimIntensity;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  mediump float tmpvar_32;
  tmpvar_32 = (1.0 - clamp (dot (
    normalize(xlv_TEXCOORD4.xyz)
  , xlv_TEXCOORD5), 0.0, 1.0));
  highp float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, _RimPower);
  finalColor_2.xyz = (finalColor_2.xyz + ((_RimColor.xyz * tmpvar_33) * _RimIntensity));
  if ((xlv_TEXCOORD3.z > _WaterPlaneHeight)) {
    finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  } else {
    mediump vec3 xlat_varinput_34;
    xlat_varinput_34 = xlv_TEXCOORD3;
    mediump vec3 fogParam_35;
    highp float tmpvar_36;
    tmpvar_36 = max (0.0, ((_WaterPlaneHeight - xlv_TEXCOORD3.z) / (_WaterPlaneHeight - _UWFogHeightEnd)));
    highp float tmpvar_37;
    tmpvar_37 = min (max ((
      (1.0 - (_UWHeightFogDensity * tmpvar_36))
     * _UWHeightFogEffectLimit), _UWHeightFogEffectStart), _UWHeightFogEffectLimit);
    highp float tmpvar_38;
    tmpvar_38 = clamp ((_UWFogColorHLIntensity * tmpvar_36), 0.0, 1.0);
    fogParam_35.z = 0.0;
    fogParam_35.y = tmpvar_37;
    fogParam_35.x = tmpvar_38;
    if ((xlv_TEXCOORD3.y > 0.99)) {
      xlat_varinput_34.y = (xlv_TEXCOORD3.y * (1.0 - (tmpvar_36 * _UWHeightRatio)));
      highp float tmpvar_39;
      tmpvar_39 = clamp (xlat_varinput_34.y, _UWCriticalRange, 1.0);
      xlat_varinput_34.y = tmpvar_39;
    };
    fogParam_35.z = (1.0 - xlat_varinput_34.y);
    mediump vec4 tmpvar_40;
    tmpvar_40.w = 0.0;
    tmpvar_40.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_41;
    tmpvar_41 = mix (mix (_UWFogColorFar, _UWFogColorNear, xlv_TEXCOORD3.xxxx), tmpvar_40, fogParam_35.zzzz).xyz;
    finalColor_2.xyz = tmpvar_41;
    mediump vec4 tmpvar_42;
    tmpvar_42.w = 0.0;
    tmpvar_42.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_43;
    tmpvar_43 = mix (mix (_UWFogColorLow, _UWFogColorHigh, fogParam_35.xxxx), tmpvar_42, fogParam_35.yyyy).xyz;
    finalColor_2.xyz = tmpvar_43;
  };
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_UNDERWATER_FOG" "FRESNEL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _FogStartDistance;
uniform highp float _FogEndDistance;
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
uniform highp float _UWFogDistStart;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _glesNormal;
  mediump vec4 tmpvar_3;
  tmpvar_3 = _glesColor;
  highp float sint_4;
  highp float cost_5;
  highp vec3 adjCamPos_6;
  mediump vec4 offsetVertex_7;
  mediump float normalOut_8;
  highp vec4 offset_9;
  highp vec4 tmpvar_10;
  mediump vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  mediump vec4 tmpvar_13;
  mediump vec3 tmpvar_14;
  offset_9.yzw = vec3(0.0, 0.0, 0.0);
  offset_9.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_9.y = offset_9.x;
  highp float tmpvar_15;
  tmpvar_15 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_8 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = ((_glesVertex + (
    (offset_9 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_2 * normalOut_8) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_7 = tmpvar_16;
  highp vec4 pos_17;
  pos_17 = offsetVertex_7;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = pos_17.xyz;
  tmpvar_10 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_18));
  tmpvar_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_11.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_19;
  if ((_FogColorNear.w > 0.5)) {
    mediump vec4 fogColor_20;
    highp vec3 tmpvar_21;
    tmpvar_21 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_22;
    tmpvar_22 = max (0.0, (sqrt(
      dot (tmpvar_21, tmpvar_21)
    ) - _FogStartDistance));
    highp float tmpvar_23;
    tmpvar_23 = min (max ((
      (1.0 - exp((-(
        (_FogIntensity * tmpvar_22)
      ) * (_FogIntensity * tmpvar_22))))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_24;
    tmpvar_24 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3(clamp (exp(
      (-((_FogColorIntensity * tmpvar_22)) * (_FogColorIntensity * tmpvar_22))
    ), 0.0, 1.0)));
    fogColor_20.xyz = tmpvar_24;
    fogColor_20.w = tmpvar_23;
    tmpvar_19 = fogColor_20;
  } else {
    mediump vec4 fogColor_25;
    highp vec3 tmpvar_26;
    tmpvar_26 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_27;
    tmpvar_27 = max (0.0, (sqrt(
      dot (tmpvar_26, tmpvar_26)
    ) - _FogStartDistance));
    highp float tmpvar_28;
    highp float tmpvar_29;
    tmpvar_29 = (_FogEndDistance - _FogStartDistance);
    tmpvar_28 = min (max ((
      (((500.0 * _FogIntensity) * tmpvar_27) / max (0.1, tmpvar_29))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_30;
    tmpvar_30 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3((1.0 - clamp (
      (((1000.0 * _FogColorIntensity) * tmpvar_27) / max (0.1, tmpvar_29))
    , 0.0, 1.0))));
    fogColor_25.xyz = tmpvar_30;
    fogColor_25.w = tmpvar_28;
    tmpvar_19 = fogColor_25;
  };
  tmpvar_13.w = 1.0;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_2.xyz;
  highp vec3 norm_32;
  norm_32 = tmpvar_31;
  highp mat3 tmpvar_33;
  tmpvar_33[0] = unity_WorldToObject[0].xyz;
  tmpvar_33[1] = unity_WorldToObject[1].xyz;
  tmpvar_33[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_34;
  tmpvar_34 = normalize(normalize((norm_32 * tmpvar_33)));
  tmpvar_14 = tmpvar_34;
  highp vec4 tmpvar_35;
  tmpvar_35 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_6.xz = (tmpvar_35.xz - ((tmpvar_35.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_6.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((tmpvar_35.xyz - adjCamPos_6));
  tmpvar_12 = tmpvar_36;
  mediump float tmpvar_37;
  tmpvar_37 = cos(_CamRotate);
  cost_5 = tmpvar_37;
  mediump float tmpvar_38;
  tmpvar_38 = sin(_CamRotate);
  sint_4 = tmpvar_38;
  highp mat2 tmpvar_39;
  tmpvar_39[0].x = cost_5;
  tmpvar_39[0].y = -(sint_4);
  tmpvar_39[1].x = sint_4;
  tmpvar_39[1].y = cost_5;
  tmpvar_12.xz = (tmpvar_39 * tmpvar_12.xz);
  highp vec3 tmpvar_40;
  tmpvar_40 = (_WorldSpaceCameraPos - tmpvar_35.xyz);
  tmpvar_13.xyz = tmpvar_40;
  highp vec4 tmpvar_41;
  tmpvar_41.xyz = offsetVertex_7.xyz;
  tmpvar_41.w = tmpvar_1.w;
  mediump vec3 fogParam_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (unity_ObjectToWorld * tmpvar_41);
  highp vec2 tmpvar_44;
  tmpvar_44 = (tmpvar_43.xz - _WorldSpaceCameraPos.xz);
  highp float tmpvar_45;
  tmpvar_45 = max (0.0, (sqrt(
    dot (tmpvar_44, tmpvar_44)
  ) - _UWFogDistStart));
  highp float tmpvar_46;
  tmpvar_46 = min (max ((
    (1.0 - exp((-(
      (_UWFogDensity * tmpvar_45)
    ) * (_UWFogDensity * tmpvar_45))))
   * _UWFogEffectLimit), _UWFogEffectStart), _UWFogEffectLimit);
  highp float tmpvar_47;
  tmpvar_47 = clamp (exp((
    -((_UWFogColorNFIntensity * tmpvar_45))
   * 
    (_UWFogColorNFIntensity * tmpvar_45)
  )), 0.0, 1.0);
  fogParam_42.x = tmpvar_47;
  fogParam_42.y = tmpvar_46;
  fogParam_42.z = tmpvar_43.y;
  gl_Position = tmpvar_10;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_COLOR0 = tmpvar_3;
  xlv_COLOR1 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_2.xyz;
  xlv_TEXCOORD2 = tmpvar_12;
  xlv_TEXCOORD3 = fogParam_42;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_14;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
uniform highp vec4 _UWFogColorLow;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWHeightFogDensity;
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
uniform highp float _UWHeightRatio;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
uniform highp vec4 _RimColor;
uniform highp float _RimPower;
uniform highp float _RimIntensity;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  mediump float tmpvar_32;
  tmpvar_32 = (1.0 - clamp (dot (
    normalize(xlv_TEXCOORD4.xyz)
  , xlv_TEXCOORD5), 0.0, 1.0));
  highp float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, _RimPower);
  finalColor_2.xyz = (finalColor_2.xyz + ((_RimColor.xyz * tmpvar_33) * _RimIntensity));
  if ((xlv_TEXCOORD3.z > _WaterPlaneHeight)) {
    finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  } else {
    mediump vec3 xlat_varinput_34;
    xlat_varinput_34 = xlv_TEXCOORD3;
    mediump vec3 fogParam_35;
    highp float tmpvar_36;
    tmpvar_36 = max (0.0, ((_WaterPlaneHeight - xlv_TEXCOORD3.z) / (_WaterPlaneHeight - _UWFogHeightEnd)));
    highp float tmpvar_37;
    tmpvar_37 = min (max ((
      (1.0 - (_UWHeightFogDensity * tmpvar_36))
     * _UWHeightFogEffectLimit), _UWHeightFogEffectStart), _UWHeightFogEffectLimit);
    highp float tmpvar_38;
    tmpvar_38 = clamp ((_UWFogColorHLIntensity * tmpvar_36), 0.0, 1.0);
    fogParam_35.z = 0.0;
    fogParam_35.y = tmpvar_37;
    fogParam_35.x = tmpvar_38;
    if ((xlv_TEXCOORD3.y > 0.99)) {
      xlat_varinput_34.y = (xlv_TEXCOORD3.y * (1.0 - (tmpvar_36 * _UWHeightRatio)));
      highp float tmpvar_39;
      tmpvar_39 = clamp (xlat_varinput_34.y, _UWCriticalRange, 1.0);
      xlat_varinput_34.y = tmpvar_39;
    };
    fogParam_35.z = (1.0 - xlat_varinput_34.y);
    mediump vec4 tmpvar_40;
    tmpvar_40.w = 0.0;
    tmpvar_40.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_41;
    tmpvar_41 = mix (mix (_UWFogColorFar, _UWFogColorNear, xlv_TEXCOORD3.xxxx), tmpvar_40, fogParam_35.zzzz).xyz;
    finalColor_2.xyz = tmpvar_41;
    mediump vec4 tmpvar_42;
    tmpvar_42.w = 0.0;
    tmpvar_42.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_43;
    tmpvar_43 = mix (mix (_UWFogColorLow, _UWFogColorHigh, fogParam_35.xxxx), tmpvar_42, fogParam_35.yyyy).xyz;
    finalColor_2.xyz = tmpvar_43;
  };
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_HEIGHT" "_UNDERWATER_FOG" "FRESNEL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
uniform highp float _UWFogDistStart;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _glesNormal;
  highp float sint_4;
  highp float cost_5;
  highp vec3 adjCamPos_6;
  mediump vec4 offsetVertex_7;
  mediump float normalOut_8;
  highp vec4 offset_9;
  mediump vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  mediump vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  offset_9.yzw = vec3(0.0, 0.0, 0.0);
  offset_9.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_9.y = offset_9.x;
  highp float tmpvar_14;
  tmpvar_14 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_8 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = ((_glesVertex + (
    (offset_9 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_3 * normalOut_8) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_7 = tmpvar_15;
  highp vec4 pos_16;
  pos_16 = offsetVertex_7;
  highp vec4 tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = pos_16.xyz;
  tmpvar_17 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_18));
  tmpvar_10.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_10.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_22;
  mediump float fogFactor_23;
  mediump vec3 fogColor_24;
  mediump vec3 heightFogColor_25;
  highp float HeightFogFactor_26;
  mediump vec3 atomesphereFogColor_27;
  mediump float h_28;
  highp float linearFogDensity_29;
  mediump float len_30;
  highp float tmpvar_31;
  tmpvar_31 = sqrt(dot (tmpvar_21, tmpvar_21));
  len_30 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (((len_30 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_29 = (tmpvar_32 * (2.0 - tmpvar_32));
  if ((len_30 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_29 = (linearFogDensity_29 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_33;
  tmpvar_33 = min (pow (linearFogDensity_29, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_29 = tmpvar_33;
  mediump float tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((tmpvar_20.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_34 = tmpvar_35;
  h_28 = (tmpvar_34 * (2.0 - tmpvar_34));
  highp vec3 tmpvar_36;
  tmpvar_36 = (_HeigtFogColBase.xyz + (h_28 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_27 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (atomesphereFogColor_27, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_30 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_27 = tmpvar_37;
  mediump float tmpvar_38;
  mediump float r_39;
  mediump float f_40;
  mediump float u_41;
  mediump float l_42;
  mediump float fogInt_43;
  fogInt_43 = 1.0;
  highp float tmpvar_44;
  tmpvar_44 = (_HeigtFogParams.x * tmpvar_21.y);
  highp float tmpvar_45;
  tmpvar_45 = abs(tmpvar_44);
  if ((tmpvar_45 > 0.01)) {
    highp float tmpvar_46;
    tmpvar_46 = exp(-(tmpvar_44));
    fogInt_43 = ((1.0 - tmpvar_46) / tmpvar_44);
  };
  highp float tmpvar_47;
  tmpvar_47 = sqrt(dot (tmpvar_21, tmpvar_21));
  l_42 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = (l_42 * _HeigtFogParams.y);
  u_41 = tmpvar_48;
  fogInt_43 = (fogInt_43 * u_41);
  mediump float tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((l_42 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_49 = tmpvar_50;
  r_39 = (tmpvar_49 * (2.0 - tmpvar_49));
  r_39 = ((r_39 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_40 = ((1.0 - clamp (
    exp2(-(fogInt_43))
  , 0.0, 1.0)) * r_39);
  highp float tmpvar_51;
  tmpvar_51 = min (f_40, _HeigtFogColBase.w);
  tmpvar_38 = tmpvar_51;
  HeightFogFactor_26 = tmpvar_38;
  highp vec3 tmpvar_52;
  tmpvar_52 = _Mihoyo_FogColor.xyz;
  heightFogColor_25 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = ((heightFogColor_25 * HeightFogFactor_26) + ((atomesphereFogColor_27 * tmpvar_33) * (1.0 - HeightFogFactor_26)));
  fogColor_24 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = ((1.0 - tmpvar_33) * (1.0 - HeightFogFactor_26));
  fogFactor_23 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55.xyz = fogColor_24;
  tmpvar_55.w = fogFactor_23;
  tmpvar_22 = tmpvar_55;
  tmpvar_19 = tmpvar_22;
  tmpvar_12.w = 1.0;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_3.xyz;
  highp vec3 norm_57;
  norm_57 = tmpvar_56;
  highp mat3 tmpvar_58;
  tmpvar_58[0] = unity_WorldToObject[0].xyz;
  tmpvar_58[1] = unity_WorldToObject[1].xyz;
  tmpvar_58[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(normalize((norm_57 * tmpvar_58)));
  tmpvar_13 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_6.xz = (tmpvar_60.xz - ((tmpvar_60.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_6.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize((tmpvar_60.xyz - adjCamPos_6));
  tmpvar_11 = tmpvar_61;
  mediump float tmpvar_62;
  tmpvar_62 = cos(_CamRotate);
  cost_5 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = sin(_CamRotate);
  sint_4 = tmpvar_63;
  highp mat2 tmpvar_64;
  tmpvar_64[0].x = cost_5;
  tmpvar_64[0].y = -(sint_4);
  tmpvar_64[1].x = sint_4;
  tmpvar_64[1].y = cost_5;
  tmpvar_11.xz = (tmpvar_64 * tmpvar_11.xz);
  highp vec3 tmpvar_65;
  tmpvar_65 = (_WorldSpaceCameraPos - tmpvar_60.xyz);
  tmpvar_12.xyz = tmpvar_65;
  highp vec4 tmpvar_66;
  tmpvar_66.xyz = offsetVertex_7.xyz;
  tmpvar_66.w = tmpvar_1.w;
  mediump vec3 fogParam_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = (unity_ObjectToWorld * tmpvar_66);
  highp vec2 tmpvar_69;
  tmpvar_69 = (tmpvar_68.xz - _WorldSpaceCameraPos.xz);
  highp float tmpvar_70;
  tmpvar_70 = max (0.0, (sqrt(
    dot (tmpvar_69, tmpvar_69)
  ) - _UWFogDistStart));
  highp float tmpvar_71;
  tmpvar_71 = min (max ((
    (1.0 - exp((-(
      (_UWFogDensity * tmpvar_70)
    ) * (_UWFogDensity * tmpvar_70))))
   * _UWFogEffectLimit), _UWFogEffectStart), _UWFogEffectLimit);
  highp float tmpvar_72;
  tmpvar_72 = clamp (exp((
    -((_UWFogColorNFIntensity * tmpvar_70))
   * 
    (_UWFogColorNFIntensity * tmpvar_70)
  )), 0.0, 1.0);
  fogParam_67.x = tmpvar_72;
  fogParam_67.y = tmpvar_71;
  fogParam_67.z = tmpvar_68.y;
  gl_Position = tmpvar_17;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_COLOR0 = tmpvar_2;
  xlv_COLOR1 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_3.xyz;
  xlv_TEXCOORD2 = tmpvar_11;
  xlv_TEXCOORD3 = fogParam_67;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
uniform highp vec4 _UWFogColorLow;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWHeightFogDensity;
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
uniform highp float _UWHeightRatio;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
uniform highp vec4 _RimColor;
uniform highp float _RimPower;
uniform highp float _RimIntensity;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  mediump float tmpvar_32;
  tmpvar_32 = (1.0 - clamp (dot (
    normalize(xlv_TEXCOORD4.xyz)
  , xlv_TEXCOORD5), 0.0, 1.0));
  highp float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, _RimPower);
  finalColor_2.xyz = (finalColor_2.xyz + ((_RimColor.xyz * tmpvar_33) * _RimIntensity));
  if ((xlv_TEXCOORD3.z > _WaterPlaneHeight)) {
    finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  } else {
    mediump vec3 xlat_varinput_34;
    xlat_varinput_34 = xlv_TEXCOORD3;
    mediump vec3 fogParam_35;
    highp float tmpvar_36;
    tmpvar_36 = max (0.0, ((_WaterPlaneHeight - xlv_TEXCOORD3.z) / (_WaterPlaneHeight - _UWFogHeightEnd)));
    highp float tmpvar_37;
    tmpvar_37 = min (max ((
      (1.0 - (_UWHeightFogDensity * tmpvar_36))
     * _UWHeightFogEffectLimit), _UWHeightFogEffectStart), _UWHeightFogEffectLimit);
    highp float tmpvar_38;
    tmpvar_38 = clamp ((_UWFogColorHLIntensity * tmpvar_36), 0.0, 1.0);
    fogParam_35.z = 0.0;
    fogParam_35.y = tmpvar_37;
    fogParam_35.x = tmpvar_38;
    if ((xlv_TEXCOORD3.y > 0.99)) {
      xlat_varinput_34.y = (xlv_TEXCOORD3.y * (1.0 - (tmpvar_36 * _UWHeightRatio)));
      highp float tmpvar_39;
      tmpvar_39 = clamp (xlat_varinput_34.y, _UWCriticalRange, 1.0);
      xlat_varinput_34.y = tmpvar_39;
    };
    fogParam_35.z = (1.0 - xlat_varinput_34.y);
    mediump vec4 tmpvar_40;
    tmpvar_40.w = 0.0;
    tmpvar_40.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_41;
    tmpvar_41 = mix (mix (_UWFogColorFar, _UWFogColorNear, xlv_TEXCOORD3.xxxx), tmpvar_40, fogParam_35.zzzz).xyz;
    finalColor_2.xyz = tmpvar_41;
    mediump vec4 tmpvar_42;
    tmpvar_42.w = 0.0;
    tmpvar_42.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_43;
    tmpvar_43 = mix (mix (_UWFogColorLow, _UWFogColorHigh, fogParam_35.xxxx), tmpvar_42, fogParam_35.yyyy).xyz;
    finalColor_2.xyz = tmpvar_43;
  };
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_HEIGHT" "_UNDERWATER_FOG" "FRESNEL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
uniform highp float _UWFogDistStart;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _glesNormal;
  highp float sint_4;
  highp float cost_5;
  highp vec3 adjCamPos_6;
  mediump vec4 offsetVertex_7;
  mediump float normalOut_8;
  highp vec4 offset_9;
  mediump vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  mediump vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  offset_9.yzw = vec3(0.0, 0.0, 0.0);
  offset_9.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_9.y = offset_9.x;
  highp float tmpvar_14;
  tmpvar_14 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_8 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = ((_glesVertex + (
    (offset_9 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_3 * normalOut_8) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_7 = tmpvar_15;
  highp vec4 pos_16;
  pos_16 = offsetVertex_7;
  highp vec4 tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = pos_16.xyz;
  tmpvar_17 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_18));
  tmpvar_10.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_10.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_22;
  mediump float fogFactor_23;
  mediump vec3 fogColor_24;
  mediump vec3 heightFogColor_25;
  highp float HeightFogFactor_26;
  mediump vec3 atomesphereFogColor_27;
  mediump float h_28;
  highp float linearFogDensity_29;
  mediump float len_30;
  highp float tmpvar_31;
  tmpvar_31 = sqrt(dot (tmpvar_21, tmpvar_21));
  len_30 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (((len_30 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_29 = (tmpvar_32 * (2.0 - tmpvar_32));
  if ((len_30 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_29 = (linearFogDensity_29 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_33;
  tmpvar_33 = min (pow (linearFogDensity_29, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_29 = tmpvar_33;
  mediump float tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((tmpvar_20.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_34 = tmpvar_35;
  h_28 = (tmpvar_34 * (2.0 - tmpvar_34));
  highp vec3 tmpvar_36;
  tmpvar_36 = (_HeigtFogColBase.xyz + (h_28 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_27 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (atomesphereFogColor_27, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_30 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_27 = tmpvar_37;
  mediump float tmpvar_38;
  mediump float r_39;
  mediump float f_40;
  mediump float u_41;
  mediump float l_42;
  mediump float fogInt_43;
  fogInt_43 = 1.0;
  highp float tmpvar_44;
  tmpvar_44 = (_HeigtFogParams.x * tmpvar_21.y);
  highp float tmpvar_45;
  tmpvar_45 = abs(tmpvar_44);
  if ((tmpvar_45 > 0.01)) {
    highp float tmpvar_46;
    tmpvar_46 = exp(-(tmpvar_44));
    fogInt_43 = ((1.0 - tmpvar_46) / tmpvar_44);
  };
  highp float tmpvar_47;
  tmpvar_47 = sqrt(dot (tmpvar_21, tmpvar_21));
  l_42 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = (l_42 * _HeigtFogParams.y);
  u_41 = tmpvar_48;
  fogInt_43 = (fogInt_43 * u_41);
  mediump float tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((l_42 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_49 = tmpvar_50;
  r_39 = (tmpvar_49 * (2.0 - tmpvar_49));
  r_39 = ((r_39 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_40 = ((1.0 - clamp (
    exp2(-(fogInt_43))
  , 0.0, 1.0)) * r_39);
  highp float tmpvar_51;
  tmpvar_51 = min (f_40, _HeigtFogColBase.w);
  tmpvar_38 = tmpvar_51;
  HeightFogFactor_26 = tmpvar_38;
  highp vec3 tmpvar_52;
  tmpvar_52 = _Mihoyo_FogColor.xyz;
  heightFogColor_25 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = ((heightFogColor_25 * HeightFogFactor_26) + ((atomesphereFogColor_27 * tmpvar_33) * (1.0 - HeightFogFactor_26)));
  fogColor_24 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = ((1.0 - tmpvar_33) * (1.0 - HeightFogFactor_26));
  fogFactor_23 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55.xyz = fogColor_24;
  tmpvar_55.w = fogFactor_23;
  tmpvar_22 = tmpvar_55;
  tmpvar_19 = tmpvar_22;
  tmpvar_12.w = 1.0;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_3.xyz;
  highp vec3 norm_57;
  norm_57 = tmpvar_56;
  highp mat3 tmpvar_58;
  tmpvar_58[0] = unity_WorldToObject[0].xyz;
  tmpvar_58[1] = unity_WorldToObject[1].xyz;
  tmpvar_58[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(normalize((norm_57 * tmpvar_58)));
  tmpvar_13 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_6.xz = (tmpvar_60.xz - ((tmpvar_60.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_6.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize((tmpvar_60.xyz - adjCamPos_6));
  tmpvar_11 = tmpvar_61;
  mediump float tmpvar_62;
  tmpvar_62 = cos(_CamRotate);
  cost_5 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = sin(_CamRotate);
  sint_4 = tmpvar_63;
  highp mat2 tmpvar_64;
  tmpvar_64[0].x = cost_5;
  tmpvar_64[0].y = -(sint_4);
  tmpvar_64[1].x = sint_4;
  tmpvar_64[1].y = cost_5;
  tmpvar_11.xz = (tmpvar_64 * tmpvar_11.xz);
  highp vec3 tmpvar_65;
  tmpvar_65 = (_WorldSpaceCameraPos - tmpvar_60.xyz);
  tmpvar_12.xyz = tmpvar_65;
  highp vec4 tmpvar_66;
  tmpvar_66.xyz = offsetVertex_7.xyz;
  tmpvar_66.w = tmpvar_1.w;
  mediump vec3 fogParam_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = (unity_ObjectToWorld * tmpvar_66);
  highp vec2 tmpvar_69;
  tmpvar_69 = (tmpvar_68.xz - _WorldSpaceCameraPos.xz);
  highp float tmpvar_70;
  tmpvar_70 = max (0.0, (sqrt(
    dot (tmpvar_69, tmpvar_69)
  ) - _UWFogDistStart));
  highp float tmpvar_71;
  tmpvar_71 = min (max ((
    (1.0 - exp((-(
      (_UWFogDensity * tmpvar_70)
    ) * (_UWFogDensity * tmpvar_70))))
   * _UWFogEffectLimit), _UWFogEffectStart), _UWFogEffectLimit);
  highp float tmpvar_72;
  tmpvar_72 = clamp (exp((
    -((_UWFogColorNFIntensity * tmpvar_70))
   * 
    (_UWFogColorNFIntensity * tmpvar_70)
  )), 0.0, 1.0);
  fogParam_67.x = tmpvar_72;
  fogParam_67.y = tmpvar_71;
  fogParam_67.z = tmpvar_68.y;
  gl_Position = tmpvar_17;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_COLOR0 = tmpvar_2;
  xlv_COLOR1 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_3.xyz;
  xlv_TEXCOORD2 = tmpvar_11;
  xlv_TEXCOORD3 = fogParam_67;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
uniform highp vec4 _UWFogColorLow;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWHeightFogDensity;
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
uniform highp float _UWHeightRatio;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
uniform highp vec4 _RimColor;
uniform highp float _RimPower;
uniform highp float _RimIntensity;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  mediump float tmpvar_32;
  tmpvar_32 = (1.0 - clamp (dot (
    normalize(xlv_TEXCOORD4.xyz)
  , xlv_TEXCOORD5), 0.0, 1.0));
  highp float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, _RimPower);
  finalColor_2.xyz = (finalColor_2.xyz + ((_RimColor.xyz * tmpvar_33) * _RimIntensity));
  if ((xlv_TEXCOORD3.z > _WaterPlaneHeight)) {
    finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  } else {
    mediump vec3 xlat_varinput_34;
    xlat_varinput_34 = xlv_TEXCOORD3;
    mediump vec3 fogParam_35;
    highp float tmpvar_36;
    tmpvar_36 = max (0.0, ((_WaterPlaneHeight - xlv_TEXCOORD3.z) / (_WaterPlaneHeight - _UWFogHeightEnd)));
    highp float tmpvar_37;
    tmpvar_37 = min (max ((
      (1.0 - (_UWHeightFogDensity * tmpvar_36))
     * _UWHeightFogEffectLimit), _UWHeightFogEffectStart), _UWHeightFogEffectLimit);
    highp float tmpvar_38;
    tmpvar_38 = clamp ((_UWFogColorHLIntensity * tmpvar_36), 0.0, 1.0);
    fogParam_35.z = 0.0;
    fogParam_35.y = tmpvar_37;
    fogParam_35.x = tmpvar_38;
    if ((xlv_TEXCOORD3.y > 0.99)) {
      xlat_varinput_34.y = (xlv_TEXCOORD3.y * (1.0 - (tmpvar_36 * _UWHeightRatio)));
      highp float tmpvar_39;
      tmpvar_39 = clamp (xlat_varinput_34.y, _UWCriticalRange, 1.0);
      xlat_varinput_34.y = tmpvar_39;
    };
    fogParam_35.z = (1.0 - xlat_varinput_34.y);
    mediump vec4 tmpvar_40;
    tmpvar_40.w = 0.0;
    tmpvar_40.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_41;
    tmpvar_41 = mix (mix (_UWFogColorFar, _UWFogColorNear, xlv_TEXCOORD3.xxxx), tmpvar_40, fogParam_35.zzzz).xyz;
    finalColor_2.xyz = tmpvar_41;
    mediump vec4 tmpvar_42;
    tmpvar_42.w = 0.0;
    tmpvar_42.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_43;
    tmpvar_43 = mix (mix (_UWFogColorLow, _UWFogColorHigh, fogParam_35.xxxx), tmpvar_42, fogParam_35.yyyy).xyz;
    finalColor_2.xyz = tmpvar_43;
  };
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_HEIGHT" "_UNDERWATER_FOG" "FRESNEL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
uniform highp float _UWFogDistStart;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _glesNormal;
  highp float sint_4;
  highp float cost_5;
  highp vec3 adjCamPos_6;
  mediump vec4 offsetVertex_7;
  mediump float normalOut_8;
  highp vec4 offset_9;
  mediump vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  mediump vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  offset_9.yzw = vec3(0.0, 0.0, 0.0);
  offset_9.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_9.y = offset_9.x;
  highp float tmpvar_14;
  tmpvar_14 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_8 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = ((_glesVertex + (
    (offset_9 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_3 * normalOut_8) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_7 = tmpvar_15;
  highp vec4 pos_16;
  pos_16 = offsetVertex_7;
  highp vec4 tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = pos_16.xyz;
  tmpvar_17 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_18));
  tmpvar_10.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_10.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_22;
  mediump float fogFactor_23;
  mediump vec3 fogColor_24;
  mediump vec3 heightFogColor_25;
  highp float HeightFogFactor_26;
  mediump vec3 atomesphereFogColor_27;
  mediump float h_28;
  highp float linearFogDensity_29;
  mediump float len_30;
  highp float tmpvar_31;
  tmpvar_31 = sqrt(dot (tmpvar_21, tmpvar_21));
  len_30 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (((len_30 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_29 = (tmpvar_32 * (2.0 - tmpvar_32));
  if ((len_30 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_29 = (linearFogDensity_29 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_33;
  tmpvar_33 = min (pow (linearFogDensity_29, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_29 = tmpvar_33;
  mediump float tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((tmpvar_20.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_34 = tmpvar_35;
  h_28 = (tmpvar_34 * (2.0 - tmpvar_34));
  highp vec3 tmpvar_36;
  tmpvar_36 = (_HeigtFogColBase.xyz + (h_28 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_27 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (atomesphereFogColor_27, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_30 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_27 = tmpvar_37;
  mediump float tmpvar_38;
  mediump float r_39;
  mediump float f_40;
  mediump float u_41;
  mediump float l_42;
  mediump float fogInt_43;
  fogInt_43 = 1.0;
  highp float tmpvar_44;
  tmpvar_44 = (_HeigtFogParams.x * tmpvar_21.y);
  highp float tmpvar_45;
  tmpvar_45 = abs(tmpvar_44);
  if ((tmpvar_45 > 0.01)) {
    highp float tmpvar_46;
    tmpvar_46 = exp(-(tmpvar_44));
    fogInt_43 = ((1.0 - tmpvar_46) / tmpvar_44);
  };
  highp float tmpvar_47;
  tmpvar_47 = sqrt(dot (tmpvar_21, tmpvar_21));
  l_42 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = (l_42 * _HeigtFogParams.y);
  u_41 = tmpvar_48;
  fogInt_43 = (fogInt_43 * u_41);
  mediump float tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((l_42 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_49 = tmpvar_50;
  r_39 = (tmpvar_49 * (2.0 - tmpvar_49));
  r_39 = ((r_39 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_40 = ((1.0 - clamp (
    exp2(-(fogInt_43))
  , 0.0, 1.0)) * r_39);
  highp float tmpvar_51;
  tmpvar_51 = min (f_40, _HeigtFogColBase.w);
  tmpvar_38 = tmpvar_51;
  HeightFogFactor_26 = tmpvar_38;
  highp vec3 tmpvar_52;
  tmpvar_52 = _Mihoyo_FogColor.xyz;
  heightFogColor_25 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = ((heightFogColor_25 * HeightFogFactor_26) + ((atomesphereFogColor_27 * tmpvar_33) * (1.0 - HeightFogFactor_26)));
  fogColor_24 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = ((1.0 - tmpvar_33) * (1.0 - HeightFogFactor_26));
  fogFactor_23 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55.xyz = fogColor_24;
  tmpvar_55.w = fogFactor_23;
  tmpvar_22 = tmpvar_55;
  tmpvar_19 = tmpvar_22;
  tmpvar_12.w = 1.0;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_3.xyz;
  highp vec3 norm_57;
  norm_57 = tmpvar_56;
  highp mat3 tmpvar_58;
  tmpvar_58[0] = unity_WorldToObject[0].xyz;
  tmpvar_58[1] = unity_WorldToObject[1].xyz;
  tmpvar_58[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(normalize((norm_57 * tmpvar_58)));
  tmpvar_13 = tmpvar_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_6.xz = (tmpvar_60.xz - ((tmpvar_60.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_6.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize((tmpvar_60.xyz - adjCamPos_6));
  tmpvar_11 = tmpvar_61;
  mediump float tmpvar_62;
  tmpvar_62 = cos(_CamRotate);
  cost_5 = tmpvar_62;
  mediump float tmpvar_63;
  tmpvar_63 = sin(_CamRotate);
  sint_4 = tmpvar_63;
  highp mat2 tmpvar_64;
  tmpvar_64[0].x = cost_5;
  tmpvar_64[0].y = -(sint_4);
  tmpvar_64[1].x = sint_4;
  tmpvar_64[1].y = cost_5;
  tmpvar_11.xz = (tmpvar_64 * tmpvar_11.xz);
  highp vec3 tmpvar_65;
  tmpvar_65 = (_WorldSpaceCameraPos - tmpvar_60.xyz);
  tmpvar_12.xyz = tmpvar_65;
  highp vec4 tmpvar_66;
  tmpvar_66.xyz = offsetVertex_7.xyz;
  tmpvar_66.w = tmpvar_1.w;
  mediump vec3 fogParam_67;
  highp vec4 tmpvar_68;
  tmpvar_68 = (unity_ObjectToWorld * tmpvar_66);
  highp vec2 tmpvar_69;
  tmpvar_69 = (tmpvar_68.xz - _WorldSpaceCameraPos.xz);
  highp float tmpvar_70;
  tmpvar_70 = max (0.0, (sqrt(
    dot (tmpvar_69, tmpvar_69)
  ) - _UWFogDistStart));
  highp float tmpvar_71;
  tmpvar_71 = min (max ((
    (1.0 - exp((-(
      (_UWFogDensity * tmpvar_70)
    ) * (_UWFogDensity * tmpvar_70))))
   * _UWFogEffectLimit), _UWFogEffectStart), _UWFogEffectLimit);
  highp float tmpvar_72;
  tmpvar_72 = clamp (exp((
    -((_UWFogColorNFIntensity * tmpvar_70))
   * 
    (_UWFogColorNFIntensity * tmpvar_70)
  )), 0.0, 1.0);
  fogParam_67.x = tmpvar_72;
  fogParam_67.y = tmpvar_71;
  fogParam_67.z = tmpvar_68.y;
  gl_Position = tmpvar_17;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_COLOR0 = tmpvar_2;
  xlv_COLOR1 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_3.xyz;
  xlv_TEXCOORD2 = tmpvar_11;
  xlv_TEXCOORD3 = fogParam_67;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
uniform highp vec4 _UWFogColorLow;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWHeightFogDensity;
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
uniform highp float _UWHeightRatio;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
uniform highp vec4 _RimColor;
uniform highp float _RimPower;
uniform highp float _RimIntensity;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  mediump float tmpvar_32;
  tmpvar_32 = (1.0 - clamp (dot (
    normalize(xlv_TEXCOORD4.xyz)
  , xlv_TEXCOORD5), 0.0, 1.0));
  highp float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, _RimPower);
  finalColor_2.xyz = (finalColor_2.xyz + ((_RimColor.xyz * tmpvar_33) * _RimIntensity));
  if ((xlv_TEXCOORD3.z > _WaterPlaneHeight)) {
    finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  } else {
    mediump vec3 xlat_varinput_34;
    xlat_varinput_34 = xlv_TEXCOORD3;
    mediump vec3 fogParam_35;
    highp float tmpvar_36;
    tmpvar_36 = max (0.0, ((_WaterPlaneHeight - xlv_TEXCOORD3.z) / (_WaterPlaneHeight - _UWFogHeightEnd)));
    highp float tmpvar_37;
    tmpvar_37 = min (max ((
      (1.0 - (_UWHeightFogDensity * tmpvar_36))
     * _UWHeightFogEffectLimit), _UWHeightFogEffectStart), _UWHeightFogEffectLimit);
    highp float tmpvar_38;
    tmpvar_38 = clamp ((_UWFogColorHLIntensity * tmpvar_36), 0.0, 1.0);
    fogParam_35.z = 0.0;
    fogParam_35.y = tmpvar_37;
    fogParam_35.x = tmpvar_38;
    if ((xlv_TEXCOORD3.y > 0.99)) {
      xlat_varinput_34.y = (xlv_TEXCOORD3.y * (1.0 - (tmpvar_36 * _UWHeightRatio)));
      highp float tmpvar_39;
      tmpvar_39 = clamp (xlat_varinput_34.y, _UWCriticalRange, 1.0);
      xlat_varinput_34.y = tmpvar_39;
    };
    fogParam_35.z = (1.0 - xlat_varinput_34.y);
    mediump vec4 tmpvar_40;
    tmpvar_40.w = 0.0;
    tmpvar_40.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_41;
    tmpvar_41 = mix (mix (_UWFogColorFar, _UWFogColorNear, xlv_TEXCOORD3.xxxx), tmpvar_40, fogParam_35.zzzz).xyz;
    finalColor_2.xyz = tmpvar_41;
    mediump vec4 tmpvar_42;
    tmpvar_42.w = 0.0;
    tmpvar_42.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_43;
    tmpvar_43 = mix (mix (_UWFogColorLow, _UWFogColorHigh, fogParam_35.xxxx), tmpvar_42, fogParam_35.yyyy).xyz;
    finalColor_2.xyz = tmpvar_43;
  };
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "_UNDERWATER_FOG" "FRESNEL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
uniform highp float _UWFogDistStart;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _glesNormal;
  highp float sint_4;
  highp float cost_5;
  highp vec3 adjCamPos_6;
  mediump vec4 offsetVertex_7;
  mediump float normalOut_8;
  highp vec4 offset_9;
  mediump vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  mediump vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  offset_9.yzw = vec3(0.0, 0.0, 0.0);
  offset_9.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_9.y = offset_9.x;
  highp float tmpvar_14;
  tmpvar_14 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_8 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = ((_glesVertex + (
    (offset_9 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_3 * normalOut_8) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_7 = tmpvar_15;
  highp vec4 pos_16;
  pos_16 = offsetVertex_7;
  highp vec4 tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = pos_16.xyz;
  tmpvar_17 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_18));
  tmpvar_10.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_10.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_22;
  mediump float fogFactor_23;
  mediump vec3 fogColor_24;
  mediump vec3 heightFogColor_25;
  highp float HeightFogFactor_26;
  mediump vec3 atomesphereFogColor_27;
  mediump float h_28;
  highp float linearFogDensity_29;
  mediump float len_30;
  highp float tmpvar_31;
  tmpvar_31 = sqrt(dot (tmpvar_21, tmpvar_21));
  len_30 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (((len_30 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_29 = (tmpvar_32 * (2.0 - tmpvar_32));
  if ((len_30 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_29 = (linearFogDensity_29 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_33;
  tmpvar_33 = min (pow (linearFogDensity_29, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_29 = tmpvar_33;
  mediump float tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((tmpvar_20.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_34 = tmpvar_35;
  h_28 = (tmpvar_34 * (2.0 - tmpvar_34));
  highp vec3 tmpvar_36;
  tmpvar_36 = (_HeigtFogColBase2.xyz + (h_28 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_27 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (atomesphereFogColor_27, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_30 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_27 = tmpvar_37;
  mediump float tmpvar_38;
  mediump float r_39;
  mediump float f_40;
  mediump float u_41;
  mediump float l_42;
  mediump float fogInt_43;
  fogInt_43 = 1.0;
  highp float tmpvar_44;
  tmpvar_44 = (_HeigtFogParams2.x * tmpvar_21.y);
  highp float tmpvar_45;
  tmpvar_45 = abs(tmpvar_44);
  if ((tmpvar_45 > 0.01)) {
    highp float tmpvar_46;
    tmpvar_46 = exp(-(tmpvar_44));
    fogInt_43 = ((1.0 - tmpvar_46) / tmpvar_44);
  };
  highp float tmpvar_47;
  tmpvar_47 = sqrt(dot (tmpvar_21, tmpvar_21));
  l_42 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = (l_42 * _HeigtFogParams2.y);
  u_41 = tmpvar_48;
  fogInt_43 = (fogInt_43 * u_41);
  mediump float tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((l_42 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_49 = tmpvar_50;
  r_39 = (tmpvar_49 * (2.0 - tmpvar_49));
  r_39 = ((r_39 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_40 = ((1.0 - clamp (
    exp2(-(fogInt_43))
  , 0.0, 1.0)) * r_39);
  highp float tmpvar_51;
  tmpvar_51 = min (f_40, _HeigtFogColBase2.w);
  tmpvar_38 = tmpvar_51;
  HeightFogFactor_26 = tmpvar_38;
  highp vec3 tmpvar_52;
  tmpvar_52 = _Mihoyo_FogColor2.xyz;
  heightFogColor_25 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = ((heightFogColor_25 * HeightFogFactor_26) + ((atomesphereFogColor_27 * tmpvar_33) * (1.0 - HeightFogFactor_26)));
  fogColor_24 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = ((1.0 - tmpvar_33) * (1.0 - HeightFogFactor_26));
  fogFactor_23 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55.xyz = fogColor_24;
  tmpvar_55.w = fogFactor_23;
  tmpvar_22 = tmpvar_55;
  highp vec4 tmpvar_56;
  mediump float fogFactor_57;
  mediump vec3 fogColor_58;
  mediump vec3 heightFogColor_59;
  highp float HeightFogFactor_60;
  mediump vec3 atomesphereFogColor_61;
  mediump float h_62;
  highp float linearFogDensity_63;
  mediump float len_64;
  highp float tmpvar_65;
  tmpvar_65 = sqrt(dot (tmpvar_21, tmpvar_21));
  len_64 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = clamp (((len_64 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_63 = (tmpvar_66 * (2.0 - tmpvar_66));
  if ((len_64 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_63 = (linearFogDensity_63 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_67;
  tmpvar_67 = min (pow (linearFogDensity_63, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_63 = tmpvar_67;
  mediump float tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((tmpvar_20.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_68 = tmpvar_69;
  h_62 = (tmpvar_68 * (2.0 - tmpvar_68));
  highp vec3 tmpvar_70;
  tmpvar_70 = (_HeigtFogColBase3.xyz + (h_62 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_61 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = mix (atomesphereFogColor_61, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_64 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_61 = tmpvar_71;
  mediump float tmpvar_72;
  mediump float r_73;
  mediump float f_74;
  mediump float u_75;
  mediump float l_76;
  mediump float fogInt_77;
  fogInt_77 = 1.0;
  highp float tmpvar_78;
  tmpvar_78 = (_HeigtFogParams3.x * tmpvar_21.y);
  highp float tmpvar_79;
  tmpvar_79 = abs(tmpvar_78);
  if ((tmpvar_79 > 0.01)) {
    highp float tmpvar_80;
    tmpvar_80 = exp(-(tmpvar_78));
    fogInt_77 = ((1.0 - tmpvar_80) / tmpvar_78);
  };
  highp float tmpvar_81;
  tmpvar_81 = sqrt(dot (tmpvar_21, tmpvar_21));
  l_76 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (l_76 * _HeigtFogParams3.y);
  u_75 = tmpvar_82;
  fogInt_77 = (fogInt_77 * u_75);
  mediump float tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = clamp (((l_76 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_83 = tmpvar_84;
  r_73 = (tmpvar_83 * (2.0 - tmpvar_83));
  r_73 = ((r_73 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_74 = ((1.0 - clamp (
    exp2(-(fogInt_77))
  , 0.0, 1.0)) * r_73);
  highp float tmpvar_85;
  tmpvar_85 = min (f_74, _HeigtFogColBase3.w);
  tmpvar_72 = tmpvar_85;
  HeightFogFactor_60 = tmpvar_72;
  highp vec3 tmpvar_86;
  tmpvar_86 = _Mihoyo_FogColor3.xyz;
  heightFogColor_59 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = ((heightFogColor_59 * HeightFogFactor_60) + ((atomesphereFogColor_61 * tmpvar_67) * (1.0 - HeightFogFactor_60)));
  fogColor_58 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = ((1.0 - tmpvar_67) * (1.0 - HeightFogFactor_60));
  fogFactor_57 = tmpvar_88;
  mediump vec4 tmpvar_89;
  tmpvar_89.xyz = fogColor_58;
  tmpvar_89.w = fogFactor_57;
  tmpvar_56 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (tmpvar_22, tmpvar_56, vec4(_LerpFactor));
  tmpvar_19 = tmpvar_90;
  tmpvar_12.w = 1.0;
  mediump vec3 tmpvar_91;
  tmpvar_91 = tmpvar_3.xyz;
  highp vec3 norm_92;
  norm_92 = tmpvar_91;
  highp mat3 tmpvar_93;
  tmpvar_93[0] = unity_WorldToObject[0].xyz;
  tmpvar_93[1] = unity_WorldToObject[1].xyz;
  tmpvar_93[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_94;
  tmpvar_94 = normalize(normalize((norm_92 * tmpvar_93)));
  tmpvar_13 = tmpvar_94;
  highp vec4 tmpvar_95;
  tmpvar_95 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_6.xz = (tmpvar_95.xz - ((tmpvar_95.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_6.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_96;
  tmpvar_96 = normalize((tmpvar_95.xyz - adjCamPos_6));
  tmpvar_11 = tmpvar_96;
  mediump float tmpvar_97;
  tmpvar_97 = cos(_CamRotate);
  cost_5 = tmpvar_97;
  mediump float tmpvar_98;
  tmpvar_98 = sin(_CamRotate);
  sint_4 = tmpvar_98;
  highp mat2 tmpvar_99;
  tmpvar_99[0].x = cost_5;
  tmpvar_99[0].y = -(sint_4);
  tmpvar_99[1].x = sint_4;
  tmpvar_99[1].y = cost_5;
  tmpvar_11.xz = (tmpvar_99 * tmpvar_11.xz);
  highp vec3 tmpvar_100;
  tmpvar_100 = (_WorldSpaceCameraPos - tmpvar_95.xyz);
  tmpvar_12.xyz = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101.xyz = offsetVertex_7.xyz;
  tmpvar_101.w = tmpvar_1.w;
  mediump vec3 fogParam_102;
  highp vec4 tmpvar_103;
  tmpvar_103 = (unity_ObjectToWorld * tmpvar_101);
  highp vec2 tmpvar_104;
  tmpvar_104 = (tmpvar_103.xz - _WorldSpaceCameraPos.xz);
  highp float tmpvar_105;
  tmpvar_105 = max (0.0, (sqrt(
    dot (tmpvar_104, tmpvar_104)
  ) - _UWFogDistStart));
  highp float tmpvar_106;
  tmpvar_106 = min (max ((
    (1.0 - exp((-(
      (_UWFogDensity * tmpvar_105)
    ) * (_UWFogDensity * tmpvar_105))))
   * _UWFogEffectLimit), _UWFogEffectStart), _UWFogEffectLimit);
  highp float tmpvar_107;
  tmpvar_107 = clamp (exp((
    -((_UWFogColorNFIntensity * tmpvar_105))
   * 
    (_UWFogColorNFIntensity * tmpvar_105)
  )), 0.0, 1.0);
  fogParam_102.x = tmpvar_107;
  fogParam_102.y = tmpvar_106;
  fogParam_102.z = tmpvar_103.y;
  gl_Position = tmpvar_17;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_COLOR0 = tmpvar_2;
  xlv_COLOR1 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_3.xyz;
  xlv_TEXCOORD2 = tmpvar_11;
  xlv_TEXCOORD3 = fogParam_102;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
uniform highp vec4 _UWFogColorLow;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWHeightFogDensity;
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
uniform highp float _UWHeightRatio;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
uniform highp vec4 _RimColor;
uniform highp float _RimPower;
uniform highp float _RimIntensity;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  mediump float tmpvar_32;
  tmpvar_32 = (1.0 - clamp (dot (
    normalize(xlv_TEXCOORD4.xyz)
  , xlv_TEXCOORD5), 0.0, 1.0));
  highp float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, _RimPower);
  finalColor_2.xyz = (finalColor_2.xyz + ((_RimColor.xyz * tmpvar_33) * _RimIntensity));
  if ((xlv_TEXCOORD3.z > _WaterPlaneHeight)) {
    finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  } else {
    mediump vec3 xlat_varinput_34;
    xlat_varinput_34 = xlv_TEXCOORD3;
    mediump vec3 fogParam_35;
    highp float tmpvar_36;
    tmpvar_36 = max (0.0, ((_WaterPlaneHeight - xlv_TEXCOORD3.z) / (_WaterPlaneHeight - _UWFogHeightEnd)));
    highp float tmpvar_37;
    tmpvar_37 = min (max ((
      (1.0 - (_UWHeightFogDensity * tmpvar_36))
     * _UWHeightFogEffectLimit), _UWHeightFogEffectStart), _UWHeightFogEffectLimit);
    highp float tmpvar_38;
    tmpvar_38 = clamp ((_UWFogColorHLIntensity * tmpvar_36), 0.0, 1.0);
    fogParam_35.z = 0.0;
    fogParam_35.y = tmpvar_37;
    fogParam_35.x = tmpvar_38;
    if ((xlv_TEXCOORD3.y > 0.99)) {
      xlat_varinput_34.y = (xlv_TEXCOORD3.y * (1.0 - (tmpvar_36 * _UWHeightRatio)));
      highp float tmpvar_39;
      tmpvar_39 = clamp (xlat_varinput_34.y, _UWCriticalRange, 1.0);
      xlat_varinput_34.y = tmpvar_39;
    };
    fogParam_35.z = (1.0 - xlat_varinput_34.y);
    mediump vec4 tmpvar_40;
    tmpvar_40.w = 0.0;
    tmpvar_40.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_41;
    tmpvar_41 = mix (mix (_UWFogColorFar, _UWFogColorNear, xlv_TEXCOORD3.xxxx), tmpvar_40, fogParam_35.zzzz).xyz;
    finalColor_2.xyz = tmpvar_41;
    mediump vec4 tmpvar_42;
    tmpvar_42.w = 0.0;
    tmpvar_42.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_43;
    tmpvar_43 = mix (mix (_UWFogColorLow, _UWFogColorHigh, fogParam_35.xxxx), tmpvar_42, fogParam_35.yyyy).xyz;
    finalColor_2.xyz = tmpvar_43;
  };
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "_UNDERWATER_FOG" "FRESNEL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
uniform highp float _UWFogDistStart;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _glesNormal;
  highp float sint_4;
  highp float cost_5;
  highp vec3 adjCamPos_6;
  mediump vec4 offsetVertex_7;
  mediump float normalOut_8;
  highp vec4 offset_9;
  mediump vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  mediump vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  offset_9.yzw = vec3(0.0, 0.0, 0.0);
  offset_9.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_9.y = offset_9.x;
  highp float tmpvar_14;
  tmpvar_14 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_8 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = ((_glesVertex + (
    (offset_9 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_3 * normalOut_8) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_7 = tmpvar_15;
  highp vec4 pos_16;
  pos_16 = offsetVertex_7;
  highp vec4 tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = pos_16.xyz;
  tmpvar_17 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_18));
  tmpvar_10.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_10.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_22;
  mediump float fogFactor_23;
  mediump vec3 fogColor_24;
  mediump vec3 heightFogColor_25;
  highp float HeightFogFactor_26;
  mediump vec3 atomesphereFogColor_27;
  mediump float h_28;
  highp float linearFogDensity_29;
  mediump float len_30;
  highp float tmpvar_31;
  tmpvar_31 = sqrt(dot (tmpvar_21, tmpvar_21));
  len_30 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (((len_30 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_29 = (tmpvar_32 * (2.0 - tmpvar_32));
  if ((len_30 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_29 = (linearFogDensity_29 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_33;
  tmpvar_33 = min (pow (linearFogDensity_29, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_29 = tmpvar_33;
  mediump float tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((tmpvar_20.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_34 = tmpvar_35;
  h_28 = (tmpvar_34 * (2.0 - tmpvar_34));
  highp vec3 tmpvar_36;
  tmpvar_36 = (_HeigtFogColBase2.xyz + (h_28 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_27 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (atomesphereFogColor_27, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_30 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_27 = tmpvar_37;
  mediump float tmpvar_38;
  mediump float r_39;
  mediump float f_40;
  mediump float u_41;
  mediump float l_42;
  mediump float fogInt_43;
  fogInt_43 = 1.0;
  highp float tmpvar_44;
  tmpvar_44 = (_HeigtFogParams2.x * tmpvar_21.y);
  highp float tmpvar_45;
  tmpvar_45 = abs(tmpvar_44);
  if ((tmpvar_45 > 0.01)) {
    highp float tmpvar_46;
    tmpvar_46 = exp(-(tmpvar_44));
    fogInt_43 = ((1.0 - tmpvar_46) / tmpvar_44);
  };
  highp float tmpvar_47;
  tmpvar_47 = sqrt(dot (tmpvar_21, tmpvar_21));
  l_42 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = (l_42 * _HeigtFogParams2.y);
  u_41 = tmpvar_48;
  fogInt_43 = (fogInt_43 * u_41);
  mediump float tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((l_42 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_49 = tmpvar_50;
  r_39 = (tmpvar_49 * (2.0 - tmpvar_49));
  r_39 = ((r_39 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_40 = ((1.0 - clamp (
    exp2(-(fogInt_43))
  , 0.0, 1.0)) * r_39);
  highp float tmpvar_51;
  tmpvar_51 = min (f_40, _HeigtFogColBase2.w);
  tmpvar_38 = tmpvar_51;
  HeightFogFactor_26 = tmpvar_38;
  highp vec3 tmpvar_52;
  tmpvar_52 = _Mihoyo_FogColor2.xyz;
  heightFogColor_25 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = ((heightFogColor_25 * HeightFogFactor_26) + ((atomesphereFogColor_27 * tmpvar_33) * (1.0 - HeightFogFactor_26)));
  fogColor_24 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = ((1.0 - tmpvar_33) * (1.0 - HeightFogFactor_26));
  fogFactor_23 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55.xyz = fogColor_24;
  tmpvar_55.w = fogFactor_23;
  tmpvar_22 = tmpvar_55;
  highp vec4 tmpvar_56;
  mediump float fogFactor_57;
  mediump vec3 fogColor_58;
  mediump vec3 heightFogColor_59;
  highp float HeightFogFactor_60;
  mediump vec3 atomesphereFogColor_61;
  mediump float h_62;
  highp float linearFogDensity_63;
  mediump float len_64;
  highp float tmpvar_65;
  tmpvar_65 = sqrt(dot (tmpvar_21, tmpvar_21));
  len_64 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = clamp (((len_64 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_63 = (tmpvar_66 * (2.0 - tmpvar_66));
  if ((len_64 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_63 = (linearFogDensity_63 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_67;
  tmpvar_67 = min (pow (linearFogDensity_63, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_63 = tmpvar_67;
  mediump float tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((tmpvar_20.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_68 = tmpvar_69;
  h_62 = (tmpvar_68 * (2.0 - tmpvar_68));
  highp vec3 tmpvar_70;
  tmpvar_70 = (_HeigtFogColBase3.xyz + (h_62 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_61 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = mix (atomesphereFogColor_61, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_64 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_61 = tmpvar_71;
  mediump float tmpvar_72;
  mediump float r_73;
  mediump float f_74;
  mediump float u_75;
  mediump float l_76;
  mediump float fogInt_77;
  fogInt_77 = 1.0;
  highp float tmpvar_78;
  tmpvar_78 = (_HeigtFogParams3.x * tmpvar_21.y);
  highp float tmpvar_79;
  tmpvar_79 = abs(tmpvar_78);
  if ((tmpvar_79 > 0.01)) {
    highp float tmpvar_80;
    tmpvar_80 = exp(-(tmpvar_78));
    fogInt_77 = ((1.0 - tmpvar_80) / tmpvar_78);
  };
  highp float tmpvar_81;
  tmpvar_81 = sqrt(dot (tmpvar_21, tmpvar_21));
  l_76 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (l_76 * _HeigtFogParams3.y);
  u_75 = tmpvar_82;
  fogInt_77 = (fogInt_77 * u_75);
  mediump float tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = clamp (((l_76 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_83 = tmpvar_84;
  r_73 = (tmpvar_83 * (2.0 - tmpvar_83));
  r_73 = ((r_73 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_74 = ((1.0 - clamp (
    exp2(-(fogInt_77))
  , 0.0, 1.0)) * r_73);
  highp float tmpvar_85;
  tmpvar_85 = min (f_74, _HeigtFogColBase3.w);
  tmpvar_72 = tmpvar_85;
  HeightFogFactor_60 = tmpvar_72;
  highp vec3 tmpvar_86;
  tmpvar_86 = _Mihoyo_FogColor3.xyz;
  heightFogColor_59 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = ((heightFogColor_59 * HeightFogFactor_60) + ((atomesphereFogColor_61 * tmpvar_67) * (1.0 - HeightFogFactor_60)));
  fogColor_58 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = ((1.0 - tmpvar_67) * (1.0 - HeightFogFactor_60));
  fogFactor_57 = tmpvar_88;
  mediump vec4 tmpvar_89;
  tmpvar_89.xyz = fogColor_58;
  tmpvar_89.w = fogFactor_57;
  tmpvar_56 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (tmpvar_22, tmpvar_56, vec4(_LerpFactor));
  tmpvar_19 = tmpvar_90;
  tmpvar_12.w = 1.0;
  mediump vec3 tmpvar_91;
  tmpvar_91 = tmpvar_3.xyz;
  highp vec3 norm_92;
  norm_92 = tmpvar_91;
  highp mat3 tmpvar_93;
  tmpvar_93[0] = unity_WorldToObject[0].xyz;
  tmpvar_93[1] = unity_WorldToObject[1].xyz;
  tmpvar_93[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_94;
  tmpvar_94 = normalize(normalize((norm_92 * tmpvar_93)));
  tmpvar_13 = tmpvar_94;
  highp vec4 tmpvar_95;
  tmpvar_95 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_6.xz = (tmpvar_95.xz - ((tmpvar_95.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_6.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_96;
  tmpvar_96 = normalize((tmpvar_95.xyz - adjCamPos_6));
  tmpvar_11 = tmpvar_96;
  mediump float tmpvar_97;
  tmpvar_97 = cos(_CamRotate);
  cost_5 = tmpvar_97;
  mediump float tmpvar_98;
  tmpvar_98 = sin(_CamRotate);
  sint_4 = tmpvar_98;
  highp mat2 tmpvar_99;
  tmpvar_99[0].x = cost_5;
  tmpvar_99[0].y = -(sint_4);
  tmpvar_99[1].x = sint_4;
  tmpvar_99[1].y = cost_5;
  tmpvar_11.xz = (tmpvar_99 * tmpvar_11.xz);
  highp vec3 tmpvar_100;
  tmpvar_100 = (_WorldSpaceCameraPos - tmpvar_95.xyz);
  tmpvar_12.xyz = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101.xyz = offsetVertex_7.xyz;
  tmpvar_101.w = tmpvar_1.w;
  mediump vec3 fogParam_102;
  highp vec4 tmpvar_103;
  tmpvar_103 = (unity_ObjectToWorld * tmpvar_101);
  highp vec2 tmpvar_104;
  tmpvar_104 = (tmpvar_103.xz - _WorldSpaceCameraPos.xz);
  highp float tmpvar_105;
  tmpvar_105 = max (0.0, (sqrt(
    dot (tmpvar_104, tmpvar_104)
  ) - _UWFogDistStart));
  highp float tmpvar_106;
  tmpvar_106 = min (max ((
    (1.0 - exp((-(
      (_UWFogDensity * tmpvar_105)
    ) * (_UWFogDensity * tmpvar_105))))
   * _UWFogEffectLimit), _UWFogEffectStart), _UWFogEffectLimit);
  highp float tmpvar_107;
  tmpvar_107 = clamp (exp((
    -((_UWFogColorNFIntensity * tmpvar_105))
   * 
    (_UWFogColorNFIntensity * tmpvar_105)
  )), 0.0, 1.0);
  fogParam_102.x = tmpvar_107;
  fogParam_102.y = tmpvar_106;
  fogParam_102.z = tmpvar_103.y;
  gl_Position = tmpvar_17;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_COLOR0 = tmpvar_2;
  xlv_COLOR1 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_3.xyz;
  xlv_TEXCOORD2 = tmpvar_11;
  xlv_TEXCOORD3 = fogParam_102;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
uniform highp vec4 _UWFogColorLow;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWHeightFogDensity;
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
uniform highp float _UWHeightRatio;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
uniform highp vec4 _RimColor;
uniform highp float _RimPower;
uniform highp float _RimIntensity;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  mediump float tmpvar_32;
  tmpvar_32 = (1.0 - clamp (dot (
    normalize(xlv_TEXCOORD4.xyz)
  , xlv_TEXCOORD5), 0.0, 1.0));
  highp float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, _RimPower);
  finalColor_2.xyz = (finalColor_2.xyz + ((_RimColor.xyz * tmpvar_33) * _RimIntensity));
  if ((xlv_TEXCOORD3.z > _WaterPlaneHeight)) {
    finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  } else {
    mediump vec3 xlat_varinput_34;
    xlat_varinput_34 = xlv_TEXCOORD3;
    mediump vec3 fogParam_35;
    highp float tmpvar_36;
    tmpvar_36 = max (0.0, ((_WaterPlaneHeight - xlv_TEXCOORD3.z) / (_WaterPlaneHeight - _UWFogHeightEnd)));
    highp float tmpvar_37;
    tmpvar_37 = min (max ((
      (1.0 - (_UWHeightFogDensity * tmpvar_36))
     * _UWHeightFogEffectLimit), _UWHeightFogEffectStart), _UWHeightFogEffectLimit);
    highp float tmpvar_38;
    tmpvar_38 = clamp ((_UWFogColorHLIntensity * tmpvar_36), 0.0, 1.0);
    fogParam_35.z = 0.0;
    fogParam_35.y = tmpvar_37;
    fogParam_35.x = tmpvar_38;
    if ((xlv_TEXCOORD3.y > 0.99)) {
      xlat_varinput_34.y = (xlv_TEXCOORD3.y * (1.0 - (tmpvar_36 * _UWHeightRatio)));
      highp float tmpvar_39;
      tmpvar_39 = clamp (xlat_varinput_34.y, _UWCriticalRange, 1.0);
      xlat_varinput_34.y = tmpvar_39;
    };
    fogParam_35.z = (1.0 - xlat_varinput_34.y);
    mediump vec4 tmpvar_40;
    tmpvar_40.w = 0.0;
    tmpvar_40.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_41;
    tmpvar_41 = mix (mix (_UWFogColorFar, _UWFogColorNear, xlv_TEXCOORD3.xxxx), tmpvar_40, fogParam_35.zzzz).xyz;
    finalColor_2.xyz = tmpvar_41;
    mediump vec4 tmpvar_42;
    tmpvar_42.w = 0.0;
    tmpvar_42.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_43;
    tmpvar_43 = mix (mix (_UWFogColorLow, _UWFogColorHigh, fogParam_35.xxxx), tmpvar_42, fogParam_35.yyyy).xyz;
    finalColor_2.xyz = tmpvar_43;
  };
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "_UNDERWATER_FOG" "FRESNEL" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
uniform highp float _UWFogDistStart;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _glesNormal;
  highp float sint_4;
  highp float cost_5;
  highp vec3 adjCamPos_6;
  mediump vec4 offsetVertex_7;
  mediump float normalOut_8;
  highp vec4 offset_9;
  mediump vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  mediump vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  offset_9.yzw = vec3(0.0, 0.0, 0.0);
  offset_9.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_9.y = offset_9.x;
  highp float tmpvar_14;
  tmpvar_14 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_8 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = ((_glesVertex + (
    (offset_9 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_3 * normalOut_8) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_7 = tmpvar_15;
  highp vec4 pos_16;
  pos_16 = offsetVertex_7;
  highp vec4 tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = pos_16.xyz;
  tmpvar_17 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_18));
  tmpvar_10.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_10.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_22;
  mediump float fogFactor_23;
  mediump vec3 fogColor_24;
  mediump vec3 heightFogColor_25;
  highp float HeightFogFactor_26;
  mediump vec3 atomesphereFogColor_27;
  mediump float h_28;
  highp float linearFogDensity_29;
  mediump float len_30;
  highp float tmpvar_31;
  tmpvar_31 = sqrt(dot (tmpvar_21, tmpvar_21));
  len_30 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (((len_30 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_29 = (tmpvar_32 * (2.0 - tmpvar_32));
  if ((len_30 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_29 = (linearFogDensity_29 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_33;
  tmpvar_33 = min (pow (linearFogDensity_29, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_29 = tmpvar_33;
  mediump float tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((tmpvar_20.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_34 = tmpvar_35;
  h_28 = (tmpvar_34 * (2.0 - tmpvar_34));
  highp vec3 tmpvar_36;
  tmpvar_36 = (_HeigtFogColBase2.xyz + (h_28 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_27 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (atomesphereFogColor_27, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_30 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_27 = tmpvar_37;
  mediump float tmpvar_38;
  mediump float r_39;
  mediump float f_40;
  mediump float u_41;
  mediump float l_42;
  mediump float fogInt_43;
  fogInt_43 = 1.0;
  highp float tmpvar_44;
  tmpvar_44 = (_HeigtFogParams2.x * tmpvar_21.y);
  highp float tmpvar_45;
  tmpvar_45 = abs(tmpvar_44);
  if ((tmpvar_45 > 0.01)) {
    highp float tmpvar_46;
    tmpvar_46 = exp(-(tmpvar_44));
    fogInt_43 = ((1.0 - tmpvar_46) / tmpvar_44);
  };
  highp float tmpvar_47;
  tmpvar_47 = sqrt(dot (tmpvar_21, tmpvar_21));
  l_42 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = (l_42 * _HeigtFogParams2.y);
  u_41 = tmpvar_48;
  fogInt_43 = (fogInt_43 * u_41);
  mediump float tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((l_42 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_49 = tmpvar_50;
  r_39 = (tmpvar_49 * (2.0 - tmpvar_49));
  r_39 = ((r_39 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_40 = ((1.0 - clamp (
    exp2(-(fogInt_43))
  , 0.0, 1.0)) * r_39);
  highp float tmpvar_51;
  tmpvar_51 = min (f_40, _HeigtFogColBase2.w);
  tmpvar_38 = tmpvar_51;
  HeightFogFactor_26 = tmpvar_38;
  highp vec3 tmpvar_52;
  tmpvar_52 = _Mihoyo_FogColor2.xyz;
  heightFogColor_25 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = ((heightFogColor_25 * HeightFogFactor_26) + ((atomesphereFogColor_27 * tmpvar_33) * (1.0 - HeightFogFactor_26)));
  fogColor_24 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = ((1.0 - tmpvar_33) * (1.0 - HeightFogFactor_26));
  fogFactor_23 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55.xyz = fogColor_24;
  tmpvar_55.w = fogFactor_23;
  tmpvar_22 = tmpvar_55;
  highp vec4 tmpvar_56;
  mediump float fogFactor_57;
  mediump vec3 fogColor_58;
  mediump vec3 heightFogColor_59;
  highp float HeightFogFactor_60;
  mediump vec3 atomesphereFogColor_61;
  mediump float h_62;
  highp float linearFogDensity_63;
  mediump float len_64;
  highp float tmpvar_65;
  tmpvar_65 = sqrt(dot (tmpvar_21, tmpvar_21));
  len_64 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = clamp (((len_64 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_63 = (tmpvar_66 * (2.0 - tmpvar_66));
  if ((len_64 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_63 = (linearFogDensity_63 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_67;
  tmpvar_67 = min (pow (linearFogDensity_63, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_63 = tmpvar_67;
  mediump float tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((tmpvar_20.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_68 = tmpvar_69;
  h_62 = (tmpvar_68 * (2.0 - tmpvar_68));
  highp vec3 tmpvar_70;
  tmpvar_70 = (_HeigtFogColBase3.xyz + (h_62 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_61 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = mix (atomesphereFogColor_61, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_64 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_61 = tmpvar_71;
  mediump float tmpvar_72;
  mediump float r_73;
  mediump float f_74;
  mediump float u_75;
  mediump float l_76;
  mediump float fogInt_77;
  fogInt_77 = 1.0;
  highp float tmpvar_78;
  tmpvar_78 = (_HeigtFogParams3.x * tmpvar_21.y);
  highp float tmpvar_79;
  tmpvar_79 = abs(tmpvar_78);
  if ((tmpvar_79 > 0.01)) {
    highp float tmpvar_80;
    tmpvar_80 = exp(-(tmpvar_78));
    fogInt_77 = ((1.0 - tmpvar_80) / tmpvar_78);
  };
  highp float tmpvar_81;
  tmpvar_81 = sqrt(dot (tmpvar_21, tmpvar_21));
  l_76 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (l_76 * _HeigtFogParams3.y);
  u_75 = tmpvar_82;
  fogInt_77 = (fogInt_77 * u_75);
  mediump float tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = clamp (((l_76 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_83 = tmpvar_84;
  r_73 = (tmpvar_83 * (2.0 - tmpvar_83));
  r_73 = ((r_73 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_74 = ((1.0 - clamp (
    exp2(-(fogInt_77))
  , 0.0, 1.0)) * r_73);
  highp float tmpvar_85;
  tmpvar_85 = min (f_74, _HeigtFogColBase3.w);
  tmpvar_72 = tmpvar_85;
  HeightFogFactor_60 = tmpvar_72;
  highp vec3 tmpvar_86;
  tmpvar_86 = _Mihoyo_FogColor3.xyz;
  heightFogColor_59 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = ((heightFogColor_59 * HeightFogFactor_60) + ((atomesphereFogColor_61 * tmpvar_67) * (1.0 - HeightFogFactor_60)));
  fogColor_58 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = ((1.0 - tmpvar_67) * (1.0 - HeightFogFactor_60));
  fogFactor_57 = tmpvar_88;
  mediump vec4 tmpvar_89;
  tmpvar_89.xyz = fogColor_58;
  tmpvar_89.w = fogFactor_57;
  tmpvar_56 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (tmpvar_22, tmpvar_56, vec4(_LerpFactor));
  tmpvar_19 = tmpvar_90;
  tmpvar_12.w = 1.0;
  mediump vec3 tmpvar_91;
  tmpvar_91 = tmpvar_3.xyz;
  highp vec3 norm_92;
  norm_92 = tmpvar_91;
  highp mat3 tmpvar_93;
  tmpvar_93[0] = unity_WorldToObject[0].xyz;
  tmpvar_93[1] = unity_WorldToObject[1].xyz;
  tmpvar_93[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_94;
  tmpvar_94 = normalize(normalize((norm_92 * tmpvar_93)));
  tmpvar_13 = tmpvar_94;
  highp vec4 tmpvar_95;
  tmpvar_95 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_6.xz = (tmpvar_95.xz - ((tmpvar_95.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_6.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_96;
  tmpvar_96 = normalize((tmpvar_95.xyz - adjCamPos_6));
  tmpvar_11 = tmpvar_96;
  mediump float tmpvar_97;
  tmpvar_97 = cos(_CamRotate);
  cost_5 = tmpvar_97;
  mediump float tmpvar_98;
  tmpvar_98 = sin(_CamRotate);
  sint_4 = tmpvar_98;
  highp mat2 tmpvar_99;
  tmpvar_99[0].x = cost_5;
  tmpvar_99[0].y = -(sint_4);
  tmpvar_99[1].x = sint_4;
  tmpvar_99[1].y = cost_5;
  tmpvar_11.xz = (tmpvar_99 * tmpvar_11.xz);
  highp vec3 tmpvar_100;
  tmpvar_100 = (_WorldSpaceCameraPos - tmpvar_95.xyz);
  tmpvar_12.xyz = tmpvar_100;
  highp vec4 tmpvar_101;
  tmpvar_101.xyz = offsetVertex_7.xyz;
  tmpvar_101.w = tmpvar_1.w;
  mediump vec3 fogParam_102;
  highp vec4 tmpvar_103;
  tmpvar_103 = (unity_ObjectToWorld * tmpvar_101);
  highp vec2 tmpvar_104;
  tmpvar_104 = (tmpvar_103.xz - _WorldSpaceCameraPos.xz);
  highp float tmpvar_105;
  tmpvar_105 = max (0.0, (sqrt(
    dot (tmpvar_104, tmpvar_104)
  ) - _UWFogDistStart));
  highp float tmpvar_106;
  tmpvar_106 = min (max ((
    (1.0 - exp((-(
      (_UWFogDensity * tmpvar_105)
    ) * (_UWFogDensity * tmpvar_105))))
   * _UWFogEffectLimit), _UWFogEffectStart), _UWFogEffectLimit);
  highp float tmpvar_107;
  tmpvar_107 = clamp (exp((
    -((_UWFogColorNFIntensity * tmpvar_105))
   * 
    (_UWFogColorNFIntensity * tmpvar_105)
  )), 0.0, 1.0);
  fogParam_102.x = tmpvar_107;
  fogParam_102.y = tmpvar_106;
  fogParam_102.z = tmpvar_103.y;
  gl_Position = tmpvar_17;
  xlv_TEXCOORD0 = tmpvar_10;
  xlv_COLOR0 = tmpvar_2;
  xlv_COLOR1 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_3.xyz;
  xlv_TEXCOORD2 = tmpvar_11;
  xlv_TEXCOORD3 = fogParam_102;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
uniform highp vec4 _UWFogColorLow;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWHeightFogDensity;
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
uniform highp float _UWHeightRatio;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
uniform highp vec4 _RimColor;
uniform highp float _RimPower;
uniform highp float _RimIntensity;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec4 Maskmap_1;
  mediump vec4 finalColor_2;
  mediump vec4 base_color1_3;
  mediump vec4 base_color0_4;
  mediump vec2 flow_dir_5;
  mediump float flow_scale1_6;
  mediump float flow_scale0_7;
  mediump vec3 flowAll_8;
  mediump float time_9;
  mediump vec2 uv_10;
  mediump vec2 UV_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_11 = tmpvar_12;
  highp vec2 tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = (_USpeed * _Time.y);
  tmpvar_13.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_VSpeed * _Time.y);
  tmpvar_13.y = tmpvar_15;
  UV_11 = (UV_11 + tmpvar_13);
  highp vec2 tmpvar_16;
  tmpvar_16.x = tmpvar_14;
  tmpvar_16.y = tmpvar_15;
  highp vec2 tmpvar_17;
  tmpvar_17 = (UV_11 + tmpvar_16);
  uv_10 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = _Time.y;
  time_9 = tmpvar_18;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_FlowMap, uv_10).xyz;
  flowAll_8 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = fract(((_Speed * time_9) + flowAll_8.z));
  flow_scale0_7 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((
    (_Speed * time_9)
   + flowAll_8.z) + 0.5));
  flow_scale1_6 = tmpvar_21;
  flowAll_8.xy = (2.0 * (flowAll_8.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_22;
  tmpvar_22.x = _FlowSignX;
  tmpvar_22.y = _FlowSignY;
  flowAll_8.xy = (flowAll_8.xy * tmpvar_22);
  highp vec2 tmpvar_23;
  tmpvar_23 = (flowAll_8.xy * _FlowIntensity);
  flow_dir_5 = tmpvar_23;
  mediump vec2 tmpvar_24;
  tmpvar_24 = (uv_10 + (flow_dir_5 * flow_scale0_7));
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_10 + (flow_dir_5 * flow_scale1_6));
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_MainTex, tmpvar_24);
  base_color0_4 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color1_3 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28 = mix (base_color0_4, base_color1_3, vec4(abs((2.0 * 
    (flow_scale0_7 - 0.5)
  ))));
  finalColor_2.w = 0.0;
  finalColor_2.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_28.x * xlv_COLOR0.x)));
  finalColor_2.xyz = (finalColor_2.xyz * (1.0 + (tmpvar_28.x * _EmissionScaler)));
  lowp vec4 tmpvar_29;
  tmpvar_29 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_1 = tmpvar_29;
  finalColor_2.xyz = (finalColor_2.xyz + ((_MaskColor.xyz * Maskmap_1.y) * _MaskScale));
  mediump vec3 tmpvar_30;
  tmpvar_30 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_31;
  tmpvar_31 = textureCube (_EnvTex, tmpvar_30);
  finalColor_2.xyz = (finalColor_2.xyz + ((tmpvar_31.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_2.w = (tmpvar_28.w * _BloomFactor);
  mediump float tmpvar_32;
  tmpvar_32 = (1.0 - clamp (dot (
    normalize(xlv_TEXCOORD4.xyz)
  , xlv_TEXCOORD5), 0.0, 1.0));
  highp float tmpvar_33;
  tmpvar_33 = pow (tmpvar_32, _RimPower);
  finalColor_2.xyz = (finalColor_2.xyz + ((_RimColor.xyz * tmpvar_33) * _RimIntensity));
  if ((xlv_TEXCOORD3.z > _WaterPlaneHeight)) {
    finalColor_2.xyz = mix (finalColor_2.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  } else {
    mediump vec3 xlat_varinput_34;
    xlat_varinput_34 = xlv_TEXCOORD3;
    mediump vec3 fogParam_35;
    highp float tmpvar_36;
    tmpvar_36 = max (0.0, ((_WaterPlaneHeight - xlv_TEXCOORD3.z) / (_WaterPlaneHeight - _UWFogHeightEnd)));
    highp float tmpvar_37;
    tmpvar_37 = min (max ((
      (1.0 - (_UWHeightFogDensity * tmpvar_36))
     * _UWHeightFogEffectLimit), _UWHeightFogEffectStart), _UWHeightFogEffectLimit);
    highp float tmpvar_38;
    tmpvar_38 = clamp ((_UWFogColorHLIntensity * tmpvar_36), 0.0, 1.0);
    fogParam_35.z = 0.0;
    fogParam_35.y = tmpvar_37;
    fogParam_35.x = tmpvar_38;
    if ((xlv_TEXCOORD3.y > 0.99)) {
      xlat_varinput_34.y = (xlv_TEXCOORD3.y * (1.0 - (tmpvar_36 * _UWHeightRatio)));
      highp float tmpvar_39;
      tmpvar_39 = clamp (xlat_varinput_34.y, _UWCriticalRange, 1.0);
      xlat_varinput_34.y = tmpvar_39;
    };
    fogParam_35.z = (1.0 - xlat_varinput_34.y);
    mediump vec4 tmpvar_40;
    tmpvar_40.w = 0.0;
    tmpvar_40.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_41;
    tmpvar_41 = mix (mix (_UWFogColorFar, _UWFogColorNear, xlv_TEXCOORD3.xxxx), tmpvar_40, fogParam_35.zzzz).xyz;
    finalColor_2.xyz = tmpvar_41;
    mediump vec4 tmpvar_42;
    tmpvar_42.w = 0.0;
    tmpvar_42.xyz = finalColor_2.xyz;
    highp vec3 tmpvar_43;
    tmpvar_43 = mix (mix (_UWFogColorLow, _UWFogColorHigh, fogParam_35.xxxx), tmpvar_42, fogParam_35.yyyy).xyz;
    finalColor_2.xyz = tmpvar_43;
  };
  gl_FragData[0] = finalColor_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "_UNDERWATER_FOG" "FRESNEL" "UseNormalMap" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_WorldTransformParams;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _FogStartDistance;
uniform highp float _FogEndDistance;
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
uniform highp float _UWFogDistStart;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _glesNormal;
  mediump vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  tmpvar_3 = _glesColor;
  tmpvar_4 = _glesTANGENT;
  highp float sint_5;
  highp float cost_6;
  highp vec3 adjCamPos_7;
  mediump vec4 offsetVertex_8;
  mediump float normalOut_9;
  highp vec4 offset_10;
  highp vec4 tmpvar_11;
  mediump vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  mediump vec4 tmpvar_14;
  offset_10.yzw = vec3(0.0, 0.0, 0.0);
  offset_10.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_10.y = offset_10.x;
  highp float tmpvar_15;
  tmpvar_15 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_9 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = ((_glesVertex + (
    (offset_10 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_2 * normalOut_9) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_8 = tmpvar_16;
  highp vec4 pos_17;
  pos_17 = offsetVertex_8;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = pos_17.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_18));
  tmpvar_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_12.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_19;
  if ((_FogColorNear.w > 0.5)) {
    mediump vec4 fogColor_20;
    highp vec3 tmpvar_21;
    tmpvar_21 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_22;
    tmpvar_22 = max (0.0, (sqrt(
      dot (tmpvar_21, tmpvar_21)
    ) - _FogStartDistance));
    highp float tmpvar_23;
    tmpvar_23 = min (max ((
      (1.0 - exp((-(
        (_FogIntensity * tmpvar_22)
      ) * (_FogIntensity * tmpvar_22))))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_24;
    tmpvar_24 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3(clamp (exp(
      (-((_FogColorIntensity * tmpvar_22)) * (_FogColorIntensity * tmpvar_22))
    ), 0.0, 1.0)));
    fogColor_20.xyz = tmpvar_24;
    fogColor_20.w = tmpvar_23;
    tmpvar_19 = fogColor_20;
  } else {
    mediump vec4 fogColor_25;
    highp vec3 tmpvar_26;
    tmpvar_26 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_27;
    tmpvar_27 = max (0.0, (sqrt(
      dot (tmpvar_26, tmpvar_26)
    ) - _FogStartDistance));
    highp float tmpvar_28;
    highp float tmpvar_29;
    tmpvar_29 = (_FogEndDistance - _FogStartDistance);
    tmpvar_28 = min (max ((
      (((500.0 * _FogIntensity) * tmpvar_27) / max (0.1, tmpvar_29))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_30;
    tmpvar_30 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3((1.0 - clamp (
      (((1000.0 * _FogColorIntensity) * tmpvar_27) / max (0.1, tmpvar_29))
    , 0.0, 1.0))));
    fogColor_25.xyz = tmpvar_30;
    fogColor_25.w = tmpvar_28;
    tmpvar_19 = fogColor_25;
  };
  tmpvar_14.w = 1.0;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_2.xyz;
  mediump vec4 wTangent_32;
  mediump vec3 wNormal_33;
  highp vec3 norm_34;
  norm_34 = tmpvar_31;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = unity_WorldToObject[0].xyz;
  tmpvar_35[1] = unity_WorldToObject[1].xyz;
  tmpvar_35[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((norm_34 * tmpvar_35));
  wNormal_33 = tmpvar_36;
  highp vec3 dir_37;
  dir_37 = tmpvar_4.xyz;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_38[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_38[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((tmpvar_38 * dir_37));
  wTangent_32.xyz = tmpvar_39;
  wTangent_32.w = (_glesTANGENT.w * unity_WorldTransformParams.w);
  mediump vec3 tmpvar_40;
  tmpvar_40 = (((wNormal_33.yzx * wTangent_32.zxy) - (wNormal_33.zxy * wTangent_32.yzx)) * wTangent_32.w);
  mediump vec3 tmpvar_41;
  tmpvar_41.x = wTangent_32.x;
  tmpvar_41.y = tmpvar_40.x;
  tmpvar_41.z = wNormal_33.x;
  mediump vec3 tmpvar_42;
  tmpvar_42.x = wTangent_32.y;
  tmpvar_42.y = tmpvar_40.y;
  tmpvar_42.z = wNormal_33.y;
  mediump vec3 tmpvar_43;
  tmpvar_43.x = wTangent_32.z;
  tmpvar_43.y = tmpvar_40.z;
  tmpvar_43.z = wNormal_33.z;
  highp vec4 tmpvar_44;
  tmpvar_44 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_7.xz = (tmpvar_44.xz - ((tmpvar_44.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_7.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize((tmpvar_44.xyz - adjCamPos_7));
  tmpvar_13 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = cos(_CamRotate);
  cost_6 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = sin(_CamRotate);
  sint_5 = tmpvar_47;
  highp mat2 tmpvar_48;
  tmpvar_48[0].x = cost_6;
  tmpvar_48[0].y = -(sint_5);
  tmpvar_48[1].x = sint_5;
  tmpvar_48[1].y = cost_6;
  tmpvar_13.xz = (tmpvar_48 * tmpvar_13.xz);
  highp vec3 tmpvar_49;
  tmpvar_49 = (_WorldSpaceCameraPos - tmpvar_44.xyz);
  tmpvar_14.xyz = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = offsetVertex_8.xyz;
  tmpvar_50.w = tmpvar_1.w;
  mediump vec3 fogParam_51;
  highp vec4 tmpvar_52;
  tmpvar_52 = (unity_ObjectToWorld * tmpvar_50);
  highp vec2 tmpvar_53;
  tmpvar_53 = (tmpvar_52.xz - _WorldSpaceCameraPos.xz);
  highp float tmpvar_54;
  tmpvar_54 = max (0.0, (sqrt(
    dot (tmpvar_53, tmpvar_53)
  ) - _UWFogDistStart));
  highp float tmpvar_55;
  tmpvar_55 = min (max ((
    (1.0 - exp((-(
      (_UWFogDensity * tmpvar_54)
    ) * (_UWFogDensity * tmpvar_54))))
   * _UWFogEffectLimit), _UWFogEffectStart), _UWFogEffectLimit);
  highp float tmpvar_56;
  tmpvar_56 = clamp (exp((
    -((_UWFogColorNFIntensity * tmpvar_54))
   * 
    (_UWFogColorNFIntensity * tmpvar_54)
  )), 0.0, 1.0);
  fogParam_51.x = tmpvar_56;
  fogParam_51.y = tmpvar_55;
  fogParam_51.z = tmpvar_52.y;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = tmpvar_12;
  xlv_COLOR0 = tmpvar_3;
  xlv_COLOR1 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_2.xyz;
  xlv_TEXCOORD2 = tmpvar_13;
  xlv_TEXCOORD3 = fogParam_51;
  xlv_TEXCOORD4 = tmpvar_14;
  xlv_TEXCOORD5 = tmpvar_41;
  xlv_TEXCOORD6 = tmpvar_42;
  xlv_TEXCOORD7 = tmpvar_43;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
uniform highp vec4 _UWFogColorLow;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWHeightFogDensity;
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
uniform highp float _UWHeightRatio;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
uniform highp vec4 _RimColor;
uniform highp float _RimPower;
uniform highp float _RimIntensity;
uniform sampler2D _NormalMap;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec3 normalFromMap_1;
  mediump vec4 Maskmap_2;
  mediump vec4 finalColor_3;
  mediump vec4 base_color1_4;
  mediump vec4 base_color0_5;
  mediump vec2 flow_dir_6;
  mediump float flow_scale1_7;
  mediump float flow_scale0_8;
  mediump vec3 flowAll_9;
  mediump float time_10;
  mediump vec2 uv_11;
  mediump vec2 UV_12;
  highp vec2 tmpvar_13;
  tmpvar_13 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_12 = tmpvar_13;
  highp vec2 tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_USpeed * _Time.y);
  tmpvar_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (_VSpeed * _Time.y);
  tmpvar_14.y = tmpvar_16;
  UV_12 = (UV_12 + tmpvar_14);
  highp vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_15;
  tmpvar_17.y = tmpvar_16;
  highp vec2 tmpvar_18;
  tmpvar_18 = (UV_12 + tmpvar_17);
  uv_11 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = _Time.y;
  time_10 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_FlowMap, uv_11).xyz;
  flowAll_9 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((_Speed * time_10) + flowAll_9.z));
  flow_scale0_8 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = fract(((
    (_Speed * time_10)
   + flowAll_9.z) + 0.5));
  flow_scale1_7 = tmpvar_22;
  flowAll_9.xy = (2.0 * (flowAll_9.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_23;
  tmpvar_23.x = _FlowSignX;
  tmpvar_23.y = _FlowSignY;
  flowAll_9.xy = (flowAll_9.xy * tmpvar_23);
  highp vec2 tmpvar_24;
  tmpvar_24 = (flowAll_9.xy * _FlowIntensity);
  flow_dir_6 = tmpvar_24;
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_11 + (flow_dir_6 * flow_scale0_8));
  mediump vec2 tmpvar_26;
  tmpvar_26 = (uv_11 + (flow_dir_6 * flow_scale1_7));
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color0_5 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MainTex, tmpvar_26);
  base_color1_4 = tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix (base_color0_5, base_color1_4, vec4(abs((2.0 * 
    (flow_scale0_8 - 0.5)
  ))));
  finalColor_3.w = 0.0;
  finalColor_3.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_29.x * xlv_COLOR0.x)));
  finalColor_3.xyz = (finalColor_3.xyz * (1.0 + (tmpvar_29.x * _EmissionScaler)));
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_2 = tmpvar_30;
  finalColor_3.xyz = (finalColor_3.xyz + ((_MaskColor.xyz * Maskmap_2.y) * _MaskScale));
  mediump vec3 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_32;
  tmpvar_32 = textureCube (_EnvTex, tmpvar_31);
  finalColor_3.xyz = (finalColor_3.xyz + ((tmpvar_32.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_3.w = (tmpvar_29.w * _BloomFactor);
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_NormalMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  normalFromMap_1 = tmpvar_33;
  mediump vec3 o_34;
  o_34.x = dot (xlv_TEXCOORD5, normalFromMap_1);
  o_34.y = dot (xlv_TEXCOORD6, normalFromMap_1);
  o_34.z = dot (xlv_TEXCOORD7, normalFromMap_1);
  mediump float tmpvar_35;
  tmpvar_35 = (1.0 - clamp (dot (
    normalize(xlv_TEXCOORD4.xyz)
  , o_34), 0.0, 1.0));
  highp float tmpvar_36;
  tmpvar_36 = pow (tmpvar_35, _RimPower);
  finalColor_3.xyz = (finalColor_3.xyz + ((_RimColor.xyz * tmpvar_36) * _RimIntensity));
  if ((xlv_TEXCOORD3.z > _WaterPlaneHeight)) {
    finalColor_3.xyz = mix (finalColor_3.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  } else {
    mediump vec3 xlat_varinput_37;
    xlat_varinput_37 = xlv_TEXCOORD3;
    mediump vec3 fogParam_38;
    highp float tmpvar_39;
    tmpvar_39 = max (0.0, ((_WaterPlaneHeight - xlv_TEXCOORD3.z) / (_WaterPlaneHeight - _UWFogHeightEnd)));
    highp float tmpvar_40;
    tmpvar_40 = min (max ((
      (1.0 - (_UWHeightFogDensity * tmpvar_39))
     * _UWHeightFogEffectLimit), _UWHeightFogEffectStart), _UWHeightFogEffectLimit);
    highp float tmpvar_41;
    tmpvar_41 = clamp ((_UWFogColorHLIntensity * tmpvar_39), 0.0, 1.0);
    fogParam_38.z = 0.0;
    fogParam_38.y = tmpvar_40;
    fogParam_38.x = tmpvar_41;
    if ((xlv_TEXCOORD3.y > 0.99)) {
      xlat_varinput_37.y = (xlv_TEXCOORD3.y * (1.0 - (tmpvar_39 * _UWHeightRatio)));
      highp float tmpvar_42;
      tmpvar_42 = clamp (xlat_varinput_37.y, _UWCriticalRange, 1.0);
      xlat_varinput_37.y = tmpvar_42;
    };
    fogParam_38.z = (1.0 - xlat_varinput_37.y);
    mediump vec4 tmpvar_43;
    tmpvar_43.w = 0.0;
    tmpvar_43.xyz = finalColor_3.xyz;
    highp vec3 tmpvar_44;
    tmpvar_44 = mix (mix (_UWFogColorFar, _UWFogColorNear, xlv_TEXCOORD3.xxxx), tmpvar_43, fogParam_38.zzzz).xyz;
    finalColor_3.xyz = tmpvar_44;
    mediump vec4 tmpvar_45;
    tmpvar_45.w = 0.0;
    tmpvar_45.xyz = finalColor_3.xyz;
    highp vec3 tmpvar_46;
    tmpvar_46 = mix (mix (_UWFogColorLow, _UWFogColorHigh, fogParam_38.xxxx), tmpvar_45, fogParam_38.yyyy).xyz;
    finalColor_3.xyz = tmpvar_46;
  };
  gl_FragData[0] = finalColor_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "_UNDERWATER_FOG" "FRESNEL" "UseNormalMap" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_WorldTransformParams;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _FogStartDistance;
uniform highp float _FogEndDistance;
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
uniform highp float _UWFogDistStart;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _glesNormal;
  mediump vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  tmpvar_3 = _glesColor;
  tmpvar_4 = _glesTANGENT;
  highp float sint_5;
  highp float cost_6;
  highp vec3 adjCamPos_7;
  mediump vec4 offsetVertex_8;
  mediump float normalOut_9;
  highp vec4 offset_10;
  highp vec4 tmpvar_11;
  mediump vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  mediump vec4 tmpvar_14;
  offset_10.yzw = vec3(0.0, 0.0, 0.0);
  offset_10.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_10.y = offset_10.x;
  highp float tmpvar_15;
  tmpvar_15 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_9 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = ((_glesVertex + (
    (offset_10 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_2 * normalOut_9) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_8 = tmpvar_16;
  highp vec4 pos_17;
  pos_17 = offsetVertex_8;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = pos_17.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_18));
  tmpvar_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_12.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_19;
  if ((_FogColorNear.w > 0.5)) {
    mediump vec4 fogColor_20;
    highp vec3 tmpvar_21;
    tmpvar_21 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_22;
    tmpvar_22 = max (0.0, (sqrt(
      dot (tmpvar_21, tmpvar_21)
    ) - _FogStartDistance));
    highp float tmpvar_23;
    tmpvar_23 = min (max ((
      (1.0 - exp((-(
        (_FogIntensity * tmpvar_22)
      ) * (_FogIntensity * tmpvar_22))))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_24;
    tmpvar_24 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3(clamp (exp(
      (-((_FogColorIntensity * tmpvar_22)) * (_FogColorIntensity * tmpvar_22))
    ), 0.0, 1.0)));
    fogColor_20.xyz = tmpvar_24;
    fogColor_20.w = tmpvar_23;
    tmpvar_19 = fogColor_20;
  } else {
    mediump vec4 fogColor_25;
    highp vec3 tmpvar_26;
    tmpvar_26 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_27;
    tmpvar_27 = max (0.0, (sqrt(
      dot (tmpvar_26, tmpvar_26)
    ) - _FogStartDistance));
    highp float tmpvar_28;
    highp float tmpvar_29;
    tmpvar_29 = (_FogEndDistance - _FogStartDistance);
    tmpvar_28 = min (max ((
      (((500.0 * _FogIntensity) * tmpvar_27) / max (0.1, tmpvar_29))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_30;
    tmpvar_30 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3((1.0 - clamp (
      (((1000.0 * _FogColorIntensity) * tmpvar_27) / max (0.1, tmpvar_29))
    , 0.0, 1.0))));
    fogColor_25.xyz = tmpvar_30;
    fogColor_25.w = tmpvar_28;
    tmpvar_19 = fogColor_25;
  };
  tmpvar_14.w = 1.0;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_2.xyz;
  mediump vec4 wTangent_32;
  mediump vec3 wNormal_33;
  highp vec3 norm_34;
  norm_34 = tmpvar_31;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = unity_WorldToObject[0].xyz;
  tmpvar_35[1] = unity_WorldToObject[1].xyz;
  tmpvar_35[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((norm_34 * tmpvar_35));
  wNormal_33 = tmpvar_36;
  highp vec3 dir_37;
  dir_37 = tmpvar_4.xyz;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_38[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_38[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((tmpvar_38 * dir_37));
  wTangent_32.xyz = tmpvar_39;
  wTangent_32.w = (_glesTANGENT.w * unity_WorldTransformParams.w);
  mediump vec3 tmpvar_40;
  tmpvar_40 = (((wNormal_33.yzx * wTangent_32.zxy) - (wNormal_33.zxy * wTangent_32.yzx)) * wTangent_32.w);
  mediump vec3 tmpvar_41;
  tmpvar_41.x = wTangent_32.x;
  tmpvar_41.y = tmpvar_40.x;
  tmpvar_41.z = wNormal_33.x;
  mediump vec3 tmpvar_42;
  tmpvar_42.x = wTangent_32.y;
  tmpvar_42.y = tmpvar_40.y;
  tmpvar_42.z = wNormal_33.y;
  mediump vec3 tmpvar_43;
  tmpvar_43.x = wTangent_32.z;
  tmpvar_43.y = tmpvar_40.z;
  tmpvar_43.z = wNormal_33.z;
  highp vec4 tmpvar_44;
  tmpvar_44 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_7.xz = (tmpvar_44.xz - ((tmpvar_44.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_7.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize((tmpvar_44.xyz - adjCamPos_7));
  tmpvar_13 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = cos(_CamRotate);
  cost_6 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = sin(_CamRotate);
  sint_5 = tmpvar_47;
  highp mat2 tmpvar_48;
  tmpvar_48[0].x = cost_6;
  tmpvar_48[0].y = -(sint_5);
  tmpvar_48[1].x = sint_5;
  tmpvar_48[1].y = cost_6;
  tmpvar_13.xz = (tmpvar_48 * tmpvar_13.xz);
  highp vec3 tmpvar_49;
  tmpvar_49 = (_WorldSpaceCameraPos - tmpvar_44.xyz);
  tmpvar_14.xyz = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = offsetVertex_8.xyz;
  tmpvar_50.w = tmpvar_1.w;
  mediump vec3 fogParam_51;
  highp vec4 tmpvar_52;
  tmpvar_52 = (unity_ObjectToWorld * tmpvar_50);
  highp vec2 tmpvar_53;
  tmpvar_53 = (tmpvar_52.xz - _WorldSpaceCameraPos.xz);
  highp float tmpvar_54;
  tmpvar_54 = max (0.0, (sqrt(
    dot (tmpvar_53, tmpvar_53)
  ) - _UWFogDistStart));
  highp float tmpvar_55;
  tmpvar_55 = min (max ((
    (1.0 - exp((-(
      (_UWFogDensity * tmpvar_54)
    ) * (_UWFogDensity * tmpvar_54))))
   * _UWFogEffectLimit), _UWFogEffectStart), _UWFogEffectLimit);
  highp float tmpvar_56;
  tmpvar_56 = clamp (exp((
    -((_UWFogColorNFIntensity * tmpvar_54))
   * 
    (_UWFogColorNFIntensity * tmpvar_54)
  )), 0.0, 1.0);
  fogParam_51.x = tmpvar_56;
  fogParam_51.y = tmpvar_55;
  fogParam_51.z = tmpvar_52.y;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = tmpvar_12;
  xlv_COLOR0 = tmpvar_3;
  xlv_COLOR1 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_2.xyz;
  xlv_TEXCOORD2 = tmpvar_13;
  xlv_TEXCOORD3 = fogParam_51;
  xlv_TEXCOORD4 = tmpvar_14;
  xlv_TEXCOORD5 = tmpvar_41;
  xlv_TEXCOORD6 = tmpvar_42;
  xlv_TEXCOORD7 = tmpvar_43;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
uniform highp vec4 _UWFogColorLow;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWHeightFogDensity;
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
uniform highp float _UWHeightRatio;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
uniform highp vec4 _RimColor;
uniform highp float _RimPower;
uniform highp float _RimIntensity;
uniform sampler2D _NormalMap;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec3 normalFromMap_1;
  mediump vec4 Maskmap_2;
  mediump vec4 finalColor_3;
  mediump vec4 base_color1_4;
  mediump vec4 base_color0_5;
  mediump vec2 flow_dir_6;
  mediump float flow_scale1_7;
  mediump float flow_scale0_8;
  mediump vec3 flowAll_9;
  mediump float time_10;
  mediump vec2 uv_11;
  mediump vec2 UV_12;
  highp vec2 tmpvar_13;
  tmpvar_13 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_12 = tmpvar_13;
  highp vec2 tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_USpeed * _Time.y);
  tmpvar_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (_VSpeed * _Time.y);
  tmpvar_14.y = tmpvar_16;
  UV_12 = (UV_12 + tmpvar_14);
  highp vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_15;
  tmpvar_17.y = tmpvar_16;
  highp vec2 tmpvar_18;
  tmpvar_18 = (UV_12 + tmpvar_17);
  uv_11 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = _Time.y;
  time_10 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_FlowMap, uv_11).xyz;
  flowAll_9 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((_Speed * time_10) + flowAll_9.z));
  flow_scale0_8 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = fract(((
    (_Speed * time_10)
   + flowAll_9.z) + 0.5));
  flow_scale1_7 = tmpvar_22;
  flowAll_9.xy = (2.0 * (flowAll_9.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_23;
  tmpvar_23.x = _FlowSignX;
  tmpvar_23.y = _FlowSignY;
  flowAll_9.xy = (flowAll_9.xy * tmpvar_23);
  highp vec2 tmpvar_24;
  tmpvar_24 = (flowAll_9.xy * _FlowIntensity);
  flow_dir_6 = tmpvar_24;
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_11 + (flow_dir_6 * flow_scale0_8));
  mediump vec2 tmpvar_26;
  tmpvar_26 = (uv_11 + (flow_dir_6 * flow_scale1_7));
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color0_5 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MainTex, tmpvar_26);
  base_color1_4 = tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix (base_color0_5, base_color1_4, vec4(abs((2.0 * 
    (flow_scale0_8 - 0.5)
  ))));
  finalColor_3.w = 0.0;
  finalColor_3.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_29.x * xlv_COLOR0.x)));
  finalColor_3.xyz = (finalColor_3.xyz * (1.0 + (tmpvar_29.x * _EmissionScaler)));
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_2 = tmpvar_30;
  finalColor_3.xyz = (finalColor_3.xyz + ((_MaskColor.xyz * Maskmap_2.y) * _MaskScale));
  mediump vec3 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_32;
  tmpvar_32 = textureCube (_EnvTex, tmpvar_31);
  finalColor_3.xyz = (finalColor_3.xyz + ((tmpvar_32.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_3.w = (tmpvar_29.w * _BloomFactor);
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_NormalMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  normalFromMap_1 = tmpvar_33;
  mediump vec3 o_34;
  o_34.x = dot (xlv_TEXCOORD5, normalFromMap_1);
  o_34.y = dot (xlv_TEXCOORD6, normalFromMap_1);
  o_34.z = dot (xlv_TEXCOORD7, normalFromMap_1);
  mediump float tmpvar_35;
  tmpvar_35 = (1.0 - clamp (dot (
    normalize(xlv_TEXCOORD4.xyz)
  , o_34), 0.0, 1.0));
  highp float tmpvar_36;
  tmpvar_36 = pow (tmpvar_35, _RimPower);
  finalColor_3.xyz = (finalColor_3.xyz + ((_RimColor.xyz * tmpvar_36) * _RimIntensity));
  if ((xlv_TEXCOORD3.z > _WaterPlaneHeight)) {
    finalColor_3.xyz = mix (finalColor_3.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  } else {
    mediump vec3 xlat_varinput_37;
    xlat_varinput_37 = xlv_TEXCOORD3;
    mediump vec3 fogParam_38;
    highp float tmpvar_39;
    tmpvar_39 = max (0.0, ((_WaterPlaneHeight - xlv_TEXCOORD3.z) / (_WaterPlaneHeight - _UWFogHeightEnd)));
    highp float tmpvar_40;
    tmpvar_40 = min (max ((
      (1.0 - (_UWHeightFogDensity * tmpvar_39))
     * _UWHeightFogEffectLimit), _UWHeightFogEffectStart), _UWHeightFogEffectLimit);
    highp float tmpvar_41;
    tmpvar_41 = clamp ((_UWFogColorHLIntensity * tmpvar_39), 0.0, 1.0);
    fogParam_38.z = 0.0;
    fogParam_38.y = tmpvar_40;
    fogParam_38.x = tmpvar_41;
    if ((xlv_TEXCOORD3.y > 0.99)) {
      xlat_varinput_37.y = (xlv_TEXCOORD3.y * (1.0 - (tmpvar_39 * _UWHeightRatio)));
      highp float tmpvar_42;
      tmpvar_42 = clamp (xlat_varinput_37.y, _UWCriticalRange, 1.0);
      xlat_varinput_37.y = tmpvar_42;
    };
    fogParam_38.z = (1.0 - xlat_varinput_37.y);
    mediump vec4 tmpvar_43;
    tmpvar_43.w = 0.0;
    tmpvar_43.xyz = finalColor_3.xyz;
    highp vec3 tmpvar_44;
    tmpvar_44 = mix (mix (_UWFogColorFar, _UWFogColorNear, xlv_TEXCOORD3.xxxx), tmpvar_43, fogParam_38.zzzz).xyz;
    finalColor_3.xyz = tmpvar_44;
    mediump vec4 tmpvar_45;
    tmpvar_45.w = 0.0;
    tmpvar_45.xyz = finalColor_3.xyz;
    highp vec3 tmpvar_46;
    tmpvar_46 = mix (mix (_UWFogColorLow, _UWFogColorHigh, fogParam_38.xxxx), tmpvar_45, fogParam_38.yyyy).xyz;
    finalColor_3.xyz = tmpvar_46;
  };
  gl_FragData[0] = finalColor_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "_UNDERWATER_FOG" "FRESNEL" "UseNormalMap" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_WorldTransformParams;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _FogStartDistance;
uniform highp float _FogEndDistance;
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
uniform highp float _UWFogDistStart;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _glesNormal;
  mediump vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  tmpvar_3 = _glesColor;
  tmpvar_4 = _glesTANGENT;
  highp float sint_5;
  highp float cost_6;
  highp vec3 adjCamPos_7;
  mediump vec4 offsetVertex_8;
  mediump float normalOut_9;
  highp vec4 offset_10;
  highp vec4 tmpvar_11;
  mediump vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  mediump vec4 tmpvar_14;
  offset_10.yzw = vec3(0.0, 0.0, 0.0);
  offset_10.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_10.y = offset_10.x;
  highp float tmpvar_15;
  tmpvar_15 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_9 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = ((_glesVertex + (
    (offset_10 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_2 * normalOut_9) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_8 = tmpvar_16;
  highp vec4 pos_17;
  pos_17 = offsetVertex_8;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = pos_17.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_18));
  tmpvar_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_12.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_19;
  if ((_FogColorNear.w > 0.5)) {
    mediump vec4 fogColor_20;
    highp vec3 tmpvar_21;
    tmpvar_21 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_22;
    tmpvar_22 = max (0.0, (sqrt(
      dot (tmpvar_21, tmpvar_21)
    ) - _FogStartDistance));
    highp float tmpvar_23;
    tmpvar_23 = min (max ((
      (1.0 - exp((-(
        (_FogIntensity * tmpvar_22)
      ) * (_FogIntensity * tmpvar_22))))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_24;
    tmpvar_24 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3(clamp (exp(
      (-((_FogColorIntensity * tmpvar_22)) * (_FogColorIntensity * tmpvar_22))
    ), 0.0, 1.0)));
    fogColor_20.xyz = tmpvar_24;
    fogColor_20.w = tmpvar_23;
    tmpvar_19 = fogColor_20;
  } else {
    mediump vec4 fogColor_25;
    highp vec3 tmpvar_26;
    tmpvar_26 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_27;
    tmpvar_27 = max (0.0, (sqrt(
      dot (tmpvar_26, tmpvar_26)
    ) - _FogStartDistance));
    highp float tmpvar_28;
    highp float tmpvar_29;
    tmpvar_29 = (_FogEndDistance - _FogStartDistance);
    tmpvar_28 = min (max ((
      (((500.0 * _FogIntensity) * tmpvar_27) / max (0.1, tmpvar_29))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_30;
    tmpvar_30 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3((1.0 - clamp (
      (((1000.0 * _FogColorIntensity) * tmpvar_27) / max (0.1, tmpvar_29))
    , 0.0, 1.0))));
    fogColor_25.xyz = tmpvar_30;
    fogColor_25.w = tmpvar_28;
    tmpvar_19 = fogColor_25;
  };
  tmpvar_14.w = 1.0;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_2.xyz;
  mediump vec4 wTangent_32;
  mediump vec3 wNormal_33;
  highp vec3 norm_34;
  norm_34 = tmpvar_31;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = unity_WorldToObject[0].xyz;
  tmpvar_35[1] = unity_WorldToObject[1].xyz;
  tmpvar_35[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((norm_34 * tmpvar_35));
  wNormal_33 = tmpvar_36;
  highp vec3 dir_37;
  dir_37 = tmpvar_4.xyz;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_38[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_38[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((tmpvar_38 * dir_37));
  wTangent_32.xyz = tmpvar_39;
  wTangent_32.w = (_glesTANGENT.w * unity_WorldTransformParams.w);
  mediump vec3 tmpvar_40;
  tmpvar_40 = (((wNormal_33.yzx * wTangent_32.zxy) - (wNormal_33.zxy * wTangent_32.yzx)) * wTangent_32.w);
  mediump vec3 tmpvar_41;
  tmpvar_41.x = wTangent_32.x;
  tmpvar_41.y = tmpvar_40.x;
  tmpvar_41.z = wNormal_33.x;
  mediump vec3 tmpvar_42;
  tmpvar_42.x = wTangent_32.y;
  tmpvar_42.y = tmpvar_40.y;
  tmpvar_42.z = wNormal_33.y;
  mediump vec3 tmpvar_43;
  tmpvar_43.x = wTangent_32.z;
  tmpvar_43.y = tmpvar_40.z;
  tmpvar_43.z = wNormal_33.z;
  highp vec4 tmpvar_44;
  tmpvar_44 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_7.xz = (tmpvar_44.xz - ((tmpvar_44.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_7.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize((tmpvar_44.xyz - adjCamPos_7));
  tmpvar_13 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = cos(_CamRotate);
  cost_6 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = sin(_CamRotate);
  sint_5 = tmpvar_47;
  highp mat2 tmpvar_48;
  tmpvar_48[0].x = cost_6;
  tmpvar_48[0].y = -(sint_5);
  tmpvar_48[1].x = sint_5;
  tmpvar_48[1].y = cost_6;
  tmpvar_13.xz = (tmpvar_48 * tmpvar_13.xz);
  highp vec3 tmpvar_49;
  tmpvar_49 = (_WorldSpaceCameraPos - tmpvar_44.xyz);
  tmpvar_14.xyz = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = offsetVertex_8.xyz;
  tmpvar_50.w = tmpvar_1.w;
  mediump vec3 fogParam_51;
  highp vec4 tmpvar_52;
  tmpvar_52 = (unity_ObjectToWorld * tmpvar_50);
  highp vec2 tmpvar_53;
  tmpvar_53 = (tmpvar_52.xz - _WorldSpaceCameraPos.xz);
  highp float tmpvar_54;
  tmpvar_54 = max (0.0, (sqrt(
    dot (tmpvar_53, tmpvar_53)
  ) - _UWFogDistStart));
  highp float tmpvar_55;
  tmpvar_55 = min (max ((
    (1.0 - exp((-(
      (_UWFogDensity * tmpvar_54)
    ) * (_UWFogDensity * tmpvar_54))))
   * _UWFogEffectLimit), _UWFogEffectStart), _UWFogEffectLimit);
  highp float tmpvar_56;
  tmpvar_56 = clamp (exp((
    -((_UWFogColorNFIntensity * tmpvar_54))
   * 
    (_UWFogColorNFIntensity * tmpvar_54)
  )), 0.0, 1.0);
  fogParam_51.x = tmpvar_56;
  fogParam_51.y = tmpvar_55;
  fogParam_51.z = tmpvar_52.y;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = tmpvar_12;
  xlv_COLOR0 = tmpvar_3;
  xlv_COLOR1 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_2.xyz;
  xlv_TEXCOORD2 = tmpvar_13;
  xlv_TEXCOORD3 = fogParam_51;
  xlv_TEXCOORD4 = tmpvar_14;
  xlv_TEXCOORD5 = tmpvar_41;
  xlv_TEXCOORD6 = tmpvar_42;
  xlv_TEXCOORD7 = tmpvar_43;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
uniform highp vec4 _UWFogColorLow;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWHeightFogDensity;
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
uniform highp float _UWHeightRatio;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
uniform highp vec4 _RimColor;
uniform highp float _RimPower;
uniform highp float _RimIntensity;
uniform sampler2D _NormalMap;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec3 normalFromMap_1;
  mediump vec4 Maskmap_2;
  mediump vec4 finalColor_3;
  mediump vec4 base_color1_4;
  mediump vec4 base_color0_5;
  mediump vec2 flow_dir_6;
  mediump float flow_scale1_7;
  mediump float flow_scale0_8;
  mediump vec3 flowAll_9;
  mediump float time_10;
  mediump vec2 uv_11;
  mediump vec2 UV_12;
  highp vec2 tmpvar_13;
  tmpvar_13 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_12 = tmpvar_13;
  highp vec2 tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_USpeed * _Time.y);
  tmpvar_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (_VSpeed * _Time.y);
  tmpvar_14.y = tmpvar_16;
  UV_12 = (UV_12 + tmpvar_14);
  highp vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_15;
  tmpvar_17.y = tmpvar_16;
  highp vec2 tmpvar_18;
  tmpvar_18 = (UV_12 + tmpvar_17);
  uv_11 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = _Time.y;
  time_10 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_FlowMap, uv_11).xyz;
  flowAll_9 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((_Speed * time_10) + flowAll_9.z));
  flow_scale0_8 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = fract(((
    (_Speed * time_10)
   + flowAll_9.z) + 0.5));
  flow_scale1_7 = tmpvar_22;
  flowAll_9.xy = (2.0 * (flowAll_9.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_23;
  tmpvar_23.x = _FlowSignX;
  tmpvar_23.y = _FlowSignY;
  flowAll_9.xy = (flowAll_9.xy * tmpvar_23);
  highp vec2 tmpvar_24;
  tmpvar_24 = (flowAll_9.xy * _FlowIntensity);
  flow_dir_6 = tmpvar_24;
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_11 + (flow_dir_6 * flow_scale0_8));
  mediump vec2 tmpvar_26;
  tmpvar_26 = (uv_11 + (flow_dir_6 * flow_scale1_7));
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color0_5 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MainTex, tmpvar_26);
  base_color1_4 = tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix (base_color0_5, base_color1_4, vec4(abs((2.0 * 
    (flow_scale0_8 - 0.5)
  ))));
  finalColor_3.w = 0.0;
  finalColor_3.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_29.x * xlv_COLOR0.x)));
  finalColor_3.xyz = (finalColor_3.xyz * (1.0 + (tmpvar_29.x * _EmissionScaler)));
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_2 = tmpvar_30;
  finalColor_3.xyz = (finalColor_3.xyz + ((_MaskColor.xyz * Maskmap_2.y) * _MaskScale));
  mediump vec3 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_32;
  tmpvar_32 = textureCube (_EnvTex, tmpvar_31);
  finalColor_3.xyz = (finalColor_3.xyz + ((tmpvar_32.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_3.w = (tmpvar_29.w * _BloomFactor);
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_NormalMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  normalFromMap_1 = tmpvar_33;
  mediump vec3 o_34;
  o_34.x = dot (xlv_TEXCOORD5, normalFromMap_1);
  o_34.y = dot (xlv_TEXCOORD6, normalFromMap_1);
  o_34.z = dot (xlv_TEXCOORD7, normalFromMap_1);
  mediump float tmpvar_35;
  tmpvar_35 = (1.0 - clamp (dot (
    normalize(xlv_TEXCOORD4.xyz)
  , o_34), 0.0, 1.0));
  highp float tmpvar_36;
  tmpvar_36 = pow (tmpvar_35, _RimPower);
  finalColor_3.xyz = (finalColor_3.xyz + ((_RimColor.xyz * tmpvar_36) * _RimIntensity));
  if ((xlv_TEXCOORD3.z > _WaterPlaneHeight)) {
    finalColor_3.xyz = mix (finalColor_3.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  } else {
    mediump vec3 xlat_varinput_37;
    xlat_varinput_37 = xlv_TEXCOORD3;
    mediump vec3 fogParam_38;
    highp float tmpvar_39;
    tmpvar_39 = max (0.0, ((_WaterPlaneHeight - xlv_TEXCOORD3.z) / (_WaterPlaneHeight - _UWFogHeightEnd)));
    highp float tmpvar_40;
    tmpvar_40 = min (max ((
      (1.0 - (_UWHeightFogDensity * tmpvar_39))
     * _UWHeightFogEffectLimit), _UWHeightFogEffectStart), _UWHeightFogEffectLimit);
    highp float tmpvar_41;
    tmpvar_41 = clamp ((_UWFogColorHLIntensity * tmpvar_39), 0.0, 1.0);
    fogParam_38.z = 0.0;
    fogParam_38.y = tmpvar_40;
    fogParam_38.x = tmpvar_41;
    if ((xlv_TEXCOORD3.y > 0.99)) {
      xlat_varinput_37.y = (xlv_TEXCOORD3.y * (1.0 - (tmpvar_39 * _UWHeightRatio)));
      highp float tmpvar_42;
      tmpvar_42 = clamp (xlat_varinput_37.y, _UWCriticalRange, 1.0);
      xlat_varinput_37.y = tmpvar_42;
    };
    fogParam_38.z = (1.0 - xlat_varinput_37.y);
    mediump vec4 tmpvar_43;
    tmpvar_43.w = 0.0;
    tmpvar_43.xyz = finalColor_3.xyz;
    highp vec3 tmpvar_44;
    tmpvar_44 = mix (mix (_UWFogColorFar, _UWFogColorNear, xlv_TEXCOORD3.xxxx), tmpvar_43, fogParam_38.zzzz).xyz;
    finalColor_3.xyz = tmpvar_44;
    mediump vec4 tmpvar_45;
    tmpvar_45.w = 0.0;
    tmpvar_45.xyz = finalColor_3.xyz;
    highp vec3 tmpvar_46;
    tmpvar_46 = mix (mix (_UWFogColorLow, _UWFogColorHigh, fogParam_38.xxxx), tmpvar_45, fogParam_38.yyyy).xyz;
    finalColor_3.xyz = tmpvar_46;
  };
  gl_FragData[0] = finalColor_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_UNDERWATER_FOG" "FRESNEL" "UseNormalMap" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_WorldTransformParams;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _FogStartDistance;
uniform highp float _FogEndDistance;
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
uniform highp float _UWFogDistStart;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _glesNormal;
  mediump vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  tmpvar_3 = _glesColor;
  tmpvar_4 = _glesTANGENT;
  highp float sint_5;
  highp float cost_6;
  highp vec3 adjCamPos_7;
  mediump vec4 offsetVertex_8;
  mediump float normalOut_9;
  highp vec4 offset_10;
  highp vec4 tmpvar_11;
  mediump vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  mediump vec4 tmpvar_14;
  offset_10.yzw = vec3(0.0, 0.0, 0.0);
  offset_10.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_10.y = offset_10.x;
  highp float tmpvar_15;
  tmpvar_15 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_9 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = ((_glesVertex + (
    (offset_10 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_2 * normalOut_9) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_8 = tmpvar_16;
  highp vec4 pos_17;
  pos_17 = offsetVertex_8;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = pos_17.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_18));
  tmpvar_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_12.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_19;
  if ((_FogColorNear.w > 0.5)) {
    mediump vec4 fogColor_20;
    highp vec3 tmpvar_21;
    tmpvar_21 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_22;
    tmpvar_22 = max (0.0, (sqrt(
      dot (tmpvar_21, tmpvar_21)
    ) - _FogStartDistance));
    highp float tmpvar_23;
    tmpvar_23 = min (max ((
      (1.0 - exp((-(
        (_FogIntensity * tmpvar_22)
      ) * (_FogIntensity * tmpvar_22))))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_24;
    tmpvar_24 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3(clamp (exp(
      (-((_FogColorIntensity * tmpvar_22)) * (_FogColorIntensity * tmpvar_22))
    ), 0.0, 1.0)));
    fogColor_20.xyz = tmpvar_24;
    fogColor_20.w = tmpvar_23;
    tmpvar_19 = fogColor_20;
  } else {
    mediump vec4 fogColor_25;
    highp vec3 tmpvar_26;
    tmpvar_26 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_27;
    tmpvar_27 = max (0.0, (sqrt(
      dot (tmpvar_26, tmpvar_26)
    ) - _FogStartDistance));
    highp float tmpvar_28;
    highp float tmpvar_29;
    tmpvar_29 = (_FogEndDistance - _FogStartDistance);
    tmpvar_28 = min (max ((
      (((500.0 * _FogIntensity) * tmpvar_27) / max (0.1, tmpvar_29))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_30;
    tmpvar_30 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3((1.0 - clamp (
      (((1000.0 * _FogColorIntensity) * tmpvar_27) / max (0.1, tmpvar_29))
    , 0.0, 1.0))));
    fogColor_25.xyz = tmpvar_30;
    fogColor_25.w = tmpvar_28;
    tmpvar_19 = fogColor_25;
  };
  tmpvar_14.w = 1.0;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_2.xyz;
  mediump vec4 wTangent_32;
  mediump vec3 wNormal_33;
  highp vec3 norm_34;
  norm_34 = tmpvar_31;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = unity_WorldToObject[0].xyz;
  tmpvar_35[1] = unity_WorldToObject[1].xyz;
  tmpvar_35[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((norm_34 * tmpvar_35));
  wNormal_33 = tmpvar_36;
  highp vec3 dir_37;
  dir_37 = tmpvar_4.xyz;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_38[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_38[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((tmpvar_38 * dir_37));
  wTangent_32.xyz = tmpvar_39;
  wTangent_32.w = (_glesTANGENT.w * unity_WorldTransformParams.w);
  mediump vec3 tmpvar_40;
  tmpvar_40 = (((wNormal_33.yzx * wTangent_32.zxy) - (wNormal_33.zxy * wTangent_32.yzx)) * wTangent_32.w);
  mediump vec3 tmpvar_41;
  tmpvar_41.x = wTangent_32.x;
  tmpvar_41.y = tmpvar_40.x;
  tmpvar_41.z = wNormal_33.x;
  mediump vec3 tmpvar_42;
  tmpvar_42.x = wTangent_32.y;
  tmpvar_42.y = tmpvar_40.y;
  tmpvar_42.z = wNormal_33.y;
  mediump vec3 tmpvar_43;
  tmpvar_43.x = wTangent_32.z;
  tmpvar_43.y = tmpvar_40.z;
  tmpvar_43.z = wNormal_33.z;
  highp vec4 tmpvar_44;
  tmpvar_44 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_7.xz = (tmpvar_44.xz - ((tmpvar_44.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_7.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize((tmpvar_44.xyz - adjCamPos_7));
  tmpvar_13 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = cos(_CamRotate);
  cost_6 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = sin(_CamRotate);
  sint_5 = tmpvar_47;
  highp mat2 tmpvar_48;
  tmpvar_48[0].x = cost_6;
  tmpvar_48[0].y = -(sint_5);
  tmpvar_48[1].x = sint_5;
  tmpvar_48[1].y = cost_6;
  tmpvar_13.xz = (tmpvar_48 * tmpvar_13.xz);
  highp vec3 tmpvar_49;
  tmpvar_49 = (_WorldSpaceCameraPos - tmpvar_44.xyz);
  tmpvar_14.xyz = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = offsetVertex_8.xyz;
  tmpvar_50.w = tmpvar_1.w;
  mediump vec3 fogParam_51;
  highp vec4 tmpvar_52;
  tmpvar_52 = (unity_ObjectToWorld * tmpvar_50);
  highp vec2 tmpvar_53;
  tmpvar_53 = (tmpvar_52.xz - _WorldSpaceCameraPos.xz);
  highp float tmpvar_54;
  tmpvar_54 = max (0.0, (sqrt(
    dot (tmpvar_53, tmpvar_53)
  ) - _UWFogDistStart));
  highp float tmpvar_55;
  tmpvar_55 = min (max ((
    (1.0 - exp((-(
      (_UWFogDensity * tmpvar_54)
    ) * (_UWFogDensity * tmpvar_54))))
   * _UWFogEffectLimit), _UWFogEffectStart), _UWFogEffectLimit);
  highp float tmpvar_56;
  tmpvar_56 = clamp (exp((
    -((_UWFogColorNFIntensity * tmpvar_54))
   * 
    (_UWFogColorNFIntensity * tmpvar_54)
  )), 0.0, 1.0);
  fogParam_51.x = tmpvar_56;
  fogParam_51.y = tmpvar_55;
  fogParam_51.z = tmpvar_52.y;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = tmpvar_12;
  xlv_COLOR0 = tmpvar_3;
  xlv_COLOR1 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_2.xyz;
  xlv_TEXCOORD2 = tmpvar_13;
  xlv_TEXCOORD3 = fogParam_51;
  xlv_TEXCOORD4 = tmpvar_14;
  xlv_TEXCOORD5 = tmpvar_41;
  xlv_TEXCOORD6 = tmpvar_42;
  xlv_TEXCOORD7 = tmpvar_43;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
uniform highp vec4 _UWFogColorLow;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWHeightFogDensity;
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
uniform highp float _UWHeightRatio;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
uniform highp vec4 _RimColor;
uniform highp float _RimPower;
uniform highp float _RimIntensity;
uniform sampler2D _NormalMap;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec3 normalFromMap_1;
  mediump vec4 Maskmap_2;
  mediump vec4 finalColor_3;
  mediump vec4 base_color1_4;
  mediump vec4 base_color0_5;
  mediump vec2 flow_dir_6;
  mediump float flow_scale1_7;
  mediump float flow_scale0_8;
  mediump vec3 flowAll_9;
  mediump float time_10;
  mediump vec2 uv_11;
  mediump vec2 UV_12;
  highp vec2 tmpvar_13;
  tmpvar_13 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_12 = tmpvar_13;
  highp vec2 tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_USpeed * _Time.y);
  tmpvar_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (_VSpeed * _Time.y);
  tmpvar_14.y = tmpvar_16;
  UV_12 = (UV_12 + tmpvar_14);
  highp vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_15;
  tmpvar_17.y = tmpvar_16;
  highp vec2 tmpvar_18;
  tmpvar_18 = (UV_12 + tmpvar_17);
  uv_11 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = _Time.y;
  time_10 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_FlowMap, uv_11).xyz;
  flowAll_9 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((_Speed * time_10) + flowAll_9.z));
  flow_scale0_8 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = fract(((
    (_Speed * time_10)
   + flowAll_9.z) + 0.5));
  flow_scale1_7 = tmpvar_22;
  flowAll_9.xy = (2.0 * (flowAll_9.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_23;
  tmpvar_23.x = _FlowSignX;
  tmpvar_23.y = _FlowSignY;
  flowAll_9.xy = (flowAll_9.xy * tmpvar_23);
  highp vec2 tmpvar_24;
  tmpvar_24 = (flowAll_9.xy * _FlowIntensity);
  flow_dir_6 = tmpvar_24;
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_11 + (flow_dir_6 * flow_scale0_8));
  mediump vec2 tmpvar_26;
  tmpvar_26 = (uv_11 + (flow_dir_6 * flow_scale1_7));
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color0_5 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MainTex, tmpvar_26);
  base_color1_4 = tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix (base_color0_5, base_color1_4, vec4(abs((2.0 * 
    (flow_scale0_8 - 0.5)
  ))));
  finalColor_3.w = 0.0;
  finalColor_3.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_29.x * xlv_COLOR0.x)));
  finalColor_3.xyz = (finalColor_3.xyz * (1.0 + (tmpvar_29.x * _EmissionScaler)));
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_2 = tmpvar_30;
  finalColor_3.xyz = (finalColor_3.xyz + ((_MaskColor.xyz * Maskmap_2.y) * _MaskScale));
  mediump vec3 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_32;
  tmpvar_32 = textureCube (_EnvTex, tmpvar_31);
  finalColor_3.xyz = (finalColor_3.xyz + ((tmpvar_32.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_3.w = (tmpvar_29.w * _BloomFactor);
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_NormalMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  normalFromMap_1 = tmpvar_33;
  mediump vec3 o_34;
  o_34.x = dot (xlv_TEXCOORD5, normalFromMap_1);
  o_34.y = dot (xlv_TEXCOORD6, normalFromMap_1);
  o_34.z = dot (xlv_TEXCOORD7, normalFromMap_1);
  mediump float tmpvar_35;
  tmpvar_35 = (1.0 - clamp (dot (
    normalize(xlv_TEXCOORD4.xyz)
  , o_34), 0.0, 1.0));
  highp float tmpvar_36;
  tmpvar_36 = pow (tmpvar_35, _RimPower);
  finalColor_3.xyz = (finalColor_3.xyz + ((_RimColor.xyz * tmpvar_36) * _RimIntensity));
  if ((xlv_TEXCOORD3.z > _WaterPlaneHeight)) {
    finalColor_3.xyz = mix (finalColor_3.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  } else {
    mediump vec3 xlat_varinput_37;
    xlat_varinput_37 = xlv_TEXCOORD3;
    mediump vec3 fogParam_38;
    highp float tmpvar_39;
    tmpvar_39 = max (0.0, ((_WaterPlaneHeight - xlv_TEXCOORD3.z) / (_WaterPlaneHeight - _UWFogHeightEnd)));
    highp float tmpvar_40;
    tmpvar_40 = min (max ((
      (1.0 - (_UWHeightFogDensity * tmpvar_39))
     * _UWHeightFogEffectLimit), _UWHeightFogEffectStart), _UWHeightFogEffectLimit);
    highp float tmpvar_41;
    tmpvar_41 = clamp ((_UWFogColorHLIntensity * tmpvar_39), 0.0, 1.0);
    fogParam_38.z = 0.0;
    fogParam_38.y = tmpvar_40;
    fogParam_38.x = tmpvar_41;
    if ((xlv_TEXCOORD3.y > 0.99)) {
      xlat_varinput_37.y = (xlv_TEXCOORD3.y * (1.0 - (tmpvar_39 * _UWHeightRatio)));
      highp float tmpvar_42;
      tmpvar_42 = clamp (xlat_varinput_37.y, _UWCriticalRange, 1.0);
      xlat_varinput_37.y = tmpvar_42;
    };
    fogParam_38.z = (1.0 - xlat_varinput_37.y);
    mediump vec4 tmpvar_43;
    tmpvar_43.w = 0.0;
    tmpvar_43.xyz = finalColor_3.xyz;
    highp vec3 tmpvar_44;
    tmpvar_44 = mix (mix (_UWFogColorFar, _UWFogColorNear, xlv_TEXCOORD3.xxxx), tmpvar_43, fogParam_38.zzzz).xyz;
    finalColor_3.xyz = tmpvar_44;
    mediump vec4 tmpvar_45;
    tmpvar_45.w = 0.0;
    tmpvar_45.xyz = finalColor_3.xyz;
    highp vec3 tmpvar_46;
    tmpvar_46 = mix (mix (_UWFogColorLow, _UWFogColorHigh, fogParam_38.xxxx), tmpvar_45, fogParam_38.yyyy).xyz;
    finalColor_3.xyz = tmpvar_46;
  };
  gl_FragData[0] = finalColor_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_UNDERWATER_FOG" "FRESNEL" "UseNormalMap" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_WorldTransformParams;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _FogStartDistance;
uniform highp float _FogEndDistance;
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
uniform highp float _UWFogDistStart;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _glesNormal;
  mediump vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  tmpvar_3 = _glesColor;
  tmpvar_4 = _glesTANGENT;
  highp float sint_5;
  highp float cost_6;
  highp vec3 adjCamPos_7;
  mediump vec4 offsetVertex_8;
  mediump float normalOut_9;
  highp vec4 offset_10;
  highp vec4 tmpvar_11;
  mediump vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  mediump vec4 tmpvar_14;
  offset_10.yzw = vec3(0.0, 0.0, 0.0);
  offset_10.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_10.y = offset_10.x;
  highp float tmpvar_15;
  tmpvar_15 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_9 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = ((_glesVertex + (
    (offset_10 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_2 * normalOut_9) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_8 = tmpvar_16;
  highp vec4 pos_17;
  pos_17 = offsetVertex_8;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = pos_17.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_18));
  tmpvar_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_12.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_19;
  if ((_FogColorNear.w > 0.5)) {
    mediump vec4 fogColor_20;
    highp vec3 tmpvar_21;
    tmpvar_21 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_22;
    tmpvar_22 = max (0.0, (sqrt(
      dot (tmpvar_21, tmpvar_21)
    ) - _FogStartDistance));
    highp float tmpvar_23;
    tmpvar_23 = min (max ((
      (1.0 - exp((-(
        (_FogIntensity * tmpvar_22)
      ) * (_FogIntensity * tmpvar_22))))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_24;
    tmpvar_24 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3(clamp (exp(
      (-((_FogColorIntensity * tmpvar_22)) * (_FogColorIntensity * tmpvar_22))
    ), 0.0, 1.0)));
    fogColor_20.xyz = tmpvar_24;
    fogColor_20.w = tmpvar_23;
    tmpvar_19 = fogColor_20;
  } else {
    mediump vec4 fogColor_25;
    highp vec3 tmpvar_26;
    tmpvar_26 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_27;
    tmpvar_27 = max (0.0, (sqrt(
      dot (tmpvar_26, tmpvar_26)
    ) - _FogStartDistance));
    highp float tmpvar_28;
    highp float tmpvar_29;
    tmpvar_29 = (_FogEndDistance - _FogStartDistance);
    tmpvar_28 = min (max ((
      (((500.0 * _FogIntensity) * tmpvar_27) / max (0.1, tmpvar_29))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_30;
    tmpvar_30 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3((1.0 - clamp (
      (((1000.0 * _FogColorIntensity) * tmpvar_27) / max (0.1, tmpvar_29))
    , 0.0, 1.0))));
    fogColor_25.xyz = tmpvar_30;
    fogColor_25.w = tmpvar_28;
    tmpvar_19 = fogColor_25;
  };
  tmpvar_14.w = 1.0;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_2.xyz;
  mediump vec4 wTangent_32;
  mediump vec3 wNormal_33;
  highp vec3 norm_34;
  norm_34 = tmpvar_31;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = unity_WorldToObject[0].xyz;
  tmpvar_35[1] = unity_WorldToObject[1].xyz;
  tmpvar_35[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((norm_34 * tmpvar_35));
  wNormal_33 = tmpvar_36;
  highp vec3 dir_37;
  dir_37 = tmpvar_4.xyz;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_38[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_38[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((tmpvar_38 * dir_37));
  wTangent_32.xyz = tmpvar_39;
  wTangent_32.w = (_glesTANGENT.w * unity_WorldTransformParams.w);
  mediump vec3 tmpvar_40;
  tmpvar_40 = (((wNormal_33.yzx * wTangent_32.zxy) - (wNormal_33.zxy * wTangent_32.yzx)) * wTangent_32.w);
  mediump vec3 tmpvar_41;
  tmpvar_41.x = wTangent_32.x;
  tmpvar_41.y = tmpvar_40.x;
  tmpvar_41.z = wNormal_33.x;
  mediump vec3 tmpvar_42;
  tmpvar_42.x = wTangent_32.y;
  tmpvar_42.y = tmpvar_40.y;
  tmpvar_42.z = wNormal_33.y;
  mediump vec3 tmpvar_43;
  tmpvar_43.x = wTangent_32.z;
  tmpvar_43.y = tmpvar_40.z;
  tmpvar_43.z = wNormal_33.z;
  highp vec4 tmpvar_44;
  tmpvar_44 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_7.xz = (tmpvar_44.xz - ((tmpvar_44.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_7.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize((tmpvar_44.xyz - adjCamPos_7));
  tmpvar_13 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = cos(_CamRotate);
  cost_6 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = sin(_CamRotate);
  sint_5 = tmpvar_47;
  highp mat2 tmpvar_48;
  tmpvar_48[0].x = cost_6;
  tmpvar_48[0].y = -(sint_5);
  tmpvar_48[1].x = sint_5;
  tmpvar_48[1].y = cost_6;
  tmpvar_13.xz = (tmpvar_48 * tmpvar_13.xz);
  highp vec3 tmpvar_49;
  tmpvar_49 = (_WorldSpaceCameraPos - tmpvar_44.xyz);
  tmpvar_14.xyz = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = offsetVertex_8.xyz;
  tmpvar_50.w = tmpvar_1.w;
  mediump vec3 fogParam_51;
  highp vec4 tmpvar_52;
  tmpvar_52 = (unity_ObjectToWorld * tmpvar_50);
  highp vec2 tmpvar_53;
  tmpvar_53 = (tmpvar_52.xz - _WorldSpaceCameraPos.xz);
  highp float tmpvar_54;
  tmpvar_54 = max (0.0, (sqrt(
    dot (tmpvar_53, tmpvar_53)
  ) - _UWFogDistStart));
  highp float tmpvar_55;
  tmpvar_55 = min (max ((
    (1.0 - exp((-(
      (_UWFogDensity * tmpvar_54)
    ) * (_UWFogDensity * tmpvar_54))))
   * _UWFogEffectLimit), _UWFogEffectStart), _UWFogEffectLimit);
  highp float tmpvar_56;
  tmpvar_56 = clamp (exp((
    -((_UWFogColorNFIntensity * tmpvar_54))
   * 
    (_UWFogColorNFIntensity * tmpvar_54)
  )), 0.0, 1.0);
  fogParam_51.x = tmpvar_56;
  fogParam_51.y = tmpvar_55;
  fogParam_51.z = tmpvar_52.y;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = tmpvar_12;
  xlv_COLOR0 = tmpvar_3;
  xlv_COLOR1 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_2.xyz;
  xlv_TEXCOORD2 = tmpvar_13;
  xlv_TEXCOORD3 = fogParam_51;
  xlv_TEXCOORD4 = tmpvar_14;
  xlv_TEXCOORD5 = tmpvar_41;
  xlv_TEXCOORD6 = tmpvar_42;
  xlv_TEXCOORD7 = tmpvar_43;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
uniform highp vec4 _UWFogColorLow;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWHeightFogDensity;
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
uniform highp float _UWHeightRatio;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
uniform highp vec4 _RimColor;
uniform highp float _RimPower;
uniform highp float _RimIntensity;
uniform sampler2D _NormalMap;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec3 normalFromMap_1;
  mediump vec4 Maskmap_2;
  mediump vec4 finalColor_3;
  mediump vec4 base_color1_4;
  mediump vec4 base_color0_5;
  mediump vec2 flow_dir_6;
  mediump float flow_scale1_7;
  mediump float flow_scale0_8;
  mediump vec3 flowAll_9;
  mediump float time_10;
  mediump vec2 uv_11;
  mediump vec2 UV_12;
  highp vec2 tmpvar_13;
  tmpvar_13 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_12 = tmpvar_13;
  highp vec2 tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_USpeed * _Time.y);
  tmpvar_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (_VSpeed * _Time.y);
  tmpvar_14.y = tmpvar_16;
  UV_12 = (UV_12 + tmpvar_14);
  highp vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_15;
  tmpvar_17.y = tmpvar_16;
  highp vec2 tmpvar_18;
  tmpvar_18 = (UV_12 + tmpvar_17);
  uv_11 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = _Time.y;
  time_10 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_FlowMap, uv_11).xyz;
  flowAll_9 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((_Speed * time_10) + flowAll_9.z));
  flow_scale0_8 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = fract(((
    (_Speed * time_10)
   + flowAll_9.z) + 0.5));
  flow_scale1_7 = tmpvar_22;
  flowAll_9.xy = (2.0 * (flowAll_9.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_23;
  tmpvar_23.x = _FlowSignX;
  tmpvar_23.y = _FlowSignY;
  flowAll_9.xy = (flowAll_9.xy * tmpvar_23);
  highp vec2 tmpvar_24;
  tmpvar_24 = (flowAll_9.xy * _FlowIntensity);
  flow_dir_6 = tmpvar_24;
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_11 + (flow_dir_6 * flow_scale0_8));
  mediump vec2 tmpvar_26;
  tmpvar_26 = (uv_11 + (flow_dir_6 * flow_scale1_7));
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color0_5 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MainTex, tmpvar_26);
  base_color1_4 = tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix (base_color0_5, base_color1_4, vec4(abs((2.0 * 
    (flow_scale0_8 - 0.5)
  ))));
  finalColor_3.w = 0.0;
  finalColor_3.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_29.x * xlv_COLOR0.x)));
  finalColor_3.xyz = (finalColor_3.xyz * (1.0 + (tmpvar_29.x * _EmissionScaler)));
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_2 = tmpvar_30;
  finalColor_3.xyz = (finalColor_3.xyz + ((_MaskColor.xyz * Maskmap_2.y) * _MaskScale));
  mediump vec3 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_32;
  tmpvar_32 = textureCube (_EnvTex, tmpvar_31);
  finalColor_3.xyz = (finalColor_3.xyz + ((tmpvar_32.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_3.w = (tmpvar_29.w * _BloomFactor);
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_NormalMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  normalFromMap_1 = tmpvar_33;
  mediump vec3 o_34;
  o_34.x = dot (xlv_TEXCOORD5, normalFromMap_1);
  o_34.y = dot (xlv_TEXCOORD6, normalFromMap_1);
  o_34.z = dot (xlv_TEXCOORD7, normalFromMap_1);
  mediump float tmpvar_35;
  tmpvar_35 = (1.0 - clamp (dot (
    normalize(xlv_TEXCOORD4.xyz)
  , o_34), 0.0, 1.0));
  highp float tmpvar_36;
  tmpvar_36 = pow (tmpvar_35, _RimPower);
  finalColor_3.xyz = (finalColor_3.xyz + ((_RimColor.xyz * tmpvar_36) * _RimIntensity));
  if ((xlv_TEXCOORD3.z > _WaterPlaneHeight)) {
    finalColor_3.xyz = mix (finalColor_3.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  } else {
    mediump vec3 xlat_varinput_37;
    xlat_varinput_37 = xlv_TEXCOORD3;
    mediump vec3 fogParam_38;
    highp float tmpvar_39;
    tmpvar_39 = max (0.0, ((_WaterPlaneHeight - xlv_TEXCOORD3.z) / (_WaterPlaneHeight - _UWFogHeightEnd)));
    highp float tmpvar_40;
    tmpvar_40 = min (max ((
      (1.0 - (_UWHeightFogDensity * tmpvar_39))
     * _UWHeightFogEffectLimit), _UWHeightFogEffectStart), _UWHeightFogEffectLimit);
    highp float tmpvar_41;
    tmpvar_41 = clamp ((_UWFogColorHLIntensity * tmpvar_39), 0.0, 1.0);
    fogParam_38.z = 0.0;
    fogParam_38.y = tmpvar_40;
    fogParam_38.x = tmpvar_41;
    if ((xlv_TEXCOORD3.y > 0.99)) {
      xlat_varinput_37.y = (xlv_TEXCOORD3.y * (1.0 - (tmpvar_39 * _UWHeightRatio)));
      highp float tmpvar_42;
      tmpvar_42 = clamp (xlat_varinput_37.y, _UWCriticalRange, 1.0);
      xlat_varinput_37.y = tmpvar_42;
    };
    fogParam_38.z = (1.0 - xlat_varinput_37.y);
    mediump vec4 tmpvar_43;
    tmpvar_43.w = 0.0;
    tmpvar_43.xyz = finalColor_3.xyz;
    highp vec3 tmpvar_44;
    tmpvar_44 = mix (mix (_UWFogColorFar, _UWFogColorNear, xlv_TEXCOORD3.xxxx), tmpvar_43, fogParam_38.zzzz).xyz;
    finalColor_3.xyz = tmpvar_44;
    mediump vec4 tmpvar_45;
    tmpvar_45.w = 0.0;
    tmpvar_45.xyz = finalColor_3.xyz;
    highp vec3 tmpvar_46;
    tmpvar_46 = mix (mix (_UWFogColorLow, _UWFogColorHigh, fogParam_38.xxxx), tmpvar_45, fogParam_38.yyyy).xyz;
    finalColor_3.xyz = tmpvar_46;
  };
  gl_FragData[0] = finalColor_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_UNDERWATER_FOG" "FRESNEL" "UseNormalMap" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_WorldTransformParams;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _FogColorNear;
uniform highp vec4 _FogColorFar;
uniform highp float _FogColorIntensity;
uniform highp float _FogIntensity;
uniform highp float _FogEffectStart;
uniform highp float _FogEffectLimit;
uniform highp float _FogStartDistance;
uniform highp float _FogEndDistance;
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
uniform highp float _UWFogDistStart;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2.w = 0.0;
  tmpvar_2.xyz = _glesNormal;
  mediump vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  tmpvar_3 = _glesColor;
  tmpvar_4 = _glesTANGENT;
  highp float sint_5;
  highp float cost_6;
  highp vec3 adjCamPos_7;
  mediump vec4 offsetVertex_8;
  mediump float normalOut_9;
  highp vec4 offset_10;
  highp vec4 tmpvar_11;
  mediump vec4 tmpvar_12;
  mediump vec3 tmpvar_13;
  mediump vec4 tmpvar_14;
  offset_10.yzw = vec3(0.0, 0.0, 0.0);
  offset_10.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_10.y = offset_10.x;
  highp float tmpvar_15;
  tmpvar_15 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_9 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = ((_glesVertex + (
    (offset_10 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_2 * normalOut_9) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_8 = tmpvar_16;
  highp vec4 pos_17;
  pos_17 = offsetVertex_8;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = pos_17.xyz;
  tmpvar_11 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_18));
  tmpvar_12.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_12.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_19;
  if ((_FogColorNear.w > 0.5)) {
    mediump vec4 fogColor_20;
    highp vec3 tmpvar_21;
    tmpvar_21 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_22;
    tmpvar_22 = max (0.0, (sqrt(
      dot (tmpvar_21, tmpvar_21)
    ) - _FogStartDistance));
    highp float tmpvar_23;
    tmpvar_23 = min (max ((
      (1.0 - exp((-(
        (_FogIntensity * tmpvar_22)
      ) * (_FogIntensity * tmpvar_22))))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_24;
    tmpvar_24 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3(clamp (exp(
      (-((_FogColorIntensity * tmpvar_22)) * (_FogColorIntensity * tmpvar_22))
    ), 0.0, 1.0)));
    fogColor_20.xyz = tmpvar_24;
    fogColor_20.w = tmpvar_23;
    tmpvar_19 = fogColor_20;
  } else {
    mediump vec4 fogColor_25;
    highp vec3 tmpvar_26;
    tmpvar_26 = ((unity_ObjectToWorld * _glesVertex).xyz - _WorldSpaceCameraPos);
    highp float tmpvar_27;
    tmpvar_27 = max (0.0, (sqrt(
      dot (tmpvar_26, tmpvar_26)
    ) - _FogStartDistance));
    highp float tmpvar_28;
    highp float tmpvar_29;
    tmpvar_29 = (_FogEndDistance - _FogStartDistance);
    tmpvar_28 = min (max ((
      (((500.0 * _FogIntensity) * tmpvar_27) / max (0.1, tmpvar_29))
     * _FogEffectLimit), _FogEffectStart), _FogEffectLimit);
    highp vec3 tmpvar_30;
    tmpvar_30 = mix (_FogColorFar.xyz, _FogColorNear.xyz, vec3((1.0 - clamp (
      (((1000.0 * _FogColorIntensity) * tmpvar_27) / max (0.1, tmpvar_29))
    , 0.0, 1.0))));
    fogColor_25.xyz = tmpvar_30;
    fogColor_25.w = tmpvar_28;
    tmpvar_19 = fogColor_25;
  };
  tmpvar_14.w = 1.0;
  mediump vec3 tmpvar_31;
  tmpvar_31 = tmpvar_2.xyz;
  mediump vec4 wTangent_32;
  mediump vec3 wNormal_33;
  highp vec3 norm_34;
  norm_34 = tmpvar_31;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = unity_WorldToObject[0].xyz;
  tmpvar_35[1] = unity_WorldToObject[1].xyz;
  tmpvar_35[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_36;
  tmpvar_36 = normalize((norm_34 * tmpvar_35));
  wNormal_33 = tmpvar_36;
  highp vec3 dir_37;
  dir_37 = tmpvar_4.xyz;
  highp mat3 tmpvar_38;
  tmpvar_38[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_38[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_38[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize((tmpvar_38 * dir_37));
  wTangent_32.xyz = tmpvar_39;
  wTangent_32.w = (_glesTANGENT.w * unity_WorldTransformParams.w);
  mediump vec3 tmpvar_40;
  tmpvar_40 = (((wNormal_33.yzx * wTangent_32.zxy) - (wNormal_33.zxy * wTangent_32.yzx)) * wTangent_32.w);
  mediump vec3 tmpvar_41;
  tmpvar_41.x = wTangent_32.x;
  tmpvar_41.y = tmpvar_40.x;
  tmpvar_41.z = wNormal_33.x;
  mediump vec3 tmpvar_42;
  tmpvar_42.x = wTangent_32.y;
  tmpvar_42.y = tmpvar_40.y;
  tmpvar_42.z = wNormal_33.y;
  mediump vec3 tmpvar_43;
  tmpvar_43.x = wTangent_32.z;
  tmpvar_43.y = tmpvar_40.z;
  tmpvar_43.z = wNormal_33.z;
  highp vec4 tmpvar_44;
  tmpvar_44 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_7.xz = (tmpvar_44.xz - ((tmpvar_44.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_7.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_45;
  tmpvar_45 = normalize((tmpvar_44.xyz - adjCamPos_7));
  tmpvar_13 = tmpvar_45;
  mediump float tmpvar_46;
  tmpvar_46 = cos(_CamRotate);
  cost_6 = tmpvar_46;
  mediump float tmpvar_47;
  tmpvar_47 = sin(_CamRotate);
  sint_5 = tmpvar_47;
  highp mat2 tmpvar_48;
  tmpvar_48[0].x = cost_6;
  tmpvar_48[0].y = -(sint_5);
  tmpvar_48[1].x = sint_5;
  tmpvar_48[1].y = cost_6;
  tmpvar_13.xz = (tmpvar_48 * tmpvar_13.xz);
  highp vec3 tmpvar_49;
  tmpvar_49 = (_WorldSpaceCameraPos - tmpvar_44.xyz);
  tmpvar_14.xyz = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50.xyz = offsetVertex_8.xyz;
  tmpvar_50.w = tmpvar_1.w;
  mediump vec3 fogParam_51;
  highp vec4 tmpvar_52;
  tmpvar_52 = (unity_ObjectToWorld * tmpvar_50);
  highp vec2 tmpvar_53;
  tmpvar_53 = (tmpvar_52.xz - _WorldSpaceCameraPos.xz);
  highp float tmpvar_54;
  tmpvar_54 = max (0.0, (sqrt(
    dot (tmpvar_53, tmpvar_53)
  ) - _UWFogDistStart));
  highp float tmpvar_55;
  tmpvar_55 = min (max ((
    (1.0 - exp((-(
      (_UWFogDensity * tmpvar_54)
    ) * (_UWFogDensity * tmpvar_54))))
   * _UWFogEffectLimit), _UWFogEffectStart), _UWFogEffectLimit);
  highp float tmpvar_56;
  tmpvar_56 = clamp (exp((
    -((_UWFogColorNFIntensity * tmpvar_54))
   * 
    (_UWFogColorNFIntensity * tmpvar_54)
  )), 0.0, 1.0);
  fogParam_51.x = tmpvar_56;
  fogParam_51.y = tmpvar_55;
  fogParam_51.z = tmpvar_52.y;
  gl_Position = tmpvar_11;
  xlv_TEXCOORD0 = tmpvar_12;
  xlv_COLOR0 = tmpvar_3;
  xlv_COLOR1 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_2.xyz;
  xlv_TEXCOORD2 = tmpvar_13;
  xlv_TEXCOORD3 = fogParam_51;
  xlv_TEXCOORD4 = tmpvar_14;
  xlv_TEXCOORD5 = tmpvar_41;
  xlv_TEXCOORD6 = tmpvar_42;
  xlv_TEXCOORD7 = tmpvar_43;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
uniform highp vec4 _UWFogColorLow;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWHeightFogDensity;
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
uniform highp float _UWHeightRatio;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
uniform highp vec4 _RimColor;
uniform highp float _RimPower;
uniform highp float _RimIntensity;
uniform sampler2D _NormalMap;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec3 normalFromMap_1;
  mediump vec4 Maskmap_2;
  mediump vec4 finalColor_3;
  mediump vec4 base_color1_4;
  mediump vec4 base_color0_5;
  mediump vec2 flow_dir_6;
  mediump float flow_scale1_7;
  mediump float flow_scale0_8;
  mediump vec3 flowAll_9;
  mediump float time_10;
  mediump vec2 uv_11;
  mediump vec2 UV_12;
  highp vec2 tmpvar_13;
  tmpvar_13 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_12 = tmpvar_13;
  highp vec2 tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_USpeed * _Time.y);
  tmpvar_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (_VSpeed * _Time.y);
  tmpvar_14.y = tmpvar_16;
  UV_12 = (UV_12 + tmpvar_14);
  highp vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_15;
  tmpvar_17.y = tmpvar_16;
  highp vec2 tmpvar_18;
  tmpvar_18 = (UV_12 + tmpvar_17);
  uv_11 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = _Time.y;
  time_10 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_FlowMap, uv_11).xyz;
  flowAll_9 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((_Speed * time_10) + flowAll_9.z));
  flow_scale0_8 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = fract(((
    (_Speed * time_10)
   + flowAll_9.z) + 0.5));
  flow_scale1_7 = tmpvar_22;
  flowAll_9.xy = (2.0 * (flowAll_9.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_23;
  tmpvar_23.x = _FlowSignX;
  tmpvar_23.y = _FlowSignY;
  flowAll_9.xy = (flowAll_9.xy * tmpvar_23);
  highp vec2 tmpvar_24;
  tmpvar_24 = (flowAll_9.xy * _FlowIntensity);
  flow_dir_6 = tmpvar_24;
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_11 + (flow_dir_6 * flow_scale0_8));
  mediump vec2 tmpvar_26;
  tmpvar_26 = (uv_11 + (flow_dir_6 * flow_scale1_7));
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color0_5 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MainTex, tmpvar_26);
  base_color1_4 = tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix (base_color0_5, base_color1_4, vec4(abs((2.0 * 
    (flow_scale0_8 - 0.5)
  ))));
  finalColor_3.w = 0.0;
  finalColor_3.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_29.x * xlv_COLOR0.x)));
  finalColor_3.xyz = (finalColor_3.xyz * (1.0 + (tmpvar_29.x * _EmissionScaler)));
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_2 = tmpvar_30;
  finalColor_3.xyz = (finalColor_3.xyz + ((_MaskColor.xyz * Maskmap_2.y) * _MaskScale));
  mediump vec3 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_32;
  tmpvar_32 = textureCube (_EnvTex, tmpvar_31);
  finalColor_3.xyz = (finalColor_3.xyz + ((tmpvar_32.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_3.w = (tmpvar_29.w * _BloomFactor);
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_NormalMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  normalFromMap_1 = tmpvar_33;
  mediump vec3 o_34;
  o_34.x = dot (xlv_TEXCOORD5, normalFromMap_1);
  o_34.y = dot (xlv_TEXCOORD6, normalFromMap_1);
  o_34.z = dot (xlv_TEXCOORD7, normalFromMap_1);
  mediump float tmpvar_35;
  tmpvar_35 = (1.0 - clamp (dot (
    normalize(xlv_TEXCOORD4.xyz)
  , o_34), 0.0, 1.0));
  highp float tmpvar_36;
  tmpvar_36 = pow (tmpvar_35, _RimPower);
  finalColor_3.xyz = (finalColor_3.xyz + ((_RimColor.xyz * tmpvar_36) * _RimIntensity));
  if ((xlv_TEXCOORD3.z > _WaterPlaneHeight)) {
    finalColor_3.xyz = mix (finalColor_3.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  } else {
    mediump vec3 xlat_varinput_37;
    xlat_varinput_37 = xlv_TEXCOORD3;
    mediump vec3 fogParam_38;
    highp float tmpvar_39;
    tmpvar_39 = max (0.0, ((_WaterPlaneHeight - xlv_TEXCOORD3.z) / (_WaterPlaneHeight - _UWFogHeightEnd)));
    highp float tmpvar_40;
    tmpvar_40 = min (max ((
      (1.0 - (_UWHeightFogDensity * tmpvar_39))
     * _UWHeightFogEffectLimit), _UWHeightFogEffectStart), _UWHeightFogEffectLimit);
    highp float tmpvar_41;
    tmpvar_41 = clamp ((_UWFogColorHLIntensity * tmpvar_39), 0.0, 1.0);
    fogParam_38.z = 0.0;
    fogParam_38.y = tmpvar_40;
    fogParam_38.x = tmpvar_41;
    if ((xlv_TEXCOORD3.y > 0.99)) {
      xlat_varinput_37.y = (xlv_TEXCOORD3.y * (1.0 - (tmpvar_39 * _UWHeightRatio)));
      highp float tmpvar_42;
      tmpvar_42 = clamp (xlat_varinput_37.y, _UWCriticalRange, 1.0);
      xlat_varinput_37.y = tmpvar_42;
    };
    fogParam_38.z = (1.0 - xlat_varinput_37.y);
    mediump vec4 tmpvar_43;
    tmpvar_43.w = 0.0;
    tmpvar_43.xyz = finalColor_3.xyz;
    highp vec3 tmpvar_44;
    tmpvar_44 = mix (mix (_UWFogColorFar, _UWFogColorNear, xlv_TEXCOORD3.xxxx), tmpvar_43, fogParam_38.zzzz).xyz;
    finalColor_3.xyz = tmpvar_44;
    mediump vec4 tmpvar_45;
    tmpvar_45.w = 0.0;
    tmpvar_45.xyz = finalColor_3.xyz;
    highp vec3 tmpvar_46;
    tmpvar_46 = mix (mix (_UWFogColorLow, _UWFogColorHigh, fogParam_38.xxxx), tmpvar_45, fogParam_38.yyyy).xyz;
    finalColor_3.xyz = tmpvar_46;
  };
  gl_FragData[0] = finalColor_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_HEIGHT" "_UNDERWATER_FOG" "FRESNEL" "UseNormalMap" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_WorldTransformParams;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
uniform highp float _UWFogDistStart;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _glesNormal;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp float sint_5;
  highp float cost_6;
  highp vec3 adjCamPos_7;
  mediump vec4 offsetVertex_8;
  mediump float normalOut_9;
  highp vec4 offset_10;
  mediump vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  mediump vec4 tmpvar_13;
  offset_10.yzw = vec3(0.0, 0.0, 0.0);
  offset_10.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_10.y = offset_10.x;
  highp float tmpvar_14;
  tmpvar_14 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_9 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = ((_glesVertex + (
    (offset_10 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_3 * normalOut_9) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_8 = tmpvar_15;
  highp vec4 pos_16;
  pos_16 = offsetVertex_8;
  highp vec4 tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = pos_16.xyz;
  tmpvar_17 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_18));
  tmpvar_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_11.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_22;
  mediump float fogFactor_23;
  mediump vec3 fogColor_24;
  mediump vec3 heightFogColor_25;
  highp float HeightFogFactor_26;
  mediump vec3 atomesphereFogColor_27;
  mediump float h_28;
  highp float linearFogDensity_29;
  mediump float len_30;
  highp float tmpvar_31;
  tmpvar_31 = sqrt(dot (tmpvar_21, tmpvar_21));
  len_30 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (((len_30 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_29 = (tmpvar_32 * (2.0 - tmpvar_32));
  if ((len_30 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_29 = (linearFogDensity_29 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_33;
  tmpvar_33 = min (pow (linearFogDensity_29, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_29 = tmpvar_33;
  mediump float tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((tmpvar_20.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_34 = tmpvar_35;
  h_28 = (tmpvar_34 * (2.0 - tmpvar_34));
  highp vec3 tmpvar_36;
  tmpvar_36 = (_HeigtFogColBase.xyz + (h_28 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_27 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (atomesphereFogColor_27, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_30 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_27 = tmpvar_37;
  mediump float tmpvar_38;
  mediump float r_39;
  mediump float f_40;
  mediump float u_41;
  mediump float l_42;
  mediump float fogInt_43;
  fogInt_43 = 1.0;
  highp float tmpvar_44;
  tmpvar_44 = (_HeigtFogParams.x * tmpvar_21.y);
  highp float tmpvar_45;
  tmpvar_45 = abs(tmpvar_44);
  if ((tmpvar_45 > 0.01)) {
    highp float tmpvar_46;
    tmpvar_46 = exp(-(tmpvar_44));
    fogInt_43 = ((1.0 - tmpvar_46) / tmpvar_44);
  };
  highp float tmpvar_47;
  tmpvar_47 = sqrt(dot (tmpvar_21, tmpvar_21));
  l_42 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = (l_42 * _HeigtFogParams.y);
  u_41 = tmpvar_48;
  fogInt_43 = (fogInt_43 * u_41);
  mediump float tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((l_42 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_49 = tmpvar_50;
  r_39 = (tmpvar_49 * (2.0 - tmpvar_49));
  r_39 = ((r_39 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_40 = ((1.0 - clamp (
    exp2(-(fogInt_43))
  , 0.0, 1.0)) * r_39);
  highp float tmpvar_51;
  tmpvar_51 = min (f_40, _HeigtFogColBase.w);
  tmpvar_38 = tmpvar_51;
  HeightFogFactor_26 = tmpvar_38;
  highp vec3 tmpvar_52;
  tmpvar_52 = _Mihoyo_FogColor.xyz;
  heightFogColor_25 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = ((heightFogColor_25 * HeightFogFactor_26) + ((atomesphereFogColor_27 * tmpvar_33) * (1.0 - HeightFogFactor_26)));
  fogColor_24 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = ((1.0 - tmpvar_33) * (1.0 - HeightFogFactor_26));
  fogFactor_23 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55.xyz = fogColor_24;
  tmpvar_55.w = fogFactor_23;
  tmpvar_22 = tmpvar_55;
  tmpvar_19 = tmpvar_22;
  tmpvar_13.w = 1.0;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_3.xyz;
  mediump vec4 wTangent_57;
  mediump vec3 wNormal_58;
  highp vec3 norm_59;
  norm_59 = tmpvar_56;
  highp mat3 tmpvar_60;
  tmpvar_60[0] = unity_WorldToObject[0].xyz;
  tmpvar_60[1] = unity_WorldToObject[1].xyz;
  tmpvar_60[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize((norm_59 * tmpvar_60));
  wNormal_58 = tmpvar_61;
  highp vec3 dir_62;
  dir_62 = tmpvar_4.xyz;
  highp mat3 tmpvar_63;
  tmpvar_63[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_63[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_63[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((tmpvar_63 * dir_62));
  wTangent_57.xyz = tmpvar_64;
  wTangent_57.w = (_glesTANGENT.w * unity_WorldTransformParams.w);
  mediump vec3 tmpvar_65;
  tmpvar_65 = (((wNormal_58.yzx * wTangent_57.zxy) - (wNormal_58.zxy * wTangent_57.yzx)) * wTangent_57.w);
  mediump vec3 tmpvar_66;
  tmpvar_66.x = wTangent_57.x;
  tmpvar_66.y = tmpvar_65.x;
  tmpvar_66.z = wNormal_58.x;
  mediump vec3 tmpvar_67;
  tmpvar_67.x = wTangent_57.y;
  tmpvar_67.y = tmpvar_65.y;
  tmpvar_67.z = wNormal_58.y;
  mediump vec3 tmpvar_68;
  tmpvar_68.x = wTangent_57.z;
  tmpvar_68.y = tmpvar_65.z;
  tmpvar_68.z = wNormal_58.z;
  highp vec4 tmpvar_69;
  tmpvar_69 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_7.xz = (tmpvar_69.xz - ((tmpvar_69.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_7.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_70;
  tmpvar_70 = normalize((tmpvar_69.xyz - adjCamPos_7));
  tmpvar_12 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = cos(_CamRotate);
  cost_6 = tmpvar_71;
  mediump float tmpvar_72;
  tmpvar_72 = sin(_CamRotate);
  sint_5 = tmpvar_72;
  highp mat2 tmpvar_73;
  tmpvar_73[0].x = cost_6;
  tmpvar_73[0].y = -(sint_5);
  tmpvar_73[1].x = sint_5;
  tmpvar_73[1].y = cost_6;
  tmpvar_12.xz = (tmpvar_73 * tmpvar_12.xz);
  highp vec3 tmpvar_74;
  tmpvar_74 = (_WorldSpaceCameraPos - tmpvar_69.xyz);
  tmpvar_13.xyz = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75.xyz = offsetVertex_8.xyz;
  tmpvar_75.w = tmpvar_1.w;
  mediump vec3 fogParam_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = (unity_ObjectToWorld * tmpvar_75);
  highp vec2 tmpvar_78;
  tmpvar_78 = (tmpvar_77.xz - _WorldSpaceCameraPos.xz);
  highp float tmpvar_79;
  tmpvar_79 = max (0.0, (sqrt(
    dot (tmpvar_78, tmpvar_78)
  ) - _UWFogDistStart));
  highp float tmpvar_80;
  tmpvar_80 = min (max ((
    (1.0 - exp((-(
      (_UWFogDensity * tmpvar_79)
    ) * (_UWFogDensity * tmpvar_79))))
   * _UWFogEffectLimit), _UWFogEffectStart), _UWFogEffectLimit);
  highp float tmpvar_81;
  tmpvar_81 = clamp (exp((
    -((_UWFogColorNFIntensity * tmpvar_79))
   * 
    (_UWFogColorNFIntensity * tmpvar_79)
  )), 0.0, 1.0);
  fogParam_76.x = tmpvar_81;
  fogParam_76.y = tmpvar_80;
  fogParam_76.z = tmpvar_77.y;
  gl_Position = tmpvar_17;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_COLOR0 = tmpvar_2;
  xlv_COLOR1 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_3.xyz;
  xlv_TEXCOORD2 = tmpvar_12;
  xlv_TEXCOORD3 = fogParam_76;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_66;
  xlv_TEXCOORD6 = tmpvar_67;
  xlv_TEXCOORD7 = tmpvar_68;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
uniform highp vec4 _UWFogColorLow;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWHeightFogDensity;
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
uniform highp float _UWHeightRatio;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
uniform highp vec4 _RimColor;
uniform highp float _RimPower;
uniform highp float _RimIntensity;
uniform sampler2D _NormalMap;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec3 normalFromMap_1;
  mediump vec4 Maskmap_2;
  mediump vec4 finalColor_3;
  mediump vec4 base_color1_4;
  mediump vec4 base_color0_5;
  mediump vec2 flow_dir_6;
  mediump float flow_scale1_7;
  mediump float flow_scale0_8;
  mediump vec3 flowAll_9;
  mediump float time_10;
  mediump vec2 uv_11;
  mediump vec2 UV_12;
  highp vec2 tmpvar_13;
  tmpvar_13 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_12 = tmpvar_13;
  highp vec2 tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_USpeed * _Time.y);
  tmpvar_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (_VSpeed * _Time.y);
  tmpvar_14.y = tmpvar_16;
  UV_12 = (UV_12 + tmpvar_14);
  highp vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_15;
  tmpvar_17.y = tmpvar_16;
  highp vec2 tmpvar_18;
  tmpvar_18 = (UV_12 + tmpvar_17);
  uv_11 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = _Time.y;
  time_10 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_FlowMap, uv_11).xyz;
  flowAll_9 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((_Speed * time_10) + flowAll_9.z));
  flow_scale0_8 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = fract(((
    (_Speed * time_10)
   + flowAll_9.z) + 0.5));
  flow_scale1_7 = tmpvar_22;
  flowAll_9.xy = (2.0 * (flowAll_9.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_23;
  tmpvar_23.x = _FlowSignX;
  tmpvar_23.y = _FlowSignY;
  flowAll_9.xy = (flowAll_9.xy * tmpvar_23);
  highp vec2 tmpvar_24;
  tmpvar_24 = (flowAll_9.xy * _FlowIntensity);
  flow_dir_6 = tmpvar_24;
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_11 + (flow_dir_6 * flow_scale0_8));
  mediump vec2 tmpvar_26;
  tmpvar_26 = (uv_11 + (flow_dir_6 * flow_scale1_7));
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color0_5 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MainTex, tmpvar_26);
  base_color1_4 = tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix (base_color0_5, base_color1_4, vec4(abs((2.0 * 
    (flow_scale0_8 - 0.5)
  ))));
  finalColor_3.w = 0.0;
  finalColor_3.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_29.x * xlv_COLOR0.x)));
  finalColor_3.xyz = (finalColor_3.xyz * (1.0 + (tmpvar_29.x * _EmissionScaler)));
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_2 = tmpvar_30;
  finalColor_3.xyz = (finalColor_3.xyz + ((_MaskColor.xyz * Maskmap_2.y) * _MaskScale));
  mediump vec3 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_32;
  tmpvar_32 = textureCube (_EnvTex, tmpvar_31);
  finalColor_3.xyz = (finalColor_3.xyz + ((tmpvar_32.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_3.w = (tmpvar_29.w * _BloomFactor);
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_NormalMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  normalFromMap_1 = tmpvar_33;
  mediump vec3 o_34;
  o_34.x = dot (xlv_TEXCOORD5, normalFromMap_1);
  o_34.y = dot (xlv_TEXCOORD6, normalFromMap_1);
  o_34.z = dot (xlv_TEXCOORD7, normalFromMap_1);
  mediump float tmpvar_35;
  tmpvar_35 = (1.0 - clamp (dot (
    normalize(xlv_TEXCOORD4.xyz)
  , o_34), 0.0, 1.0));
  highp float tmpvar_36;
  tmpvar_36 = pow (tmpvar_35, _RimPower);
  finalColor_3.xyz = (finalColor_3.xyz + ((_RimColor.xyz * tmpvar_36) * _RimIntensity));
  if ((xlv_TEXCOORD3.z > _WaterPlaneHeight)) {
    finalColor_3.xyz = mix (finalColor_3.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  } else {
    mediump vec3 xlat_varinput_37;
    xlat_varinput_37 = xlv_TEXCOORD3;
    mediump vec3 fogParam_38;
    highp float tmpvar_39;
    tmpvar_39 = max (0.0, ((_WaterPlaneHeight - xlv_TEXCOORD3.z) / (_WaterPlaneHeight - _UWFogHeightEnd)));
    highp float tmpvar_40;
    tmpvar_40 = min (max ((
      (1.0 - (_UWHeightFogDensity * tmpvar_39))
     * _UWHeightFogEffectLimit), _UWHeightFogEffectStart), _UWHeightFogEffectLimit);
    highp float tmpvar_41;
    tmpvar_41 = clamp ((_UWFogColorHLIntensity * tmpvar_39), 0.0, 1.0);
    fogParam_38.z = 0.0;
    fogParam_38.y = tmpvar_40;
    fogParam_38.x = tmpvar_41;
    if ((xlv_TEXCOORD3.y > 0.99)) {
      xlat_varinput_37.y = (xlv_TEXCOORD3.y * (1.0 - (tmpvar_39 * _UWHeightRatio)));
      highp float tmpvar_42;
      tmpvar_42 = clamp (xlat_varinput_37.y, _UWCriticalRange, 1.0);
      xlat_varinput_37.y = tmpvar_42;
    };
    fogParam_38.z = (1.0 - xlat_varinput_37.y);
    mediump vec4 tmpvar_43;
    tmpvar_43.w = 0.0;
    tmpvar_43.xyz = finalColor_3.xyz;
    highp vec3 tmpvar_44;
    tmpvar_44 = mix (mix (_UWFogColorFar, _UWFogColorNear, xlv_TEXCOORD3.xxxx), tmpvar_43, fogParam_38.zzzz).xyz;
    finalColor_3.xyz = tmpvar_44;
    mediump vec4 tmpvar_45;
    tmpvar_45.w = 0.0;
    tmpvar_45.xyz = finalColor_3.xyz;
    highp vec3 tmpvar_46;
    tmpvar_46 = mix (mix (_UWFogColorLow, _UWFogColorHigh, fogParam_38.xxxx), tmpvar_45, fogParam_38.yyyy).xyz;
    finalColor_3.xyz = tmpvar_46;
  };
  gl_FragData[0] = finalColor_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_HEIGHT" "_UNDERWATER_FOG" "FRESNEL" "UseNormalMap" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_WorldTransformParams;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
uniform highp float _UWFogDistStart;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _glesNormal;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp float sint_5;
  highp float cost_6;
  highp vec3 adjCamPos_7;
  mediump vec4 offsetVertex_8;
  mediump float normalOut_9;
  highp vec4 offset_10;
  mediump vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  mediump vec4 tmpvar_13;
  offset_10.yzw = vec3(0.0, 0.0, 0.0);
  offset_10.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_10.y = offset_10.x;
  highp float tmpvar_14;
  tmpvar_14 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_9 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = ((_glesVertex + (
    (offset_10 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_3 * normalOut_9) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_8 = tmpvar_15;
  highp vec4 pos_16;
  pos_16 = offsetVertex_8;
  highp vec4 tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = pos_16.xyz;
  tmpvar_17 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_18));
  tmpvar_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_11.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_22;
  mediump float fogFactor_23;
  mediump vec3 fogColor_24;
  mediump vec3 heightFogColor_25;
  highp float HeightFogFactor_26;
  mediump vec3 atomesphereFogColor_27;
  mediump float h_28;
  highp float linearFogDensity_29;
  mediump float len_30;
  highp float tmpvar_31;
  tmpvar_31 = sqrt(dot (tmpvar_21, tmpvar_21));
  len_30 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (((len_30 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_29 = (tmpvar_32 * (2.0 - tmpvar_32));
  if ((len_30 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_29 = (linearFogDensity_29 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_33;
  tmpvar_33 = min (pow (linearFogDensity_29, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_29 = tmpvar_33;
  mediump float tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((tmpvar_20.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_34 = tmpvar_35;
  h_28 = (tmpvar_34 * (2.0 - tmpvar_34));
  highp vec3 tmpvar_36;
  tmpvar_36 = (_HeigtFogColBase.xyz + (h_28 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_27 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (atomesphereFogColor_27, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_30 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_27 = tmpvar_37;
  mediump float tmpvar_38;
  mediump float r_39;
  mediump float f_40;
  mediump float u_41;
  mediump float l_42;
  mediump float fogInt_43;
  fogInt_43 = 1.0;
  highp float tmpvar_44;
  tmpvar_44 = (_HeigtFogParams.x * tmpvar_21.y);
  highp float tmpvar_45;
  tmpvar_45 = abs(tmpvar_44);
  if ((tmpvar_45 > 0.01)) {
    highp float tmpvar_46;
    tmpvar_46 = exp(-(tmpvar_44));
    fogInt_43 = ((1.0 - tmpvar_46) / tmpvar_44);
  };
  highp float tmpvar_47;
  tmpvar_47 = sqrt(dot (tmpvar_21, tmpvar_21));
  l_42 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = (l_42 * _HeigtFogParams.y);
  u_41 = tmpvar_48;
  fogInt_43 = (fogInt_43 * u_41);
  mediump float tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((l_42 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_49 = tmpvar_50;
  r_39 = (tmpvar_49 * (2.0 - tmpvar_49));
  r_39 = ((r_39 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_40 = ((1.0 - clamp (
    exp2(-(fogInt_43))
  , 0.0, 1.0)) * r_39);
  highp float tmpvar_51;
  tmpvar_51 = min (f_40, _HeigtFogColBase.w);
  tmpvar_38 = tmpvar_51;
  HeightFogFactor_26 = tmpvar_38;
  highp vec3 tmpvar_52;
  tmpvar_52 = _Mihoyo_FogColor.xyz;
  heightFogColor_25 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = ((heightFogColor_25 * HeightFogFactor_26) + ((atomesphereFogColor_27 * tmpvar_33) * (1.0 - HeightFogFactor_26)));
  fogColor_24 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = ((1.0 - tmpvar_33) * (1.0 - HeightFogFactor_26));
  fogFactor_23 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55.xyz = fogColor_24;
  tmpvar_55.w = fogFactor_23;
  tmpvar_22 = tmpvar_55;
  tmpvar_19 = tmpvar_22;
  tmpvar_13.w = 1.0;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_3.xyz;
  mediump vec4 wTangent_57;
  mediump vec3 wNormal_58;
  highp vec3 norm_59;
  norm_59 = tmpvar_56;
  highp mat3 tmpvar_60;
  tmpvar_60[0] = unity_WorldToObject[0].xyz;
  tmpvar_60[1] = unity_WorldToObject[1].xyz;
  tmpvar_60[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize((norm_59 * tmpvar_60));
  wNormal_58 = tmpvar_61;
  highp vec3 dir_62;
  dir_62 = tmpvar_4.xyz;
  highp mat3 tmpvar_63;
  tmpvar_63[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_63[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_63[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((tmpvar_63 * dir_62));
  wTangent_57.xyz = tmpvar_64;
  wTangent_57.w = (_glesTANGENT.w * unity_WorldTransformParams.w);
  mediump vec3 tmpvar_65;
  tmpvar_65 = (((wNormal_58.yzx * wTangent_57.zxy) - (wNormal_58.zxy * wTangent_57.yzx)) * wTangent_57.w);
  mediump vec3 tmpvar_66;
  tmpvar_66.x = wTangent_57.x;
  tmpvar_66.y = tmpvar_65.x;
  tmpvar_66.z = wNormal_58.x;
  mediump vec3 tmpvar_67;
  tmpvar_67.x = wTangent_57.y;
  tmpvar_67.y = tmpvar_65.y;
  tmpvar_67.z = wNormal_58.y;
  mediump vec3 tmpvar_68;
  tmpvar_68.x = wTangent_57.z;
  tmpvar_68.y = tmpvar_65.z;
  tmpvar_68.z = wNormal_58.z;
  highp vec4 tmpvar_69;
  tmpvar_69 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_7.xz = (tmpvar_69.xz - ((tmpvar_69.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_7.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_70;
  tmpvar_70 = normalize((tmpvar_69.xyz - adjCamPos_7));
  tmpvar_12 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = cos(_CamRotate);
  cost_6 = tmpvar_71;
  mediump float tmpvar_72;
  tmpvar_72 = sin(_CamRotate);
  sint_5 = tmpvar_72;
  highp mat2 tmpvar_73;
  tmpvar_73[0].x = cost_6;
  tmpvar_73[0].y = -(sint_5);
  tmpvar_73[1].x = sint_5;
  tmpvar_73[1].y = cost_6;
  tmpvar_12.xz = (tmpvar_73 * tmpvar_12.xz);
  highp vec3 tmpvar_74;
  tmpvar_74 = (_WorldSpaceCameraPos - tmpvar_69.xyz);
  tmpvar_13.xyz = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75.xyz = offsetVertex_8.xyz;
  tmpvar_75.w = tmpvar_1.w;
  mediump vec3 fogParam_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = (unity_ObjectToWorld * tmpvar_75);
  highp vec2 tmpvar_78;
  tmpvar_78 = (tmpvar_77.xz - _WorldSpaceCameraPos.xz);
  highp float tmpvar_79;
  tmpvar_79 = max (0.0, (sqrt(
    dot (tmpvar_78, tmpvar_78)
  ) - _UWFogDistStart));
  highp float tmpvar_80;
  tmpvar_80 = min (max ((
    (1.0 - exp((-(
      (_UWFogDensity * tmpvar_79)
    ) * (_UWFogDensity * tmpvar_79))))
   * _UWFogEffectLimit), _UWFogEffectStart), _UWFogEffectLimit);
  highp float tmpvar_81;
  tmpvar_81 = clamp (exp((
    -((_UWFogColorNFIntensity * tmpvar_79))
   * 
    (_UWFogColorNFIntensity * tmpvar_79)
  )), 0.0, 1.0);
  fogParam_76.x = tmpvar_81;
  fogParam_76.y = tmpvar_80;
  fogParam_76.z = tmpvar_77.y;
  gl_Position = tmpvar_17;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_COLOR0 = tmpvar_2;
  xlv_COLOR1 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_3.xyz;
  xlv_TEXCOORD2 = tmpvar_12;
  xlv_TEXCOORD3 = fogParam_76;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_66;
  xlv_TEXCOORD6 = tmpvar_67;
  xlv_TEXCOORD7 = tmpvar_68;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
uniform highp vec4 _UWFogColorLow;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWHeightFogDensity;
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
uniform highp float _UWHeightRatio;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
uniform highp vec4 _RimColor;
uniform highp float _RimPower;
uniform highp float _RimIntensity;
uniform sampler2D _NormalMap;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec3 normalFromMap_1;
  mediump vec4 Maskmap_2;
  mediump vec4 finalColor_3;
  mediump vec4 base_color1_4;
  mediump vec4 base_color0_5;
  mediump vec2 flow_dir_6;
  mediump float flow_scale1_7;
  mediump float flow_scale0_8;
  mediump vec3 flowAll_9;
  mediump float time_10;
  mediump vec2 uv_11;
  mediump vec2 UV_12;
  highp vec2 tmpvar_13;
  tmpvar_13 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_12 = tmpvar_13;
  highp vec2 tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_USpeed * _Time.y);
  tmpvar_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (_VSpeed * _Time.y);
  tmpvar_14.y = tmpvar_16;
  UV_12 = (UV_12 + tmpvar_14);
  highp vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_15;
  tmpvar_17.y = tmpvar_16;
  highp vec2 tmpvar_18;
  tmpvar_18 = (UV_12 + tmpvar_17);
  uv_11 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = _Time.y;
  time_10 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_FlowMap, uv_11).xyz;
  flowAll_9 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((_Speed * time_10) + flowAll_9.z));
  flow_scale0_8 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = fract(((
    (_Speed * time_10)
   + flowAll_9.z) + 0.5));
  flow_scale1_7 = tmpvar_22;
  flowAll_9.xy = (2.0 * (flowAll_9.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_23;
  tmpvar_23.x = _FlowSignX;
  tmpvar_23.y = _FlowSignY;
  flowAll_9.xy = (flowAll_9.xy * tmpvar_23);
  highp vec2 tmpvar_24;
  tmpvar_24 = (flowAll_9.xy * _FlowIntensity);
  flow_dir_6 = tmpvar_24;
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_11 + (flow_dir_6 * flow_scale0_8));
  mediump vec2 tmpvar_26;
  tmpvar_26 = (uv_11 + (flow_dir_6 * flow_scale1_7));
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color0_5 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MainTex, tmpvar_26);
  base_color1_4 = tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix (base_color0_5, base_color1_4, vec4(abs((2.0 * 
    (flow_scale0_8 - 0.5)
  ))));
  finalColor_3.w = 0.0;
  finalColor_3.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_29.x * xlv_COLOR0.x)));
  finalColor_3.xyz = (finalColor_3.xyz * (1.0 + (tmpvar_29.x * _EmissionScaler)));
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_2 = tmpvar_30;
  finalColor_3.xyz = (finalColor_3.xyz + ((_MaskColor.xyz * Maskmap_2.y) * _MaskScale));
  mediump vec3 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_32;
  tmpvar_32 = textureCube (_EnvTex, tmpvar_31);
  finalColor_3.xyz = (finalColor_3.xyz + ((tmpvar_32.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_3.w = (tmpvar_29.w * _BloomFactor);
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_NormalMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  normalFromMap_1 = tmpvar_33;
  mediump vec3 o_34;
  o_34.x = dot (xlv_TEXCOORD5, normalFromMap_1);
  o_34.y = dot (xlv_TEXCOORD6, normalFromMap_1);
  o_34.z = dot (xlv_TEXCOORD7, normalFromMap_1);
  mediump float tmpvar_35;
  tmpvar_35 = (1.0 - clamp (dot (
    normalize(xlv_TEXCOORD4.xyz)
  , o_34), 0.0, 1.0));
  highp float tmpvar_36;
  tmpvar_36 = pow (tmpvar_35, _RimPower);
  finalColor_3.xyz = (finalColor_3.xyz + ((_RimColor.xyz * tmpvar_36) * _RimIntensity));
  if ((xlv_TEXCOORD3.z > _WaterPlaneHeight)) {
    finalColor_3.xyz = mix (finalColor_3.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  } else {
    mediump vec3 xlat_varinput_37;
    xlat_varinput_37 = xlv_TEXCOORD3;
    mediump vec3 fogParam_38;
    highp float tmpvar_39;
    tmpvar_39 = max (0.0, ((_WaterPlaneHeight - xlv_TEXCOORD3.z) / (_WaterPlaneHeight - _UWFogHeightEnd)));
    highp float tmpvar_40;
    tmpvar_40 = min (max ((
      (1.0 - (_UWHeightFogDensity * tmpvar_39))
     * _UWHeightFogEffectLimit), _UWHeightFogEffectStart), _UWHeightFogEffectLimit);
    highp float tmpvar_41;
    tmpvar_41 = clamp ((_UWFogColorHLIntensity * tmpvar_39), 0.0, 1.0);
    fogParam_38.z = 0.0;
    fogParam_38.y = tmpvar_40;
    fogParam_38.x = tmpvar_41;
    if ((xlv_TEXCOORD3.y > 0.99)) {
      xlat_varinput_37.y = (xlv_TEXCOORD3.y * (1.0 - (tmpvar_39 * _UWHeightRatio)));
      highp float tmpvar_42;
      tmpvar_42 = clamp (xlat_varinput_37.y, _UWCriticalRange, 1.0);
      xlat_varinput_37.y = tmpvar_42;
    };
    fogParam_38.z = (1.0 - xlat_varinput_37.y);
    mediump vec4 tmpvar_43;
    tmpvar_43.w = 0.0;
    tmpvar_43.xyz = finalColor_3.xyz;
    highp vec3 tmpvar_44;
    tmpvar_44 = mix (mix (_UWFogColorFar, _UWFogColorNear, xlv_TEXCOORD3.xxxx), tmpvar_43, fogParam_38.zzzz).xyz;
    finalColor_3.xyz = tmpvar_44;
    mediump vec4 tmpvar_45;
    tmpvar_45.w = 0.0;
    tmpvar_45.xyz = finalColor_3.xyz;
    highp vec3 tmpvar_46;
    tmpvar_46 = mix (mix (_UWFogColorLow, _UWFogColorHigh, fogParam_38.xxxx), tmpvar_45, fogParam_38.yyyy).xyz;
    finalColor_3.xyz = tmpvar_46;
  };
  gl_FragData[0] = finalColor_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_HEIGHT" "_UNDERWATER_FOG" "FRESNEL" "UseNormalMap" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_WorldTransformParams;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _HeigtFogParams;
uniform highp vec4 _HeigtFogRamp;
uniform highp vec4 _HeigtFogColBase;
uniform highp vec4 _HeigtFogColDelta;
uniform highp vec4 _HeigtFogColParams;
uniform highp vec4 _HeigtFogRadialCol;
uniform highp vec4 _Mihoyo_FogColor;
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
uniform highp float _UWFogDistStart;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _glesNormal;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp float sint_5;
  highp float cost_6;
  highp vec3 adjCamPos_7;
  mediump vec4 offsetVertex_8;
  mediump float normalOut_9;
  highp vec4 offset_10;
  mediump vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  mediump vec4 tmpvar_13;
  offset_10.yzw = vec3(0.0, 0.0, 0.0);
  offset_10.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_10.y = offset_10.x;
  highp float tmpvar_14;
  tmpvar_14 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_9 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = ((_glesVertex + (
    (offset_10 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_3 * normalOut_9) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_8 = tmpvar_15;
  highp vec4 pos_16;
  pos_16 = offsetVertex_8;
  highp vec4 tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = pos_16.xyz;
  tmpvar_17 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_18));
  tmpvar_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_11.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_22;
  mediump float fogFactor_23;
  mediump vec3 fogColor_24;
  mediump vec3 heightFogColor_25;
  highp float HeightFogFactor_26;
  mediump vec3 atomesphereFogColor_27;
  mediump float h_28;
  highp float linearFogDensity_29;
  mediump float len_30;
  highp float tmpvar_31;
  tmpvar_31 = sqrt(dot (tmpvar_21, tmpvar_21));
  len_30 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (((len_30 * _HeigtFogParams.z) + _HeigtFogParams.w), 0.0, 1.0);
  linearFogDensity_29 = (tmpvar_32 * (2.0 - tmpvar_32));
  if ((len_30 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_29 = (linearFogDensity_29 * _HeigtFogColDelta.w);
  };
  highp float tmpvar_33;
  tmpvar_33 = min (pow (linearFogDensity_29, _Mihoyo_FogColor.w), _HeigtFogColBase.w);
  linearFogDensity_29 = tmpvar_33;
  mediump float tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((tmpvar_20.y * _HeigtFogColParams.x) + _HeigtFogColParams.y), 0.0, 1.0);
  tmpvar_34 = tmpvar_35;
  h_28 = (tmpvar_34 * (2.0 - tmpvar_34));
  highp vec3 tmpvar_36;
  tmpvar_36 = (_HeigtFogColBase.xyz + (h_28 * _HeigtFogColDelta.xyz));
  atomesphereFogColor_27 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (atomesphereFogColor_27, _HeigtFogRadialCol.xyz, vec3(clamp ((_HeigtFogColParams.w * 
    (len_30 - _HeigtFogRamp.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_27 = tmpvar_37;
  mediump float tmpvar_38;
  mediump float r_39;
  mediump float f_40;
  mediump float u_41;
  mediump float l_42;
  mediump float fogInt_43;
  fogInt_43 = 1.0;
  highp float tmpvar_44;
  tmpvar_44 = (_HeigtFogParams.x * tmpvar_21.y);
  highp float tmpvar_45;
  tmpvar_45 = abs(tmpvar_44);
  if ((tmpvar_45 > 0.01)) {
    highp float tmpvar_46;
    tmpvar_46 = exp(-(tmpvar_44));
    fogInt_43 = ((1.0 - tmpvar_46) / tmpvar_44);
  };
  highp float tmpvar_47;
  tmpvar_47 = sqrt(dot (tmpvar_21, tmpvar_21));
  l_42 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = (l_42 * _HeigtFogParams.y);
  u_41 = tmpvar_48;
  fogInt_43 = (fogInt_43 * u_41);
  mediump float tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((l_42 * _HeigtFogRamp.x) + _HeigtFogRamp.y), 0.0, 1.0);
  tmpvar_49 = tmpvar_50;
  r_39 = (tmpvar_49 * (2.0 - tmpvar_49));
  r_39 = ((r_39 * _HeigtFogRamp.z) + (1.0 - _HeigtFogRamp.z));
  f_40 = ((1.0 - clamp (
    exp2(-(fogInt_43))
  , 0.0, 1.0)) * r_39);
  highp float tmpvar_51;
  tmpvar_51 = min (f_40, _HeigtFogColBase.w);
  tmpvar_38 = tmpvar_51;
  HeightFogFactor_26 = tmpvar_38;
  highp vec3 tmpvar_52;
  tmpvar_52 = _Mihoyo_FogColor.xyz;
  heightFogColor_25 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = ((heightFogColor_25 * HeightFogFactor_26) + ((atomesphereFogColor_27 * tmpvar_33) * (1.0 - HeightFogFactor_26)));
  fogColor_24 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = ((1.0 - tmpvar_33) * (1.0 - HeightFogFactor_26));
  fogFactor_23 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55.xyz = fogColor_24;
  tmpvar_55.w = fogFactor_23;
  tmpvar_22 = tmpvar_55;
  tmpvar_19 = tmpvar_22;
  tmpvar_13.w = 1.0;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_3.xyz;
  mediump vec4 wTangent_57;
  mediump vec3 wNormal_58;
  highp vec3 norm_59;
  norm_59 = tmpvar_56;
  highp mat3 tmpvar_60;
  tmpvar_60[0] = unity_WorldToObject[0].xyz;
  tmpvar_60[1] = unity_WorldToObject[1].xyz;
  tmpvar_60[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize((norm_59 * tmpvar_60));
  wNormal_58 = tmpvar_61;
  highp vec3 dir_62;
  dir_62 = tmpvar_4.xyz;
  highp mat3 tmpvar_63;
  tmpvar_63[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_63[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_63[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize((tmpvar_63 * dir_62));
  wTangent_57.xyz = tmpvar_64;
  wTangent_57.w = (_glesTANGENT.w * unity_WorldTransformParams.w);
  mediump vec3 tmpvar_65;
  tmpvar_65 = (((wNormal_58.yzx * wTangent_57.zxy) - (wNormal_58.zxy * wTangent_57.yzx)) * wTangent_57.w);
  mediump vec3 tmpvar_66;
  tmpvar_66.x = wTangent_57.x;
  tmpvar_66.y = tmpvar_65.x;
  tmpvar_66.z = wNormal_58.x;
  mediump vec3 tmpvar_67;
  tmpvar_67.x = wTangent_57.y;
  tmpvar_67.y = tmpvar_65.y;
  tmpvar_67.z = wNormal_58.y;
  mediump vec3 tmpvar_68;
  tmpvar_68.x = wTangent_57.z;
  tmpvar_68.y = tmpvar_65.z;
  tmpvar_68.z = wNormal_58.z;
  highp vec4 tmpvar_69;
  tmpvar_69 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_7.xz = (tmpvar_69.xz - ((tmpvar_69.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_7.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_70;
  tmpvar_70 = normalize((tmpvar_69.xyz - adjCamPos_7));
  tmpvar_12 = tmpvar_70;
  mediump float tmpvar_71;
  tmpvar_71 = cos(_CamRotate);
  cost_6 = tmpvar_71;
  mediump float tmpvar_72;
  tmpvar_72 = sin(_CamRotate);
  sint_5 = tmpvar_72;
  highp mat2 tmpvar_73;
  tmpvar_73[0].x = cost_6;
  tmpvar_73[0].y = -(sint_5);
  tmpvar_73[1].x = sint_5;
  tmpvar_73[1].y = cost_6;
  tmpvar_12.xz = (tmpvar_73 * tmpvar_12.xz);
  highp vec3 tmpvar_74;
  tmpvar_74 = (_WorldSpaceCameraPos - tmpvar_69.xyz);
  tmpvar_13.xyz = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75.xyz = offsetVertex_8.xyz;
  tmpvar_75.w = tmpvar_1.w;
  mediump vec3 fogParam_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = (unity_ObjectToWorld * tmpvar_75);
  highp vec2 tmpvar_78;
  tmpvar_78 = (tmpvar_77.xz - _WorldSpaceCameraPos.xz);
  highp float tmpvar_79;
  tmpvar_79 = max (0.0, (sqrt(
    dot (tmpvar_78, tmpvar_78)
  ) - _UWFogDistStart));
  highp float tmpvar_80;
  tmpvar_80 = min (max ((
    (1.0 - exp((-(
      (_UWFogDensity * tmpvar_79)
    ) * (_UWFogDensity * tmpvar_79))))
   * _UWFogEffectLimit), _UWFogEffectStart), _UWFogEffectLimit);
  highp float tmpvar_81;
  tmpvar_81 = clamp (exp((
    -((_UWFogColorNFIntensity * tmpvar_79))
   * 
    (_UWFogColorNFIntensity * tmpvar_79)
  )), 0.0, 1.0);
  fogParam_76.x = tmpvar_81;
  fogParam_76.y = tmpvar_80;
  fogParam_76.z = tmpvar_77.y;
  gl_Position = tmpvar_17;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_COLOR0 = tmpvar_2;
  xlv_COLOR1 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_3.xyz;
  xlv_TEXCOORD2 = tmpvar_12;
  xlv_TEXCOORD3 = fogParam_76;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_66;
  xlv_TEXCOORD6 = tmpvar_67;
  xlv_TEXCOORD7 = tmpvar_68;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
uniform highp vec4 _UWFogColorLow;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWHeightFogDensity;
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
uniform highp float _UWHeightRatio;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
uniform highp vec4 _RimColor;
uniform highp float _RimPower;
uniform highp float _RimIntensity;
uniform sampler2D _NormalMap;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec3 normalFromMap_1;
  mediump vec4 Maskmap_2;
  mediump vec4 finalColor_3;
  mediump vec4 base_color1_4;
  mediump vec4 base_color0_5;
  mediump vec2 flow_dir_6;
  mediump float flow_scale1_7;
  mediump float flow_scale0_8;
  mediump vec3 flowAll_9;
  mediump float time_10;
  mediump vec2 uv_11;
  mediump vec2 UV_12;
  highp vec2 tmpvar_13;
  tmpvar_13 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_12 = tmpvar_13;
  highp vec2 tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_USpeed * _Time.y);
  tmpvar_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (_VSpeed * _Time.y);
  tmpvar_14.y = tmpvar_16;
  UV_12 = (UV_12 + tmpvar_14);
  highp vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_15;
  tmpvar_17.y = tmpvar_16;
  highp vec2 tmpvar_18;
  tmpvar_18 = (UV_12 + tmpvar_17);
  uv_11 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = _Time.y;
  time_10 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_FlowMap, uv_11).xyz;
  flowAll_9 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((_Speed * time_10) + flowAll_9.z));
  flow_scale0_8 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = fract(((
    (_Speed * time_10)
   + flowAll_9.z) + 0.5));
  flow_scale1_7 = tmpvar_22;
  flowAll_9.xy = (2.0 * (flowAll_9.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_23;
  tmpvar_23.x = _FlowSignX;
  tmpvar_23.y = _FlowSignY;
  flowAll_9.xy = (flowAll_9.xy * tmpvar_23);
  highp vec2 tmpvar_24;
  tmpvar_24 = (flowAll_9.xy * _FlowIntensity);
  flow_dir_6 = tmpvar_24;
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_11 + (flow_dir_6 * flow_scale0_8));
  mediump vec2 tmpvar_26;
  tmpvar_26 = (uv_11 + (flow_dir_6 * flow_scale1_7));
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color0_5 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MainTex, tmpvar_26);
  base_color1_4 = tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix (base_color0_5, base_color1_4, vec4(abs((2.0 * 
    (flow_scale0_8 - 0.5)
  ))));
  finalColor_3.w = 0.0;
  finalColor_3.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_29.x * xlv_COLOR0.x)));
  finalColor_3.xyz = (finalColor_3.xyz * (1.0 + (tmpvar_29.x * _EmissionScaler)));
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_2 = tmpvar_30;
  finalColor_3.xyz = (finalColor_3.xyz + ((_MaskColor.xyz * Maskmap_2.y) * _MaskScale));
  mediump vec3 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_32;
  tmpvar_32 = textureCube (_EnvTex, tmpvar_31);
  finalColor_3.xyz = (finalColor_3.xyz + ((tmpvar_32.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_3.w = (tmpvar_29.w * _BloomFactor);
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_NormalMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  normalFromMap_1 = tmpvar_33;
  mediump vec3 o_34;
  o_34.x = dot (xlv_TEXCOORD5, normalFromMap_1);
  o_34.y = dot (xlv_TEXCOORD6, normalFromMap_1);
  o_34.z = dot (xlv_TEXCOORD7, normalFromMap_1);
  mediump float tmpvar_35;
  tmpvar_35 = (1.0 - clamp (dot (
    normalize(xlv_TEXCOORD4.xyz)
  , o_34), 0.0, 1.0));
  highp float tmpvar_36;
  tmpvar_36 = pow (tmpvar_35, _RimPower);
  finalColor_3.xyz = (finalColor_3.xyz + ((_RimColor.xyz * tmpvar_36) * _RimIntensity));
  if ((xlv_TEXCOORD3.z > _WaterPlaneHeight)) {
    finalColor_3.xyz = mix (finalColor_3.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  } else {
    mediump vec3 xlat_varinput_37;
    xlat_varinput_37 = xlv_TEXCOORD3;
    mediump vec3 fogParam_38;
    highp float tmpvar_39;
    tmpvar_39 = max (0.0, ((_WaterPlaneHeight - xlv_TEXCOORD3.z) / (_WaterPlaneHeight - _UWFogHeightEnd)));
    highp float tmpvar_40;
    tmpvar_40 = min (max ((
      (1.0 - (_UWHeightFogDensity * tmpvar_39))
     * _UWHeightFogEffectLimit), _UWHeightFogEffectStart), _UWHeightFogEffectLimit);
    highp float tmpvar_41;
    tmpvar_41 = clamp ((_UWFogColorHLIntensity * tmpvar_39), 0.0, 1.0);
    fogParam_38.z = 0.0;
    fogParam_38.y = tmpvar_40;
    fogParam_38.x = tmpvar_41;
    if ((xlv_TEXCOORD3.y > 0.99)) {
      xlat_varinput_37.y = (xlv_TEXCOORD3.y * (1.0 - (tmpvar_39 * _UWHeightRatio)));
      highp float tmpvar_42;
      tmpvar_42 = clamp (xlat_varinput_37.y, _UWCriticalRange, 1.0);
      xlat_varinput_37.y = tmpvar_42;
    };
    fogParam_38.z = (1.0 - xlat_varinput_37.y);
    mediump vec4 tmpvar_43;
    tmpvar_43.w = 0.0;
    tmpvar_43.xyz = finalColor_3.xyz;
    highp vec3 tmpvar_44;
    tmpvar_44 = mix (mix (_UWFogColorFar, _UWFogColorNear, xlv_TEXCOORD3.xxxx), tmpvar_43, fogParam_38.zzzz).xyz;
    finalColor_3.xyz = tmpvar_44;
    mediump vec4 tmpvar_45;
    tmpvar_45.w = 0.0;
    tmpvar_45.xyz = finalColor_3.xyz;
    highp vec3 tmpvar_46;
    tmpvar_46 = mix (mix (_UWFogColorLow, _UWFogColorHigh, fogParam_38.xxxx), tmpvar_45, fogParam_38.yyyy).xyz;
    finalColor_3.xyz = tmpvar_46;
  };
  gl_FragData[0] = finalColor_3;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "_UNDERWATER_FOG" "FRESNEL" "UseNormalMap" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_WorldTransformParams;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
uniform highp float _UWFogDistStart;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _glesNormal;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp float sint_5;
  highp float cost_6;
  highp vec3 adjCamPos_7;
  mediump vec4 offsetVertex_8;
  mediump float normalOut_9;
  highp vec4 offset_10;
  mediump vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  mediump vec4 tmpvar_13;
  offset_10.yzw = vec3(0.0, 0.0, 0.0);
  offset_10.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_10.y = offset_10.x;
  highp float tmpvar_14;
  tmpvar_14 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_9 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = ((_glesVertex + (
    (offset_10 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_3 * normalOut_9) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_8 = tmpvar_15;
  highp vec4 pos_16;
  pos_16 = offsetVertex_8;
  highp vec4 tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = pos_16.xyz;
  tmpvar_17 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_18));
  tmpvar_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_11.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_22;
  mediump float fogFactor_23;
  mediump vec3 fogColor_24;
  mediump vec3 heightFogColor_25;
  highp float HeightFogFactor_26;
  mediump vec3 atomesphereFogColor_27;
  mediump float h_28;
  highp float linearFogDensity_29;
  mediump float len_30;
  highp float tmpvar_31;
  tmpvar_31 = sqrt(dot (tmpvar_21, tmpvar_21));
  len_30 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (((len_30 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_29 = (tmpvar_32 * (2.0 - tmpvar_32));
  if ((len_30 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_29 = (linearFogDensity_29 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_33;
  tmpvar_33 = min (pow (linearFogDensity_29, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_29 = tmpvar_33;
  mediump float tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((tmpvar_20.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_34 = tmpvar_35;
  h_28 = (tmpvar_34 * (2.0 - tmpvar_34));
  highp vec3 tmpvar_36;
  tmpvar_36 = (_HeigtFogColBase2.xyz + (h_28 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_27 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (atomesphereFogColor_27, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_30 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_27 = tmpvar_37;
  mediump float tmpvar_38;
  mediump float r_39;
  mediump float f_40;
  mediump float u_41;
  mediump float l_42;
  mediump float fogInt_43;
  fogInt_43 = 1.0;
  highp float tmpvar_44;
  tmpvar_44 = (_HeigtFogParams2.x * tmpvar_21.y);
  highp float tmpvar_45;
  tmpvar_45 = abs(tmpvar_44);
  if ((tmpvar_45 > 0.01)) {
    highp float tmpvar_46;
    tmpvar_46 = exp(-(tmpvar_44));
    fogInt_43 = ((1.0 - tmpvar_46) / tmpvar_44);
  };
  highp float tmpvar_47;
  tmpvar_47 = sqrt(dot (tmpvar_21, tmpvar_21));
  l_42 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = (l_42 * _HeigtFogParams2.y);
  u_41 = tmpvar_48;
  fogInt_43 = (fogInt_43 * u_41);
  mediump float tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((l_42 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_49 = tmpvar_50;
  r_39 = (tmpvar_49 * (2.0 - tmpvar_49));
  r_39 = ((r_39 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_40 = ((1.0 - clamp (
    exp2(-(fogInt_43))
  , 0.0, 1.0)) * r_39);
  highp float tmpvar_51;
  tmpvar_51 = min (f_40, _HeigtFogColBase2.w);
  tmpvar_38 = tmpvar_51;
  HeightFogFactor_26 = tmpvar_38;
  highp vec3 tmpvar_52;
  tmpvar_52 = _Mihoyo_FogColor2.xyz;
  heightFogColor_25 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = ((heightFogColor_25 * HeightFogFactor_26) + ((atomesphereFogColor_27 * tmpvar_33) * (1.0 - HeightFogFactor_26)));
  fogColor_24 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = ((1.0 - tmpvar_33) * (1.0 - HeightFogFactor_26));
  fogFactor_23 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55.xyz = fogColor_24;
  tmpvar_55.w = fogFactor_23;
  tmpvar_22 = tmpvar_55;
  highp vec4 tmpvar_56;
  mediump float fogFactor_57;
  mediump vec3 fogColor_58;
  mediump vec3 heightFogColor_59;
  highp float HeightFogFactor_60;
  mediump vec3 atomesphereFogColor_61;
  mediump float h_62;
  highp float linearFogDensity_63;
  mediump float len_64;
  highp float tmpvar_65;
  tmpvar_65 = sqrt(dot (tmpvar_21, tmpvar_21));
  len_64 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = clamp (((len_64 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_63 = (tmpvar_66 * (2.0 - tmpvar_66));
  if ((len_64 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_63 = (linearFogDensity_63 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_67;
  tmpvar_67 = min (pow (linearFogDensity_63, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_63 = tmpvar_67;
  mediump float tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((tmpvar_20.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_68 = tmpvar_69;
  h_62 = (tmpvar_68 * (2.0 - tmpvar_68));
  highp vec3 tmpvar_70;
  tmpvar_70 = (_HeigtFogColBase3.xyz + (h_62 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_61 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = mix (atomesphereFogColor_61, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_64 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_61 = tmpvar_71;
  mediump float tmpvar_72;
  mediump float r_73;
  mediump float f_74;
  mediump float u_75;
  mediump float l_76;
  mediump float fogInt_77;
  fogInt_77 = 1.0;
  highp float tmpvar_78;
  tmpvar_78 = (_HeigtFogParams3.x * tmpvar_21.y);
  highp float tmpvar_79;
  tmpvar_79 = abs(tmpvar_78);
  if ((tmpvar_79 > 0.01)) {
    highp float tmpvar_80;
    tmpvar_80 = exp(-(tmpvar_78));
    fogInt_77 = ((1.0 - tmpvar_80) / tmpvar_78);
  };
  highp float tmpvar_81;
  tmpvar_81 = sqrt(dot (tmpvar_21, tmpvar_21));
  l_76 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (l_76 * _HeigtFogParams3.y);
  u_75 = tmpvar_82;
  fogInt_77 = (fogInt_77 * u_75);
  mediump float tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = clamp (((l_76 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_83 = tmpvar_84;
  r_73 = (tmpvar_83 * (2.0 - tmpvar_83));
  r_73 = ((r_73 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_74 = ((1.0 - clamp (
    exp2(-(fogInt_77))
  , 0.0, 1.0)) * r_73);
  highp float tmpvar_85;
  tmpvar_85 = min (f_74, _HeigtFogColBase3.w);
  tmpvar_72 = tmpvar_85;
  HeightFogFactor_60 = tmpvar_72;
  highp vec3 tmpvar_86;
  tmpvar_86 = _Mihoyo_FogColor3.xyz;
  heightFogColor_59 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = ((heightFogColor_59 * HeightFogFactor_60) + ((atomesphereFogColor_61 * tmpvar_67) * (1.0 - HeightFogFactor_60)));
  fogColor_58 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = ((1.0 - tmpvar_67) * (1.0 - HeightFogFactor_60));
  fogFactor_57 = tmpvar_88;
  mediump vec4 tmpvar_89;
  tmpvar_89.xyz = fogColor_58;
  tmpvar_89.w = fogFactor_57;
  tmpvar_56 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (tmpvar_22, tmpvar_56, vec4(_LerpFactor));
  tmpvar_19 = tmpvar_90;
  tmpvar_13.w = 1.0;
  mediump vec3 tmpvar_91;
  tmpvar_91 = tmpvar_3.xyz;
  mediump vec4 wTangent_92;
  mediump vec3 wNormal_93;
  highp vec3 norm_94;
  norm_94 = tmpvar_91;
  highp mat3 tmpvar_95;
  tmpvar_95[0] = unity_WorldToObject[0].xyz;
  tmpvar_95[1] = unity_WorldToObject[1].xyz;
  tmpvar_95[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_96;
  tmpvar_96 = normalize((norm_94 * tmpvar_95));
  wNormal_93 = tmpvar_96;
  highp vec3 dir_97;
  dir_97 = tmpvar_4.xyz;
  highp mat3 tmpvar_98;
  tmpvar_98[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_98[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_98[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_99;
  tmpvar_99 = normalize((tmpvar_98 * dir_97));
  wTangent_92.xyz = tmpvar_99;
  wTangent_92.w = (_glesTANGENT.w * unity_WorldTransformParams.w);
  mediump vec3 tmpvar_100;
  tmpvar_100 = (((wNormal_93.yzx * wTangent_92.zxy) - (wNormal_93.zxy * wTangent_92.yzx)) * wTangent_92.w);
  mediump vec3 tmpvar_101;
  tmpvar_101.x = wTangent_92.x;
  tmpvar_101.y = tmpvar_100.x;
  tmpvar_101.z = wNormal_93.x;
  mediump vec3 tmpvar_102;
  tmpvar_102.x = wTangent_92.y;
  tmpvar_102.y = tmpvar_100.y;
  tmpvar_102.z = wNormal_93.y;
  mediump vec3 tmpvar_103;
  tmpvar_103.x = wTangent_92.z;
  tmpvar_103.y = tmpvar_100.z;
  tmpvar_103.z = wNormal_93.z;
  highp vec4 tmpvar_104;
  tmpvar_104 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_7.xz = (tmpvar_104.xz - ((tmpvar_104.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_7.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_105;
  tmpvar_105 = normalize((tmpvar_104.xyz - adjCamPos_7));
  tmpvar_12 = tmpvar_105;
  mediump float tmpvar_106;
  tmpvar_106 = cos(_CamRotate);
  cost_6 = tmpvar_106;
  mediump float tmpvar_107;
  tmpvar_107 = sin(_CamRotate);
  sint_5 = tmpvar_107;
  highp mat2 tmpvar_108;
  tmpvar_108[0].x = cost_6;
  tmpvar_108[0].y = -(sint_5);
  tmpvar_108[1].x = sint_5;
  tmpvar_108[1].y = cost_6;
  tmpvar_12.xz = (tmpvar_108 * tmpvar_12.xz);
  highp vec3 tmpvar_109;
  tmpvar_109 = (_WorldSpaceCameraPos - tmpvar_104.xyz);
  tmpvar_13.xyz = tmpvar_109;
  highp vec4 tmpvar_110;
  tmpvar_110.xyz = offsetVertex_8.xyz;
  tmpvar_110.w = tmpvar_1.w;
  mediump vec3 fogParam_111;
  highp vec4 tmpvar_112;
  tmpvar_112 = (unity_ObjectToWorld * tmpvar_110);
  highp vec2 tmpvar_113;
  tmpvar_113 = (tmpvar_112.xz - _WorldSpaceCameraPos.xz);
  highp float tmpvar_114;
  tmpvar_114 = max (0.0, (sqrt(
    dot (tmpvar_113, tmpvar_113)
  ) - _UWFogDistStart));
  highp float tmpvar_115;
  tmpvar_115 = min (max ((
    (1.0 - exp((-(
      (_UWFogDensity * tmpvar_114)
    ) * (_UWFogDensity * tmpvar_114))))
   * _UWFogEffectLimit), _UWFogEffectStart), _UWFogEffectLimit);
  highp float tmpvar_116;
  tmpvar_116 = clamp (exp((
    -((_UWFogColorNFIntensity * tmpvar_114))
   * 
    (_UWFogColorNFIntensity * tmpvar_114)
  )), 0.0, 1.0);
  fogParam_111.x = tmpvar_116;
  fogParam_111.y = tmpvar_115;
  fogParam_111.z = tmpvar_112.y;
  gl_Position = tmpvar_17;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_COLOR0 = tmpvar_2;
  xlv_COLOR1 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_3.xyz;
  xlv_TEXCOORD2 = tmpvar_12;
  xlv_TEXCOORD3 = fogParam_111;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_101;
  xlv_TEXCOORD6 = tmpvar_102;
  xlv_TEXCOORD7 = tmpvar_103;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
uniform highp vec4 _UWFogColorLow;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWHeightFogDensity;
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
uniform highp float _UWHeightRatio;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
uniform highp vec4 _RimColor;
uniform highp float _RimPower;
uniform highp float _RimIntensity;
uniform sampler2D _NormalMap;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec3 normalFromMap_1;
  mediump vec4 Maskmap_2;
  mediump vec4 finalColor_3;
  mediump vec4 base_color1_4;
  mediump vec4 base_color0_5;
  mediump vec2 flow_dir_6;
  mediump float flow_scale1_7;
  mediump float flow_scale0_8;
  mediump vec3 flowAll_9;
  mediump float time_10;
  mediump vec2 uv_11;
  mediump vec2 UV_12;
  highp vec2 tmpvar_13;
  tmpvar_13 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_12 = tmpvar_13;
  highp vec2 tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_USpeed * _Time.y);
  tmpvar_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (_VSpeed * _Time.y);
  tmpvar_14.y = tmpvar_16;
  UV_12 = (UV_12 + tmpvar_14);
  highp vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_15;
  tmpvar_17.y = tmpvar_16;
  highp vec2 tmpvar_18;
  tmpvar_18 = (UV_12 + tmpvar_17);
  uv_11 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = _Time.y;
  time_10 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_FlowMap, uv_11).xyz;
  flowAll_9 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((_Speed * time_10) + flowAll_9.z));
  flow_scale0_8 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = fract(((
    (_Speed * time_10)
   + flowAll_9.z) + 0.5));
  flow_scale1_7 = tmpvar_22;
  flowAll_9.xy = (2.0 * (flowAll_9.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_23;
  tmpvar_23.x = _FlowSignX;
  tmpvar_23.y = _FlowSignY;
  flowAll_9.xy = (flowAll_9.xy * tmpvar_23);
  highp vec2 tmpvar_24;
  tmpvar_24 = (flowAll_9.xy * _FlowIntensity);
  flow_dir_6 = tmpvar_24;
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_11 + (flow_dir_6 * flow_scale0_8));
  mediump vec2 tmpvar_26;
  tmpvar_26 = (uv_11 + (flow_dir_6 * flow_scale1_7));
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color0_5 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MainTex, tmpvar_26);
  base_color1_4 = tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix (base_color0_5, base_color1_4, vec4(abs((2.0 * 
    (flow_scale0_8 - 0.5)
  ))));
  finalColor_3.w = 0.0;
  finalColor_3.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_29.x * xlv_COLOR0.x)));
  finalColor_3.xyz = (finalColor_3.xyz * (1.0 + (tmpvar_29.x * _EmissionScaler)));
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_2 = tmpvar_30;
  finalColor_3.xyz = (finalColor_3.xyz + ((_MaskColor.xyz * Maskmap_2.y) * _MaskScale));
  mediump vec3 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_32;
  tmpvar_32 = textureCube (_EnvTex, tmpvar_31);
  finalColor_3.xyz = (finalColor_3.xyz + ((tmpvar_32.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_3.w = (tmpvar_29.w * _BloomFactor);
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_NormalMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  normalFromMap_1 = tmpvar_33;
  mediump vec3 o_34;
  o_34.x = dot (xlv_TEXCOORD5, normalFromMap_1);
  o_34.y = dot (xlv_TEXCOORD6, normalFromMap_1);
  o_34.z = dot (xlv_TEXCOORD7, normalFromMap_1);
  mediump float tmpvar_35;
  tmpvar_35 = (1.0 - clamp (dot (
    normalize(xlv_TEXCOORD4.xyz)
  , o_34), 0.0, 1.0));
  highp float tmpvar_36;
  tmpvar_36 = pow (tmpvar_35, _RimPower);
  finalColor_3.xyz = (finalColor_3.xyz + ((_RimColor.xyz * tmpvar_36) * _RimIntensity));
  if ((xlv_TEXCOORD3.z > _WaterPlaneHeight)) {
    finalColor_3.xyz = mix (finalColor_3.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  } else {
    mediump vec3 xlat_varinput_37;
    xlat_varinput_37 = xlv_TEXCOORD3;
    mediump vec3 fogParam_38;
    highp float tmpvar_39;
    tmpvar_39 = max (0.0, ((_WaterPlaneHeight - xlv_TEXCOORD3.z) / (_WaterPlaneHeight - _UWFogHeightEnd)));
    highp float tmpvar_40;
    tmpvar_40 = min (max ((
      (1.0 - (_UWHeightFogDensity * tmpvar_39))
     * _UWHeightFogEffectLimit), _UWHeightFogEffectStart), _UWHeightFogEffectLimit);
    highp float tmpvar_41;
    tmpvar_41 = clamp ((_UWFogColorHLIntensity * tmpvar_39), 0.0, 1.0);
    fogParam_38.z = 0.0;
    fogParam_38.y = tmpvar_40;
    fogParam_38.x = tmpvar_41;
    if ((xlv_TEXCOORD3.y > 0.99)) {
      xlat_varinput_37.y = (xlv_TEXCOORD3.y * (1.0 - (tmpvar_39 * _UWHeightRatio)));
      highp float tmpvar_42;
      tmpvar_42 = clamp (xlat_varinput_37.y, _UWCriticalRange, 1.0);
      xlat_varinput_37.y = tmpvar_42;
    };
    fogParam_38.z = (1.0 - xlat_varinput_37.y);
    mediump vec4 tmpvar_43;
    tmpvar_43.w = 0.0;
    tmpvar_43.xyz = finalColor_3.xyz;
    highp vec3 tmpvar_44;
    tmpvar_44 = mix (mix (_UWFogColorFar, _UWFogColorNear, xlv_TEXCOORD3.xxxx), tmpvar_43, fogParam_38.zzzz).xyz;
    finalColor_3.xyz = tmpvar_44;
    mediump vec4 tmpvar_45;
    tmpvar_45.w = 0.0;
    tmpvar_45.xyz = finalColor_3.xyz;
    highp vec3 tmpvar_46;
    tmpvar_46 = mix (mix (_UWFogColorLow, _UWFogColorHigh, fogParam_38.xxxx), tmpvar_45, fogParam_38.yyyy).xyz;
    finalColor_3.xyz = tmpvar_46;
  };
  gl_FragData[0] = finalColor_3;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "_UNDERWATER_FOG" "FRESNEL" "UseNormalMap" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_WorldTransformParams;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
uniform highp float _UWFogDistStart;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _glesNormal;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp float sint_5;
  highp float cost_6;
  highp vec3 adjCamPos_7;
  mediump vec4 offsetVertex_8;
  mediump float normalOut_9;
  highp vec4 offset_10;
  mediump vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  mediump vec4 tmpvar_13;
  offset_10.yzw = vec3(0.0, 0.0, 0.0);
  offset_10.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_10.y = offset_10.x;
  highp float tmpvar_14;
  tmpvar_14 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_9 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = ((_glesVertex + (
    (offset_10 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_3 * normalOut_9) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_8 = tmpvar_15;
  highp vec4 pos_16;
  pos_16 = offsetVertex_8;
  highp vec4 tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = pos_16.xyz;
  tmpvar_17 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_18));
  tmpvar_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_11.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_22;
  mediump float fogFactor_23;
  mediump vec3 fogColor_24;
  mediump vec3 heightFogColor_25;
  highp float HeightFogFactor_26;
  mediump vec3 atomesphereFogColor_27;
  mediump float h_28;
  highp float linearFogDensity_29;
  mediump float len_30;
  highp float tmpvar_31;
  tmpvar_31 = sqrt(dot (tmpvar_21, tmpvar_21));
  len_30 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (((len_30 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_29 = (tmpvar_32 * (2.0 - tmpvar_32));
  if ((len_30 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_29 = (linearFogDensity_29 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_33;
  tmpvar_33 = min (pow (linearFogDensity_29, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_29 = tmpvar_33;
  mediump float tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((tmpvar_20.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_34 = tmpvar_35;
  h_28 = (tmpvar_34 * (2.0 - tmpvar_34));
  highp vec3 tmpvar_36;
  tmpvar_36 = (_HeigtFogColBase2.xyz + (h_28 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_27 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (atomesphereFogColor_27, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_30 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_27 = tmpvar_37;
  mediump float tmpvar_38;
  mediump float r_39;
  mediump float f_40;
  mediump float u_41;
  mediump float l_42;
  mediump float fogInt_43;
  fogInt_43 = 1.0;
  highp float tmpvar_44;
  tmpvar_44 = (_HeigtFogParams2.x * tmpvar_21.y);
  highp float tmpvar_45;
  tmpvar_45 = abs(tmpvar_44);
  if ((tmpvar_45 > 0.01)) {
    highp float tmpvar_46;
    tmpvar_46 = exp(-(tmpvar_44));
    fogInt_43 = ((1.0 - tmpvar_46) / tmpvar_44);
  };
  highp float tmpvar_47;
  tmpvar_47 = sqrt(dot (tmpvar_21, tmpvar_21));
  l_42 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = (l_42 * _HeigtFogParams2.y);
  u_41 = tmpvar_48;
  fogInt_43 = (fogInt_43 * u_41);
  mediump float tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((l_42 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_49 = tmpvar_50;
  r_39 = (tmpvar_49 * (2.0 - tmpvar_49));
  r_39 = ((r_39 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_40 = ((1.0 - clamp (
    exp2(-(fogInt_43))
  , 0.0, 1.0)) * r_39);
  highp float tmpvar_51;
  tmpvar_51 = min (f_40, _HeigtFogColBase2.w);
  tmpvar_38 = tmpvar_51;
  HeightFogFactor_26 = tmpvar_38;
  highp vec3 tmpvar_52;
  tmpvar_52 = _Mihoyo_FogColor2.xyz;
  heightFogColor_25 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = ((heightFogColor_25 * HeightFogFactor_26) + ((atomesphereFogColor_27 * tmpvar_33) * (1.0 - HeightFogFactor_26)));
  fogColor_24 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = ((1.0 - tmpvar_33) * (1.0 - HeightFogFactor_26));
  fogFactor_23 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55.xyz = fogColor_24;
  tmpvar_55.w = fogFactor_23;
  tmpvar_22 = tmpvar_55;
  highp vec4 tmpvar_56;
  mediump float fogFactor_57;
  mediump vec3 fogColor_58;
  mediump vec3 heightFogColor_59;
  highp float HeightFogFactor_60;
  mediump vec3 atomesphereFogColor_61;
  mediump float h_62;
  highp float linearFogDensity_63;
  mediump float len_64;
  highp float tmpvar_65;
  tmpvar_65 = sqrt(dot (tmpvar_21, tmpvar_21));
  len_64 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = clamp (((len_64 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_63 = (tmpvar_66 * (2.0 - tmpvar_66));
  if ((len_64 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_63 = (linearFogDensity_63 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_67;
  tmpvar_67 = min (pow (linearFogDensity_63, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_63 = tmpvar_67;
  mediump float tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((tmpvar_20.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_68 = tmpvar_69;
  h_62 = (tmpvar_68 * (2.0 - tmpvar_68));
  highp vec3 tmpvar_70;
  tmpvar_70 = (_HeigtFogColBase3.xyz + (h_62 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_61 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = mix (atomesphereFogColor_61, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_64 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_61 = tmpvar_71;
  mediump float tmpvar_72;
  mediump float r_73;
  mediump float f_74;
  mediump float u_75;
  mediump float l_76;
  mediump float fogInt_77;
  fogInt_77 = 1.0;
  highp float tmpvar_78;
  tmpvar_78 = (_HeigtFogParams3.x * tmpvar_21.y);
  highp float tmpvar_79;
  tmpvar_79 = abs(tmpvar_78);
  if ((tmpvar_79 > 0.01)) {
    highp float tmpvar_80;
    tmpvar_80 = exp(-(tmpvar_78));
    fogInt_77 = ((1.0 - tmpvar_80) / tmpvar_78);
  };
  highp float tmpvar_81;
  tmpvar_81 = sqrt(dot (tmpvar_21, tmpvar_21));
  l_76 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (l_76 * _HeigtFogParams3.y);
  u_75 = tmpvar_82;
  fogInt_77 = (fogInt_77 * u_75);
  mediump float tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = clamp (((l_76 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_83 = tmpvar_84;
  r_73 = (tmpvar_83 * (2.0 - tmpvar_83));
  r_73 = ((r_73 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_74 = ((1.0 - clamp (
    exp2(-(fogInt_77))
  , 0.0, 1.0)) * r_73);
  highp float tmpvar_85;
  tmpvar_85 = min (f_74, _HeigtFogColBase3.w);
  tmpvar_72 = tmpvar_85;
  HeightFogFactor_60 = tmpvar_72;
  highp vec3 tmpvar_86;
  tmpvar_86 = _Mihoyo_FogColor3.xyz;
  heightFogColor_59 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = ((heightFogColor_59 * HeightFogFactor_60) + ((atomesphereFogColor_61 * tmpvar_67) * (1.0 - HeightFogFactor_60)));
  fogColor_58 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = ((1.0 - tmpvar_67) * (1.0 - HeightFogFactor_60));
  fogFactor_57 = tmpvar_88;
  mediump vec4 tmpvar_89;
  tmpvar_89.xyz = fogColor_58;
  tmpvar_89.w = fogFactor_57;
  tmpvar_56 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (tmpvar_22, tmpvar_56, vec4(_LerpFactor));
  tmpvar_19 = tmpvar_90;
  tmpvar_13.w = 1.0;
  mediump vec3 tmpvar_91;
  tmpvar_91 = tmpvar_3.xyz;
  mediump vec4 wTangent_92;
  mediump vec3 wNormal_93;
  highp vec3 norm_94;
  norm_94 = tmpvar_91;
  highp mat3 tmpvar_95;
  tmpvar_95[0] = unity_WorldToObject[0].xyz;
  tmpvar_95[1] = unity_WorldToObject[1].xyz;
  tmpvar_95[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_96;
  tmpvar_96 = normalize((norm_94 * tmpvar_95));
  wNormal_93 = tmpvar_96;
  highp vec3 dir_97;
  dir_97 = tmpvar_4.xyz;
  highp mat3 tmpvar_98;
  tmpvar_98[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_98[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_98[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_99;
  tmpvar_99 = normalize((tmpvar_98 * dir_97));
  wTangent_92.xyz = tmpvar_99;
  wTangent_92.w = (_glesTANGENT.w * unity_WorldTransformParams.w);
  mediump vec3 tmpvar_100;
  tmpvar_100 = (((wNormal_93.yzx * wTangent_92.zxy) - (wNormal_93.zxy * wTangent_92.yzx)) * wTangent_92.w);
  mediump vec3 tmpvar_101;
  tmpvar_101.x = wTangent_92.x;
  tmpvar_101.y = tmpvar_100.x;
  tmpvar_101.z = wNormal_93.x;
  mediump vec3 tmpvar_102;
  tmpvar_102.x = wTangent_92.y;
  tmpvar_102.y = tmpvar_100.y;
  tmpvar_102.z = wNormal_93.y;
  mediump vec3 tmpvar_103;
  tmpvar_103.x = wTangent_92.z;
  tmpvar_103.y = tmpvar_100.z;
  tmpvar_103.z = wNormal_93.z;
  highp vec4 tmpvar_104;
  tmpvar_104 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_7.xz = (tmpvar_104.xz - ((tmpvar_104.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_7.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_105;
  tmpvar_105 = normalize((tmpvar_104.xyz - adjCamPos_7));
  tmpvar_12 = tmpvar_105;
  mediump float tmpvar_106;
  tmpvar_106 = cos(_CamRotate);
  cost_6 = tmpvar_106;
  mediump float tmpvar_107;
  tmpvar_107 = sin(_CamRotate);
  sint_5 = tmpvar_107;
  highp mat2 tmpvar_108;
  tmpvar_108[0].x = cost_6;
  tmpvar_108[0].y = -(sint_5);
  tmpvar_108[1].x = sint_5;
  tmpvar_108[1].y = cost_6;
  tmpvar_12.xz = (tmpvar_108 * tmpvar_12.xz);
  highp vec3 tmpvar_109;
  tmpvar_109 = (_WorldSpaceCameraPos - tmpvar_104.xyz);
  tmpvar_13.xyz = tmpvar_109;
  highp vec4 tmpvar_110;
  tmpvar_110.xyz = offsetVertex_8.xyz;
  tmpvar_110.w = tmpvar_1.w;
  mediump vec3 fogParam_111;
  highp vec4 tmpvar_112;
  tmpvar_112 = (unity_ObjectToWorld * tmpvar_110);
  highp vec2 tmpvar_113;
  tmpvar_113 = (tmpvar_112.xz - _WorldSpaceCameraPos.xz);
  highp float tmpvar_114;
  tmpvar_114 = max (0.0, (sqrt(
    dot (tmpvar_113, tmpvar_113)
  ) - _UWFogDistStart));
  highp float tmpvar_115;
  tmpvar_115 = min (max ((
    (1.0 - exp((-(
      (_UWFogDensity * tmpvar_114)
    ) * (_UWFogDensity * tmpvar_114))))
   * _UWFogEffectLimit), _UWFogEffectStart), _UWFogEffectLimit);
  highp float tmpvar_116;
  tmpvar_116 = clamp (exp((
    -((_UWFogColorNFIntensity * tmpvar_114))
   * 
    (_UWFogColorNFIntensity * tmpvar_114)
  )), 0.0, 1.0);
  fogParam_111.x = tmpvar_116;
  fogParam_111.y = tmpvar_115;
  fogParam_111.z = tmpvar_112.y;
  gl_Position = tmpvar_17;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_COLOR0 = tmpvar_2;
  xlv_COLOR1 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_3.xyz;
  xlv_TEXCOORD2 = tmpvar_12;
  xlv_TEXCOORD3 = fogParam_111;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_101;
  xlv_TEXCOORD6 = tmpvar_102;
  xlv_TEXCOORD7 = tmpvar_103;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
uniform highp vec4 _UWFogColorLow;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWHeightFogDensity;
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
uniform highp float _UWHeightRatio;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
uniform highp vec4 _RimColor;
uniform highp float _RimPower;
uniform highp float _RimIntensity;
uniform sampler2D _NormalMap;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec3 normalFromMap_1;
  mediump vec4 Maskmap_2;
  mediump vec4 finalColor_3;
  mediump vec4 base_color1_4;
  mediump vec4 base_color0_5;
  mediump vec2 flow_dir_6;
  mediump float flow_scale1_7;
  mediump float flow_scale0_8;
  mediump vec3 flowAll_9;
  mediump float time_10;
  mediump vec2 uv_11;
  mediump vec2 UV_12;
  highp vec2 tmpvar_13;
  tmpvar_13 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_12 = tmpvar_13;
  highp vec2 tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_USpeed * _Time.y);
  tmpvar_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (_VSpeed * _Time.y);
  tmpvar_14.y = tmpvar_16;
  UV_12 = (UV_12 + tmpvar_14);
  highp vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_15;
  tmpvar_17.y = tmpvar_16;
  highp vec2 tmpvar_18;
  tmpvar_18 = (UV_12 + tmpvar_17);
  uv_11 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = _Time.y;
  time_10 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_FlowMap, uv_11).xyz;
  flowAll_9 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((_Speed * time_10) + flowAll_9.z));
  flow_scale0_8 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = fract(((
    (_Speed * time_10)
   + flowAll_9.z) + 0.5));
  flow_scale1_7 = tmpvar_22;
  flowAll_9.xy = (2.0 * (flowAll_9.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_23;
  tmpvar_23.x = _FlowSignX;
  tmpvar_23.y = _FlowSignY;
  flowAll_9.xy = (flowAll_9.xy * tmpvar_23);
  highp vec2 tmpvar_24;
  tmpvar_24 = (flowAll_9.xy * _FlowIntensity);
  flow_dir_6 = tmpvar_24;
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_11 + (flow_dir_6 * flow_scale0_8));
  mediump vec2 tmpvar_26;
  tmpvar_26 = (uv_11 + (flow_dir_6 * flow_scale1_7));
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color0_5 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MainTex, tmpvar_26);
  base_color1_4 = tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix (base_color0_5, base_color1_4, vec4(abs((2.0 * 
    (flow_scale0_8 - 0.5)
  ))));
  finalColor_3.w = 0.0;
  finalColor_3.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_29.x * xlv_COLOR0.x)));
  finalColor_3.xyz = (finalColor_3.xyz * (1.0 + (tmpvar_29.x * _EmissionScaler)));
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_2 = tmpvar_30;
  finalColor_3.xyz = (finalColor_3.xyz + ((_MaskColor.xyz * Maskmap_2.y) * _MaskScale));
  mediump vec3 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_32;
  tmpvar_32 = textureCube (_EnvTex, tmpvar_31);
  finalColor_3.xyz = (finalColor_3.xyz + ((tmpvar_32.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_3.w = (tmpvar_29.w * _BloomFactor);
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_NormalMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  normalFromMap_1 = tmpvar_33;
  mediump vec3 o_34;
  o_34.x = dot (xlv_TEXCOORD5, normalFromMap_1);
  o_34.y = dot (xlv_TEXCOORD6, normalFromMap_1);
  o_34.z = dot (xlv_TEXCOORD7, normalFromMap_1);
  mediump float tmpvar_35;
  tmpvar_35 = (1.0 - clamp (dot (
    normalize(xlv_TEXCOORD4.xyz)
  , o_34), 0.0, 1.0));
  highp float tmpvar_36;
  tmpvar_36 = pow (tmpvar_35, _RimPower);
  finalColor_3.xyz = (finalColor_3.xyz + ((_RimColor.xyz * tmpvar_36) * _RimIntensity));
  if ((xlv_TEXCOORD3.z > _WaterPlaneHeight)) {
    finalColor_3.xyz = mix (finalColor_3.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  } else {
    mediump vec3 xlat_varinput_37;
    xlat_varinput_37 = xlv_TEXCOORD3;
    mediump vec3 fogParam_38;
    highp float tmpvar_39;
    tmpvar_39 = max (0.0, ((_WaterPlaneHeight - xlv_TEXCOORD3.z) / (_WaterPlaneHeight - _UWFogHeightEnd)));
    highp float tmpvar_40;
    tmpvar_40 = min (max ((
      (1.0 - (_UWHeightFogDensity * tmpvar_39))
     * _UWHeightFogEffectLimit), _UWHeightFogEffectStart), _UWHeightFogEffectLimit);
    highp float tmpvar_41;
    tmpvar_41 = clamp ((_UWFogColorHLIntensity * tmpvar_39), 0.0, 1.0);
    fogParam_38.z = 0.0;
    fogParam_38.y = tmpvar_40;
    fogParam_38.x = tmpvar_41;
    if ((xlv_TEXCOORD3.y > 0.99)) {
      xlat_varinput_37.y = (xlv_TEXCOORD3.y * (1.0 - (tmpvar_39 * _UWHeightRatio)));
      highp float tmpvar_42;
      tmpvar_42 = clamp (xlat_varinput_37.y, _UWCriticalRange, 1.0);
      xlat_varinput_37.y = tmpvar_42;
    };
    fogParam_38.z = (1.0 - xlat_varinput_37.y);
    mediump vec4 tmpvar_43;
    tmpvar_43.w = 0.0;
    tmpvar_43.xyz = finalColor_3.xyz;
    highp vec3 tmpvar_44;
    tmpvar_44 = mix (mix (_UWFogColorFar, _UWFogColorNear, xlv_TEXCOORD3.xxxx), tmpvar_43, fogParam_38.zzzz).xyz;
    finalColor_3.xyz = tmpvar_44;
    mediump vec4 tmpvar_45;
    tmpvar_45.w = 0.0;
    tmpvar_45.xyz = finalColor_3.xyz;
    highp vec3 tmpvar_46;
    tmpvar_46 = mix (mix (_UWFogColorLow, _UWFogColorHigh, fogParam_38.xxxx), tmpvar_45, fogParam_38.yyyy).xyz;
    finalColor_3.xyz = tmpvar_46;
  };
  gl_FragData[0] = finalColor_3;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "_UNDERWATER_FOG" "FRESNEL" "UseNormalMap" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp vec4 unity_WorldTransformParams;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _LerpFactor;
uniform highp vec4 _HeigtFogParams2;
uniform highp vec4 _HeigtFogParams3;
uniform highp vec4 _HeigtFogRamp2;
uniform highp vec4 _HeigtFogRamp3;
uniform highp vec4 _HeigtFogColBase2;
uniform highp vec4 _HeigtFogColBase3;
uniform highp vec4 _HeigtFogColDelta2;
uniform highp vec4 _HeigtFogColDelta3;
uniform highp vec4 _HeigtFogColParams2;
uniform highp vec4 _HeigtFogColParams3;
uniform highp vec4 _HeigtFogRadialCol2;
uniform highp vec4 _HeigtFogRadialCol3;
uniform highp vec4 _Mihoyo_FogColor2;
uniform highp vec4 _Mihoyo_FogColor3;
uniform highp float _UWFogColorNFIntensity;
uniform highp float _UWFogDensity;
uniform highp float _UWFogEffectStart;
uniform highp float _UWFogEffectLimit;
uniform highp float _UWFogDistStart;
uniform highp vec4 _MainTex_ST;
uniform highp float _Magnitude;
uniform highp float _Frequency;
uniform highp float _InvWaveLength;
uniform highp float _Magnitude1;
uniform highp float _Frequency1;
uniform mediump float _Normal_Scale;
uniform mediump float _CamDistRatio;
uniform mediump float _CamHeightOffset;
uniform mediump float _CamRotate;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec4 tmpvar_3;
  tmpvar_3.w = 0.0;
  tmpvar_3.xyz = _glesNormal;
  mediump vec4 tmpvar_4;
  tmpvar_4 = _glesTANGENT;
  highp float sint_5;
  highp float cost_6;
  highp vec3 adjCamPos_7;
  mediump vec4 offsetVertex_8;
  mediump float normalOut_9;
  highp vec4 offset_10;
  mediump vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  mediump vec4 tmpvar_13;
  offset_10.yzw = vec3(0.0, 0.0, 0.0);
  offset_10.x = (sin((
    (((_Frequency * _Time.y) + (_glesVertex.x * _InvWaveLength)) + (_glesVertex.y * _InvWaveLength))
   + 
    (_glesVertex.z * _InvWaveLength)
  )) * _Magnitude);
  offset_10.y = offset_10.x;
  highp float tmpvar_14;
  tmpvar_14 = abs((sin(
    (_Frequency1 * _Time.y)
  ) * _Magnitude1));
  normalOut_9 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = ((_glesVertex + (
    (offset_10 * _glesColor.x)
   * 
    (1.0 - _glesColor.y)
  )) + ((tmpvar_3 * normalOut_9) * (_Normal_Scale * _glesColor.y)));
  offsetVertex_8 = tmpvar_15;
  highp vec4 pos_16;
  pos_16 = offsetVertex_8;
  highp vec4 tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = pos_16.xyz;
  tmpvar_17 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_18));
  tmpvar_11.xy = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_11.zw = ((_glesMultiTexCoord0.zw * _MainTex_ST.xy) + _MainTex_ST.zw);
  mediump vec4 tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20 = (unity_ObjectToWorld * _glesVertex);
  highp vec3 tmpvar_21;
  tmpvar_21 = (tmpvar_20.xyz - _WorldSpaceCameraPos);
  highp vec4 tmpvar_22;
  mediump float fogFactor_23;
  mediump vec3 fogColor_24;
  mediump vec3 heightFogColor_25;
  highp float HeightFogFactor_26;
  mediump vec3 atomesphereFogColor_27;
  mediump float h_28;
  highp float linearFogDensity_29;
  mediump float len_30;
  highp float tmpvar_31;
  tmpvar_31 = sqrt(dot (tmpvar_21, tmpvar_21));
  len_30 = tmpvar_31;
  highp float tmpvar_32;
  tmpvar_32 = clamp (((len_30 * _HeigtFogParams2.z) + _HeigtFogParams2.w), 0.0, 1.0);
  linearFogDensity_29 = (tmpvar_32 * (2.0 - tmpvar_32));
  if ((len_30 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_29 = (linearFogDensity_29 * _HeigtFogColDelta2.w);
  };
  highp float tmpvar_33;
  tmpvar_33 = min (pow (linearFogDensity_29, _Mihoyo_FogColor2.w), _HeigtFogColBase2.w);
  linearFogDensity_29 = tmpvar_33;
  mediump float tmpvar_34;
  highp float tmpvar_35;
  tmpvar_35 = clamp (((tmpvar_20.y * _HeigtFogColParams2.x) + _HeigtFogColParams2.y), 0.0, 1.0);
  tmpvar_34 = tmpvar_35;
  h_28 = (tmpvar_34 * (2.0 - tmpvar_34));
  highp vec3 tmpvar_36;
  tmpvar_36 = (_HeigtFogColBase2.xyz + (h_28 * _HeigtFogColDelta2.xyz));
  atomesphereFogColor_27 = tmpvar_36;
  highp vec3 tmpvar_37;
  tmpvar_37 = mix (atomesphereFogColor_27, _HeigtFogRadialCol2.xyz, vec3(clamp ((_HeigtFogColParams2.w * 
    (len_30 - _HeigtFogRamp2.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_27 = tmpvar_37;
  mediump float tmpvar_38;
  mediump float r_39;
  mediump float f_40;
  mediump float u_41;
  mediump float l_42;
  mediump float fogInt_43;
  fogInt_43 = 1.0;
  highp float tmpvar_44;
  tmpvar_44 = (_HeigtFogParams2.x * tmpvar_21.y);
  highp float tmpvar_45;
  tmpvar_45 = abs(tmpvar_44);
  if ((tmpvar_45 > 0.01)) {
    highp float tmpvar_46;
    tmpvar_46 = exp(-(tmpvar_44));
    fogInt_43 = ((1.0 - tmpvar_46) / tmpvar_44);
  };
  highp float tmpvar_47;
  tmpvar_47 = sqrt(dot (tmpvar_21, tmpvar_21));
  l_42 = tmpvar_47;
  highp float tmpvar_48;
  tmpvar_48 = (l_42 * _HeigtFogParams2.y);
  u_41 = tmpvar_48;
  fogInt_43 = (fogInt_43 * u_41);
  mediump float tmpvar_49;
  highp float tmpvar_50;
  tmpvar_50 = clamp (((l_42 * _HeigtFogRamp2.x) + _HeigtFogRamp2.y), 0.0, 1.0);
  tmpvar_49 = tmpvar_50;
  r_39 = (tmpvar_49 * (2.0 - tmpvar_49));
  r_39 = ((r_39 * _HeigtFogRamp2.z) + (1.0 - _HeigtFogRamp2.z));
  f_40 = ((1.0 - clamp (
    exp2(-(fogInt_43))
  , 0.0, 1.0)) * r_39);
  highp float tmpvar_51;
  tmpvar_51 = min (f_40, _HeigtFogColBase2.w);
  tmpvar_38 = tmpvar_51;
  HeightFogFactor_26 = tmpvar_38;
  highp vec3 tmpvar_52;
  tmpvar_52 = _Mihoyo_FogColor2.xyz;
  heightFogColor_25 = tmpvar_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = ((heightFogColor_25 * HeightFogFactor_26) + ((atomesphereFogColor_27 * tmpvar_33) * (1.0 - HeightFogFactor_26)));
  fogColor_24 = tmpvar_53;
  highp float tmpvar_54;
  tmpvar_54 = ((1.0 - tmpvar_33) * (1.0 - HeightFogFactor_26));
  fogFactor_23 = tmpvar_54;
  mediump vec4 tmpvar_55;
  tmpvar_55.xyz = fogColor_24;
  tmpvar_55.w = fogFactor_23;
  tmpvar_22 = tmpvar_55;
  highp vec4 tmpvar_56;
  mediump float fogFactor_57;
  mediump vec3 fogColor_58;
  mediump vec3 heightFogColor_59;
  highp float HeightFogFactor_60;
  mediump vec3 atomesphereFogColor_61;
  mediump float h_62;
  highp float linearFogDensity_63;
  mediump float len_64;
  highp float tmpvar_65;
  tmpvar_65 = sqrt(dot (tmpvar_21, tmpvar_21));
  len_64 = tmpvar_65;
  highp float tmpvar_66;
  tmpvar_66 = clamp (((len_64 * _HeigtFogParams3.z) + _HeigtFogParams3.w), 0.0, 1.0);
  linearFogDensity_63 = (tmpvar_66 * (2.0 - tmpvar_66));
  if ((len_64 >= (_ProjectionParams.z * 0.9999))) {
    linearFogDensity_63 = (linearFogDensity_63 * _HeigtFogColDelta3.w);
  };
  highp float tmpvar_67;
  tmpvar_67 = min (pow (linearFogDensity_63, _Mihoyo_FogColor3.w), _HeigtFogColBase3.w);
  linearFogDensity_63 = tmpvar_67;
  mediump float tmpvar_68;
  highp float tmpvar_69;
  tmpvar_69 = clamp (((tmpvar_20.y * _HeigtFogColParams3.x) + _HeigtFogColParams3.y), 0.0, 1.0);
  tmpvar_68 = tmpvar_69;
  h_62 = (tmpvar_68 * (2.0 - tmpvar_68));
  highp vec3 tmpvar_70;
  tmpvar_70 = (_HeigtFogColBase3.xyz + (h_62 * _HeigtFogColDelta3.xyz));
  atomesphereFogColor_61 = tmpvar_70;
  highp vec3 tmpvar_71;
  tmpvar_71 = mix (atomesphereFogColor_61, _HeigtFogRadialCol3.xyz, vec3(clamp ((_HeigtFogColParams3.w * 
    (len_64 - _HeigtFogRamp3.w)
  ), 0.0, 1.0)));
  atomesphereFogColor_61 = tmpvar_71;
  mediump float tmpvar_72;
  mediump float r_73;
  mediump float f_74;
  mediump float u_75;
  mediump float l_76;
  mediump float fogInt_77;
  fogInt_77 = 1.0;
  highp float tmpvar_78;
  tmpvar_78 = (_HeigtFogParams3.x * tmpvar_21.y);
  highp float tmpvar_79;
  tmpvar_79 = abs(tmpvar_78);
  if ((tmpvar_79 > 0.01)) {
    highp float tmpvar_80;
    tmpvar_80 = exp(-(tmpvar_78));
    fogInt_77 = ((1.0 - tmpvar_80) / tmpvar_78);
  };
  highp float tmpvar_81;
  tmpvar_81 = sqrt(dot (tmpvar_21, tmpvar_21));
  l_76 = tmpvar_81;
  highp float tmpvar_82;
  tmpvar_82 = (l_76 * _HeigtFogParams3.y);
  u_75 = tmpvar_82;
  fogInt_77 = (fogInt_77 * u_75);
  mediump float tmpvar_83;
  highp float tmpvar_84;
  tmpvar_84 = clamp (((l_76 * _HeigtFogRamp3.x) + _HeigtFogRamp3.y), 0.0, 1.0);
  tmpvar_83 = tmpvar_84;
  r_73 = (tmpvar_83 * (2.0 - tmpvar_83));
  r_73 = ((r_73 * _HeigtFogRamp3.z) + (1.0 - _HeigtFogRamp3.z));
  f_74 = ((1.0 - clamp (
    exp2(-(fogInt_77))
  , 0.0, 1.0)) * r_73);
  highp float tmpvar_85;
  tmpvar_85 = min (f_74, _HeigtFogColBase3.w);
  tmpvar_72 = tmpvar_85;
  HeightFogFactor_60 = tmpvar_72;
  highp vec3 tmpvar_86;
  tmpvar_86 = _Mihoyo_FogColor3.xyz;
  heightFogColor_59 = tmpvar_86;
  highp vec3 tmpvar_87;
  tmpvar_87 = ((heightFogColor_59 * HeightFogFactor_60) + ((atomesphereFogColor_61 * tmpvar_67) * (1.0 - HeightFogFactor_60)));
  fogColor_58 = tmpvar_87;
  highp float tmpvar_88;
  tmpvar_88 = ((1.0 - tmpvar_67) * (1.0 - HeightFogFactor_60));
  fogFactor_57 = tmpvar_88;
  mediump vec4 tmpvar_89;
  tmpvar_89.xyz = fogColor_58;
  tmpvar_89.w = fogFactor_57;
  tmpvar_56 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (tmpvar_22, tmpvar_56, vec4(_LerpFactor));
  tmpvar_19 = tmpvar_90;
  tmpvar_13.w = 1.0;
  mediump vec3 tmpvar_91;
  tmpvar_91 = tmpvar_3.xyz;
  mediump vec4 wTangent_92;
  mediump vec3 wNormal_93;
  highp vec3 norm_94;
  norm_94 = tmpvar_91;
  highp mat3 tmpvar_95;
  tmpvar_95[0] = unity_WorldToObject[0].xyz;
  tmpvar_95[1] = unity_WorldToObject[1].xyz;
  tmpvar_95[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_96;
  tmpvar_96 = normalize((norm_94 * tmpvar_95));
  wNormal_93 = tmpvar_96;
  highp vec3 dir_97;
  dir_97 = tmpvar_4.xyz;
  highp mat3 tmpvar_98;
  tmpvar_98[0] = unity_ObjectToWorld[0].xyz;
  tmpvar_98[1] = unity_ObjectToWorld[1].xyz;
  tmpvar_98[2] = unity_ObjectToWorld[2].xyz;
  highp vec3 tmpvar_99;
  tmpvar_99 = normalize((tmpvar_98 * dir_97));
  wTangent_92.xyz = tmpvar_99;
  wTangent_92.w = (_glesTANGENT.w * unity_WorldTransformParams.w);
  mediump vec3 tmpvar_100;
  tmpvar_100 = (((wNormal_93.yzx * wTangent_92.zxy) - (wNormal_93.zxy * wTangent_92.yzx)) * wTangent_92.w);
  mediump vec3 tmpvar_101;
  tmpvar_101.x = wTangent_92.x;
  tmpvar_101.y = tmpvar_100.x;
  tmpvar_101.z = wNormal_93.x;
  mediump vec3 tmpvar_102;
  tmpvar_102.x = wTangent_92.y;
  tmpvar_102.y = tmpvar_100.y;
  tmpvar_102.z = wNormal_93.y;
  mediump vec3 tmpvar_103;
  tmpvar_103.x = wTangent_92.z;
  tmpvar_103.y = tmpvar_100.z;
  tmpvar_103.z = wNormal_93.z;
  highp vec4 tmpvar_104;
  tmpvar_104 = (unity_ObjectToWorld * _glesVertex);
  adjCamPos_7.xz = (tmpvar_104.xz - ((tmpvar_104.xz - _WorldSpaceCameraPos.xz) * _CamDistRatio));
  adjCamPos_7.y = (_WorldSpaceCameraPos.y + _CamHeightOffset);
  highp vec3 tmpvar_105;
  tmpvar_105 = normalize((tmpvar_104.xyz - adjCamPos_7));
  tmpvar_12 = tmpvar_105;
  mediump float tmpvar_106;
  tmpvar_106 = cos(_CamRotate);
  cost_6 = tmpvar_106;
  mediump float tmpvar_107;
  tmpvar_107 = sin(_CamRotate);
  sint_5 = tmpvar_107;
  highp mat2 tmpvar_108;
  tmpvar_108[0].x = cost_6;
  tmpvar_108[0].y = -(sint_5);
  tmpvar_108[1].x = sint_5;
  tmpvar_108[1].y = cost_6;
  tmpvar_12.xz = (tmpvar_108 * tmpvar_12.xz);
  highp vec3 tmpvar_109;
  tmpvar_109 = (_WorldSpaceCameraPos - tmpvar_104.xyz);
  tmpvar_13.xyz = tmpvar_109;
  highp vec4 tmpvar_110;
  tmpvar_110.xyz = offsetVertex_8.xyz;
  tmpvar_110.w = tmpvar_1.w;
  mediump vec3 fogParam_111;
  highp vec4 tmpvar_112;
  tmpvar_112 = (unity_ObjectToWorld * tmpvar_110);
  highp vec2 tmpvar_113;
  tmpvar_113 = (tmpvar_112.xz - _WorldSpaceCameraPos.xz);
  highp float tmpvar_114;
  tmpvar_114 = max (0.0, (sqrt(
    dot (tmpvar_113, tmpvar_113)
  ) - _UWFogDistStart));
  highp float tmpvar_115;
  tmpvar_115 = min (max ((
    (1.0 - exp((-(
      (_UWFogDensity * tmpvar_114)
    ) * (_UWFogDensity * tmpvar_114))))
   * _UWFogEffectLimit), _UWFogEffectStart), _UWFogEffectLimit);
  highp float tmpvar_116;
  tmpvar_116 = clamp (exp((
    -((_UWFogColorNFIntensity * tmpvar_114))
   * 
    (_UWFogColorNFIntensity * tmpvar_114)
  )), 0.0, 1.0);
  fogParam_111.x = tmpvar_116;
  fogParam_111.y = tmpvar_115;
  fogParam_111.z = tmpvar_112.y;
  gl_Position = tmpvar_17;
  xlv_TEXCOORD0 = tmpvar_11;
  xlv_COLOR0 = tmpvar_2;
  xlv_COLOR1 = tmpvar_19;
  xlv_TEXCOORD1 = tmpvar_3.xyz;
  xlv_TEXCOORD2 = tmpvar_12;
  xlv_TEXCOORD3 = fogParam_111;
  xlv_TEXCOORD4 = tmpvar_13;
  xlv_TEXCOORD5 = tmpvar_101;
  xlv_TEXCOORD6 = tmpvar_102;
  xlv_TEXCOORD7 = tmpvar_103;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _Time;
uniform highp vec4 _UWFogColorNear;
uniform highp vec4 _UWFogColorFar;
uniform highp vec4 _UWFogColorHigh;
uniform highp vec4 _UWFogColorLow;
uniform highp float _UWFogColorHLIntensity;
uniform highp float _UWHeightFogDensity;
uniform highp float _UWHeightFogEffectStart;
uniform highp float _UWHeightFogEffectLimit;
uniform highp float _UWFogHeightEnd;
uniform highp float _WaterPlaneHeight;
uniform highp float _UWCriticalRange;
uniform highp float _UWHeightRatio;
uniform sampler2D _MainTex;
uniform highp vec4 _MainTex_ST;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionScaler;
uniform mediump vec4 _BaseColor;
uniform mediump vec4 _UpColor;
uniform mediump vec4 _MaskColor;
uniform mediump float _MaskScale;
uniform highp float _USpeed;
uniform highp float _VSpeed;
uniform lowp samplerCube _EnvTex;
uniform mediump float _Reflectivity;
uniform sampler2D _FlowMap;
uniform highp float _Speed;
uniform highp float _FlowIntensity;
uniform highp float _FlowSignX;
uniform highp float _FlowSignY;
uniform highp vec4 _RimColor;
uniform highp float _RimPower;
uniform highp float _RimIntensity;
uniform sampler2D _NormalMap;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec4 xlv_COLOR0;
varying mediump vec4 xlv_COLOR1;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec3 normalFromMap_1;
  mediump vec4 Maskmap_2;
  mediump vec4 finalColor_3;
  mediump vec4 base_color1_4;
  mediump vec4 base_color0_5;
  mediump vec2 flow_dir_6;
  mediump float flow_scale1_7;
  mediump float flow_scale0_8;
  mediump vec3 flowAll_9;
  mediump float time_10;
  mediump vec2 uv_11;
  mediump vec2 UV_12;
  highp vec2 tmpvar_13;
  tmpvar_13 = ((xlv_TEXCOORD0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  UV_12 = tmpvar_13;
  highp vec2 tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = (_USpeed * _Time.y);
  tmpvar_14.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = (_VSpeed * _Time.y);
  tmpvar_14.y = tmpvar_16;
  UV_12 = (UV_12 + tmpvar_14);
  highp vec2 tmpvar_17;
  tmpvar_17.x = tmpvar_15;
  tmpvar_17.y = tmpvar_16;
  highp vec2 tmpvar_18;
  tmpvar_18 = (UV_12 + tmpvar_17);
  uv_11 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = _Time.y;
  time_10 = tmpvar_19;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_FlowMap, uv_11).xyz;
  flowAll_9 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = fract(((_Speed * time_10) + flowAll_9.z));
  flow_scale0_8 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = fract(((
    (_Speed * time_10)
   + flowAll_9.z) + 0.5));
  flow_scale1_7 = tmpvar_22;
  flowAll_9.xy = (2.0 * (flowAll_9.xy - vec2(0.5, 0.5)));
  highp vec2 tmpvar_23;
  tmpvar_23.x = _FlowSignX;
  tmpvar_23.y = _FlowSignY;
  flowAll_9.xy = (flowAll_9.xy * tmpvar_23);
  highp vec2 tmpvar_24;
  tmpvar_24 = (flowAll_9.xy * _FlowIntensity);
  flow_dir_6 = tmpvar_24;
  mediump vec2 tmpvar_25;
  tmpvar_25 = (uv_11 + (flow_dir_6 * flow_scale0_8));
  mediump vec2 tmpvar_26;
  tmpvar_26 = (uv_11 + (flow_dir_6 * flow_scale1_7));
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_MainTex, tmpvar_25);
  base_color0_5 = tmpvar_27;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_MainTex, tmpvar_26);
  base_color1_4 = tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29 = mix (base_color0_5, base_color1_4, vec4(abs((2.0 * 
    (flow_scale0_8 - 0.5)
  ))));
  finalColor_3.w = 0.0;
  finalColor_3.xyz = mix (_BaseColor.xyz, _UpColor.xyz, vec3((tmpvar_29.x * xlv_COLOR0.x)));
  finalColor_3.xyz = (finalColor_3.xyz * (1.0 + (tmpvar_29.x * _EmissionScaler)));
  lowp vec4 tmpvar_30;
  tmpvar_30 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  Maskmap_2 = tmpvar_30;
  finalColor_3.xyz = (finalColor_3.xyz + ((_MaskColor.xyz * Maskmap_2.y) * _MaskScale));
  mediump vec3 tmpvar_31;
  tmpvar_31 = (xlv_TEXCOORD2 - (2.0 * (
    dot (xlv_TEXCOORD1, xlv_TEXCOORD2)
   * xlv_TEXCOORD1)));
  lowp vec4 tmpvar_32;
  tmpvar_32 = textureCube (_EnvTex, tmpvar_31);
  finalColor_3.xyz = (finalColor_3.xyz + ((tmpvar_32.xyz * _Reflectivity) * (vec3(1.0, 1.0, 1.0) - xlv_COLOR0.xxx)));
  finalColor_3.w = (tmpvar_29.w * _BloomFactor);
  lowp vec3 tmpvar_33;
  tmpvar_33 = ((texture2D (_NormalMap, xlv_TEXCOORD0.zw).xyz * 2.0) - 1.0);
  normalFromMap_1 = tmpvar_33;
  mediump vec3 o_34;
  o_34.x = dot (xlv_TEXCOORD5, normalFromMap_1);
  o_34.y = dot (xlv_TEXCOORD6, normalFromMap_1);
  o_34.z = dot (xlv_TEXCOORD7, normalFromMap_1);
  mediump float tmpvar_35;
  tmpvar_35 = (1.0 - clamp (dot (
    normalize(xlv_TEXCOORD4.xyz)
  , o_34), 0.0, 1.0));
  highp float tmpvar_36;
  tmpvar_36 = pow (tmpvar_35, _RimPower);
  finalColor_3.xyz = (finalColor_3.xyz + ((_RimColor.xyz * tmpvar_36) * _RimIntensity));
  if ((xlv_TEXCOORD3.z > _WaterPlaneHeight)) {
    finalColor_3.xyz = mix (finalColor_3.xyz, xlv_COLOR1.xyz, xlv_COLOR1.www);
  } else {
    mediump vec3 xlat_varinput_37;
    xlat_varinput_37 = xlv_TEXCOORD3;
    mediump vec3 fogParam_38;
    highp float tmpvar_39;
    tmpvar_39 = max (0.0, ((_WaterPlaneHeight - xlv_TEXCOORD3.z) / (_WaterPlaneHeight - _UWFogHeightEnd)));
    highp float tmpvar_40;
    tmpvar_40 = min (max ((
      (1.0 - (_UWHeightFogDensity * tmpvar_39))
     * _UWHeightFogEffectLimit), _UWHeightFogEffectStart), _UWHeightFogEffectLimit);
    highp float tmpvar_41;
    tmpvar_41 = clamp ((_UWFogColorHLIntensity * tmpvar_39), 0.0, 1.0);
    fogParam_38.z = 0.0;
    fogParam_38.y = tmpvar_40;
    fogParam_38.x = tmpvar_41;
    if ((xlv_TEXCOORD3.y > 0.99)) {
      xlat_varinput_37.y = (xlv_TEXCOORD3.y * (1.0 - (tmpvar_39 * _UWHeightRatio)));
      highp float tmpvar_42;
      tmpvar_42 = clamp (xlat_varinput_37.y, _UWCriticalRange, 1.0);
      xlat_varinput_37.y = tmpvar_42;
    };
    fogParam_38.z = (1.0 - xlat_varinput_37.y);
    mediump vec4 tmpvar_43;
    tmpvar_43.w = 0.0;
    tmpvar_43.xyz = finalColor_3.xyz;
    highp vec3 tmpvar_44;
    tmpvar_44 = mix (mix (_UWFogColorFar, _UWFogColorNear, xlv_TEXCOORD3.xxxx), tmpvar_43, fogParam_38.zzzz).xyz;
    finalColor_3.xyz = tmpvar_44;
    mediump vec4 tmpvar_45;
    tmpvar_45.w = 0.0;
    tmpvar_45.xyz = finalColor_3.xyz;
    highp vec3 tmpvar_46;
    tmpvar_46 = mix (mix (_UWFogColorLow, _UWFogColorHigh, fogParam_38.xxxx), tmpvar_45, fogParam_38.yyyy).xyz;
    finalColor_3.xyz = tmpvar_46;
  };
  gl_FragData[0] = finalColor_3;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
""
}
SubProgram "gles hw_tier01 " {
""
}
SubProgram "gles hw_tier02 " {
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_HEIGHT" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_HEIGHT" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_HEIGHT" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "UseNormalMap" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "UseNormalMap" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "UseNormalMap" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "UseNormalMap" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "UseNormalMap" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "UseNormalMap" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_HEIGHT" "UseNormalMap" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_HEIGHT" "UseNormalMap" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_HEIGHT" "UseNormalMap" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "UseNormalMap" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "UseNormalMap" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "UseNormalMap" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FRESNEL" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FRESNEL" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FRESNEL" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "FRESNEL" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "FRESNEL" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "FRESNEL" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_HEIGHT" "FRESNEL" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_HEIGHT" "FRESNEL" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_HEIGHT" "FRESNEL" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FRESNEL" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FRESNEL" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FRESNEL" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FRESNEL" "UseNormalMap" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FRESNEL" "UseNormalMap" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FRESNEL" "UseNormalMap" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "FRESNEL" "UseNormalMap" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "FRESNEL" "UseNormalMap" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "FRESNEL" "UseNormalMap" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_HEIGHT" "FRESNEL" "UseNormalMap" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_HEIGHT" "FRESNEL" "UseNormalMap" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_HEIGHT" "FRESNEL" "UseNormalMap" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FRESNEL" "UseNormalMap" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FRESNEL" "UseNormalMap" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "FRESNEL" "UseNormalMap" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_UNDERWATER_FOG" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_UNDERWATER_FOG" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_UNDERWATER_FOG" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_UNDERWATER_FOG" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_UNDERWATER_FOG" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_UNDERWATER_FOG" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_HEIGHT" "_UNDERWATER_FOG" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_HEIGHT" "_UNDERWATER_FOG" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_HEIGHT" "_UNDERWATER_FOG" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "_UNDERWATER_FOG" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "_UNDERWATER_FOG" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "_UNDERWATER_FOG" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_UNDERWATER_FOG" "UseNormalMap" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_UNDERWATER_FOG" "UseNormalMap" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_UNDERWATER_FOG" "UseNormalMap" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_UNDERWATER_FOG" "UseNormalMap" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_UNDERWATER_FOG" "UseNormalMap" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_UNDERWATER_FOG" "UseNormalMap" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_HEIGHT" "_UNDERWATER_FOG" "UseNormalMap" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_HEIGHT" "_UNDERWATER_FOG" "UseNormalMap" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_HEIGHT" "_UNDERWATER_FOG" "UseNormalMap" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "_UNDERWATER_FOG" "UseNormalMap" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "_UNDERWATER_FOG" "UseNormalMap" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "_UNDERWATER_FOG" "UseNormalMap" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_UNDERWATER_FOG" "FRESNEL" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_UNDERWATER_FOG" "FRESNEL" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_UNDERWATER_FOG" "FRESNEL" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_UNDERWATER_FOG" "FRESNEL" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_UNDERWATER_FOG" "FRESNEL" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_UNDERWATER_FOG" "FRESNEL" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_HEIGHT" "_UNDERWATER_FOG" "FRESNEL" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_HEIGHT" "_UNDERWATER_FOG" "FRESNEL" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_HEIGHT" "_UNDERWATER_FOG" "FRESNEL" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "_UNDERWATER_FOG" "FRESNEL" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "_UNDERWATER_FOG" "FRESNEL" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "_UNDERWATER_FOG" "FRESNEL" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "_UNDERWATER_FOG" "FRESNEL" "UseNormalMap" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "_UNDERWATER_FOG" "FRESNEL" "UseNormalMap" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "_UNDERWATER_FOG" "FRESNEL" "UseNormalMap" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_LERP" "_UNDERWATER_FOG" "FRESNEL" "UseNormalMap" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_LERP" "_UNDERWATER_FOG" "FRESNEL" "UseNormalMap" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_LERP" "_UNDERWATER_FOG" "FRESNEL" "UseNormalMap" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_HEIGHT" "_UNDERWATER_FOG" "FRESNEL" "UseNormalMap" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_HEIGHT" "_UNDERWATER_FOG" "FRESNEL" "UseNormalMap" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_HEIGHT" "_UNDERWATER_FOG" "FRESNEL" "UseNormalMap" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "_UNDERWATER_FOG" "FRESNEL" "UseNormalMap" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "_UNDERWATER_FOG" "FRESNEL" "UseNormalMap" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "FOG_HEIGHT" "FOG_LERP" "_UNDERWATER_FOG" "FRESNEL" "UseNormalMap" }
""
}
}
}
}
}