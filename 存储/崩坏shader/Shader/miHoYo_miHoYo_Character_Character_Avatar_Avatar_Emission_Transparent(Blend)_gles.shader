//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "miHoYo/miHoYo_Character/Character_Avatar/Avatar_Emission_Transparent(Blend)" {
Properties {
_Color ("Main Color", Color) = (1,1,1,1)
_EnvColor ("Env Color", Color) = (1,1,1,1)
_Scale ("Scale Compared to Maya", Float) = 0.01
_BloomFactor ("Bloom Factor", Float) = 1
_MainTex ("Main Tex (RGBA)", 2D) = "white" { }
_MainTex_Alpha ("Main Tex Alpha", 2D) = "white" { }
_LightMapTex ("Light Map Tex (RGB)", 2D) = "gray" { }
_LightSpecColor ("Light Specular Color", Color) = (1,1,1,1)
_LightArea ("Light Area Threshold", Range(0, 1)) = 0.51
_SecondShadow ("Second Shadow Threshold", Range(0, 1)) = 0.51
_FirstShadowMultColor ("First Shadow Multiply Color", Color) = (0.9,0.7,0.75,1)
_SecondShadowMultColor ("Second Shadow Multiply Color", Color) = (0.75,0.6,0.65,1)
_Shininess ("Specular Shininess", Range(0.1, 100)) = 10
_SpecMulti ("Specular Multiply Factor", Range(0, 1)) = 0.1
_Emission ("Emission", Range(1, 100)) = 1
_EmissionColor ("Emmisive Color", Color) = (1,1,1,1)
_EmissionBloomFactor ("Emission Bloom Factor", Float) = 1
_OutlineWidth ("Outline Width", Range(0, 100)) = 0.2
_OutlineColor ("Outline Color", Color) = (0,0,0,1)
_MaxOutlineZOffset ("Max Outline Z Offset", Range(0, 100)) = 1
_Opaqueness ("Opaqueness", Range(0, 1)) = 1
[Toggle(LOOKUP_COLOR)] _LookupColor ("Lookup Color", Float) = 0
[Toggle(LOOKUP_COLOR_BILINEAR)] _LookupColorBilinear ("Lookup Color Bilinear", Float) = 0
_factorTex ("Factor Tex", 2D) = "white" { }
_indexTex ("Index Tex", 2D) = "white" { }
_tableTex ("Lookup Tex", 2D) = "white" { }
_OutlineCamStrt ("Outline Camera Adjustment Start Distance", Range(0, 10000)) = 1000
[Toggle(SPECIAL_STATE)] _SpecialState ("Special State", Float) = 0
_SPTex ("SP Tex", 2D) = "white" { }
_SPNoiseTex ("SP Noise Tex", 2D) = "white" { }
_SPNoiseScaler ("SP Noise Scaler", Range(0, 10)) = 1
_SPIntensity ("SP Intensity", Range(0, 1)) = 0.5
_SPTransition ("SP Transition", Range(0, 1)) = 0
_SPTransitionColor ("SP Transition Color", Color) = (1,1,1,1)
_SPOpaqueness ("SP Opaqueness", Range(0, 1)) = 1
_SPOutlineColor ("SP Outline Color", Color) = (1,1,1,1)
_SPTransitionEmissionScaler ("SP Transition Emission Scaler", Range(1, 100)) = 1
_SPTransitionBloomFactor ("SP Transition Bloom Factor", Float) = 1
_SPCubeMap ("SP CubeMap", Cube) = "white" { }
_SPCubeMapColor ("SP CubeMap Color", Color) = (1,1,1,0)
_SPCubeMapOffset ("SP CubeMap Offset", Vector) = (0,0,0,0)
_SPCubeMapIntensity ("SP CubeMap Intensity", Range(0, 1)) = 0
_SPCubeMapNoiseIntensity ("SP CubeMap Noise Intensity", Range(0, 5)) = 0
_SPCubeMapBrightness ("SP CubeMap Brightness", Float) = 1.26
_SPOldColor ("SP Old Color", Color) = (1,1,1,0)
[Toggle(RIM_GLOW)] _RimGlow ("Rim Glow", Float) = 0
_RGColor ("Rim Glow Color", Color) = (1,1,1,1)
_RGShininess ("Rim Glow Shininess", Float) = 1
_RGScale ("Rim Glow Scale", Float) = 1
_RGBias ("Rim Glow Bias", Float) = 0
_RGRatio ("Rim Glow Ratio", Range(0, 1)) = 0.5
_RGBloomFactor ("Rim Glow Bloom Factor", Float) = 1
[Toggle(DISTORTION)] _Distortion ("Distortion", Float) = 0
_DTTex ("Distortion Tex", 2D) = "gray" { }
_DTIntensity ("Distortion Intensity", Range(1, 9)) = 5
_DTPlaySpeed ("Distortion Play Speed", Float) = 0
_DTNormalDisplacment ("Distortion Normal Displacment", Float) = 0
_DTUVScaleInX ("Distortion UV Scale in X", Float) = 1
_DTUVScaleInY ("Distortion UV Scale in Y", Float) = 1
_DTFresnel ("Distortion Fresnel Params", Vector) = (1,1,0,0)
_VertexAlphaFactor ("Alpha From Vertex Factor (0: not use)", Range(0, 1)) = 0
[Toggle(USINGDITHERALPAH)] _UsingDitherAlpha ("UsingDitherAlpha", Float) = 0
_DitherAlpha ("Dither Alpha Value", Range(0, 1)) = 1
[Toggle(USINGBLOOMMASK)] _UsingBloomMask ("UsingBloomMask", Float) = 0
_BloomMaskTex ("Bloom Mask Tex", 2D) = "white" { }
}
SubShader {
 LOD 200
 Tags { "Distortion" = "None" "IGNOREPROJECTOR" = "true" "OutlineType" = "Complex" "QUEUE" = "Transparent" "Reflected" = "Reflected" "RenderType" = "Transparent" }
 Pass {
  Name "COMPLEX_BACK"
  LOD 200
  Tags { "Distortion" = "None" "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "OutlineType" = "Complex" "QUEUE" = "Transparent" "Reflected" = "Reflected" "RenderType" = "Transparent" }
  ZWrite Off
  Cull Front
  GpuProgramID 30880
Program "vp" {
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_76;
    scrpos_76 = xlv_TEXCOORD3;
    mediump float a_77;
    a_77 = xlv_TEXCOORD3.z;
    if ((a_77 < 0.95)) {
      scrpos_76.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_77 = (a_77 * 17.0);
      highp float tmpvar_78;
      tmpvar_78 = (scrpos_76.y / 4.0);
      highp float tmpvar_79;
      tmpvar_79 = (fract(abs(tmpvar_78)) * 4.0);
      highp float tmpvar_80;
      if ((tmpvar_78 >= 0.0)) {
        tmpvar_80 = tmpvar_79;
      } else {
        tmpvar_80 = -(tmpvar_79);
      };
      highp float tmpvar_81;
      tmpvar_81 = (scrpos_76.x / 4.0);
      highp float tmpvar_82;
      tmpvar_82 = (fract(abs(tmpvar_81)) * 4.0);
      highp float tmpvar_83;
      if ((tmpvar_81 >= 0.0)) {
        tmpvar_83 = tmpvar_82;
      } else {
        tmpvar_83 = -(tmpvar_82);
      };
      highp float x_84;
      x_84 = ((a_77 - _DITHERMATRIX[
        int(tmpvar_80)
      ][
        int(tmpvar_83)
      ]) - 0.01);
      if ((x_84 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_76;
    scrpos_76 = xlv_TEXCOORD3;
    mediump float a_77;
    a_77 = xlv_TEXCOORD3.z;
    if ((a_77 < 0.95)) {
      scrpos_76.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_77 = (a_77 * 17.0);
      highp float tmpvar_78;
      tmpvar_78 = (scrpos_76.y / 4.0);
      highp float tmpvar_79;
      tmpvar_79 = (fract(abs(tmpvar_78)) * 4.0);
      highp float tmpvar_80;
      if ((tmpvar_78 >= 0.0)) {
        tmpvar_80 = tmpvar_79;
      } else {
        tmpvar_80 = -(tmpvar_79);
      };
      highp float tmpvar_81;
      tmpvar_81 = (scrpos_76.x / 4.0);
      highp float tmpvar_82;
      tmpvar_82 = (fract(abs(tmpvar_81)) * 4.0);
      highp float tmpvar_83;
      if ((tmpvar_81 >= 0.0)) {
        tmpvar_83 = tmpvar_82;
      } else {
        tmpvar_83 = -(tmpvar_82);
      };
      highp float x_84;
      x_84 = ((a_77 - _DITHERMATRIX[
        int(tmpvar_80)
      ][
        int(tmpvar_83)
      ]) - 0.01);
      if ((x_84 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_76;
    scrpos_76 = xlv_TEXCOORD3;
    mediump float a_77;
    a_77 = xlv_TEXCOORD3.z;
    if ((a_77 < 0.95)) {
      scrpos_76.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_77 = (a_77 * 17.0);
      highp float tmpvar_78;
      tmpvar_78 = (scrpos_76.y / 4.0);
      highp float tmpvar_79;
      tmpvar_79 = (fract(abs(tmpvar_78)) * 4.0);
      highp float tmpvar_80;
      if ((tmpvar_78 >= 0.0)) {
        tmpvar_80 = tmpvar_79;
      } else {
        tmpvar_80 = -(tmpvar_79);
      };
      highp float tmpvar_81;
      tmpvar_81 = (scrpos_76.x / 4.0);
      highp float tmpvar_82;
      tmpvar_82 = (fract(abs(tmpvar_81)) * 4.0);
      highp float tmpvar_83;
      if ((tmpvar_81 >= 0.0)) {
        tmpvar_83 = tmpvar_82;
      } else {
        tmpvar_83 = -(tmpvar_82);
      };
      highp float x_84;
      x_84 = ((a_77 - _DITHERMATRIX[
        int(tmpvar_80)
      ][
        int(tmpvar_83)
      ]) - 0.01);
      if ((x_84 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_13;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_13;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_13;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_13;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_13;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_13;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = tmpvar_24;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (outColor_5.xyz, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_41;
    scrpos_41 = xlv_TEXCOORD3;
    mediump float a_42;
    a_42 = xlv_TEXCOORD3.z;
    if ((a_42 < 0.95)) {
      scrpos_41.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_42 = (a_42 * 17.0);
      highp float tmpvar_43;
      tmpvar_43 = (scrpos_41.y / 4.0);
      highp float tmpvar_44;
      tmpvar_44 = (fract(abs(tmpvar_43)) * 4.0);
      highp float tmpvar_45;
      if ((tmpvar_43 >= 0.0)) {
        tmpvar_45 = tmpvar_44;
      } else {
        tmpvar_45 = -(tmpvar_44);
      };
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_41.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float x_49;
      x_49 = ((a_42 - _DITHERMATRIX[
        int(tmpvar_45)
      ][
        int(tmpvar_48)
      ]) - 0.01);
      if ((x_49 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = tmpvar_24;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (outColor_5.xyz, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_41;
    scrpos_41 = xlv_TEXCOORD3;
    mediump float a_42;
    a_42 = xlv_TEXCOORD3.z;
    if ((a_42 < 0.95)) {
      scrpos_41.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_42 = (a_42 * 17.0);
      highp float tmpvar_43;
      tmpvar_43 = (scrpos_41.y / 4.0);
      highp float tmpvar_44;
      tmpvar_44 = (fract(abs(tmpvar_43)) * 4.0);
      highp float tmpvar_45;
      if ((tmpvar_43 >= 0.0)) {
        tmpvar_45 = tmpvar_44;
      } else {
        tmpvar_45 = -(tmpvar_44);
      };
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_41.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float x_49;
      x_49 = ((a_42 - _DITHERMATRIX[
        int(tmpvar_45)
      ][
        int(tmpvar_48)
      ]) - 0.01);
      if ((x_49 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = tmpvar_24;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (outColor_5.xyz, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_41;
    scrpos_41 = xlv_TEXCOORD3;
    mediump float a_42;
    a_42 = xlv_TEXCOORD3.z;
    if ((a_42 < 0.95)) {
      scrpos_41.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_42 = (a_42 * 17.0);
      highp float tmpvar_43;
      tmpvar_43 = (scrpos_41.y / 4.0);
      highp float tmpvar_44;
      tmpvar_44 = (fract(abs(tmpvar_43)) * 4.0);
      highp float tmpvar_45;
      if ((tmpvar_43 >= 0.0)) {
        tmpvar_45 = tmpvar_44;
      } else {
        tmpvar_45 = -(tmpvar_44);
      };
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_41.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float x_49;
      x_49 = ((a_42 - _DITHERMATRIX[
        int(tmpvar_45)
      ][
        int(tmpvar_48)
      ]) - 0.01);
      if ((x_49 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_76;
  highp vec3 N_77;
  N_77 = tmpvar_67;
  highp vec3 V_78;
  V_78 = V_2;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = pow (clamp ((1.001 - 
    dot (V_78, N_77)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_79 = (_RGBias + (tmpvar_80 * _RGScale));
  mediump vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_79 * _RGColor).xyz;
  mediump float tmpvar_82;
  tmpvar_82 = clamp (tmpvar_79, 0.0, 1.0);
  highp vec3 tmpvar_83;
  tmpvar_83 = mix (outColor_5.xyz, tmpvar_81, vec3((tmpvar_82 * _RGRatio)));
  tmpvar_76 = tmpvar_83;
  outColor_5.xyz = tmpvar_76;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_84;
    scrpos_84 = xlv_TEXCOORD3;
    mediump float a_85;
    a_85 = xlv_TEXCOORD3.z;
    if ((a_85 < 0.95)) {
      scrpos_84.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_85 = (a_85 * 17.0);
      highp float tmpvar_86;
      tmpvar_86 = (scrpos_84.y / 4.0);
      highp float tmpvar_87;
      tmpvar_87 = (fract(abs(tmpvar_86)) * 4.0);
      highp float tmpvar_88;
      if ((tmpvar_86 >= 0.0)) {
        tmpvar_88 = tmpvar_87;
      } else {
        tmpvar_88 = -(tmpvar_87);
      };
      highp float tmpvar_89;
      tmpvar_89 = (scrpos_84.x / 4.0);
      highp float tmpvar_90;
      tmpvar_90 = (fract(abs(tmpvar_89)) * 4.0);
      highp float tmpvar_91;
      if ((tmpvar_89 >= 0.0)) {
        tmpvar_91 = tmpvar_90;
      } else {
        tmpvar_91 = -(tmpvar_90);
      };
      highp float x_92;
      x_92 = ((a_85 - _DITHERMATRIX[
        int(tmpvar_88)
      ][
        int(tmpvar_91)
      ]) - 0.01);
      if ((x_92 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_76;
  highp vec3 N_77;
  N_77 = tmpvar_67;
  highp vec3 V_78;
  V_78 = V_2;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = pow (clamp ((1.001 - 
    dot (V_78, N_77)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_79 = (_RGBias + (tmpvar_80 * _RGScale));
  mediump vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_79 * _RGColor).xyz;
  mediump float tmpvar_82;
  tmpvar_82 = clamp (tmpvar_79, 0.0, 1.0);
  highp vec3 tmpvar_83;
  tmpvar_83 = mix (outColor_5.xyz, tmpvar_81, vec3((tmpvar_82 * _RGRatio)));
  tmpvar_76 = tmpvar_83;
  outColor_5.xyz = tmpvar_76;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_84;
    scrpos_84 = xlv_TEXCOORD3;
    mediump float a_85;
    a_85 = xlv_TEXCOORD3.z;
    if ((a_85 < 0.95)) {
      scrpos_84.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_85 = (a_85 * 17.0);
      highp float tmpvar_86;
      tmpvar_86 = (scrpos_84.y / 4.0);
      highp float tmpvar_87;
      tmpvar_87 = (fract(abs(tmpvar_86)) * 4.0);
      highp float tmpvar_88;
      if ((tmpvar_86 >= 0.0)) {
        tmpvar_88 = tmpvar_87;
      } else {
        tmpvar_88 = -(tmpvar_87);
      };
      highp float tmpvar_89;
      tmpvar_89 = (scrpos_84.x / 4.0);
      highp float tmpvar_90;
      tmpvar_90 = (fract(abs(tmpvar_89)) * 4.0);
      highp float tmpvar_91;
      if ((tmpvar_89 >= 0.0)) {
        tmpvar_91 = tmpvar_90;
      } else {
        tmpvar_91 = -(tmpvar_90);
      };
      highp float x_92;
      x_92 = ((a_85 - _DITHERMATRIX[
        int(tmpvar_88)
      ][
        int(tmpvar_91)
      ]) - 0.01);
      if ((x_92 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_76;
  highp vec3 N_77;
  N_77 = tmpvar_67;
  highp vec3 V_78;
  V_78 = V_2;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = pow (clamp ((1.001 - 
    dot (V_78, N_77)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_79 = (_RGBias + (tmpvar_80 * _RGScale));
  mediump vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_79 * _RGColor).xyz;
  mediump float tmpvar_82;
  tmpvar_82 = clamp (tmpvar_79, 0.0, 1.0);
  highp vec3 tmpvar_83;
  tmpvar_83 = mix (outColor_5.xyz, tmpvar_81, vec3((tmpvar_82 * _RGRatio)));
  tmpvar_76 = tmpvar_83;
  outColor_5.xyz = tmpvar_76;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_84;
    scrpos_84 = xlv_TEXCOORD3;
    mediump float a_85;
    a_85 = xlv_TEXCOORD3.z;
    if ((a_85 < 0.95)) {
      scrpos_84.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_85 = (a_85 * 17.0);
      highp float tmpvar_86;
      tmpvar_86 = (scrpos_84.y / 4.0);
      highp float tmpvar_87;
      tmpvar_87 = (fract(abs(tmpvar_86)) * 4.0);
      highp float tmpvar_88;
      if ((tmpvar_86 >= 0.0)) {
        tmpvar_88 = tmpvar_87;
      } else {
        tmpvar_88 = -(tmpvar_87);
      };
      highp float tmpvar_89;
      tmpvar_89 = (scrpos_84.x / 4.0);
      highp float tmpvar_90;
      tmpvar_90 = (fract(abs(tmpvar_89)) * 4.0);
      highp float tmpvar_91;
      if ((tmpvar_89 >= 0.0)) {
        tmpvar_91 = tmpvar_90;
      } else {
        tmpvar_91 = -(tmpvar_90);
      };
      highp float x_92;
      x_92 = ((a_85 - _DITHERMATRIX[
        int(tmpvar_88)
      ][
        int(tmpvar_91)
      ]) - 0.01);
      if ((x_92 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_33;
  mediump vec3 R_34;
  mediump float intensity_35;
  mediump vec4 noiseTex_36;
  mediump vec4 spColor_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_37 = tmpvar_38;
  spColor_37.w = (spColor_37.w * _SPOpaqueness);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_36 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (((1.99 * tmpvar_39.x) * _SPNoiseScaler) - 1.0);
  intensity_35 = tmpvar_40;
  highp vec3 tmpvar_41;
  highp vec3 I_42;
  I_42 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_36 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_41 = (I_42 - (2.0 * (
    dot (tmpvar_24, I_42)
   * tmpvar_24)));
  R_34 = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = textureCube (_SPCubeMap, R_34).xyz;
  reflection_33 = tmpvar_43;
  highp vec3 tmpvar_44;
  mediump vec3 x_45;
  x_45 = (spColor_37.xyz * _SPOldColor.xyz);
  tmpvar_44 = mix (x_45, ((reflection_33 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_37.xyz = tmpvar_44;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_35 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_35 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_46;
      tmpvar_46 = mix (spColor_37.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_35) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_37.xyz = tmpvar_46;
    };
  };
  highp vec4 tmpvar_47;
  tmpvar_47 = mix (outColor_5, spColor_37, vec4(xlat_mutable_SPIntensity));
  spColor_37 = tmpvar_47;
  outColor_5 = spColor_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_48;
    scrpos_48 = xlv_TEXCOORD3;
    mediump float a_49;
    a_49 = xlv_TEXCOORD3.z;
    if ((a_49 < 0.95)) {
      scrpos_48.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_49 = (a_49 * 17.0);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_48.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float tmpvar_53;
      tmpvar_53 = (scrpos_48.x / 4.0);
      highp float tmpvar_54;
      tmpvar_54 = (fract(abs(tmpvar_53)) * 4.0);
      highp float tmpvar_55;
      if ((tmpvar_53 >= 0.0)) {
        tmpvar_55 = tmpvar_54;
      } else {
        tmpvar_55 = -(tmpvar_54);
      };
      highp float x_56;
      x_56 = ((a_49 - _DITHERMATRIX[
        int(tmpvar_52)
      ][
        int(tmpvar_55)
      ]) - 0.01);
      if ((x_56 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_37.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_33;
  mediump vec3 R_34;
  mediump float intensity_35;
  mediump vec4 noiseTex_36;
  mediump vec4 spColor_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_37 = tmpvar_38;
  spColor_37.w = (spColor_37.w * _SPOpaqueness);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_36 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (((1.99 * tmpvar_39.x) * _SPNoiseScaler) - 1.0);
  intensity_35 = tmpvar_40;
  highp vec3 tmpvar_41;
  highp vec3 I_42;
  I_42 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_36 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_41 = (I_42 - (2.0 * (
    dot (tmpvar_24, I_42)
   * tmpvar_24)));
  R_34 = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = textureCube (_SPCubeMap, R_34).xyz;
  reflection_33 = tmpvar_43;
  highp vec3 tmpvar_44;
  mediump vec3 x_45;
  x_45 = (spColor_37.xyz * _SPOldColor.xyz);
  tmpvar_44 = mix (x_45, ((reflection_33 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_37.xyz = tmpvar_44;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_35 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_35 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_46;
      tmpvar_46 = mix (spColor_37.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_35) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_37.xyz = tmpvar_46;
    };
  };
  highp vec4 tmpvar_47;
  tmpvar_47 = mix (outColor_5, spColor_37, vec4(xlat_mutable_SPIntensity));
  spColor_37 = tmpvar_47;
  outColor_5 = spColor_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_48;
    scrpos_48 = xlv_TEXCOORD3;
    mediump float a_49;
    a_49 = xlv_TEXCOORD3.z;
    if ((a_49 < 0.95)) {
      scrpos_48.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_49 = (a_49 * 17.0);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_48.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float tmpvar_53;
      tmpvar_53 = (scrpos_48.x / 4.0);
      highp float tmpvar_54;
      tmpvar_54 = (fract(abs(tmpvar_53)) * 4.0);
      highp float tmpvar_55;
      if ((tmpvar_53 >= 0.0)) {
        tmpvar_55 = tmpvar_54;
      } else {
        tmpvar_55 = -(tmpvar_54);
      };
      highp float x_56;
      x_56 = ((a_49 - _DITHERMATRIX[
        int(tmpvar_52)
      ][
        int(tmpvar_55)
      ]) - 0.01);
      if ((x_56 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_37.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_33;
  mediump vec3 R_34;
  mediump float intensity_35;
  mediump vec4 noiseTex_36;
  mediump vec4 spColor_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_37 = tmpvar_38;
  spColor_37.w = (spColor_37.w * _SPOpaqueness);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_36 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (((1.99 * tmpvar_39.x) * _SPNoiseScaler) - 1.0);
  intensity_35 = tmpvar_40;
  highp vec3 tmpvar_41;
  highp vec3 I_42;
  I_42 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_36 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_41 = (I_42 - (2.0 * (
    dot (tmpvar_24, I_42)
   * tmpvar_24)));
  R_34 = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = textureCube (_SPCubeMap, R_34).xyz;
  reflection_33 = tmpvar_43;
  highp vec3 tmpvar_44;
  mediump vec3 x_45;
  x_45 = (spColor_37.xyz * _SPOldColor.xyz);
  tmpvar_44 = mix (x_45, ((reflection_33 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_37.xyz = tmpvar_44;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_35 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_35 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_46;
      tmpvar_46 = mix (spColor_37.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_35) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_37.xyz = tmpvar_46;
    };
  };
  highp vec4 tmpvar_47;
  tmpvar_47 = mix (outColor_5, spColor_37, vec4(xlat_mutable_SPIntensity));
  spColor_37 = tmpvar_47;
  outColor_5 = spColor_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_48;
    scrpos_48 = xlv_TEXCOORD3;
    mediump float a_49;
    a_49 = xlv_TEXCOORD3.z;
    if ((a_49 < 0.95)) {
      scrpos_48.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_49 = (a_49 * 17.0);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_48.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float tmpvar_53;
      tmpvar_53 = (scrpos_48.x / 4.0);
      highp float tmpvar_54;
      tmpvar_54 = (fract(abs(tmpvar_53)) * 4.0);
      highp float tmpvar_55;
      if ((tmpvar_53 >= 0.0)) {
        tmpvar_55 = tmpvar_54;
      } else {
        tmpvar_55 = -(tmpvar_54);
      };
      highp float x_56;
      x_56 = ((a_49 - _DITHERMATRIX[
        int(tmpvar_52)
      ][
        int(tmpvar_55)
      ]) - 0.01);
      if ((x_56 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_37.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_76;
  mediump vec3 R_77;
  mediump float intensity_78;
  mediump vec4 noiseTex_79;
  mediump vec4 spColor_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_80 = tmpvar_81;
  spColor_80.w = (spColor_80.w * _SPOpaqueness);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_79 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((1.99 * tmpvar_82.x) * _SPNoiseScaler) - 1.0);
  intensity_78 = tmpvar_83;
  highp vec3 tmpvar_84;
  highp vec3 I_85;
  I_85 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_79 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_84 = (I_85 - (2.0 * (
    dot (tmpvar_67, I_85)
   * tmpvar_67)));
  R_77 = tmpvar_84;
  lowp vec3 tmpvar_86;
  tmpvar_86 = textureCube (_SPCubeMap, R_77).xyz;
  reflection_76 = tmpvar_86;
  highp vec3 tmpvar_87;
  mediump vec3 x_88;
  x_88 = (spColor_80.xyz * _SPOldColor.xyz);
  tmpvar_87 = mix (x_88, ((reflection_76 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_80.xyz = tmpvar_87;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_78 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_78 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_89;
      tmpvar_89 = mix (spColor_80.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_78) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_80.xyz = tmpvar_89;
    };
  };
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (outColor_5, spColor_80, vec4(xlat_mutable_SPIntensity));
  spColor_80 = tmpvar_90;
  outColor_5 = spColor_80;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_91;
    scrpos_91 = xlv_TEXCOORD3;
    mediump float a_92;
    a_92 = xlv_TEXCOORD3.z;
    if ((a_92 < 0.95)) {
      scrpos_91.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_92 = (a_92 * 17.0);
      highp float tmpvar_93;
      tmpvar_93 = (scrpos_91.y / 4.0);
      highp float tmpvar_94;
      tmpvar_94 = (fract(abs(tmpvar_93)) * 4.0);
      highp float tmpvar_95;
      if ((tmpvar_93 >= 0.0)) {
        tmpvar_95 = tmpvar_94;
      } else {
        tmpvar_95 = -(tmpvar_94);
      };
      highp float tmpvar_96;
      tmpvar_96 = (scrpos_91.x / 4.0);
      highp float tmpvar_97;
      tmpvar_97 = (fract(abs(tmpvar_96)) * 4.0);
      highp float tmpvar_98;
      if ((tmpvar_96 >= 0.0)) {
        tmpvar_98 = tmpvar_97;
      } else {
        tmpvar_98 = -(tmpvar_97);
      };
      highp float x_99;
      x_99 = ((a_92 - _DITHERMATRIX[
        int(tmpvar_95)
      ][
        int(tmpvar_98)
      ]) - 0.01);
      if ((x_99 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_80.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_76;
  mediump vec3 R_77;
  mediump float intensity_78;
  mediump vec4 noiseTex_79;
  mediump vec4 spColor_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_80 = tmpvar_81;
  spColor_80.w = (spColor_80.w * _SPOpaqueness);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_79 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((1.99 * tmpvar_82.x) * _SPNoiseScaler) - 1.0);
  intensity_78 = tmpvar_83;
  highp vec3 tmpvar_84;
  highp vec3 I_85;
  I_85 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_79 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_84 = (I_85 - (2.0 * (
    dot (tmpvar_67, I_85)
   * tmpvar_67)));
  R_77 = tmpvar_84;
  lowp vec3 tmpvar_86;
  tmpvar_86 = textureCube (_SPCubeMap, R_77).xyz;
  reflection_76 = tmpvar_86;
  highp vec3 tmpvar_87;
  mediump vec3 x_88;
  x_88 = (spColor_80.xyz * _SPOldColor.xyz);
  tmpvar_87 = mix (x_88, ((reflection_76 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_80.xyz = tmpvar_87;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_78 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_78 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_89;
      tmpvar_89 = mix (spColor_80.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_78) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_80.xyz = tmpvar_89;
    };
  };
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (outColor_5, spColor_80, vec4(xlat_mutable_SPIntensity));
  spColor_80 = tmpvar_90;
  outColor_5 = spColor_80;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_91;
    scrpos_91 = xlv_TEXCOORD3;
    mediump float a_92;
    a_92 = xlv_TEXCOORD3.z;
    if ((a_92 < 0.95)) {
      scrpos_91.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_92 = (a_92 * 17.0);
      highp float tmpvar_93;
      tmpvar_93 = (scrpos_91.y / 4.0);
      highp float tmpvar_94;
      tmpvar_94 = (fract(abs(tmpvar_93)) * 4.0);
      highp float tmpvar_95;
      if ((tmpvar_93 >= 0.0)) {
        tmpvar_95 = tmpvar_94;
      } else {
        tmpvar_95 = -(tmpvar_94);
      };
      highp float tmpvar_96;
      tmpvar_96 = (scrpos_91.x / 4.0);
      highp float tmpvar_97;
      tmpvar_97 = (fract(abs(tmpvar_96)) * 4.0);
      highp float tmpvar_98;
      if ((tmpvar_96 >= 0.0)) {
        tmpvar_98 = tmpvar_97;
      } else {
        tmpvar_98 = -(tmpvar_97);
      };
      highp float x_99;
      x_99 = ((a_92 - _DITHERMATRIX[
        int(tmpvar_95)
      ][
        int(tmpvar_98)
      ]) - 0.01);
      if ((x_99 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_80.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_76;
  mediump vec3 R_77;
  mediump float intensity_78;
  mediump vec4 noiseTex_79;
  mediump vec4 spColor_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_80 = tmpvar_81;
  spColor_80.w = (spColor_80.w * _SPOpaqueness);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_79 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((1.99 * tmpvar_82.x) * _SPNoiseScaler) - 1.0);
  intensity_78 = tmpvar_83;
  highp vec3 tmpvar_84;
  highp vec3 I_85;
  I_85 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_79 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_84 = (I_85 - (2.0 * (
    dot (tmpvar_67, I_85)
   * tmpvar_67)));
  R_77 = tmpvar_84;
  lowp vec3 tmpvar_86;
  tmpvar_86 = textureCube (_SPCubeMap, R_77).xyz;
  reflection_76 = tmpvar_86;
  highp vec3 tmpvar_87;
  mediump vec3 x_88;
  x_88 = (spColor_80.xyz * _SPOldColor.xyz);
  tmpvar_87 = mix (x_88, ((reflection_76 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_80.xyz = tmpvar_87;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_78 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_78 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_89;
      tmpvar_89 = mix (spColor_80.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_78) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_80.xyz = tmpvar_89;
    };
  };
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (outColor_5, spColor_80, vec4(xlat_mutable_SPIntensity));
  spColor_80 = tmpvar_90;
  outColor_5 = spColor_80;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_91;
    scrpos_91 = xlv_TEXCOORD3;
    mediump float a_92;
    a_92 = xlv_TEXCOORD3.z;
    if ((a_92 < 0.95)) {
      scrpos_91.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_92 = (a_92 * 17.0);
      highp float tmpvar_93;
      tmpvar_93 = (scrpos_91.y / 4.0);
      highp float tmpvar_94;
      tmpvar_94 = (fract(abs(tmpvar_93)) * 4.0);
      highp float tmpvar_95;
      if ((tmpvar_93 >= 0.0)) {
        tmpvar_95 = tmpvar_94;
      } else {
        tmpvar_95 = -(tmpvar_94);
      };
      highp float tmpvar_96;
      tmpvar_96 = (scrpos_91.x / 4.0);
      highp float tmpvar_97;
      tmpvar_97 = (fract(abs(tmpvar_96)) * 4.0);
      highp float tmpvar_98;
      if ((tmpvar_96 >= 0.0)) {
        tmpvar_98 = tmpvar_97;
      } else {
        tmpvar_98 = -(tmpvar_97);
      };
      highp float x_99;
      x_99 = ((a_92 - _DITHERMATRIX[
        int(tmpvar_95)
      ][
        int(tmpvar_98)
      ]) - 0.01);
      if ((x_99 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_80.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_13;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_13;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_13;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_13;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_13;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_13;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_33;
  mediump vec3 R_34;
  mediump float intensity_35;
  mediump vec4 noiseTex_36;
  mediump vec4 spColor_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_37 = tmpvar_38;
  spColor_37.w = (spColor_37.w * _SPOpaqueness);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_36 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (((1.99 * tmpvar_39.x) * _SPNoiseScaler) - 1.0);
  intensity_35 = tmpvar_40;
  highp vec3 tmpvar_41;
  highp vec3 I_42;
  I_42 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_36 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_41 = (I_42 - (2.0 * (
    dot (tmpvar_24, I_42)
   * tmpvar_24)));
  R_34 = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = textureCube (_SPCubeMap, R_34).xyz;
  reflection_33 = tmpvar_43;
  highp vec3 tmpvar_44;
  mediump vec3 x_45;
  x_45 = (spColor_37.xyz * _SPOldColor.xyz);
  tmpvar_44 = mix (x_45, ((reflection_33 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_37.xyz = tmpvar_44;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_35 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_35 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_46;
      tmpvar_46 = mix (spColor_37.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_35) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_37.xyz = tmpvar_46;
    };
  };
  highp vec4 tmpvar_47;
  tmpvar_47 = mix (outColor_5, spColor_37, vec4(xlat_mutable_SPIntensity));
  spColor_37 = tmpvar_47;
  outColor_5.w = spColor_37.w;
  mediump vec3 tmpvar_48;
  highp vec3 N_49;
  N_49 = tmpvar_24;
  highp vec3 V_50;
  V_50 = V_2;
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = pow (clamp ((1.001 - 
    dot (V_50, N_49)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_51 = (_RGBias + (tmpvar_52 * _RGScale));
  mediump vec3 tmpvar_53;
  tmpvar_53 = (tmpvar_51 * _RGColor).xyz;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (tmpvar_51, 0.0, 1.0);
  highp vec3 tmpvar_55;
  tmpvar_55 = mix (spColor_37.xyz, tmpvar_53, vec3((tmpvar_54 * _RGRatio)));
  tmpvar_48 = tmpvar_55;
  outColor_5.xyz = tmpvar_48;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_56;
    scrpos_56 = xlv_TEXCOORD3;
    mediump float a_57;
    a_57 = xlv_TEXCOORD3.z;
    if ((a_57 < 0.95)) {
      scrpos_56.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_57 = (a_57 * 17.0);
      highp float tmpvar_58;
      tmpvar_58 = (scrpos_56.y / 4.0);
      highp float tmpvar_59;
      tmpvar_59 = (fract(abs(tmpvar_58)) * 4.0);
      highp float tmpvar_60;
      if ((tmpvar_58 >= 0.0)) {
        tmpvar_60 = tmpvar_59;
      } else {
        tmpvar_60 = -(tmpvar_59);
      };
      highp float tmpvar_61;
      tmpvar_61 = (scrpos_56.x / 4.0);
      highp float tmpvar_62;
      tmpvar_62 = (fract(abs(tmpvar_61)) * 4.0);
      highp float tmpvar_63;
      if ((tmpvar_61 >= 0.0)) {
        tmpvar_63 = tmpvar_62;
      } else {
        tmpvar_63 = -(tmpvar_62);
      };
      highp float x_64;
      x_64 = ((a_57 - _DITHERMATRIX[
        int(tmpvar_60)
      ][
        int(tmpvar_63)
      ]) - 0.01);
      if ((x_64 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_37.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_33;
  mediump vec3 R_34;
  mediump float intensity_35;
  mediump vec4 noiseTex_36;
  mediump vec4 spColor_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_37 = tmpvar_38;
  spColor_37.w = (spColor_37.w * _SPOpaqueness);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_36 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (((1.99 * tmpvar_39.x) * _SPNoiseScaler) - 1.0);
  intensity_35 = tmpvar_40;
  highp vec3 tmpvar_41;
  highp vec3 I_42;
  I_42 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_36 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_41 = (I_42 - (2.0 * (
    dot (tmpvar_24, I_42)
   * tmpvar_24)));
  R_34 = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = textureCube (_SPCubeMap, R_34).xyz;
  reflection_33 = tmpvar_43;
  highp vec3 tmpvar_44;
  mediump vec3 x_45;
  x_45 = (spColor_37.xyz * _SPOldColor.xyz);
  tmpvar_44 = mix (x_45, ((reflection_33 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_37.xyz = tmpvar_44;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_35 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_35 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_46;
      tmpvar_46 = mix (spColor_37.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_35) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_37.xyz = tmpvar_46;
    };
  };
  highp vec4 tmpvar_47;
  tmpvar_47 = mix (outColor_5, spColor_37, vec4(xlat_mutable_SPIntensity));
  spColor_37 = tmpvar_47;
  outColor_5.w = spColor_37.w;
  mediump vec3 tmpvar_48;
  highp vec3 N_49;
  N_49 = tmpvar_24;
  highp vec3 V_50;
  V_50 = V_2;
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = pow (clamp ((1.001 - 
    dot (V_50, N_49)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_51 = (_RGBias + (tmpvar_52 * _RGScale));
  mediump vec3 tmpvar_53;
  tmpvar_53 = (tmpvar_51 * _RGColor).xyz;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (tmpvar_51, 0.0, 1.0);
  highp vec3 tmpvar_55;
  tmpvar_55 = mix (spColor_37.xyz, tmpvar_53, vec3((tmpvar_54 * _RGRatio)));
  tmpvar_48 = tmpvar_55;
  outColor_5.xyz = tmpvar_48;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_56;
    scrpos_56 = xlv_TEXCOORD3;
    mediump float a_57;
    a_57 = xlv_TEXCOORD3.z;
    if ((a_57 < 0.95)) {
      scrpos_56.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_57 = (a_57 * 17.0);
      highp float tmpvar_58;
      tmpvar_58 = (scrpos_56.y / 4.0);
      highp float tmpvar_59;
      tmpvar_59 = (fract(abs(tmpvar_58)) * 4.0);
      highp float tmpvar_60;
      if ((tmpvar_58 >= 0.0)) {
        tmpvar_60 = tmpvar_59;
      } else {
        tmpvar_60 = -(tmpvar_59);
      };
      highp float tmpvar_61;
      tmpvar_61 = (scrpos_56.x / 4.0);
      highp float tmpvar_62;
      tmpvar_62 = (fract(abs(tmpvar_61)) * 4.0);
      highp float tmpvar_63;
      if ((tmpvar_61 >= 0.0)) {
        tmpvar_63 = tmpvar_62;
      } else {
        tmpvar_63 = -(tmpvar_62);
      };
      highp float x_64;
      x_64 = ((a_57 - _DITHERMATRIX[
        int(tmpvar_60)
      ][
        int(tmpvar_63)
      ]) - 0.01);
      if ((x_64 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_37.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_33;
  mediump vec3 R_34;
  mediump float intensity_35;
  mediump vec4 noiseTex_36;
  mediump vec4 spColor_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_37 = tmpvar_38;
  spColor_37.w = (spColor_37.w * _SPOpaqueness);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_36 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (((1.99 * tmpvar_39.x) * _SPNoiseScaler) - 1.0);
  intensity_35 = tmpvar_40;
  highp vec3 tmpvar_41;
  highp vec3 I_42;
  I_42 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_36 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_41 = (I_42 - (2.0 * (
    dot (tmpvar_24, I_42)
   * tmpvar_24)));
  R_34 = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = textureCube (_SPCubeMap, R_34).xyz;
  reflection_33 = tmpvar_43;
  highp vec3 tmpvar_44;
  mediump vec3 x_45;
  x_45 = (spColor_37.xyz * _SPOldColor.xyz);
  tmpvar_44 = mix (x_45, ((reflection_33 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_37.xyz = tmpvar_44;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_35 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_35 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_46;
      tmpvar_46 = mix (spColor_37.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_35) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_37.xyz = tmpvar_46;
    };
  };
  highp vec4 tmpvar_47;
  tmpvar_47 = mix (outColor_5, spColor_37, vec4(xlat_mutable_SPIntensity));
  spColor_37 = tmpvar_47;
  outColor_5.w = spColor_37.w;
  mediump vec3 tmpvar_48;
  highp vec3 N_49;
  N_49 = tmpvar_24;
  highp vec3 V_50;
  V_50 = V_2;
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = pow (clamp ((1.001 - 
    dot (V_50, N_49)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_51 = (_RGBias + (tmpvar_52 * _RGScale));
  mediump vec3 tmpvar_53;
  tmpvar_53 = (tmpvar_51 * _RGColor).xyz;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (tmpvar_51, 0.0, 1.0);
  highp vec3 tmpvar_55;
  tmpvar_55 = mix (spColor_37.xyz, tmpvar_53, vec3((tmpvar_54 * _RGRatio)));
  tmpvar_48 = tmpvar_55;
  outColor_5.xyz = tmpvar_48;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_56;
    scrpos_56 = xlv_TEXCOORD3;
    mediump float a_57;
    a_57 = xlv_TEXCOORD3.z;
    if ((a_57 < 0.95)) {
      scrpos_56.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_57 = (a_57 * 17.0);
      highp float tmpvar_58;
      tmpvar_58 = (scrpos_56.y / 4.0);
      highp float tmpvar_59;
      tmpvar_59 = (fract(abs(tmpvar_58)) * 4.0);
      highp float tmpvar_60;
      if ((tmpvar_58 >= 0.0)) {
        tmpvar_60 = tmpvar_59;
      } else {
        tmpvar_60 = -(tmpvar_59);
      };
      highp float tmpvar_61;
      tmpvar_61 = (scrpos_56.x / 4.0);
      highp float tmpvar_62;
      tmpvar_62 = (fract(abs(tmpvar_61)) * 4.0);
      highp float tmpvar_63;
      if ((tmpvar_61 >= 0.0)) {
        tmpvar_63 = tmpvar_62;
      } else {
        tmpvar_63 = -(tmpvar_62);
      };
      highp float x_64;
      x_64 = ((a_57 - _DITHERMATRIX[
        int(tmpvar_60)
      ][
        int(tmpvar_63)
      ]) - 0.01);
      if ((x_64 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_37.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_76;
  mediump vec3 R_77;
  mediump float intensity_78;
  mediump vec4 noiseTex_79;
  mediump vec4 spColor_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_80 = tmpvar_81;
  spColor_80.w = (spColor_80.w * _SPOpaqueness);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_79 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((1.99 * tmpvar_82.x) * _SPNoiseScaler) - 1.0);
  intensity_78 = tmpvar_83;
  highp vec3 tmpvar_84;
  highp vec3 I_85;
  I_85 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_79 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_84 = (I_85 - (2.0 * (
    dot (tmpvar_67, I_85)
   * tmpvar_67)));
  R_77 = tmpvar_84;
  lowp vec3 tmpvar_86;
  tmpvar_86 = textureCube (_SPCubeMap, R_77).xyz;
  reflection_76 = tmpvar_86;
  highp vec3 tmpvar_87;
  mediump vec3 x_88;
  x_88 = (spColor_80.xyz * _SPOldColor.xyz);
  tmpvar_87 = mix (x_88, ((reflection_76 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_80.xyz = tmpvar_87;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_78 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_78 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_89;
      tmpvar_89 = mix (spColor_80.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_78) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_80.xyz = tmpvar_89;
    };
  };
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (outColor_5, spColor_80, vec4(xlat_mutable_SPIntensity));
  spColor_80 = tmpvar_90;
  outColor_5.w = spColor_80.w;
  mediump vec3 tmpvar_91;
  highp vec3 N_92;
  N_92 = tmpvar_67;
  highp vec3 V_93;
  V_93 = V_2;
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = pow (clamp ((1.001 - 
    dot (V_93, N_92)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_94 = (_RGBias + (tmpvar_95 * _RGScale));
  mediump vec3 tmpvar_96;
  tmpvar_96 = (tmpvar_94 * _RGColor).xyz;
  mediump float tmpvar_97;
  tmpvar_97 = clamp (tmpvar_94, 0.0, 1.0);
  highp vec3 tmpvar_98;
  tmpvar_98 = mix (spColor_80.xyz, tmpvar_96, vec3((tmpvar_97 * _RGRatio)));
  tmpvar_91 = tmpvar_98;
  outColor_5.xyz = tmpvar_91;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_99;
    scrpos_99 = xlv_TEXCOORD3;
    mediump float a_100;
    a_100 = xlv_TEXCOORD3.z;
    if ((a_100 < 0.95)) {
      scrpos_99.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_100 = (a_100 * 17.0);
      highp float tmpvar_101;
      tmpvar_101 = (scrpos_99.y / 4.0);
      highp float tmpvar_102;
      tmpvar_102 = (fract(abs(tmpvar_101)) * 4.0);
      highp float tmpvar_103;
      if ((tmpvar_101 >= 0.0)) {
        tmpvar_103 = tmpvar_102;
      } else {
        tmpvar_103 = -(tmpvar_102);
      };
      highp float tmpvar_104;
      tmpvar_104 = (scrpos_99.x / 4.0);
      highp float tmpvar_105;
      tmpvar_105 = (fract(abs(tmpvar_104)) * 4.0);
      highp float tmpvar_106;
      if ((tmpvar_104 >= 0.0)) {
        tmpvar_106 = tmpvar_105;
      } else {
        tmpvar_106 = -(tmpvar_105);
      };
      highp float x_107;
      x_107 = ((a_100 - _DITHERMATRIX[
        int(tmpvar_103)
      ][
        int(tmpvar_106)
      ]) - 0.01);
      if ((x_107 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_80.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_76;
  mediump vec3 R_77;
  mediump float intensity_78;
  mediump vec4 noiseTex_79;
  mediump vec4 spColor_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_80 = tmpvar_81;
  spColor_80.w = (spColor_80.w * _SPOpaqueness);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_79 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((1.99 * tmpvar_82.x) * _SPNoiseScaler) - 1.0);
  intensity_78 = tmpvar_83;
  highp vec3 tmpvar_84;
  highp vec3 I_85;
  I_85 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_79 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_84 = (I_85 - (2.0 * (
    dot (tmpvar_67, I_85)
   * tmpvar_67)));
  R_77 = tmpvar_84;
  lowp vec3 tmpvar_86;
  tmpvar_86 = textureCube (_SPCubeMap, R_77).xyz;
  reflection_76 = tmpvar_86;
  highp vec3 tmpvar_87;
  mediump vec3 x_88;
  x_88 = (spColor_80.xyz * _SPOldColor.xyz);
  tmpvar_87 = mix (x_88, ((reflection_76 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_80.xyz = tmpvar_87;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_78 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_78 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_89;
      tmpvar_89 = mix (spColor_80.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_78) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_80.xyz = tmpvar_89;
    };
  };
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (outColor_5, spColor_80, vec4(xlat_mutable_SPIntensity));
  spColor_80 = tmpvar_90;
  outColor_5.w = spColor_80.w;
  mediump vec3 tmpvar_91;
  highp vec3 N_92;
  N_92 = tmpvar_67;
  highp vec3 V_93;
  V_93 = V_2;
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = pow (clamp ((1.001 - 
    dot (V_93, N_92)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_94 = (_RGBias + (tmpvar_95 * _RGScale));
  mediump vec3 tmpvar_96;
  tmpvar_96 = (tmpvar_94 * _RGColor).xyz;
  mediump float tmpvar_97;
  tmpvar_97 = clamp (tmpvar_94, 0.0, 1.0);
  highp vec3 tmpvar_98;
  tmpvar_98 = mix (spColor_80.xyz, tmpvar_96, vec3((tmpvar_97 * _RGRatio)));
  tmpvar_91 = tmpvar_98;
  outColor_5.xyz = tmpvar_91;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_99;
    scrpos_99 = xlv_TEXCOORD3;
    mediump float a_100;
    a_100 = xlv_TEXCOORD3.z;
    if ((a_100 < 0.95)) {
      scrpos_99.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_100 = (a_100 * 17.0);
      highp float tmpvar_101;
      tmpvar_101 = (scrpos_99.y / 4.0);
      highp float tmpvar_102;
      tmpvar_102 = (fract(abs(tmpvar_101)) * 4.0);
      highp float tmpvar_103;
      if ((tmpvar_101 >= 0.0)) {
        tmpvar_103 = tmpvar_102;
      } else {
        tmpvar_103 = -(tmpvar_102);
      };
      highp float tmpvar_104;
      tmpvar_104 = (scrpos_99.x / 4.0);
      highp float tmpvar_105;
      tmpvar_105 = (fract(abs(tmpvar_104)) * 4.0);
      highp float tmpvar_106;
      if ((tmpvar_104 >= 0.0)) {
        tmpvar_106 = tmpvar_105;
      } else {
        tmpvar_106 = -(tmpvar_105);
      };
      highp float x_107;
      x_107 = ((a_100 - _DITHERMATRIX[
        int(tmpvar_103)
      ][
        int(tmpvar_106)
      ]) - 0.01);
      if ((x_107 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_80.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_76;
  mediump vec3 R_77;
  mediump float intensity_78;
  mediump vec4 noiseTex_79;
  mediump vec4 spColor_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_80 = tmpvar_81;
  spColor_80.w = (spColor_80.w * _SPOpaqueness);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_79 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((1.99 * tmpvar_82.x) * _SPNoiseScaler) - 1.0);
  intensity_78 = tmpvar_83;
  highp vec3 tmpvar_84;
  highp vec3 I_85;
  I_85 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_79 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_84 = (I_85 - (2.0 * (
    dot (tmpvar_67, I_85)
   * tmpvar_67)));
  R_77 = tmpvar_84;
  lowp vec3 tmpvar_86;
  tmpvar_86 = textureCube (_SPCubeMap, R_77).xyz;
  reflection_76 = tmpvar_86;
  highp vec3 tmpvar_87;
  mediump vec3 x_88;
  x_88 = (spColor_80.xyz * _SPOldColor.xyz);
  tmpvar_87 = mix (x_88, ((reflection_76 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_80.xyz = tmpvar_87;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_78 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_78 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_89;
      tmpvar_89 = mix (spColor_80.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_78) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_80.xyz = tmpvar_89;
    };
  };
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (outColor_5, spColor_80, vec4(xlat_mutable_SPIntensity));
  spColor_80 = tmpvar_90;
  outColor_5.w = spColor_80.w;
  mediump vec3 tmpvar_91;
  highp vec3 N_92;
  N_92 = tmpvar_67;
  highp vec3 V_93;
  V_93 = V_2;
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = pow (clamp ((1.001 - 
    dot (V_93, N_92)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_94 = (_RGBias + (tmpvar_95 * _RGScale));
  mediump vec3 tmpvar_96;
  tmpvar_96 = (tmpvar_94 * _RGColor).xyz;
  mediump float tmpvar_97;
  tmpvar_97 = clamp (tmpvar_94, 0.0, 1.0);
  highp vec3 tmpvar_98;
  tmpvar_98 = mix (spColor_80.xyz, tmpvar_96, vec3((tmpvar_97 * _RGRatio)));
  tmpvar_91 = tmpvar_98;
  outColor_5.xyz = tmpvar_91;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_99;
    scrpos_99 = xlv_TEXCOORD3;
    mediump float a_100;
    a_100 = xlv_TEXCOORD3.z;
    if ((a_100 < 0.95)) {
      scrpos_99.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_100 = (a_100 * 17.0);
      highp float tmpvar_101;
      tmpvar_101 = (scrpos_99.y / 4.0);
      highp float tmpvar_102;
      tmpvar_102 = (fract(abs(tmpvar_101)) * 4.0);
      highp float tmpvar_103;
      if ((tmpvar_101 >= 0.0)) {
        tmpvar_103 = tmpvar_102;
      } else {
        tmpvar_103 = -(tmpvar_102);
      };
      highp float tmpvar_104;
      tmpvar_104 = (scrpos_99.x / 4.0);
      highp float tmpvar_105;
      tmpvar_105 = (fract(abs(tmpvar_104)) * 4.0);
      highp float tmpvar_106;
      if ((tmpvar_104 >= 0.0)) {
        tmpvar_106 = tmpvar_105;
      } else {
        tmpvar_106 = -(tmpvar_105);
      };
      highp float x_107;
      x_107 = ((a_100 - _DITHERMATRIX[
        int(tmpvar_103)
      ][
        int(tmpvar_106)
      ]) - 0.01);
      if ((x_107 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_80.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_76;
    scrpos_76 = xlv_TEXCOORD3;
    mediump float a_77;
    a_77 = xlv_TEXCOORD3.z;
    if ((a_77 < 0.95)) {
      scrpos_76.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_77 = (a_77 * 17.0);
      highp float tmpvar_78;
      tmpvar_78 = (scrpos_76.y / 4.0);
      highp float tmpvar_79;
      tmpvar_79 = (fract(abs(tmpvar_78)) * 4.0);
      highp float tmpvar_80;
      if ((tmpvar_78 >= 0.0)) {
        tmpvar_80 = tmpvar_79;
      } else {
        tmpvar_80 = -(tmpvar_79);
      };
      highp float tmpvar_81;
      tmpvar_81 = (scrpos_76.x / 4.0);
      highp float tmpvar_82;
      tmpvar_82 = (fract(abs(tmpvar_81)) * 4.0);
      highp float tmpvar_83;
      if ((tmpvar_81 >= 0.0)) {
        tmpvar_83 = tmpvar_82;
      } else {
        tmpvar_83 = -(tmpvar_82);
      };
      highp float x_84;
      x_84 = ((a_77 - _DITHERMATRIX[
        int(tmpvar_80)
      ][
        int(tmpvar_83)
      ]) - 0.01);
      if ((x_84 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_76;
    scrpos_76 = xlv_TEXCOORD3;
    mediump float a_77;
    a_77 = xlv_TEXCOORD3.z;
    if ((a_77 < 0.95)) {
      scrpos_76.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_77 = (a_77 * 17.0);
      highp float tmpvar_78;
      tmpvar_78 = (scrpos_76.y / 4.0);
      highp float tmpvar_79;
      tmpvar_79 = (fract(abs(tmpvar_78)) * 4.0);
      highp float tmpvar_80;
      if ((tmpvar_78 >= 0.0)) {
        tmpvar_80 = tmpvar_79;
      } else {
        tmpvar_80 = -(tmpvar_79);
      };
      highp float tmpvar_81;
      tmpvar_81 = (scrpos_76.x / 4.0);
      highp float tmpvar_82;
      tmpvar_82 = (fract(abs(tmpvar_81)) * 4.0);
      highp float tmpvar_83;
      if ((tmpvar_81 >= 0.0)) {
        tmpvar_83 = tmpvar_82;
      } else {
        tmpvar_83 = -(tmpvar_82);
      };
      highp float x_84;
      x_84 = ((a_77 - _DITHERMATRIX[
        int(tmpvar_80)
      ][
        int(tmpvar_83)
      ]) - 0.01);
      if ((x_84 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_76;
    scrpos_76 = xlv_TEXCOORD3;
    mediump float a_77;
    a_77 = xlv_TEXCOORD3.z;
    if ((a_77 < 0.95)) {
      scrpos_76.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_77 = (a_77 * 17.0);
      highp float tmpvar_78;
      tmpvar_78 = (scrpos_76.y / 4.0);
      highp float tmpvar_79;
      tmpvar_79 = (fract(abs(tmpvar_78)) * 4.0);
      highp float tmpvar_80;
      if ((tmpvar_78 >= 0.0)) {
        tmpvar_80 = tmpvar_79;
      } else {
        tmpvar_80 = -(tmpvar_79);
      };
      highp float tmpvar_81;
      tmpvar_81 = (scrpos_76.x / 4.0);
      highp float tmpvar_82;
      tmpvar_82 = (fract(abs(tmpvar_81)) * 4.0);
      highp float tmpvar_83;
      if ((tmpvar_81 >= 0.0)) {
        tmpvar_83 = tmpvar_82;
      } else {
        tmpvar_83 = -(tmpvar_82);
      };
      highp float x_84;
      x_84 = ((a_77 - _DITHERMATRIX[
        int(tmpvar_80)
      ][
        int(tmpvar_83)
      ]) - 0.01);
      if ((x_84 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_13;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_13;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_13;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_13;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_13;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_13;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = tmpvar_24;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (outColor_5.xyz, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_41;
    scrpos_41 = xlv_TEXCOORD3;
    mediump float a_42;
    a_42 = xlv_TEXCOORD3.z;
    if ((a_42 < 0.95)) {
      scrpos_41.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_42 = (a_42 * 17.0);
      highp float tmpvar_43;
      tmpvar_43 = (scrpos_41.y / 4.0);
      highp float tmpvar_44;
      tmpvar_44 = (fract(abs(tmpvar_43)) * 4.0);
      highp float tmpvar_45;
      if ((tmpvar_43 >= 0.0)) {
        tmpvar_45 = tmpvar_44;
      } else {
        tmpvar_45 = -(tmpvar_44);
      };
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_41.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float x_49;
      x_49 = ((a_42 - _DITHERMATRIX[
        int(tmpvar_45)
      ][
        int(tmpvar_48)
      ]) - 0.01);
      if ((x_49 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = tmpvar_24;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (outColor_5.xyz, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_41;
    scrpos_41 = xlv_TEXCOORD3;
    mediump float a_42;
    a_42 = xlv_TEXCOORD3.z;
    if ((a_42 < 0.95)) {
      scrpos_41.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_42 = (a_42 * 17.0);
      highp float tmpvar_43;
      tmpvar_43 = (scrpos_41.y / 4.0);
      highp float tmpvar_44;
      tmpvar_44 = (fract(abs(tmpvar_43)) * 4.0);
      highp float tmpvar_45;
      if ((tmpvar_43 >= 0.0)) {
        tmpvar_45 = tmpvar_44;
      } else {
        tmpvar_45 = -(tmpvar_44);
      };
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_41.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float x_49;
      x_49 = ((a_42 - _DITHERMATRIX[
        int(tmpvar_45)
      ][
        int(tmpvar_48)
      ]) - 0.01);
      if ((x_49 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = tmpvar_24;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (outColor_5.xyz, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_41;
    scrpos_41 = xlv_TEXCOORD3;
    mediump float a_42;
    a_42 = xlv_TEXCOORD3.z;
    if ((a_42 < 0.95)) {
      scrpos_41.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_42 = (a_42 * 17.0);
      highp float tmpvar_43;
      tmpvar_43 = (scrpos_41.y / 4.0);
      highp float tmpvar_44;
      tmpvar_44 = (fract(abs(tmpvar_43)) * 4.0);
      highp float tmpvar_45;
      if ((tmpvar_43 >= 0.0)) {
        tmpvar_45 = tmpvar_44;
      } else {
        tmpvar_45 = -(tmpvar_44);
      };
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_41.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float x_49;
      x_49 = ((a_42 - _DITHERMATRIX[
        int(tmpvar_45)
      ][
        int(tmpvar_48)
      ]) - 0.01);
      if ((x_49 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_76;
  highp vec3 N_77;
  N_77 = tmpvar_67;
  highp vec3 V_78;
  V_78 = V_2;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = pow (clamp ((1.001 - 
    dot (V_78, N_77)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_79 = (_RGBias + (tmpvar_80 * _RGScale));
  mediump vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_79 * _RGColor).xyz;
  mediump float tmpvar_82;
  tmpvar_82 = clamp (tmpvar_79, 0.0, 1.0);
  highp vec3 tmpvar_83;
  tmpvar_83 = mix (outColor_5.xyz, tmpvar_81, vec3((tmpvar_82 * _RGRatio)));
  tmpvar_76 = tmpvar_83;
  outColor_5.xyz = tmpvar_76;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_84;
    scrpos_84 = xlv_TEXCOORD3;
    mediump float a_85;
    a_85 = xlv_TEXCOORD3.z;
    if ((a_85 < 0.95)) {
      scrpos_84.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_85 = (a_85 * 17.0);
      highp float tmpvar_86;
      tmpvar_86 = (scrpos_84.y / 4.0);
      highp float tmpvar_87;
      tmpvar_87 = (fract(abs(tmpvar_86)) * 4.0);
      highp float tmpvar_88;
      if ((tmpvar_86 >= 0.0)) {
        tmpvar_88 = tmpvar_87;
      } else {
        tmpvar_88 = -(tmpvar_87);
      };
      highp float tmpvar_89;
      tmpvar_89 = (scrpos_84.x / 4.0);
      highp float tmpvar_90;
      tmpvar_90 = (fract(abs(tmpvar_89)) * 4.0);
      highp float tmpvar_91;
      if ((tmpvar_89 >= 0.0)) {
        tmpvar_91 = tmpvar_90;
      } else {
        tmpvar_91 = -(tmpvar_90);
      };
      highp float x_92;
      x_92 = ((a_85 - _DITHERMATRIX[
        int(tmpvar_88)
      ][
        int(tmpvar_91)
      ]) - 0.01);
      if ((x_92 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_76;
  highp vec3 N_77;
  N_77 = tmpvar_67;
  highp vec3 V_78;
  V_78 = V_2;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = pow (clamp ((1.001 - 
    dot (V_78, N_77)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_79 = (_RGBias + (tmpvar_80 * _RGScale));
  mediump vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_79 * _RGColor).xyz;
  mediump float tmpvar_82;
  tmpvar_82 = clamp (tmpvar_79, 0.0, 1.0);
  highp vec3 tmpvar_83;
  tmpvar_83 = mix (outColor_5.xyz, tmpvar_81, vec3((tmpvar_82 * _RGRatio)));
  tmpvar_76 = tmpvar_83;
  outColor_5.xyz = tmpvar_76;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_84;
    scrpos_84 = xlv_TEXCOORD3;
    mediump float a_85;
    a_85 = xlv_TEXCOORD3.z;
    if ((a_85 < 0.95)) {
      scrpos_84.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_85 = (a_85 * 17.0);
      highp float tmpvar_86;
      tmpvar_86 = (scrpos_84.y / 4.0);
      highp float tmpvar_87;
      tmpvar_87 = (fract(abs(tmpvar_86)) * 4.0);
      highp float tmpvar_88;
      if ((tmpvar_86 >= 0.0)) {
        tmpvar_88 = tmpvar_87;
      } else {
        tmpvar_88 = -(tmpvar_87);
      };
      highp float tmpvar_89;
      tmpvar_89 = (scrpos_84.x / 4.0);
      highp float tmpvar_90;
      tmpvar_90 = (fract(abs(tmpvar_89)) * 4.0);
      highp float tmpvar_91;
      if ((tmpvar_89 >= 0.0)) {
        tmpvar_91 = tmpvar_90;
      } else {
        tmpvar_91 = -(tmpvar_90);
      };
      highp float x_92;
      x_92 = ((a_85 - _DITHERMATRIX[
        int(tmpvar_88)
      ][
        int(tmpvar_91)
      ]) - 0.01);
      if ((x_92 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_76;
  highp vec3 N_77;
  N_77 = tmpvar_67;
  highp vec3 V_78;
  V_78 = V_2;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = pow (clamp ((1.001 - 
    dot (V_78, N_77)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_79 = (_RGBias + (tmpvar_80 * _RGScale));
  mediump vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_79 * _RGColor).xyz;
  mediump float tmpvar_82;
  tmpvar_82 = clamp (tmpvar_79, 0.0, 1.0);
  highp vec3 tmpvar_83;
  tmpvar_83 = mix (outColor_5.xyz, tmpvar_81, vec3((tmpvar_82 * _RGRatio)));
  tmpvar_76 = tmpvar_83;
  outColor_5.xyz = tmpvar_76;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_84;
    scrpos_84 = xlv_TEXCOORD3;
    mediump float a_85;
    a_85 = xlv_TEXCOORD3.z;
    if ((a_85 < 0.95)) {
      scrpos_84.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_85 = (a_85 * 17.0);
      highp float tmpvar_86;
      tmpvar_86 = (scrpos_84.y / 4.0);
      highp float tmpvar_87;
      tmpvar_87 = (fract(abs(tmpvar_86)) * 4.0);
      highp float tmpvar_88;
      if ((tmpvar_86 >= 0.0)) {
        tmpvar_88 = tmpvar_87;
      } else {
        tmpvar_88 = -(tmpvar_87);
      };
      highp float tmpvar_89;
      tmpvar_89 = (scrpos_84.x / 4.0);
      highp float tmpvar_90;
      tmpvar_90 = (fract(abs(tmpvar_89)) * 4.0);
      highp float tmpvar_91;
      if ((tmpvar_89 >= 0.0)) {
        tmpvar_91 = tmpvar_90;
      } else {
        tmpvar_91 = -(tmpvar_90);
      };
      highp float x_92;
      x_92 = ((a_85 - _DITHERMATRIX[
        int(tmpvar_88)
      ][
        int(tmpvar_91)
      ]) - 0.01);
      if ((x_92 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_33;
  mediump vec3 R_34;
  mediump float intensity_35;
  mediump vec4 noiseTex_36;
  mediump vec4 spColor_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_37 = tmpvar_38;
  spColor_37.w = (spColor_37.w * _SPOpaqueness);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_36 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (((1.99 * tmpvar_39.x) * _SPNoiseScaler) - 1.0);
  intensity_35 = tmpvar_40;
  highp vec3 tmpvar_41;
  highp vec3 I_42;
  I_42 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_36 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_41 = (I_42 - (2.0 * (
    dot (tmpvar_24, I_42)
   * tmpvar_24)));
  R_34 = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = textureCube (_SPCubeMap, R_34).xyz;
  reflection_33 = tmpvar_43;
  highp vec3 tmpvar_44;
  mediump vec3 x_45;
  x_45 = (spColor_37.xyz * _SPOldColor.xyz);
  tmpvar_44 = mix (x_45, ((reflection_33 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_37.xyz = tmpvar_44;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_35 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_35 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_46;
      tmpvar_46 = mix (spColor_37.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_35) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_37.xyz = tmpvar_46;
    };
  };
  highp vec4 tmpvar_47;
  tmpvar_47 = mix (outColor_5, spColor_37, vec4(xlat_mutable_SPIntensity));
  spColor_37 = tmpvar_47;
  outColor_5 = spColor_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_48;
    scrpos_48 = xlv_TEXCOORD3;
    mediump float a_49;
    a_49 = xlv_TEXCOORD3.z;
    if ((a_49 < 0.95)) {
      scrpos_48.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_49 = (a_49 * 17.0);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_48.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float tmpvar_53;
      tmpvar_53 = (scrpos_48.x / 4.0);
      highp float tmpvar_54;
      tmpvar_54 = (fract(abs(tmpvar_53)) * 4.0);
      highp float tmpvar_55;
      if ((tmpvar_53 >= 0.0)) {
        tmpvar_55 = tmpvar_54;
      } else {
        tmpvar_55 = -(tmpvar_54);
      };
      highp float x_56;
      x_56 = ((a_49 - _DITHERMATRIX[
        int(tmpvar_52)
      ][
        int(tmpvar_55)
      ]) - 0.01);
      if ((x_56 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_37.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_33;
  mediump vec3 R_34;
  mediump float intensity_35;
  mediump vec4 noiseTex_36;
  mediump vec4 spColor_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_37 = tmpvar_38;
  spColor_37.w = (spColor_37.w * _SPOpaqueness);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_36 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (((1.99 * tmpvar_39.x) * _SPNoiseScaler) - 1.0);
  intensity_35 = tmpvar_40;
  highp vec3 tmpvar_41;
  highp vec3 I_42;
  I_42 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_36 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_41 = (I_42 - (2.0 * (
    dot (tmpvar_24, I_42)
   * tmpvar_24)));
  R_34 = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = textureCube (_SPCubeMap, R_34).xyz;
  reflection_33 = tmpvar_43;
  highp vec3 tmpvar_44;
  mediump vec3 x_45;
  x_45 = (spColor_37.xyz * _SPOldColor.xyz);
  tmpvar_44 = mix (x_45, ((reflection_33 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_37.xyz = tmpvar_44;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_35 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_35 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_46;
      tmpvar_46 = mix (spColor_37.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_35) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_37.xyz = tmpvar_46;
    };
  };
  highp vec4 tmpvar_47;
  tmpvar_47 = mix (outColor_5, spColor_37, vec4(xlat_mutable_SPIntensity));
  spColor_37 = tmpvar_47;
  outColor_5 = spColor_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_48;
    scrpos_48 = xlv_TEXCOORD3;
    mediump float a_49;
    a_49 = xlv_TEXCOORD3.z;
    if ((a_49 < 0.95)) {
      scrpos_48.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_49 = (a_49 * 17.0);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_48.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float tmpvar_53;
      tmpvar_53 = (scrpos_48.x / 4.0);
      highp float tmpvar_54;
      tmpvar_54 = (fract(abs(tmpvar_53)) * 4.0);
      highp float tmpvar_55;
      if ((tmpvar_53 >= 0.0)) {
        tmpvar_55 = tmpvar_54;
      } else {
        tmpvar_55 = -(tmpvar_54);
      };
      highp float x_56;
      x_56 = ((a_49 - _DITHERMATRIX[
        int(tmpvar_52)
      ][
        int(tmpvar_55)
      ]) - 0.01);
      if ((x_56 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_37.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_33;
  mediump vec3 R_34;
  mediump float intensity_35;
  mediump vec4 noiseTex_36;
  mediump vec4 spColor_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_37 = tmpvar_38;
  spColor_37.w = (spColor_37.w * _SPOpaqueness);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_36 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (((1.99 * tmpvar_39.x) * _SPNoiseScaler) - 1.0);
  intensity_35 = tmpvar_40;
  highp vec3 tmpvar_41;
  highp vec3 I_42;
  I_42 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_36 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_41 = (I_42 - (2.0 * (
    dot (tmpvar_24, I_42)
   * tmpvar_24)));
  R_34 = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = textureCube (_SPCubeMap, R_34).xyz;
  reflection_33 = tmpvar_43;
  highp vec3 tmpvar_44;
  mediump vec3 x_45;
  x_45 = (spColor_37.xyz * _SPOldColor.xyz);
  tmpvar_44 = mix (x_45, ((reflection_33 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_37.xyz = tmpvar_44;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_35 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_35 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_46;
      tmpvar_46 = mix (spColor_37.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_35) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_37.xyz = tmpvar_46;
    };
  };
  highp vec4 tmpvar_47;
  tmpvar_47 = mix (outColor_5, spColor_37, vec4(xlat_mutable_SPIntensity));
  spColor_37 = tmpvar_47;
  outColor_5 = spColor_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_48;
    scrpos_48 = xlv_TEXCOORD3;
    mediump float a_49;
    a_49 = xlv_TEXCOORD3.z;
    if ((a_49 < 0.95)) {
      scrpos_48.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_49 = (a_49 * 17.0);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_48.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float tmpvar_53;
      tmpvar_53 = (scrpos_48.x / 4.0);
      highp float tmpvar_54;
      tmpvar_54 = (fract(abs(tmpvar_53)) * 4.0);
      highp float tmpvar_55;
      if ((tmpvar_53 >= 0.0)) {
        tmpvar_55 = tmpvar_54;
      } else {
        tmpvar_55 = -(tmpvar_54);
      };
      highp float x_56;
      x_56 = ((a_49 - _DITHERMATRIX[
        int(tmpvar_52)
      ][
        int(tmpvar_55)
      ]) - 0.01);
      if ((x_56 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_37.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_76;
  mediump vec3 R_77;
  mediump float intensity_78;
  mediump vec4 noiseTex_79;
  mediump vec4 spColor_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_80 = tmpvar_81;
  spColor_80.w = (spColor_80.w * _SPOpaqueness);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_79 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((1.99 * tmpvar_82.x) * _SPNoiseScaler) - 1.0);
  intensity_78 = tmpvar_83;
  highp vec3 tmpvar_84;
  highp vec3 I_85;
  I_85 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_79 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_84 = (I_85 - (2.0 * (
    dot (tmpvar_67, I_85)
   * tmpvar_67)));
  R_77 = tmpvar_84;
  lowp vec3 tmpvar_86;
  tmpvar_86 = textureCube (_SPCubeMap, R_77).xyz;
  reflection_76 = tmpvar_86;
  highp vec3 tmpvar_87;
  mediump vec3 x_88;
  x_88 = (spColor_80.xyz * _SPOldColor.xyz);
  tmpvar_87 = mix (x_88, ((reflection_76 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_80.xyz = tmpvar_87;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_78 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_78 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_89;
      tmpvar_89 = mix (spColor_80.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_78) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_80.xyz = tmpvar_89;
    };
  };
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (outColor_5, spColor_80, vec4(xlat_mutable_SPIntensity));
  spColor_80 = tmpvar_90;
  outColor_5 = spColor_80;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_91;
    scrpos_91 = xlv_TEXCOORD3;
    mediump float a_92;
    a_92 = xlv_TEXCOORD3.z;
    if ((a_92 < 0.95)) {
      scrpos_91.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_92 = (a_92 * 17.0);
      highp float tmpvar_93;
      tmpvar_93 = (scrpos_91.y / 4.0);
      highp float tmpvar_94;
      tmpvar_94 = (fract(abs(tmpvar_93)) * 4.0);
      highp float tmpvar_95;
      if ((tmpvar_93 >= 0.0)) {
        tmpvar_95 = tmpvar_94;
      } else {
        tmpvar_95 = -(tmpvar_94);
      };
      highp float tmpvar_96;
      tmpvar_96 = (scrpos_91.x / 4.0);
      highp float tmpvar_97;
      tmpvar_97 = (fract(abs(tmpvar_96)) * 4.0);
      highp float tmpvar_98;
      if ((tmpvar_96 >= 0.0)) {
        tmpvar_98 = tmpvar_97;
      } else {
        tmpvar_98 = -(tmpvar_97);
      };
      highp float x_99;
      x_99 = ((a_92 - _DITHERMATRIX[
        int(tmpvar_95)
      ][
        int(tmpvar_98)
      ]) - 0.01);
      if ((x_99 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_80.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_76;
  mediump vec3 R_77;
  mediump float intensity_78;
  mediump vec4 noiseTex_79;
  mediump vec4 spColor_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_80 = tmpvar_81;
  spColor_80.w = (spColor_80.w * _SPOpaqueness);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_79 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((1.99 * tmpvar_82.x) * _SPNoiseScaler) - 1.0);
  intensity_78 = tmpvar_83;
  highp vec3 tmpvar_84;
  highp vec3 I_85;
  I_85 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_79 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_84 = (I_85 - (2.0 * (
    dot (tmpvar_67, I_85)
   * tmpvar_67)));
  R_77 = tmpvar_84;
  lowp vec3 tmpvar_86;
  tmpvar_86 = textureCube (_SPCubeMap, R_77).xyz;
  reflection_76 = tmpvar_86;
  highp vec3 tmpvar_87;
  mediump vec3 x_88;
  x_88 = (spColor_80.xyz * _SPOldColor.xyz);
  tmpvar_87 = mix (x_88, ((reflection_76 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_80.xyz = tmpvar_87;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_78 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_78 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_89;
      tmpvar_89 = mix (spColor_80.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_78) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_80.xyz = tmpvar_89;
    };
  };
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (outColor_5, spColor_80, vec4(xlat_mutable_SPIntensity));
  spColor_80 = tmpvar_90;
  outColor_5 = spColor_80;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_91;
    scrpos_91 = xlv_TEXCOORD3;
    mediump float a_92;
    a_92 = xlv_TEXCOORD3.z;
    if ((a_92 < 0.95)) {
      scrpos_91.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_92 = (a_92 * 17.0);
      highp float tmpvar_93;
      tmpvar_93 = (scrpos_91.y / 4.0);
      highp float tmpvar_94;
      tmpvar_94 = (fract(abs(tmpvar_93)) * 4.0);
      highp float tmpvar_95;
      if ((tmpvar_93 >= 0.0)) {
        tmpvar_95 = tmpvar_94;
      } else {
        tmpvar_95 = -(tmpvar_94);
      };
      highp float tmpvar_96;
      tmpvar_96 = (scrpos_91.x / 4.0);
      highp float tmpvar_97;
      tmpvar_97 = (fract(abs(tmpvar_96)) * 4.0);
      highp float tmpvar_98;
      if ((tmpvar_96 >= 0.0)) {
        tmpvar_98 = tmpvar_97;
      } else {
        tmpvar_98 = -(tmpvar_97);
      };
      highp float x_99;
      x_99 = ((a_92 - _DITHERMATRIX[
        int(tmpvar_95)
      ][
        int(tmpvar_98)
      ]) - 0.01);
      if ((x_99 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_80.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_76;
  mediump vec3 R_77;
  mediump float intensity_78;
  mediump vec4 noiseTex_79;
  mediump vec4 spColor_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_80 = tmpvar_81;
  spColor_80.w = (spColor_80.w * _SPOpaqueness);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_79 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((1.99 * tmpvar_82.x) * _SPNoiseScaler) - 1.0);
  intensity_78 = tmpvar_83;
  highp vec3 tmpvar_84;
  highp vec3 I_85;
  I_85 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_79 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_84 = (I_85 - (2.0 * (
    dot (tmpvar_67, I_85)
   * tmpvar_67)));
  R_77 = tmpvar_84;
  lowp vec3 tmpvar_86;
  tmpvar_86 = textureCube (_SPCubeMap, R_77).xyz;
  reflection_76 = tmpvar_86;
  highp vec3 tmpvar_87;
  mediump vec3 x_88;
  x_88 = (spColor_80.xyz * _SPOldColor.xyz);
  tmpvar_87 = mix (x_88, ((reflection_76 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_80.xyz = tmpvar_87;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_78 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_78 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_89;
      tmpvar_89 = mix (spColor_80.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_78) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_80.xyz = tmpvar_89;
    };
  };
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (outColor_5, spColor_80, vec4(xlat_mutable_SPIntensity));
  spColor_80 = tmpvar_90;
  outColor_5 = spColor_80;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_91;
    scrpos_91 = xlv_TEXCOORD3;
    mediump float a_92;
    a_92 = xlv_TEXCOORD3.z;
    if ((a_92 < 0.95)) {
      scrpos_91.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_92 = (a_92 * 17.0);
      highp float tmpvar_93;
      tmpvar_93 = (scrpos_91.y / 4.0);
      highp float tmpvar_94;
      tmpvar_94 = (fract(abs(tmpvar_93)) * 4.0);
      highp float tmpvar_95;
      if ((tmpvar_93 >= 0.0)) {
        tmpvar_95 = tmpvar_94;
      } else {
        tmpvar_95 = -(tmpvar_94);
      };
      highp float tmpvar_96;
      tmpvar_96 = (scrpos_91.x / 4.0);
      highp float tmpvar_97;
      tmpvar_97 = (fract(abs(tmpvar_96)) * 4.0);
      highp float tmpvar_98;
      if ((tmpvar_96 >= 0.0)) {
        tmpvar_98 = tmpvar_97;
      } else {
        tmpvar_98 = -(tmpvar_97);
      };
      highp float x_99;
      x_99 = ((a_92 - _DITHERMATRIX[
        int(tmpvar_95)
      ][
        int(tmpvar_98)
      ]) - 0.01);
      if ((x_99 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_80.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_13;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_13;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_13;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_13;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_13;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_13;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_33;
  mediump vec3 R_34;
  mediump float intensity_35;
  mediump vec4 noiseTex_36;
  mediump vec4 spColor_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_37 = tmpvar_38;
  spColor_37.w = (spColor_37.w * _SPOpaqueness);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_36 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (((1.99 * tmpvar_39.x) * _SPNoiseScaler) - 1.0);
  intensity_35 = tmpvar_40;
  highp vec3 tmpvar_41;
  highp vec3 I_42;
  I_42 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_36 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_41 = (I_42 - (2.0 * (
    dot (tmpvar_24, I_42)
   * tmpvar_24)));
  R_34 = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = textureCube (_SPCubeMap, R_34).xyz;
  reflection_33 = tmpvar_43;
  highp vec3 tmpvar_44;
  mediump vec3 x_45;
  x_45 = (spColor_37.xyz * _SPOldColor.xyz);
  tmpvar_44 = mix (x_45, ((reflection_33 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_37.xyz = tmpvar_44;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_35 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_35 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_46;
      tmpvar_46 = mix (spColor_37.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_35) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_37.xyz = tmpvar_46;
    };
  };
  highp vec4 tmpvar_47;
  tmpvar_47 = mix (outColor_5, spColor_37, vec4(xlat_mutable_SPIntensity));
  spColor_37 = tmpvar_47;
  outColor_5.w = spColor_37.w;
  mediump vec3 tmpvar_48;
  highp vec3 N_49;
  N_49 = tmpvar_24;
  highp vec3 V_50;
  V_50 = V_2;
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = pow (clamp ((1.001 - 
    dot (V_50, N_49)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_51 = (_RGBias + (tmpvar_52 * _RGScale));
  mediump vec3 tmpvar_53;
  tmpvar_53 = (tmpvar_51 * _RGColor).xyz;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (tmpvar_51, 0.0, 1.0);
  highp vec3 tmpvar_55;
  tmpvar_55 = mix (spColor_37.xyz, tmpvar_53, vec3((tmpvar_54 * _RGRatio)));
  tmpvar_48 = tmpvar_55;
  outColor_5.xyz = tmpvar_48;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_56;
    scrpos_56 = xlv_TEXCOORD3;
    mediump float a_57;
    a_57 = xlv_TEXCOORD3.z;
    if ((a_57 < 0.95)) {
      scrpos_56.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_57 = (a_57 * 17.0);
      highp float tmpvar_58;
      tmpvar_58 = (scrpos_56.y / 4.0);
      highp float tmpvar_59;
      tmpvar_59 = (fract(abs(tmpvar_58)) * 4.0);
      highp float tmpvar_60;
      if ((tmpvar_58 >= 0.0)) {
        tmpvar_60 = tmpvar_59;
      } else {
        tmpvar_60 = -(tmpvar_59);
      };
      highp float tmpvar_61;
      tmpvar_61 = (scrpos_56.x / 4.0);
      highp float tmpvar_62;
      tmpvar_62 = (fract(abs(tmpvar_61)) * 4.0);
      highp float tmpvar_63;
      if ((tmpvar_61 >= 0.0)) {
        tmpvar_63 = tmpvar_62;
      } else {
        tmpvar_63 = -(tmpvar_62);
      };
      highp float x_64;
      x_64 = ((a_57 - _DITHERMATRIX[
        int(tmpvar_60)
      ][
        int(tmpvar_63)
      ]) - 0.01);
      if ((x_64 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_37.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_33;
  mediump vec3 R_34;
  mediump float intensity_35;
  mediump vec4 noiseTex_36;
  mediump vec4 spColor_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_37 = tmpvar_38;
  spColor_37.w = (spColor_37.w * _SPOpaqueness);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_36 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (((1.99 * tmpvar_39.x) * _SPNoiseScaler) - 1.0);
  intensity_35 = tmpvar_40;
  highp vec3 tmpvar_41;
  highp vec3 I_42;
  I_42 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_36 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_41 = (I_42 - (2.0 * (
    dot (tmpvar_24, I_42)
   * tmpvar_24)));
  R_34 = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = textureCube (_SPCubeMap, R_34).xyz;
  reflection_33 = tmpvar_43;
  highp vec3 tmpvar_44;
  mediump vec3 x_45;
  x_45 = (spColor_37.xyz * _SPOldColor.xyz);
  tmpvar_44 = mix (x_45, ((reflection_33 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_37.xyz = tmpvar_44;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_35 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_35 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_46;
      tmpvar_46 = mix (spColor_37.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_35) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_37.xyz = tmpvar_46;
    };
  };
  highp vec4 tmpvar_47;
  tmpvar_47 = mix (outColor_5, spColor_37, vec4(xlat_mutable_SPIntensity));
  spColor_37 = tmpvar_47;
  outColor_5.w = spColor_37.w;
  mediump vec3 tmpvar_48;
  highp vec3 N_49;
  N_49 = tmpvar_24;
  highp vec3 V_50;
  V_50 = V_2;
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = pow (clamp ((1.001 - 
    dot (V_50, N_49)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_51 = (_RGBias + (tmpvar_52 * _RGScale));
  mediump vec3 tmpvar_53;
  tmpvar_53 = (tmpvar_51 * _RGColor).xyz;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (tmpvar_51, 0.0, 1.0);
  highp vec3 tmpvar_55;
  tmpvar_55 = mix (spColor_37.xyz, tmpvar_53, vec3((tmpvar_54 * _RGRatio)));
  tmpvar_48 = tmpvar_55;
  outColor_5.xyz = tmpvar_48;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_56;
    scrpos_56 = xlv_TEXCOORD3;
    mediump float a_57;
    a_57 = xlv_TEXCOORD3.z;
    if ((a_57 < 0.95)) {
      scrpos_56.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_57 = (a_57 * 17.0);
      highp float tmpvar_58;
      tmpvar_58 = (scrpos_56.y / 4.0);
      highp float tmpvar_59;
      tmpvar_59 = (fract(abs(tmpvar_58)) * 4.0);
      highp float tmpvar_60;
      if ((tmpvar_58 >= 0.0)) {
        tmpvar_60 = tmpvar_59;
      } else {
        tmpvar_60 = -(tmpvar_59);
      };
      highp float tmpvar_61;
      tmpvar_61 = (scrpos_56.x / 4.0);
      highp float tmpvar_62;
      tmpvar_62 = (fract(abs(tmpvar_61)) * 4.0);
      highp float tmpvar_63;
      if ((tmpvar_61 >= 0.0)) {
        tmpvar_63 = tmpvar_62;
      } else {
        tmpvar_63 = -(tmpvar_62);
      };
      highp float x_64;
      x_64 = ((a_57 - _DITHERMATRIX[
        int(tmpvar_60)
      ][
        int(tmpvar_63)
      ]) - 0.01);
      if ((x_64 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_37.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_33;
  mediump vec3 R_34;
  mediump float intensity_35;
  mediump vec4 noiseTex_36;
  mediump vec4 spColor_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_37 = tmpvar_38;
  spColor_37.w = (spColor_37.w * _SPOpaqueness);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_36 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (((1.99 * tmpvar_39.x) * _SPNoiseScaler) - 1.0);
  intensity_35 = tmpvar_40;
  highp vec3 tmpvar_41;
  highp vec3 I_42;
  I_42 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_36 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_41 = (I_42 - (2.0 * (
    dot (tmpvar_24, I_42)
   * tmpvar_24)));
  R_34 = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = textureCube (_SPCubeMap, R_34).xyz;
  reflection_33 = tmpvar_43;
  highp vec3 tmpvar_44;
  mediump vec3 x_45;
  x_45 = (spColor_37.xyz * _SPOldColor.xyz);
  tmpvar_44 = mix (x_45, ((reflection_33 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_37.xyz = tmpvar_44;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_35 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_35 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_46;
      tmpvar_46 = mix (spColor_37.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_35) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_37.xyz = tmpvar_46;
    };
  };
  highp vec4 tmpvar_47;
  tmpvar_47 = mix (outColor_5, spColor_37, vec4(xlat_mutable_SPIntensity));
  spColor_37 = tmpvar_47;
  outColor_5.w = spColor_37.w;
  mediump vec3 tmpvar_48;
  highp vec3 N_49;
  N_49 = tmpvar_24;
  highp vec3 V_50;
  V_50 = V_2;
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = pow (clamp ((1.001 - 
    dot (V_50, N_49)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_51 = (_RGBias + (tmpvar_52 * _RGScale));
  mediump vec3 tmpvar_53;
  tmpvar_53 = (tmpvar_51 * _RGColor).xyz;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (tmpvar_51, 0.0, 1.0);
  highp vec3 tmpvar_55;
  tmpvar_55 = mix (spColor_37.xyz, tmpvar_53, vec3((tmpvar_54 * _RGRatio)));
  tmpvar_48 = tmpvar_55;
  outColor_5.xyz = tmpvar_48;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_56;
    scrpos_56 = xlv_TEXCOORD3;
    mediump float a_57;
    a_57 = xlv_TEXCOORD3.z;
    if ((a_57 < 0.95)) {
      scrpos_56.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_57 = (a_57 * 17.0);
      highp float tmpvar_58;
      tmpvar_58 = (scrpos_56.y / 4.0);
      highp float tmpvar_59;
      tmpvar_59 = (fract(abs(tmpvar_58)) * 4.0);
      highp float tmpvar_60;
      if ((tmpvar_58 >= 0.0)) {
        tmpvar_60 = tmpvar_59;
      } else {
        tmpvar_60 = -(tmpvar_59);
      };
      highp float tmpvar_61;
      tmpvar_61 = (scrpos_56.x / 4.0);
      highp float tmpvar_62;
      tmpvar_62 = (fract(abs(tmpvar_61)) * 4.0);
      highp float tmpvar_63;
      if ((tmpvar_61 >= 0.0)) {
        tmpvar_63 = tmpvar_62;
      } else {
        tmpvar_63 = -(tmpvar_62);
      };
      highp float x_64;
      x_64 = ((a_57 - _DITHERMATRIX[
        int(tmpvar_60)
      ][
        int(tmpvar_63)
      ]) - 0.01);
      if ((x_64 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_37.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_76;
  mediump vec3 R_77;
  mediump float intensity_78;
  mediump vec4 noiseTex_79;
  mediump vec4 spColor_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_80 = tmpvar_81;
  spColor_80.w = (spColor_80.w * _SPOpaqueness);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_79 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((1.99 * tmpvar_82.x) * _SPNoiseScaler) - 1.0);
  intensity_78 = tmpvar_83;
  highp vec3 tmpvar_84;
  highp vec3 I_85;
  I_85 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_79 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_84 = (I_85 - (2.0 * (
    dot (tmpvar_67, I_85)
   * tmpvar_67)));
  R_77 = tmpvar_84;
  lowp vec3 tmpvar_86;
  tmpvar_86 = textureCube (_SPCubeMap, R_77).xyz;
  reflection_76 = tmpvar_86;
  highp vec3 tmpvar_87;
  mediump vec3 x_88;
  x_88 = (spColor_80.xyz * _SPOldColor.xyz);
  tmpvar_87 = mix (x_88, ((reflection_76 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_80.xyz = tmpvar_87;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_78 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_78 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_89;
      tmpvar_89 = mix (spColor_80.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_78) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_80.xyz = tmpvar_89;
    };
  };
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (outColor_5, spColor_80, vec4(xlat_mutable_SPIntensity));
  spColor_80 = tmpvar_90;
  outColor_5.w = spColor_80.w;
  mediump vec3 tmpvar_91;
  highp vec3 N_92;
  N_92 = tmpvar_67;
  highp vec3 V_93;
  V_93 = V_2;
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = pow (clamp ((1.001 - 
    dot (V_93, N_92)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_94 = (_RGBias + (tmpvar_95 * _RGScale));
  mediump vec3 tmpvar_96;
  tmpvar_96 = (tmpvar_94 * _RGColor).xyz;
  mediump float tmpvar_97;
  tmpvar_97 = clamp (tmpvar_94, 0.0, 1.0);
  highp vec3 tmpvar_98;
  tmpvar_98 = mix (spColor_80.xyz, tmpvar_96, vec3((tmpvar_97 * _RGRatio)));
  tmpvar_91 = tmpvar_98;
  outColor_5.xyz = tmpvar_91;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_99;
    scrpos_99 = xlv_TEXCOORD3;
    mediump float a_100;
    a_100 = xlv_TEXCOORD3.z;
    if ((a_100 < 0.95)) {
      scrpos_99.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_100 = (a_100 * 17.0);
      highp float tmpvar_101;
      tmpvar_101 = (scrpos_99.y / 4.0);
      highp float tmpvar_102;
      tmpvar_102 = (fract(abs(tmpvar_101)) * 4.0);
      highp float tmpvar_103;
      if ((tmpvar_101 >= 0.0)) {
        tmpvar_103 = tmpvar_102;
      } else {
        tmpvar_103 = -(tmpvar_102);
      };
      highp float tmpvar_104;
      tmpvar_104 = (scrpos_99.x / 4.0);
      highp float tmpvar_105;
      tmpvar_105 = (fract(abs(tmpvar_104)) * 4.0);
      highp float tmpvar_106;
      if ((tmpvar_104 >= 0.0)) {
        tmpvar_106 = tmpvar_105;
      } else {
        tmpvar_106 = -(tmpvar_105);
      };
      highp float x_107;
      x_107 = ((a_100 - _DITHERMATRIX[
        int(tmpvar_103)
      ][
        int(tmpvar_106)
      ]) - 0.01);
      if ((x_107 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_80.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_76;
  mediump vec3 R_77;
  mediump float intensity_78;
  mediump vec4 noiseTex_79;
  mediump vec4 spColor_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_80 = tmpvar_81;
  spColor_80.w = (spColor_80.w * _SPOpaqueness);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_79 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((1.99 * tmpvar_82.x) * _SPNoiseScaler) - 1.0);
  intensity_78 = tmpvar_83;
  highp vec3 tmpvar_84;
  highp vec3 I_85;
  I_85 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_79 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_84 = (I_85 - (2.0 * (
    dot (tmpvar_67, I_85)
   * tmpvar_67)));
  R_77 = tmpvar_84;
  lowp vec3 tmpvar_86;
  tmpvar_86 = textureCube (_SPCubeMap, R_77).xyz;
  reflection_76 = tmpvar_86;
  highp vec3 tmpvar_87;
  mediump vec3 x_88;
  x_88 = (spColor_80.xyz * _SPOldColor.xyz);
  tmpvar_87 = mix (x_88, ((reflection_76 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_80.xyz = tmpvar_87;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_78 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_78 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_89;
      tmpvar_89 = mix (spColor_80.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_78) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_80.xyz = tmpvar_89;
    };
  };
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (outColor_5, spColor_80, vec4(xlat_mutable_SPIntensity));
  spColor_80 = tmpvar_90;
  outColor_5.w = spColor_80.w;
  mediump vec3 tmpvar_91;
  highp vec3 N_92;
  N_92 = tmpvar_67;
  highp vec3 V_93;
  V_93 = V_2;
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = pow (clamp ((1.001 - 
    dot (V_93, N_92)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_94 = (_RGBias + (tmpvar_95 * _RGScale));
  mediump vec3 tmpvar_96;
  tmpvar_96 = (tmpvar_94 * _RGColor).xyz;
  mediump float tmpvar_97;
  tmpvar_97 = clamp (tmpvar_94, 0.0, 1.0);
  highp vec3 tmpvar_98;
  tmpvar_98 = mix (spColor_80.xyz, tmpvar_96, vec3((tmpvar_97 * _RGRatio)));
  tmpvar_91 = tmpvar_98;
  outColor_5.xyz = tmpvar_91;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_99;
    scrpos_99 = xlv_TEXCOORD3;
    mediump float a_100;
    a_100 = xlv_TEXCOORD3.z;
    if ((a_100 < 0.95)) {
      scrpos_99.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_100 = (a_100 * 17.0);
      highp float tmpvar_101;
      tmpvar_101 = (scrpos_99.y / 4.0);
      highp float tmpvar_102;
      tmpvar_102 = (fract(abs(tmpvar_101)) * 4.0);
      highp float tmpvar_103;
      if ((tmpvar_101 >= 0.0)) {
        tmpvar_103 = tmpvar_102;
      } else {
        tmpvar_103 = -(tmpvar_102);
      };
      highp float tmpvar_104;
      tmpvar_104 = (scrpos_99.x / 4.0);
      highp float tmpvar_105;
      tmpvar_105 = (fract(abs(tmpvar_104)) * 4.0);
      highp float tmpvar_106;
      if ((tmpvar_104 >= 0.0)) {
        tmpvar_106 = tmpvar_105;
      } else {
        tmpvar_106 = -(tmpvar_105);
      };
      highp float x_107;
      x_107 = ((a_100 - _DITHERMATRIX[
        int(tmpvar_103)
      ][
        int(tmpvar_106)
      ]) - 0.01);
      if ((x_107 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_80.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_76;
  mediump vec3 R_77;
  mediump float intensity_78;
  mediump vec4 noiseTex_79;
  mediump vec4 spColor_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_80 = tmpvar_81;
  spColor_80.w = (spColor_80.w * _SPOpaqueness);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_79 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((1.99 * tmpvar_82.x) * _SPNoiseScaler) - 1.0);
  intensity_78 = tmpvar_83;
  highp vec3 tmpvar_84;
  highp vec3 I_85;
  I_85 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_79 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_84 = (I_85 - (2.0 * (
    dot (tmpvar_67, I_85)
   * tmpvar_67)));
  R_77 = tmpvar_84;
  lowp vec3 tmpvar_86;
  tmpvar_86 = textureCube (_SPCubeMap, R_77).xyz;
  reflection_76 = tmpvar_86;
  highp vec3 tmpvar_87;
  mediump vec3 x_88;
  x_88 = (spColor_80.xyz * _SPOldColor.xyz);
  tmpvar_87 = mix (x_88, ((reflection_76 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_80.xyz = tmpvar_87;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_78 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_78 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_89;
      tmpvar_89 = mix (spColor_80.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_78) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_80.xyz = tmpvar_89;
    };
  };
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (outColor_5, spColor_80, vec4(xlat_mutable_SPIntensity));
  spColor_80 = tmpvar_90;
  outColor_5.w = spColor_80.w;
  mediump vec3 tmpvar_91;
  highp vec3 N_92;
  N_92 = tmpvar_67;
  highp vec3 V_93;
  V_93 = V_2;
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = pow (clamp ((1.001 - 
    dot (V_93, N_92)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_94 = (_RGBias + (tmpvar_95 * _RGScale));
  mediump vec3 tmpvar_96;
  tmpvar_96 = (tmpvar_94 * _RGColor).xyz;
  mediump float tmpvar_97;
  tmpvar_97 = clamp (tmpvar_94, 0.0, 1.0);
  highp vec3 tmpvar_98;
  tmpvar_98 = mix (spColor_80.xyz, tmpvar_96, vec3((tmpvar_97 * _RGRatio)));
  tmpvar_91 = tmpvar_98;
  outColor_5.xyz = tmpvar_91;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_99;
    scrpos_99 = xlv_TEXCOORD3;
    mediump float a_100;
    a_100 = xlv_TEXCOORD3.z;
    if ((a_100 < 0.95)) {
      scrpos_99.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_100 = (a_100 * 17.0);
      highp float tmpvar_101;
      tmpvar_101 = (scrpos_99.y / 4.0);
      highp float tmpvar_102;
      tmpvar_102 = (fract(abs(tmpvar_101)) * 4.0);
      highp float tmpvar_103;
      if ((tmpvar_101 >= 0.0)) {
        tmpvar_103 = tmpvar_102;
      } else {
        tmpvar_103 = -(tmpvar_102);
      };
      highp float tmpvar_104;
      tmpvar_104 = (scrpos_99.x / 4.0);
      highp float tmpvar_105;
      tmpvar_105 = (fract(abs(tmpvar_104)) * 4.0);
      highp float tmpvar_106;
      if ((tmpvar_104 >= 0.0)) {
        tmpvar_106 = tmpvar_105;
      } else {
        tmpvar_106 = -(tmpvar_105);
      };
      highp float x_107;
      x_107 = ((a_100 - _DITHERMATRIX[
        int(tmpvar_103)
      ][
        int(tmpvar_106)
      ]) - 0.01);
      if ((x_107 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_80.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_76;
    scrpos_76 = xlv_TEXCOORD3;
    mediump float a_77;
    a_77 = xlv_TEXCOORD3.z;
    if ((a_77 < 0.95)) {
      scrpos_76.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_77 = (a_77 * 17.0);
      highp float tmpvar_78;
      tmpvar_78 = (scrpos_76.y / 4.0);
      highp float tmpvar_79;
      tmpvar_79 = (fract(abs(tmpvar_78)) * 4.0);
      highp float tmpvar_80;
      if ((tmpvar_78 >= 0.0)) {
        tmpvar_80 = tmpvar_79;
      } else {
        tmpvar_80 = -(tmpvar_79);
      };
      highp float tmpvar_81;
      tmpvar_81 = (scrpos_76.x / 4.0);
      highp float tmpvar_82;
      tmpvar_82 = (fract(abs(tmpvar_81)) * 4.0);
      highp float tmpvar_83;
      if ((tmpvar_81 >= 0.0)) {
        tmpvar_83 = tmpvar_82;
      } else {
        tmpvar_83 = -(tmpvar_82);
      };
      highp float x_84;
      x_84 = ((a_77 - _DITHERMATRIX[
        int(tmpvar_80)
      ][
        int(tmpvar_83)
      ]) - 0.01);
      if ((x_84 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_76;
    scrpos_76 = xlv_TEXCOORD3;
    mediump float a_77;
    a_77 = xlv_TEXCOORD3.z;
    if ((a_77 < 0.95)) {
      scrpos_76.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_77 = (a_77 * 17.0);
      highp float tmpvar_78;
      tmpvar_78 = (scrpos_76.y / 4.0);
      highp float tmpvar_79;
      tmpvar_79 = (fract(abs(tmpvar_78)) * 4.0);
      highp float tmpvar_80;
      if ((tmpvar_78 >= 0.0)) {
        tmpvar_80 = tmpvar_79;
      } else {
        tmpvar_80 = -(tmpvar_79);
      };
      highp float tmpvar_81;
      tmpvar_81 = (scrpos_76.x / 4.0);
      highp float tmpvar_82;
      tmpvar_82 = (fract(abs(tmpvar_81)) * 4.0);
      highp float tmpvar_83;
      if ((tmpvar_81 >= 0.0)) {
        tmpvar_83 = tmpvar_82;
      } else {
        tmpvar_83 = -(tmpvar_82);
      };
      highp float x_84;
      x_84 = ((a_77 - _DITHERMATRIX[
        int(tmpvar_80)
      ][
        int(tmpvar_83)
      ]) - 0.01);
      if ((x_84 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_76;
    scrpos_76 = xlv_TEXCOORD3;
    mediump float a_77;
    a_77 = xlv_TEXCOORD3.z;
    if ((a_77 < 0.95)) {
      scrpos_76.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_77 = (a_77 * 17.0);
      highp float tmpvar_78;
      tmpvar_78 = (scrpos_76.y / 4.0);
      highp float tmpvar_79;
      tmpvar_79 = (fract(abs(tmpvar_78)) * 4.0);
      highp float tmpvar_80;
      if ((tmpvar_78 >= 0.0)) {
        tmpvar_80 = tmpvar_79;
      } else {
        tmpvar_80 = -(tmpvar_79);
      };
      highp float tmpvar_81;
      tmpvar_81 = (scrpos_76.x / 4.0);
      highp float tmpvar_82;
      tmpvar_82 = (fract(abs(tmpvar_81)) * 4.0);
      highp float tmpvar_83;
      if ((tmpvar_81 >= 0.0)) {
        tmpvar_83 = tmpvar_82;
      } else {
        tmpvar_83 = -(tmpvar_82);
      };
      highp float x_84;
      x_84 = ((a_77 - _DITHERMATRIX[
        int(tmpvar_80)
      ][
        int(tmpvar_83)
      ]) - 0.01);
      if ((x_84 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_13;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_13;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_13;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_13;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_13;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_13;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = tmpvar_24;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (outColor_5.xyz, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_41;
    scrpos_41 = xlv_TEXCOORD3;
    mediump float a_42;
    a_42 = xlv_TEXCOORD3.z;
    if ((a_42 < 0.95)) {
      scrpos_41.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_42 = (a_42 * 17.0);
      highp float tmpvar_43;
      tmpvar_43 = (scrpos_41.y / 4.0);
      highp float tmpvar_44;
      tmpvar_44 = (fract(abs(tmpvar_43)) * 4.0);
      highp float tmpvar_45;
      if ((tmpvar_43 >= 0.0)) {
        tmpvar_45 = tmpvar_44;
      } else {
        tmpvar_45 = -(tmpvar_44);
      };
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_41.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float x_49;
      x_49 = ((a_42 - _DITHERMATRIX[
        int(tmpvar_45)
      ][
        int(tmpvar_48)
      ]) - 0.01);
      if ((x_49 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = tmpvar_24;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (outColor_5.xyz, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_41;
    scrpos_41 = xlv_TEXCOORD3;
    mediump float a_42;
    a_42 = xlv_TEXCOORD3.z;
    if ((a_42 < 0.95)) {
      scrpos_41.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_42 = (a_42 * 17.0);
      highp float tmpvar_43;
      tmpvar_43 = (scrpos_41.y / 4.0);
      highp float tmpvar_44;
      tmpvar_44 = (fract(abs(tmpvar_43)) * 4.0);
      highp float tmpvar_45;
      if ((tmpvar_43 >= 0.0)) {
        tmpvar_45 = tmpvar_44;
      } else {
        tmpvar_45 = -(tmpvar_44);
      };
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_41.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float x_49;
      x_49 = ((a_42 - _DITHERMATRIX[
        int(tmpvar_45)
      ][
        int(tmpvar_48)
      ]) - 0.01);
      if ((x_49 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = tmpvar_24;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (outColor_5.xyz, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_41;
    scrpos_41 = xlv_TEXCOORD3;
    mediump float a_42;
    a_42 = xlv_TEXCOORD3.z;
    if ((a_42 < 0.95)) {
      scrpos_41.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_42 = (a_42 * 17.0);
      highp float tmpvar_43;
      tmpvar_43 = (scrpos_41.y / 4.0);
      highp float tmpvar_44;
      tmpvar_44 = (fract(abs(tmpvar_43)) * 4.0);
      highp float tmpvar_45;
      if ((tmpvar_43 >= 0.0)) {
        tmpvar_45 = tmpvar_44;
      } else {
        tmpvar_45 = -(tmpvar_44);
      };
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_41.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float x_49;
      x_49 = ((a_42 - _DITHERMATRIX[
        int(tmpvar_45)
      ][
        int(tmpvar_48)
      ]) - 0.01);
      if ((x_49 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_76;
  highp vec3 N_77;
  N_77 = tmpvar_67;
  highp vec3 V_78;
  V_78 = V_2;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = pow (clamp ((1.001 - 
    dot (V_78, N_77)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_79 = (_RGBias + (tmpvar_80 * _RGScale));
  mediump vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_79 * _RGColor).xyz;
  mediump float tmpvar_82;
  tmpvar_82 = clamp (tmpvar_79, 0.0, 1.0);
  highp vec3 tmpvar_83;
  tmpvar_83 = mix (outColor_5.xyz, tmpvar_81, vec3((tmpvar_82 * _RGRatio)));
  tmpvar_76 = tmpvar_83;
  outColor_5.xyz = tmpvar_76;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_84;
    scrpos_84 = xlv_TEXCOORD3;
    mediump float a_85;
    a_85 = xlv_TEXCOORD3.z;
    if ((a_85 < 0.95)) {
      scrpos_84.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_85 = (a_85 * 17.0);
      highp float tmpvar_86;
      tmpvar_86 = (scrpos_84.y / 4.0);
      highp float tmpvar_87;
      tmpvar_87 = (fract(abs(tmpvar_86)) * 4.0);
      highp float tmpvar_88;
      if ((tmpvar_86 >= 0.0)) {
        tmpvar_88 = tmpvar_87;
      } else {
        tmpvar_88 = -(tmpvar_87);
      };
      highp float tmpvar_89;
      tmpvar_89 = (scrpos_84.x / 4.0);
      highp float tmpvar_90;
      tmpvar_90 = (fract(abs(tmpvar_89)) * 4.0);
      highp float tmpvar_91;
      if ((tmpvar_89 >= 0.0)) {
        tmpvar_91 = tmpvar_90;
      } else {
        tmpvar_91 = -(tmpvar_90);
      };
      highp float x_92;
      x_92 = ((a_85 - _DITHERMATRIX[
        int(tmpvar_88)
      ][
        int(tmpvar_91)
      ]) - 0.01);
      if ((x_92 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_76;
  highp vec3 N_77;
  N_77 = tmpvar_67;
  highp vec3 V_78;
  V_78 = V_2;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = pow (clamp ((1.001 - 
    dot (V_78, N_77)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_79 = (_RGBias + (tmpvar_80 * _RGScale));
  mediump vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_79 * _RGColor).xyz;
  mediump float tmpvar_82;
  tmpvar_82 = clamp (tmpvar_79, 0.0, 1.0);
  highp vec3 tmpvar_83;
  tmpvar_83 = mix (outColor_5.xyz, tmpvar_81, vec3((tmpvar_82 * _RGRatio)));
  tmpvar_76 = tmpvar_83;
  outColor_5.xyz = tmpvar_76;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_84;
    scrpos_84 = xlv_TEXCOORD3;
    mediump float a_85;
    a_85 = xlv_TEXCOORD3.z;
    if ((a_85 < 0.95)) {
      scrpos_84.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_85 = (a_85 * 17.0);
      highp float tmpvar_86;
      tmpvar_86 = (scrpos_84.y / 4.0);
      highp float tmpvar_87;
      tmpvar_87 = (fract(abs(tmpvar_86)) * 4.0);
      highp float tmpvar_88;
      if ((tmpvar_86 >= 0.0)) {
        tmpvar_88 = tmpvar_87;
      } else {
        tmpvar_88 = -(tmpvar_87);
      };
      highp float tmpvar_89;
      tmpvar_89 = (scrpos_84.x / 4.0);
      highp float tmpvar_90;
      tmpvar_90 = (fract(abs(tmpvar_89)) * 4.0);
      highp float tmpvar_91;
      if ((tmpvar_89 >= 0.0)) {
        tmpvar_91 = tmpvar_90;
      } else {
        tmpvar_91 = -(tmpvar_90);
      };
      highp float x_92;
      x_92 = ((a_85 - _DITHERMATRIX[
        int(tmpvar_88)
      ][
        int(tmpvar_91)
      ]) - 0.01);
      if ((x_92 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_76;
  highp vec3 N_77;
  N_77 = tmpvar_67;
  highp vec3 V_78;
  V_78 = V_2;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = pow (clamp ((1.001 - 
    dot (V_78, N_77)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_79 = (_RGBias + (tmpvar_80 * _RGScale));
  mediump vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_79 * _RGColor).xyz;
  mediump float tmpvar_82;
  tmpvar_82 = clamp (tmpvar_79, 0.0, 1.0);
  highp vec3 tmpvar_83;
  tmpvar_83 = mix (outColor_5.xyz, tmpvar_81, vec3((tmpvar_82 * _RGRatio)));
  tmpvar_76 = tmpvar_83;
  outColor_5.xyz = tmpvar_76;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_84;
    scrpos_84 = xlv_TEXCOORD3;
    mediump float a_85;
    a_85 = xlv_TEXCOORD3.z;
    if ((a_85 < 0.95)) {
      scrpos_84.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_85 = (a_85 * 17.0);
      highp float tmpvar_86;
      tmpvar_86 = (scrpos_84.y / 4.0);
      highp float tmpvar_87;
      tmpvar_87 = (fract(abs(tmpvar_86)) * 4.0);
      highp float tmpvar_88;
      if ((tmpvar_86 >= 0.0)) {
        tmpvar_88 = tmpvar_87;
      } else {
        tmpvar_88 = -(tmpvar_87);
      };
      highp float tmpvar_89;
      tmpvar_89 = (scrpos_84.x / 4.0);
      highp float tmpvar_90;
      tmpvar_90 = (fract(abs(tmpvar_89)) * 4.0);
      highp float tmpvar_91;
      if ((tmpvar_89 >= 0.0)) {
        tmpvar_91 = tmpvar_90;
      } else {
        tmpvar_91 = -(tmpvar_90);
      };
      highp float x_92;
      x_92 = ((a_85 - _DITHERMATRIX[
        int(tmpvar_88)
      ][
        int(tmpvar_91)
      ]) - 0.01);
      if ((x_92 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_33;
  mediump vec3 R_34;
  mediump float intensity_35;
  mediump vec4 noiseTex_36;
  mediump vec4 spColor_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_37 = tmpvar_38;
  spColor_37.w = (spColor_37.w * _SPOpaqueness);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_36 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (((1.99 * tmpvar_39.x) * _SPNoiseScaler) - 1.0);
  intensity_35 = tmpvar_40;
  highp vec3 tmpvar_41;
  highp vec3 I_42;
  I_42 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_36 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_41 = (I_42 - (2.0 * (
    dot (tmpvar_24, I_42)
   * tmpvar_24)));
  R_34 = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = textureCube (_SPCubeMap, R_34).xyz;
  reflection_33 = tmpvar_43;
  highp vec3 tmpvar_44;
  mediump vec3 x_45;
  x_45 = (spColor_37.xyz * _SPOldColor.xyz);
  tmpvar_44 = mix (x_45, ((reflection_33 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_37.xyz = tmpvar_44;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_35 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_35 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_46;
      tmpvar_46 = mix (spColor_37.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_35) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_37.xyz = tmpvar_46;
    };
  };
  highp vec4 tmpvar_47;
  tmpvar_47 = mix (outColor_5, spColor_37, vec4(xlat_mutable_SPIntensity));
  spColor_37 = tmpvar_47;
  outColor_5 = spColor_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_48;
    scrpos_48 = xlv_TEXCOORD3;
    mediump float a_49;
    a_49 = xlv_TEXCOORD3.z;
    if ((a_49 < 0.95)) {
      scrpos_48.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_49 = (a_49 * 17.0);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_48.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float tmpvar_53;
      tmpvar_53 = (scrpos_48.x / 4.0);
      highp float tmpvar_54;
      tmpvar_54 = (fract(abs(tmpvar_53)) * 4.0);
      highp float tmpvar_55;
      if ((tmpvar_53 >= 0.0)) {
        tmpvar_55 = tmpvar_54;
      } else {
        tmpvar_55 = -(tmpvar_54);
      };
      highp float x_56;
      x_56 = ((a_49 - _DITHERMATRIX[
        int(tmpvar_52)
      ][
        int(tmpvar_55)
      ]) - 0.01);
      if ((x_56 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_37.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_33;
  mediump vec3 R_34;
  mediump float intensity_35;
  mediump vec4 noiseTex_36;
  mediump vec4 spColor_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_37 = tmpvar_38;
  spColor_37.w = (spColor_37.w * _SPOpaqueness);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_36 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (((1.99 * tmpvar_39.x) * _SPNoiseScaler) - 1.0);
  intensity_35 = tmpvar_40;
  highp vec3 tmpvar_41;
  highp vec3 I_42;
  I_42 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_36 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_41 = (I_42 - (2.0 * (
    dot (tmpvar_24, I_42)
   * tmpvar_24)));
  R_34 = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = textureCube (_SPCubeMap, R_34).xyz;
  reflection_33 = tmpvar_43;
  highp vec3 tmpvar_44;
  mediump vec3 x_45;
  x_45 = (spColor_37.xyz * _SPOldColor.xyz);
  tmpvar_44 = mix (x_45, ((reflection_33 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_37.xyz = tmpvar_44;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_35 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_35 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_46;
      tmpvar_46 = mix (spColor_37.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_35) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_37.xyz = tmpvar_46;
    };
  };
  highp vec4 tmpvar_47;
  tmpvar_47 = mix (outColor_5, spColor_37, vec4(xlat_mutable_SPIntensity));
  spColor_37 = tmpvar_47;
  outColor_5 = spColor_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_48;
    scrpos_48 = xlv_TEXCOORD3;
    mediump float a_49;
    a_49 = xlv_TEXCOORD3.z;
    if ((a_49 < 0.95)) {
      scrpos_48.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_49 = (a_49 * 17.0);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_48.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float tmpvar_53;
      tmpvar_53 = (scrpos_48.x / 4.0);
      highp float tmpvar_54;
      tmpvar_54 = (fract(abs(tmpvar_53)) * 4.0);
      highp float tmpvar_55;
      if ((tmpvar_53 >= 0.0)) {
        tmpvar_55 = tmpvar_54;
      } else {
        tmpvar_55 = -(tmpvar_54);
      };
      highp float x_56;
      x_56 = ((a_49 - _DITHERMATRIX[
        int(tmpvar_52)
      ][
        int(tmpvar_55)
      ]) - 0.01);
      if ((x_56 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_37.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_33;
  mediump vec3 R_34;
  mediump float intensity_35;
  mediump vec4 noiseTex_36;
  mediump vec4 spColor_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_37 = tmpvar_38;
  spColor_37.w = (spColor_37.w * _SPOpaqueness);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_36 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (((1.99 * tmpvar_39.x) * _SPNoiseScaler) - 1.0);
  intensity_35 = tmpvar_40;
  highp vec3 tmpvar_41;
  highp vec3 I_42;
  I_42 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_36 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_41 = (I_42 - (2.0 * (
    dot (tmpvar_24, I_42)
   * tmpvar_24)));
  R_34 = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = textureCube (_SPCubeMap, R_34).xyz;
  reflection_33 = tmpvar_43;
  highp vec3 tmpvar_44;
  mediump vec3 x_45;
  x_45 = (spColor_37.xyz * _SPOldColor.xyz);
  tmpvar_44 = mix (x_45, ((reflection_33 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_37.xyz = tmpvar_44;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_35 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_35 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_46;
      tmpvar_46 = mix (spColor_37.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_35) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_37.xyz = tmpvar_46;
    };
  };
  highp vec4 tmpvar_47;
  tmpvar_47 = mix (outColor_5, spColor_37, vec4(xlat_mutable_SPIntensity));
  spColor_37 = tmpvar_47;
  outColor_5 = spColor_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_48;
    scrpos_48 = xlv_TEXCOORD3;
    mediump float a_49;
    a_49 = xlv_TEXCOORD3.z;
    if ((a_49 < 0.95)) {
      scrpos_48.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_49 = (a_49 * 17.0);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_48.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float tmpvar_53;
      tmpvar_53 = (scrpos_48.x / 4.0);
      highp float tmpvar_54;
      tmpvar_54 = (fract(abs(tmpvar_53)) * 4.0);
      highp float tmpvar_55;
      if ((tmpvar_53 >= 0.0)) {
        tmpvar_55 = tmpvar_54;
      } else {
        tmpvar_55 = -(tmpvar_54);
      };
      highp float x_56;
      x_56 = ((a_49 - _DITHERMATRIX[
        int(tmpvar_52)
      ][
        int(tmpvar_55)
      ]) - 0.01);
      if ((x_56 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_37.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_76;
  mediump vec3 R_77;
  mediump float intensity_78;
  mediump vec4 noiseTex_79;
  mediump vec4 spColor_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_80 = tmpvar_81;
  spColor_80.w = (spColor_80.w * _SPOpaqueness);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_79 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((1.99 * tmpvar_82.x) * _SPNoiseScaler) - 1.0);
  intensity_78 = tmpvar_83;
  highp vec3 tmpvar_84;
  highp vec3 I_85;
  I_85 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_79 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_84 = (I_85 - (2.0 * (
    dot (tmpvar_67, I_85)
   * tmpvar_67)));
  R_77 = tmpvar_84;
  lowp vec3 tmpvar_86;
  tmpvar_86 = textureCube (_SPCubeMap, R_77).xyz;
  reflection_76 = tmpvar_86;
  highp vec3 tmpvar_87;
  mediump vec3 x_88;
  x_88 = (spColor_80.xyz * _SPOldColor.xyz);
  tmpvar_87 = mix (x_88, ((reflection_76 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_80.xyz = tmpvar_87;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_78 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_78 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_89;
      tmpvar_89 = mix (spColor_80.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_78) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_80.xyz = tmpvar_89;
    };
  };
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (outColor_5, spColor_80, vec4(xlat_mutable_SPIntensity));
  spColor_80 = tmpvar_90;
  outColor_5 = spColor_80;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_91;
    scrpos_91 = xlv_TEXCOORD3;
    mediump float a_92;
    a_92 = xlv_TEXCOORD3.z;
    if ((a_92 < 0.95)) {
      scrpos_91.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_92 = (a_92 * 17.0);
      highp float tmpvar_93;
      tmpvar_93 = (scrpos_91.y / 4.0);
      highp float tmpvar_94;
      tmpvar_94 = (fract(abs(tmpvar_93)) * 4.0);
      highp float tmpvar_95;
      if ((tmpvar_93 >= 0.0)) {
        tmpvar_95 = tmpvar_94;
      } else {
        tmpvar_95 = -(tmpvar_94);
      };
      highp float tmpvar_96;
      tmpvar_96 = (scrpos_91.x / 4.0);
      highp float tmpvar_97;
      tmpvar_97 = (fract(abs(tmpvar_96)) * 4.0);
      highp float tmpvar_98;
      if ((tmpvar_96 >= 0.0)) {
        tmpvar_98 = tmpvar_97;
      } else {
        tmpvar_98 = -(tmpvar_97);
      };
      highp float x_99;
      x_99 = ((a_92 - _DITHERMATRIX[
        int(tmpvar_95)
      ][
        int(tmpvar_98)
      ]) - 0.01);
      if ((x_99 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_80.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_76;
  mediump vec3 R_77;
  mediump float intensity_78;
  mediump vec4 noiseTex_79;
  mediump vec4 spColor_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_80 = tmpvar_81;
  spColor_80.w = (spColor_80.w * _SPOpaqueness);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_79 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((1.99 * tmpvar_82.x) * _SPNoiseScaler) - 1.0);
  intensity_78 = tmpvar_83;
  highp vec3 tmpvar_84;
  highp vec3 I_85;
  I_85 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_79 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_84 = (I_85 - (2.0 * (
    dot (tmpvar_67, I_85)
   * tmpvar_67)));
  R_77 = tmpvar_84;
  lowp vec3 tmpvar_86;
  tmpvar_86 = textureCube (_SPCubeMap, R_77).xyz;
  reflection_76 = tmpvar_86;
  highp vec3 tmpvar_87;
  mediump vec3 x_88;
  x_88 = (spColor_80.xyz * _SPOldColor.xyz);
  tmpvar_87 = mix (x_88, ((reflection_76 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_80.xyz = tmpvar_87;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_78 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_78 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_89;
      tmpvar_89 = mix (spColor_80.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_78) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_80.xyz = tmpvar_89;
    };
  };
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (outColor_5, spColor_80, vec4(xlat_mutable_SPIntensity));
  spColor_80 = tmpvar_90;
  outColor_5 = spColor_80;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_91;
    scrpos_91 = xlv_TEXCOORD3;
    mediump float a_92;
    a_92 = xlv_TEXCOORD3.z;
    if ((a_92 < 0.95)) {
      scrpos_91.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_92 = (a_92 * 17.0);
      highp float tmpvar_93;
      tmpvar_93 = (scrpos_91.y / 4.0);
      highp float tmpvar_94;
      tmpvar_94 = (fract(abs(tmpvar_93)) * 4.0);
      highp float tmpvar_95;
      if ((tmpvar_93 >= 0.0)) {
        tmpvar_95 = tmpvar_94;
      } else {
        tmpvar_95 = -(tmpvar_94);
      };
      highp float tmpvar_96;
      tmpvar_96 = (scrpos_91.x / 4.0);
      highp float tmpvar_97;
      tmpvar_97 = (fract(abs(tmpvar_96)) * 4.0);
      highp float tmpvar_98;
      if ((tmpvar_96 >= 0.0)) {
        tmpvar_98 = tmpvar_97;
      } else {
        tmpvar_98 = -(tmpvar_97);
      };
      highp float x_99;
      x_99 = ((a_92 - _DITHERMATRIX[
        int(tmpvar_95)
      ][
        int(tmpvar_98)
      ]) - 0.01);
      if ((x_99 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_80.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_76;
  mediump vec3 R_77;
  mediump float intensity_78;
  mediump vec4 noiseTex_79;
  mediump vec4 spColor_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_80 = tmpvar_81;
  spColor_80.w = (spColor_80.w * _SPOpaqueness);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_79 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((1.99 * tmpvar_82.x) * _SPNoiseScaler) - 1.0);
  intensity_78 = tmpvar_83;
  highp vec3 tmpvar_84;
  highp vec3 I_85;
  I_85 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_79 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_84 = (I_85 - (2.0 * (
    dot (tmpvar_67, I_85)
   * tmpvar_67)));
  R_77 = tmpvar_84;
  lowp vec3 tmpvar_86;
  tmpvar_86 = textureCube (_SPCubeMap, R_77).xyz;
  reflection_76 = tmpvar_86;
  highp vec3 tmpvar_87;
  mediump vec3 x_88;
  x_88 = (spColor_80.xyz * _SPOldColor.xyz);
  tmpvar_87 = mix (x_88, ((reflection_76 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_80.xyz = tmpvar_87;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_78 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_78 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_89;
      tmpvar_89 = mix (spColor_80.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_78) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_80.xyz = tmpvar_89;
    };
  };
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (outColor_5, spColor_80, vec4(xlat_mutable_SPIntensity));
  spColor_80 = tmpvar_90;
  outColor_5 = spColor_80;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_91;
    scrpos_91 = xlv_TEXCOORD3;
    mediump float a_92;
    a_92 = xlv_TEXCOORD3.z;
    if ((a_92 < 0.95)) {
      scrpos_91.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_92 = (a_92 * 17.0);
      highp float tmpvar_93;
      tmpvar_93 = (scrpos_91.y / 4.0);
      highp float tmpvar_94;
      tmpvar_94 = (fract(abs(tmpvar_93)) * 4.0);
      highp float tmpvar_95;
      if ((tmpvar_93 >= 0.0)) {
        tmpvar_95 = tmpvar_94;
      } else {
        tmpvar_95 = -(tmpvar_94);
      };
      highp float tmpvar_96;
      tmpvar_96 = (scrpos_91.x / 4.0);
      highp float tmpvar_97;
      tmpvar_97 = (fract(abs(tmpvar_96)) * 4.0);
      highp float tmpvar_98;
      if ((tmpvar_96 >= 0.0)) {
        tmpvar_98 = tmpvar_97;
      } else {
        tmpvar_98 = -(tmpvar_97);
      };
      highp float x_99;
      x_99 = ((a_92 - _DITHERMATRIX[
        int(tmpvar_95)
      ][
        int(tmpvar_98)
      ]) - 0.01);
      if ((x_99 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_80.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_13;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_13;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_13;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_13;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_13;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_13;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_33;
  mediump vec3 R_34;
  mediump float intensity_35;
  mediump vec4 noiseTex_36;
  mediump vec4 spColor_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_37 = tmpvar_38;
  spColor_37.w = (spColor_37.w * _SPOpaqueness);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_36 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (((1.99 * tmpvar_39.x) * _SPNoiseScaler) - 1.0);
  intensity_35 = tmpvar_40;
  highp vec3 tmpvar_41;
  highp vec3 I_42;
  I_42 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_36 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_41 = (I_42 - (2.0 * (
    dot (tmpvar_24, I_42)
   * tmpvar_24)));
  R_34 = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = textureCube (_SPCubeMap, R_34).xyz;
  reflection_33 = tmpvar_43;
  highp vec3 tmpvar_44;
  mediump vec3 x_45;
  x_45 = (spColor_37.xyz * _SPOldColor.xyz);
  tmpvar_44 = mix (x_45, ((reflection_33 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_37.xyz = tmpvar_44;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_35 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_35 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_46;
      tmpvar_46 = mix (spColor_37.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_35) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_37.xyz = tmpvar_46;
    };
  };
  highp vec4 tmpvar_47;
  tmpvar_47 = mix (outColor_5, spColor_37, vec4(xlat_mutable_SPIntensity));
  spColor_37 = tmpvar_47;
  outColor_5.w = spColor_37.w;
  mediump vec3 tmpvar_48;
  highp vec3 N_49;
  N_49 = tmpvar_24;
  highp vec3 V_50;
  V_50 = V_2;
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = pow (clamp ((1.001 - 
    dot (V_50, N_49)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_51 = (_RGBias + (tmpvar_52 * _RGScale));
  mediump vec3 tmpvar_53;
  tmpvar_53 = (tmpvar_51 * _RGColor).xyz;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (tmpvar_51, 0.0, 1.0);
  highp vec3 tmpvar_55;
  tmpvar_55 = mix (spColor_37.xyz, tmpvar_53, vec3((tmpvar_54 * _RGRatio)));
  tmpvar_48 = tmpvar_55;
  outColor_5.xyz = tmpvar_48;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_56;
    scrpos_56 = xlv_TEXCOORD3;
    mediump float a_57;
    a_57 = xlv_TEXCOORD3.z;
    if ((a_57 < 0.95)) {
      scrpos_56.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_57 = (a_57 * 17.0);
      highp float tmpvar_58;
      tmpvar_58 = (scrpos_56.y / 4.0);
      highp float tmpvar_59;
      tmpvar_59 = (fract(abs(tmpvar_58)) * 4.0);
      highp float tmpvar_60;
      if ((tmpvar_58 >= 0.0)) {
        tmpvar_60 = tmpvar_59;
      } else {
        tmpvar_60 = -(tmpvar_59);
      };
      highp float tmpvar_61;
      tmpvar_61 = (scrpos_56.x / 4.0);
      highp float tmpvar_62;
      tmpvar_62 = (fract(abs(tmpvar_61)) * 4.0);
      highp float tmpvar_63;
      if ((tmpvar_61 >= 0.0)) {
        tmpvar_63 = tmpvar_62;
      } else {
        tmpvar_63 = -(tmpvar_62);
      };
      highp float x_64;
      x_64 = ((a_57 - _DITHERMATRIX[
        int(tmpvar_60)
      ][
        int(tmpvar_63)
      ]) - 0.01);
      if ((x_64 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_37.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_33;
  mediump vec3 R_34;
  mediump float intensity_35;
  mediump vec4 noiseTex_36;
  mediump vec4 spColor_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_37 = tmpvar_38;
  spColor_37.w = (spColor_37.w * _SPOpaqueness);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_36 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (((1.99 * tmpvar_39.x) * _SPNoiseScaler) - 1.0);
  intensity_35 = tmpvar_40;
  highp vec3 tmpvar_41;
  highp vec3 I_42;
  I_42 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_36 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_41 = (I_42 - (2.0 * (
    dot (tmpvar_24, I_42)
   * tmpvar_24)));
  R_34 = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = textureCube (_SPCubeMap, R_34).xyz;
  reflection_33 = tmpvar_43;
  highp vec3 tmpvar_44;
  mediump vec3 x_45;
  x_45 = (spColor_37.xyz * _SPOldColor.xyz);
  tmpvar_44 = mix (x_45, ((reflection_33 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_37.xyz = tmpvar_44;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_35 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_35 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_46;
      tmpvar_46 = mix (spColor_37.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_35) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_37.xyz = tmpvar_46;
    };
  };
  highp vec4 tmpvar_47;
  tmpvar_47 = mix (outColor_5, spColor_37, vec4(xlat_mutable_SPIntensity));
  spColor_37 = tmpvar_47;
  outColor_5.w = spColor_37.w;
  mediump vec3 tmpvar_48;
  highp vec3 N_49;
  N_49 = tmpvar_24;
  highp vec3 V_50;
  V_50 = V_2;
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = pow (clamp ((1.001 - 
    dot (V_50, N_49)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_51 = (_RGBias + (tmpvar_52 * _RGScale));
  mediump vec3 tmpvar_53;
  tmpvar_53 = (tmpvar_51 * _RGColor).xyz;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (tmpvar_51, 0.0, 1.0);
  highp vec3 tmpvar_55;
  tmpvar_55 = mix (spColor_37.xyz, tmpvar_53, vec3((tmpvar_54 * _RGRatio)));
  tmpvar_48 = tmpvar_55;
  outColor_5.xyz = tmpvar_48;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_56;
    scrpos_56 = xlv_TEXCOORD3;
    mediump float a_57;
    a_57 = xlv_TEXCOORD3.z;
    if ((a_57 < 0.95)) {
      scrpos_56.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_57 = (a_57 * 17.0);
      highp float tmpvar_58;
      tmpvar_58 = (scrpos_56.y / 4.0);
      highp float tmpvar_59;
      tmpvar_59 = (fract(abs(tmpvar_58)) * 4.0);
      highp float tmpvar_60;
      if ((tmpvar_58 >= 0.0)) {
        tmpvar_60 = tmpvar_59;
      } else {
        tmpvar_60 = -(tmpvar_59);
      };
      highp float tmpvar_61;
      tmpvar_61 = (scrpos_56.x / 4.0);
      highp float tmpvar_62;
      tmpvar_62 = (fract(abs(tmpvar_61)) * 4.0);
      highp float tmpvar_63;
      if ((tmpvar_61 >= 0.0)) {
        tmpvar_63 = tmpvar_62;
      } else {
        tmpvar_63 = -(tmpvar_62);
      };
      highp float x_64;
      x_64 = ((a_57 - _DITHERMATRIX[
        int(tmpvar_60)
      ][
        int(tmpvar_63)
      ]) - 0.01);
      if ((x_64 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_37.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_33;
  mediump vec3 R_34;
  mediump float intensity_35;
  mediump vec4 noiseTex_36;
  mediump vec4 spColor_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_37 = tmpvar_38;
  spColor_37.w = (spColor_37.w * _SPOpaqueness);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_36 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (((1.99 * tmpvar_39.x) * _SPNoiseScaler) - 1.0);
  intensity_35 = tmpvar_40;
  highp vec3 tmpvar_41;
  highp vec3 I_42;
  I_42 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_36 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_41 = (I_42 - (2.0 * (
    dot (tmpvar_24, I_42)
   * tmpvar_24)));
  R_34 = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = textureCube (_SPCubeMap, R_34).xyz;
  reflection_33 = tmpvar_43;
  highp vec3 tmpvar_44;
  mediump vec3 x_45;
  x_45 = (spColor_37.xyz * _SPOldColor.xyz);
  tmpvar_44 = mix (x_45, ((reflection_33 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_37.xyz = tmpvar_44;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_35 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_35 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_46;
      tmpvar_46 = mix (spColor_37.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_35) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_37.xyz = tmpvar_46;
    };
  };
  highp vec4 tmpvar_47;
  tmpvar_47 = mix (outColor_5, spColor_37, vec4(xlat_mutable_SPIntensity));
  spColor_37 = tmpvar_47;
  outColor_5.w = spColor_37.w;
  mediump vec3 tmpvar_48;
  highp vec3 N_49;
  N_49 = tmpvar_24;
  highp vec3 V_50;
  V_50 = V_2;
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = pow (clamp ((1.001 - 
    dot (V_50, N_49)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_51 = (_RGBias + (tmpvar_52 * _RGScale));
  mediump vec3 tmpvar_53;
  tmpvar_53 = (tmpvar_51 * _RGColor).xyz;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (tmpvar_51, 0.0, 1.0);
  highp vec3 tmpvar_55;
  tmpvar_55 = mix (spColor_37.xyz, tmpvar_53, vec3((tmpvar_54 * _RGRatio)));
  tmpvar_48 = tmpvar_55;
  outColor_5.xyz = tmpvar_48;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_56;
    scrpos_56 = xlv_TEXCOORD3;
    mediump float a_57;
    a_57 = xlv_TEXCOORD3.z;
    if ((a_57 < 0.95)) {
      scrpos_56.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_57 = (a_57 * 17.0);
      highp float tmpvar_58;
      tmpvar_58 = (scrpos_56.y / 4.0);
      highp float tmpvar_59;
      tmpvar_59 = (fract(abs(tmpvar_58)) * 4.0);
      highp float tmpvar_60;
      if ((tmpvar_58 >= 0.0)) {
        tmpvar_60 = tmpvar_59;
      } else {
        tmpvar_60 = -(tmpvar_59);
      };
      highp float tmpvar_61;
      tmpvar_61 = (scrpos_56.x / 4.0);
      highp float tmpvar_62;
      tmpvar_62 = (fract(abs(tmpvar_61)) * 4.0);
      highp float tmpvar_63;
      if ((tmpvar_61 >= 0.0)) {
        tmpvar_63 = tmpvar_62;
      } else {
        tmpvar_63 = -(tmpvar_62);
      };
      highp float x_64;
      x_64 = ((a_57 - _DITHERMATRIX[
        int(tmpvar_60)
      ][
        int(tmpvar_63)
      ]) - 0.01);
      if ((x_64 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_37.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_76;
  mediump vec3 R_77;
  mediump float intensity_78;
  mediump vec4 noiseTex_79;
  mediump vec4 spColor_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_80 = tmpvar_81;
  spColor_80.w = (spColor_80.w * _SPOpaqueness);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_79 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((1.99 * tmpvar_82.x) * _SPNoiseScaler) - 1.0);
  intensity_78 = tmpvar_83;
  highp vec3 tmpvar_84;
  highp vec3 I_85;
  I_85 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_79 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_84 = (I_85 - (2.0 * (
    dot (tmpvar_67, I_85)
   * tmpvar_67)));
  R_77 = tmpvar_84;
  lowp vec3 tmpvar_86;
  tmpvar_86 = textureCube (_SPCubeMap, R_77).xyz;
  reflection_76 = tmpvar_86;
  highp vec3 tmpvar_87;
  mediump vec3 x_88;
  x_88 = (spColor_80.xyz * _SPOldColor.xyz);
  tmpvar_87 = mix (x_88, ((reflection_76 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_80.xyz = tmpvar_87;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_78 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_78 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_89;
      tmpvar_89 = mix (spColor_80.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_78) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_80.xyz = tmpvar_89;
    };
  };
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (outColor_5, spColor_80, vec4(xlat_mutable_SPIntensity));
  spColor_80 = tmpvar_90;
  outColor_5.w = spColor_80.w;
  mediump vec3 tmpvar_91;
  highp vec3 N_92;
  N_92 = tmpvar_67;
  highp vec3 V_93;
  V_93 = V_2;
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = pow (clamp ((1.001 - 
    dot (V_93, N_92)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_94 = (_RGBias + (tmpvar_95 * _RGScale));
  mediump vec3 tmpvar_96;
  tmpvar_96 = (tmpvar_94 * _RGColor).xyz;
  mediump float tmpvar_97;
  tmpvar_97 = clamp (tmpvar_94, 0.0, 1.0);
  highp vec3 tmpvar_98;
  tmpvar_98 = mix (spColor_80.xyz, tmpvar_96, vec3((tmpvar_97 * _RGRatio)));
  tmpvar_91 = tmpvar_98;
  outColor_5.xyz = tmpvar_91;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_99;
    scrpos_99 = xlv_TEXCOORD3;
    mediump float a_100;
    a_100 = xlv_TEXCOORD3.z;
    if ((a_100 < 0.95)) {
      scrpos_99.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_100 = (a_100 * 17.0);
      highp float tmpvar_101;
      tmpvar_101 = (scrpos_99.y / 4.0);
      highp float tmpvar_102;
      tmpvar_102 = (fract(abs(tmpvar_101)) * 4.0);
      highp float tmpvar_103;
      if ((tmpvar_101 >= 0.0)) {
        tmpvar_103 = tmpvar_102;
      } else {
        tmpvar_103 = -(tmpvar_102);
      };
      highp float tmpvar_104;
      tmpvar_104 = (scrpos_99.x / 4.0);
      highp float tmpvar_105;
      tmpvar_105 = (fract(abs(tmpvar_104)) * 4.0);
      highp float tmpvar_106;
      if ((tmpvar_104 >= 0.0)) {
        tmpvar_106 = tmpvar_105;
      } else {
        tmpvar_106 = -(tmpvar_105);
      };
      highp float x_107;
      x_107 = ((a_100 - _DITHERMATRIX[
        int(tmpvar_103)
      ][
        int(tmpvar_106)
      ]) - 0.01);
      if ((x_107 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_80.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_76;
  mediump vec3 R_77;
  mediump float intensity_78;
  mediump vec4 noiseTex_79;
  mediump vec4 spColor_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_80 = tmpvar_81;
  spColor_80.w = (spColor_80.w * _SPOpaqueness);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_79 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((1.99 * tmpvar_82.x) * _SPNoiseScaler) - 1.0);
  intensity_78 = tmpvar_83;
  highp vec3 tmpvar_84;
  highp vec3 I_85;
  I_85 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_79 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_84 = (I_85 - (2.0 * (
    dot (tmpvar_67, I_85)
   * tmpvar_67)));
  R_77 = tmpvar_84;
  lowp vec3 tmpvar_86;
  tmpvar_86 = textureCube (_SPCubeMap, R_77).xyz;
  reflection_76 = tmpvar_86;
  highp vec3 tmpvar_87;
  mediump vec3 x_88;
  x_88 = (spColor_80.xyz * _SPOldColor.xyz);
  tmpvar_87 = mix (x_88, ((reflection_76 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_80.xyz = tmpvar_87;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_78 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_78 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_89;
      tmpvar_89 = mix (spColor_80.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_78) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_80.xyz = tmpvar_89;
    };
  };
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (outColor_5, spColor_80, vec4(xlat_mutable_SPIntensity));
  spColor_80 = tmpvar_90;
  outColor_5.w = spColor_80.w;
  mediump vec3 tmpvar_91;
  highp vec3 N_92;
  N_92 = tmpvar_67;
  highp vec3 V_93;
  V_93 = V_2;
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = pow (clamp ((1.001 - 
    dot (V_93, N_92)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_94 = (_RGBias + (tmpvar_95 * _RGScale));
  mediump vec3 tmpvar_96;
  tmpvar_96 = (tmpvar_94 * _RGColor).xyz;
  mediump float tmpvar_97;
  tmpvar_97 = clamp (tmpvar_94, 0.0, 1.0);
  highp vec3 tmpvar_98;
  tmpvar_98 = mix (spColor_80.xyz, tmpvar_96, vec3((tmpvar_97 * _RGRatio)));
  tmpvar_91 = tmpvar_98;
  outColor_5.xyz = tmpvar_91;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_99;
    scrpos_99 = xlv_TEXCOORD3;
    mediump float a_100;
    a_100 = xlv_TEXCOORD3.z;
    if ((a_100 < 0.95)) {
      scrpos_99.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_100 = (a_100 * 17.0);
      highp float tmpvar_101;
      tmpvar_101 = (scrpos_99.y / 4.0);
      highp float tmpvar_102;
      tmpvar_102 = (fract(abs(tmpvar_101)) * 4.0);
      highp float tmpvar_103;
      if ((tmpvar_101 >= 0.0)) {
        tmpvar_103 = tmpvar_102;
      } else {
        tmpvar_103 = -(tmpvar_102);
      };
      highp float tmpvar_104;
      tmpvar_104 = (scrpos_99.x / 4.0);
      highp float tmpvar_105;
      tmpvar_105 = (fract(abs(tmpvar_104)) * 4.0);
      highp float tmpvar_106;
      if ((tmpvar_104 >= 0.0)) {
        tmpvar_106 = tmpvar_105;
      } else {
        tmpvar_106 = -(tmpvar_105);
      };
      highp float x_107;
      x_107 = ((a_100 - _DITHERMATRIX[
        int(tmpvar_103)
      ][
        int(tmpvar_106)
      ]) - 0.01);
      if ((x_107 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_80.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_76;
  mediump vec3 R_77;
  mediump float intensity_78;
  mediump vec4 noiseTex_79;
  mediump vec4 spColor_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_80 = tmpvar_81;
  spColor_80.w = (spColor_80.w * _SPOpaqueness);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_79 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((1.99 * tmpvar_82.x) * _SPNoiseScaler) - 1.0);
  intensity_78 = tmpvar_83;
  highp vec3 tmpvar_84;
  highp vec3 I_85;
  I_85 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_79 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_84 = (I_85 - (2.0 * (
    dot (tmpvar_67, I_85)
   * tmpvar_67)));
  R_77 = tmpvar_84;
  lowp vec3 tmpvar_86;
  tmpvar_86 = textureCube (_SPCubeMap, R_77).xyz;
  reflection_76 = tmpvar_86;
  highp vec3 tmpvar_87;
  mediump vec3 x_88;
  x_88 = (spColor_80.xyz * _SPOldColor.xyz);
  tmpvar_87 = mix (x_88, ((reflection_76 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_80.xyz = tmpvar_87;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_78 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_78 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_89;
      tmpvar_89 = mix (spColor_80.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_78) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_80.xyz = tmpvar_89;
    };
  };
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (outColor_5, spColor_80, vec4(xlat_mutable_SPIntensity));
  spColor_80 = tmpvar_90;
  outColor_5.w = spColor_80.w;
  mediump vec3 tmpvar_91;
  highp vec3 N_92;
  N_92 = tmpvar_67;
  highp vec3 V_93;
  V_93 = V_2;
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = pow (clamp ((1.001 - 
    dot (V_93, N_92)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_94 = (_RGBias + (tmpvar_95 * _RGScale));
  mediump vec3 tmpvar_96;
  tmpvar_96 = (tmpvar_94 * _RGColor).xyz;
  mediump float tmpvar_97;
  tmpvar_97 = clamp (tmpvar_94, 0.0, 1.0);
  highp vec3 tmpvar_98;
  tmpvar_98 = mix (spColor_80.xyz, tmpvar_96, vec3((tmpvar_97 * _RGRatio)));
  tmpvar_91 = tmpvar_98;
  outColor_5.xyz = tmpvar_91;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_99;
    scrpos_99 = xlv_TEXCOORD3;
    mediump float a_100;
    a_100 = xlv_TEXCOORD3.z;
    if ((a_100 < 0.95)) {
      scrpos_99.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_100 = (a_100 * 17.0);
      highp float tmpvar_101;
      tmpvar_101 = (scrpos_99.y / 4.0);
      highp float tmpvar_102;
      tmpvar_102 = (fract(abs(tmpvar_101)) * 4.0);
      highp float tmpvar_103;
      if ((tmpvar_101 >= 0.0)) {
        tmpvar_103 = tmpvar_102;
      } else {
        tmpvar_103 = -(tmpvar_102);
      };
      highp float tmpvar_104;
      tmpvar_104 = (scrpos_99.x / 4.0);
      highp float tmpvar_105;
      tmpvar_105 = (fract(abs(tmpvar_104)) * 4.0);
      highp float tmpvar_106;
      if ((tmpvar_104 >= 0.0)) {
        tmpvar_106 = tmpvar_105;
      } else {
        tmpvar_106 = -(tmpvar_105);
      };
      highp float x_107;
      x_107 = ((a_100 - _DITHERMATRIX[
        int(tmpvar_103)
      ][
        int(tmpvar_106)
      ]) - 0.01);
      if ((x_107 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_80.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_76;
    scrpos_76 = xlv_TEXCOORD3;
    mediump float a_77;
    a_77 = xlv_TEXCOORD3.z;
    if ((a_77 < 0.95)) {
      scrpos_76.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_77 = (a_77 * 17.0);
      highp float tmpvar_78;
      tmpvar_78 = (scrpos_76.y / 4.0);
      highp float tmpvar_79;
      tmpvar_79 = (fract(abs(tmpvar_78)) * 4.0);
      highp float tmpvar_80;
      if ((tmpvar_78 >= 0.0)) {
        tmpvar_80 = tmpvar_79;
      } else {
        tmpvar_80 = -(tmpvar_79);
      };
      highp float tmpvar_81;
      tmpvar_81 = (scrpos_76.x / 4.0);
      highp float tmpvar_82;
      tmpvar_82 = (fract(abs(tmpvar_81)) * 4.0);
      highp float tmpvar_83;
      if ((tmpvar_81 >= 0.0)) {
        tmpvar_83 = tmpvar_82;
      } else {
        tmpvar_83 = -(tmpvar_82);
      };
      highp float x_84;
      x_84 = ((a_77 - _DITHERMATRIX[
        int(tmpvar_80)
      ][
        int(tmpvar_83)
      ]) - 0.01);
      if ((x_84 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_76;
    scrpos_76 = xlv_TEXCOORD3;
    mediump float a_77;
    a_77 = xlv_TEXCOORD3.z;
    if ((a_77 < 0.95)) {
      scrpos_76.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_77 = (a_77 * 17.0);
      highp float tmpvar_78;
      tmpvar_78 = (scrpos_76.y / 4.0);
      highp float tmpvar_79;
      tmpvar_79 = (fract(abs(tmpvar_78)) * 4.0);
      highp float tmpvar_80;
      if ((tmpvar_78 >= 0.0)) {
        tmpvar_80 = tmpvar_79;
      } else {
        tmpvar_80 = -(tmpvar_79);
      };
      highp float tmpvar_81;
      tmpvar_81 = (scrpos_76.x / 4.0);
      highp float tmpvar_82;
      tmpvar_82 = (fract(abs(tmpvar_81)) * 4.0);
      highp float tmpvar_83;
      if ((tmpvar_81 >= 0.0)) {
        tmpvar_83 = tmpvar_82;
      } else {
        tmpvar_83 = -(tmpvar_82);
      };
      highp float x_84;
      x_84 = ((a_77 - _DITHERMATRIX[
        int(tmpvar_80)
      ][
        int(tmpvar_83)
      ]) - 0.01);
      if ((x_84 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_76;
    scrpos_76 = xlv_TEXCOORD3;
    mediump float a_77;
    a_77 = xlv_TEXCOORD3.z;
    if ((a_77 < 0.95)) {
      scrpos_76.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_77 = (a_77 * 17.0);
      highp float tmpvar_78;
      tmpvar_78 = (scrpos_76.y / 4.0);
      highp float tmpvar_79;
      tmpvar_79 = (fract(abs(tmpvar_78)) * 4.0);
      highp float tmpvar_80;
      if ((tmpvar_78 >= 0.0)) {
        tmpvar_80 = tmpvar_79;
      } else {
        tmpvar_80 = -(tmpvar_79);
      };
      highp float tmpvar_81;
      tmpvar_81 = (scrpos_76.x / 4.0);
      highp float tmpvar_82;
      tmpvar_82 = (fract(abs(tmpvar_81)) * 4.0);
      highp float tmpvar_83;
      if ((tmpvar_81 >= 0.0)) {
        tmpvar_83 = tmpvar_82;
      } else {
        tmpvar_83 = -(tmpvar_82);
      };
      highp float x_84;
      x_84 = ((a_77 - _DITHERMATRIX[
        int(tmpvar_80)
      ][
        int(tmpvar_83)
      ]) - 0.01);
      if ((x_84 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_13;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_13;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_13;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_13;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_13;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_13;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = tmpvar_24;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (outColor_5.xyz, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_41;
    scrpos_41 = xlv_TEXCOORD3;
    mediump float a_42;
    a_42 = xlv_TEXCOORD3.z;
    if ((a_42 < 0.95)) {
      scrpos_41.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_42 = (a_42 * 17.0);
      highp float tmpvar_43;
      tmpvar_43 = (scrpos_41.y / 4.0);
      highp float tmpvar_44;
      tmpvar_44 = (fract(abs(tmpvar_43)) * 4.0);
      highp float tmpvar_45;
      if ((tmpvar_43 >= 0.0)) {
        tmpvar_45 = tmpvar_44;
      } else {
        tmpvar_45 = -(tmpvar_44);
      };
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_41.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float x_49;
      x_49 = ((a_42 - _DITHERMATRIX[
        int(tmpvar_45)
      ][
        int(tmpvar_48)
      ]) - 0.01);
      if ((x_49 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = tmpvar_24;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (outColor_5.xyz, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_41;
    scrpos_41 = xlv_TEXCOORD3;
    mediump float a_42;
    a_42 = xlv_TEXCOORD3.z;
    if ((a_42 < 0.95)) {
      scrpos_41.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_42 = (a_42 * 17.0);
      highp float tmpvar_43;
      tmpvar_43 = (scrpos_41.y / 4.0);
      highp float tmpvar_44;
      tmpvar_44 = (fract(abs(tmpvar_43)) * 4.0);
      highp float tmpvar_45;
      if ((tmpvar_43 >= 0.0)) {
        tmpvar_45 = tmpvar_44;
      } else {
        tmpvar_45 = -(tmpvar_44);
      };
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_41.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float x_49;
      x_49 = ((a_42 - _DITHERMATRIX[
        int(tmpvar_45)
      ][
        int(tmpvar_48)
      ]) - 0.01);
      if ((x_49 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = tmpvar_24;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (outColor_5.xyz, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_41;
    scrpos_41 = xlv_TEXCOORD3;
    mediump float a_42;
    a_42 = xlv_TEXCOORD3.z;
    if ((a_42 < 0.95)) {
      scrpos_41.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_42 = (a_42 * 17.0);
      highp float tmpvar_43;
      tmpvar_43 = (scrpos_41.y / 4.0);
      highp float tmpvar_44;
      tmpvar_44 = (fract(abs(tmpvar_43)) * 4.0);
      highp float tmpvar_45;
      if ((tmpvar_43 >= 0.0)) {
        tmpvar_45 = tmpvar_44;
      } else {
        tmpvar_45 = -(tmpvar_44);
      };
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_41.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float x_49;
      x_49 = ((a_42 - _DITHERMATRIX[
        int(tmpvar_45)
      ][
        int(tmpvar_48)
      ]) - 0.01);
      if ((x_49 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_76;
  highp vec3 N_77;
  N_77 = tmpvar_67;
  highp vec3 V_78;
  V_78 = V_2;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = pow (clamp ((1.001 - 
    dot (V_78, N_77)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_79 = (_RGBias + (tmpvar_80 * _RGScale));
  mediump vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_79 * _RGColor).xyz;
  mediump float tmpvar_82;
  tmpvar_82 = clamp (tmpvar_79, 0.0, 1.0);
  highp vec3 tmpvar_83;
  tmpvar_83 = mix (outColor_5.xyz, tmpvar_81, vec3((tmpvar_82 * _RGRatio)));
  tmpvar_76 = tmpvar_83;
  outColor_5.xyz = tmpvar_76;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_84;
    scrpos_84 = xlv_TEXCOORD3;
    mediump float a_85;
    a_85 = xlv_TEXCOORD3.z;
    if ((a_85 < 0.95)) {
      scrpos_84.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_85 = (a_85 * 17.0);
      highp float tmpvar_86;
      tmpvar_86 = (scrpos_84.y / 4.0);
      highp float tmpvar_87;
      tmpvar_87 = (fract(abs(tmpvar_86)) * 4.0);
      highp float tmpvar_88;
      if ((tmpvar_86 >= 0.0)) {
        tmpvar_88 = tmpvar_87;
      } else {
        tmpvar_88 = -(tmpvar_87);
      };
      highp float tmpvar_89;
      tmpvar_89 = (scrpos_84.x / 4.0);
      highp float tmpvar_90;
      tmpvar_90 = (fract(abs(tmpvar_89)) * 4.0);
      highp float tmpvar_91;
      if ((tmpvar_89 >= 0.0)) {
        tmpvar_91 = tmpvar_90;
      } else {
        tmpvar_91 = -(tmpvar_90);
      };
      highp float x_92;
      x_92 = ((a_85 - _DITHERMATRIX[
        int(tmpvar_88)
      ][
        int(tmpvar_91)
      ]) - 0.01);
      if ((x_92 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_76;
  highp vec3 N_77;
  N_77 = tmpvar_67;
  highp vec3 V_78;
  V_78 = V_2;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = pow (clamp ((1.001 - 
    dot (V_78, N_77)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_79 = (_RGBias + (tmpvar_80 * _RGScale));
  mediump vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_79 * _RGColor).xyz;
  mediump float tmpvar_82;
  tmpvar_82 = clamp (tmpvar_79, 0.0, 1.0);
  highp vec3 tmpvar_83;
  tmpvar_83 = mix (outColor_5.xyz, tmpvar_81, vec3((tmpvar_82 * _RGRatio)));
  tmpvar_76 = tmpvar_83;
  outColor_5.xyz = tmpvar_76;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_84;
    scrpos_84 = xlv_TEXCOORD3;
    mediump float a_85;
    a_85 = xlv_TEXCOORD3.z;
    if ((a_85 < 0.95)) {
      scrpos_84.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_85 = (a_85 * 17.0);
      highp float tmpvar_86;
      tmpvar_86 = (scrpos_84.y / 4.0);
      highp float tmpvar_87;
      tmpvar_87 = (fract(abs(tmpvar_86)) * 4.0);
      highp float tmpvar_88;
      if ((tmpvar_86 >= 0.0)) {
        tmpvar_88 = tmpvar_87;
      } else {
        tmpvar_88 = -(tmpvar_87);
      };
      highp float tmpvar_89;
      tmpvar_89 = (scrpos_84.x / 4.0);
      highp float tmpvar_90;
      tmpvar_90 = (fract(abs(tmpvar_89)) * 4.0);
      highp float tmpvar_91;
      if ((tmpvar_89 >= 0.0)) {
        tmpvar_91 = tmpvar_90;
      } else {
        tmpvar_91 = -(tmpvar_90);
      };
      highp float x_92;
      x_92 = ((a_85 - _DITHERMATRIX[
        int(tmpvar_88)
      ][
        int(tmpvar_91)
      ]) - 0.01);
      if ((x_92 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_76;
  highp vec3 N_77;
  N_77 = tmpvar_67;
  highp vec3 V_78;
  V_78 = V_2;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = pow (clamp ((1.001 - 
    dot (V_78, N_77)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_79 = (_RGBias + (tmpvar_80 * _RGScale));
  mediump vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_79 * _RGColor).xyz;
  mediump float tmpvar_82;
  tmpvar_82 = clamp (tmpvar_79, 0.0, 1.0);
  highp vec3 tmpvar_83;
  tmpvar_83 = mix (outColor_5.xyz, tmpvar_81, vec3((tmpvar_82 * _RGRatio)));
  tmpvar_76 = tmpvar_83;
  outColor_5.xyz = tmpvar_76;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_84;
    scrpos_84 = xlv_TEXCOORD3;
    mediump float a_85;
    a_85 = xlv_TEXCOORD3.z;
    if ((a_85 < 0.95)) {
      scrpos_84.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_85 = (a_85 * 17.0);
      highp float tmpvar_86;
      tmpvar_86 = (scrpos_84.y / 4.0);
      highp float tmpvar_87;
      tmpvar_87 = (fract(abs(tmpvar_86)) * 4.0);
      highp float tmpvar_88;
      if ((tmpvar_86 >= 0.0)) {
        tmpvar_88 = tmpvar_87;
      } else {
        tmpvar_88 = -(tmpvar_87);
      };
      highp float tmpvar_89;
      tmpvar_89 = (scrpos_84.x / 4.0);
      highp float tmpvar_90;
      tmpvar_90 = (fract(abs(tmpvar_89)) * 4.0);
      highp float tmpvar_91;
      if ((tmpvar_89 >= 0.0)) {
        tmpvar_91 = tmpvar_90;
      } else {
        tmpvar_91 = -(tmpvar_90);
      };
      highp float x_92;
      x_92 = ((a_85 - _DITHERMATRIX[
        int(tmpvar_88)
      ][
        int(tmpvar_91)
      ]) - 0.01);
      if ((x_92 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_33;
  mediump vec3 R_34;
  mediump float intensity_35;
  mediump vec4 noiseTex_36;
  mediump vec4 spColor_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_37 = tmpvar_38;
  spColor_37.w = (spColor_37.w * _SPOpaqueness);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_36 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (((1.99 * tmpvar_39.x) * _SPNoiseScaler) - 1.0);
  intensity_35 = tmpvar_40;
  highp vec3 tmpvar_41;
  highp vec3 I_42;
  I_42 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_36 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_41 = (I_42 - (2.0 * (
    dot (tmpvar_24, I_42)
   * tmpvar_24)));
  R_34 = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = textureCube (_SPCubeMap, R_34).xyz;
  reflection_33 = tmpvar_43;
  highp vec3 tmpvar_44;
  mediump vec3 x_45;
  x_45 = (spColor_37.xyz * _SPOldColor.xyz);
  tmpvar_44 = mix (x_45, ((reflection_33 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_37.xyz = tmpvar_44;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_35 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_35 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_46;
      tmpvar_46 = mix (spColor_37.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_35) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_37.xyz = tmpvar_46;
    };
  };
  highp vec4 tmpvar_47;
  tmpvar_47 = mix (outColor_5, spColor_37, vec4(xlat_mutable_SPIntensity));
  spColor_37 = tmpvar_47;
  outColor_5 = spColor_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_48;
    scrpos_48 = xlv_TEXCOORD3;
    mediump float a_49;
    a_49 = xlv_TEXCOORD3.z;
    if ((a_49 < 0.95)) {
      scrpos_48.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_49 = (a_49 * 17.0);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_48.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float tmpvar_53;
      tmpvar_53 = (scrpos_48.x / 4.0);
      highp float tmpvar_54;
      tmpvar_54 = (fract(abs(tmpvar_53)) * 4.0);
      highp float tmpvar_55;
      if ((tmpvar_53 >= 0.0)) {
        tmpvar_55 = tmpvar_54;
      } else {
        tmpvar_55 = -(tmpvar_54);
      };
      highp float x_56;
      x_56 = ((a_49 - _DITHERMATRIX[
        int(tmpvar_52)
      ][
        int(tmpvar_55)
      ]) - 0.01);
      if ((x_56 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_37.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_33;
  mediump vec3 R_34;
  mediump float intensity_35;
  mediump vec4 noiseTex_36;
  mediump vec4 spColor_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_37 = tmpvar_38;
  spColor_37.w = (spColor_37.w * _SPOpaqueness);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_36 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (((1.99 * tmpvar_39.x) * _SPNoiseScaler) - 1.0);
  intensity_35 = tmpvar_40;
  highp vec3 tmpvar_41;
  highp vec3 I_42;
  I_42 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_36 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_41 = (I_42 - (2.0 * (
    dot (tmpvar_24, I_42)
   * tmpvar_24)));
  R_34 = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = textureCube (_SPCubeMap, R_34).xyz;
  reflection_33 = tmpvar_43;
  highp vec3 tmpvar_44;
  mediump vec3 x_45;
  x_45 = (spColor_37.xyz * _SPOldColor.xyz);
  tmpvar_44 = mix (x_45, ((reflection_33 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_37.xyz = tmpvar_44;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_35 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_35 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_46;
      tmpvar_46 = mix (spColor_37.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_35) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_37.xyz = tmpvar_46;
    };
  };
  highp vec4 tmpvar_47;
  tmpvar_47 = mix (outColor_5, spColor_37, vec4(xlat_mutable_SPIntensity));
  spColor_37 = tmpvar_47;
  outColor_5 = spColor_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_48;
    scrpos_48 = xlv_TEXCOORD3;
    mediump float a_49;
    a_49 = xlv_TEXCOORD3.z;
    if ((a_49 < 0.95)) {
      scrpos_48.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_49 = (a_49 * 17.0);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_48.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float tmpvar_53;
      tmpvar_53 = (scrpos_48.x / 4.0);
      highp float tmpvar_54;
      tmpvar_54 = (fract(abs(tmpvar_53)) * 4.0);
      highp float tmpvar_55;
      if ((tmpvar_53 >= 0.0)) {
        tmpvar_55 = tmpvar_54;
      } else {
        tmpvar_55 = -(tmpvar_54);
      };
      highp float x_56;
      x_56 = ((a_49 - _DITHERMATRIX[
        int(tmpvar_52)
      ][
        int(tmpvar_55)
      ]) - 0.01);
      if ((x_56 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_37.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_33;
  mediump vec3 R_34;
  mediump float intensity_35;
  mediump vec4 noiseTex_36;
  mediump vec4 spColor_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_37 = tmpvar_38;
  spColor_37.w = (spColor_37.w * _SPOpaqueness);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_36 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (((1.99 * tmpvar_39.x) * _SPNoiseScaler) - 1.0);
  intensity_35 = tmpvar_40;
  highp vec3 tmpvar_41;
  highp vec3 I_42;
  I_42 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_36 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_41 = (I_42 - (2.0 * (
    dot (tmpvar_24, I_42)
   * tmpvar_24)));
  R_34 = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = textureCube (_SPCubeMap, R_34).xyz;
  reflection_33 = tmpvar_43;
  highp vec3 tmpvar_44;
  mediump vec3 x_45;
  x_45 = (spColor_37.xyz * _SPOldColor.xyz);
  tmpvar_44 = mix (x_45, ((reflection_33 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_37.xyz = tmpvar_44;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_35 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_35 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_46;
      tmpvar_46 = mix (spColor_37.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_35) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_37.xyz = tmpvar_46;
    };
  };
  highp vec4 tmpvar_47;
  tmpvar_47 = mix (outColor_5, spColor_37, vec4(xlat_mutable_SPIntensity));
  spColor_37 = tmpvar_47;
  outColor_5 = spColor_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_48;
    scrpos_48 = xlv_TEXCOORD3;
    mediump float a_49;
    a_49 = xlv_TEXCOORD3.z;
    if ((a_49 < 0.95)) {
      scrpos_48.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_49 = (a_49 * 17.0);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_48.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float tmpvar_53;
      tmpvar_53 = (scrpos_48.x / 4.0);
      highp float tmpvar_54;
      tmpvar_54 = (fract(abs(tmpvar_53)) * 4.0);
      highp float tmpvar_55;
      if ((tmpvar_53 >= 0.0)) {
        tmpvar_55 = tmpvar_54;
      } else {
        tmpvar_55 = -(tmpvar_54);
      };
      highp float x_56;
      x_56 = ((a_49 - _DITHERMATRIX[
        int(tmpvar_52)
      ][
        int(tmpvar_55)
      ]) - 0.01);
      if ((x_56 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_37.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_76;
  mediump vec3 R_77;
  mediump float intensity_78;
  mediump vec4 noiseTex_79;
  mediump vec4 spColor_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_80 = tmpvar_81;
  spColor_80.w = (spColor_80.w * _SPOpaqueness);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_79 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((1.99 * tmpvar_82.x) * _SPNoiseScaler) - 1.0);
  intensity_78 = tmpvar_83;
  highp vec3 tmpvar_84;
  highp vec3 I_85;
  I_85 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_79 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_84 = (I_85 - (2.0 * (
    dot (tmpvar_67, I_85)
   * tmpvar_67)));
  R_77 = tmpvar_84;
  lowp vec3 tmpvar_86;
  tmpvar_86 = textureCube (_SPCubeMap, R_77).xyz;
  reflection_76 = tmpvar_86;
  highp vec3 tmpvar_87;
  mediump vec3 x_88;
  x_88 = (spColor_80.xyz * _SPOldColor.xyz);
  tmpvar_87 = mix (x_88, ((reflection_76 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_80.xyz = tmpvar_87;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_78 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_78 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_89;
      tmpvar_89 = mix (spColor_80.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_78) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_80.xyz = tmpvar_89;
    };
  };
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (outColor_5, spColor_80, vec4(xlat_mutable_SPIntensity));
  spColor_80 = tmpvar_90;
  outColor_5 = spColor_80;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_91;
    scrpos_91 = xlv_TEXCOORD3;
    mediump float a_92;
    a_92 = xlv_TEXCOORD3.z;
    if ((a_92 < 0.95)) {
      scrpos_91.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_92 = (a_92 * 17.0);
      highp float tmpvar_93;
      tmpvar_93 = (scrpos_91.y / 4.0);
      highp float tmpvar_94;
      tmpvar_94 = (fract(abs(tmpvar_93)) * 4.0);
      highp float tmpvar_95;
      if ((tmpvar_93 >= 0.0)) {
        tmpvar_95 = tmpvar_94;
      } else {
        tmpvar_95 = -(tmpvar_94);
      };
      highp float tmpvar_96;
      tmpvar_96 = (scrpos_91.x / 4.0);
      highp float tmpvar_97;
      tmpvar_97 = (fract(abs(tmpvar_96)) * 4.0);
      highp float tmpvar_98;
      if ((tmpvar_96 >= 0.0)) {
        tmpvar_98 = tmpvar_97;
      } else {
        tmpvar_98 = -(tmpvar_97);
      };
      highp float x_99;
      x_99 = ((a_92 - _DITHERMATRIX[
        int(tmpvar_95)
      ][
        int(tmpvar_98)
      ]) - 0.01);
      if ((x_99 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_80.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_76;
  mediump vec3 R_77;
  mediump float intensity_78;
  mediump vec4 noiseTex_79;
  mediump vec4 spColor_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_80 = tmpvar_81;
  spColor_80.w = (spColor_80.w * _SPOpaqueness);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_79 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((1.99 * tmpvar_82.x) * _SPNoiseScaler) - 1.0);
  intensity_78 = tmpvar_83;
  highp vec3 tmpvar_84;
  highp vec3 I_85;
  I_85 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_79 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_84 = (I_85 - (2.0 * (
    dot (tmpvar_67, I_85)
   * tmpvar_67)));
  R_77 = tmpvar_84;
  lowp vec3 tmpvar_86;
  tmpvar_86 = textureCube (_SPCubeMap, R_77).xyz;
  reflection_76 = tmpvar_86;
  highp vec3 tmpvar_87;
  mediump vec3 x_88;
  x_88 = (spColor_80.xyz * _SPOldColor.xyz);
  tmpvar_87 = mix (x_88, ((reflection_76 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_80.xyz = tmpvar_87;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_78 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_78 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_89;
      tmpvar_89 = mix (spColor_80.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_78) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_80.xyz = tmpvar_89;
    };
  };
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (outColor_5, spColor_80, vec4(xlat_mutable_SPIntensity));
  spColor_80 = tmpvar_90;
  outColor_5 = spColor_80;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_91;
    scrpos_91 = xlv_TEXCOORD3;
    mediump float a_92;
    a_92 = xlv_TEXCOORD3.z;
    if ((a_92 < 0.95)) {
      scrpos_91.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_92 = (a_92 * 17.0);
      highp float tmpvar_93;
      tmpvar_93 = (scrpos_91.y / 4.0);
      highp float tmpvar_94;
      tmpvar_94 = (fract(abs(tmpvar_93)) * 4.0);
      highp float tmpvar_95;
      if ((tmpvar_93 >= 0.0)) {
        tmpvar_95 = tmpvar_94;
      } else {
        tmpvar_95 = -(tmpvar_94);
      };
      highp float tmpvar_96;
      tmpvar_96 = (scrpos_91.x / 4.0);
      highp float tmpvar_97;
      tmpvar_97 = (fract(abs(tmpvar_96)) * 4.0);
      highp float tmpvar_98;
      if ((tmpvar_96 >= 0.0)) {
        tmpvar_98 = tmpvar_97;
      } else {
        tmpvar_98 = -(tmpvar_97);
      };
      highp float x_99;
      x_99 = ((a_92 - _DITHERMATRIX[
        int(tmpvar_95)
      ][
        int(tmpvar_98)
      ]) - 0.01);
      if ((x_99 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_80.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_76;
  mediump vec3 R_77;
  mediump float intensity_78;
  mediump vec4 noiseTex_79;
  mediump vec4 spColor_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_80 = tmpvar_81;
  spColor_80.w = (spColor_80.w * _SPOpaqueness);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_79 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((1.99 * tmpvar_82.x) * _SPNoiseScaler) - 1.0);
  intensity_78 = tmpvar_83;
  highp vec3 tmpvar_84;
  highp vec3 I_85;
  I_85 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_79 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_84 = (I_85 - (2.0 * (
    dot (tmpvar_67, I_85)
   * tmpvar_67)));
  R_77 = tmpvar_84;
  lowp vec3 tmpvar_86;
  tmpvar_86 = textureCube (_SPCubeMap, R_77).xyz;
  reflection_76 = tmpvar_86;
  highp vec3 tmpvar_87;
  mediump vec3 x_88;
  x_88 = (spColor_80.xyz * _SPOldColor.xyz);
  tmpvar_87 = mix (x_88, ((reflection_76 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_80.xyz = tmpvar_87;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_78 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_78 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_89;
      tmpvar_89 = mix (spColor_80.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_78) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_80.xyz = tmpvar_89;
    };
  };
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (outColor_5, spColor_80, vec4(xlat_mutable_SPIntensity));
  spColor_80 = tmpvar_90;
  outColor_5 = spColor_80;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_91;
    scrpos_91 = xlv_TEXCOORD3;
    mediump float a_92;
    a_92 = xlv_TEXCOORD3.z;
    if ((a_92 < 0.95)) {
      scrpos_91.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_92 = (a_92 * 17.0);
      highp float tmpvar_93;
      tmpvar_93 = (scrpos_91.y / 4.0);
      highp float tmpvar_94;
      tmpvar_94 = (fract(abs(tmpvar_93)) * 4.0);
      highp float tmpvar_95;
      if ((tmpvar_93 >= 0.0)) {
        tmpvar_95 = tmpvar_94;
      } else {
        tmpvar_95 = -(tmpvar_94);
      };
      highp float tmpvar_96;
      tmpvar_96 = (scrpos_91.x / 4.0);
      highp float tmpvar_97;
      tmpvar_97 = (fract(abs(tmpvar_96)) * 4.0);
      highp float tmpvar_98;
      if ((tmpvar_96 >= 0.0)) {
        tmpvar_98 = tmpvar_97;
      } else {
        tmpvar_98 = -(tmpvar_97);
      };
      highp float x_99;
      x_99 = ((a_92 - _DITHERMATRIX[
        int(tmpvar_95)
      ][
        int(tmpvar_98)
      ]) - 0.01);
      if ((x_99 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_80.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_13;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_13;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_13;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_13;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_13;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_13;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_33;
  mediump vec3 R_34;
  mediump float intensity_35;
  mediump vec4 noiseTex_36;
  mediump vec4 spColor_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_37 = tmpvar_38;
  spColor_37.w = (spColor_37.w * _SPOpaqueness);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_36 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (((1.99 * tmpvar_39.x) * _SPNoiseScaler) - 1.0);
  intensity_35 = tmpvar_40;
  highp vec3 tmpvar_41;
  highp vec3 I_42;
  I_42 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_36 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_41 = (I_42 - (2.0 * (
    dot (tmpvar_24, I_42)
   * tmpvar_24)));
  R_34 = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = textureCube (_SPCubeMap, R_34).xyz;
  reflection_33 = tmpvar_43;
  highp vec3 tmpvar_44;
  mediump vec3 x_45;
  x_45 = (spColor_37.xyz * _SPOldColor.xyz);
  tmpvar_44 = mix (x_45, ((reflection_33 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_37.xyz = tmpvar_44;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_35 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_35 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_46;
      tmpvar_46 = mix (spColor_37.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_35) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_37.xyz = tmpvar_46;
    };
  };
  highp vec4 tmpvar_47;
  tmpvar_47 = mix (outColor_5, spColor_37, vec4(xlat_mutable_SPIntensity));
  spColor_37 = tmpvar_47;
  outColor_5.w = spColor_37.w;
  mediump vec3 tmpvar_48;
  highp vec3 N_49;
  N_49 = tmpvar_24;
  highp vec3 V_50;
  V_50 = V_2;
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = pow (clamp ((1.001 - 
    dot (V_50, N_49)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_51 = (_RGBias + (tmpvar_52 * _RGScale));
  mediump vec3 tmpvar_53;
  tmpvar_53 = (tmpvar_51 * _RGColor).xyz;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (tmpvar_51, 0.0, 1.0);
  highp vec3 tmpvar_55;
  tmpvar_55 = mix (spColor_37.xyz, tmpvar_53, vec3((tmpvar_54 * _RGRatio)));
  tmpvar_48 = tmpvar_55;
  outColor_5.xyz = tmpvar_48;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_56;
    scrpos_56 = xlv_TEXCOORD3;
    mediump float a_57;
    a_57 = xlv_TEXCOORD3.z;
    if ((a_57 < 0.95)) {
      scrpos_56.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_57 = (a_57 * 17.0);
      highp float tmpvar_58;
      tmpvar_58 = (scrpos_56.y / 4.0);
      highp float tmpvar_59;
      tmpvar_59 = (fract(abs(tmpvar_58)) * 4.0);
      highp float tmpvar_60;
      if ((tmpvar_58 >= 0.0)) {
        tmpvar_60 = tmpvar_59;
      } else {
        tmpvar_60 = -(tmpvar_59);
      };
      highp float tmpvar_61;
      tmpvar_61 = (scrpos_56.x / 4.0);
      highp float tmpvar_62;
      tmpvar_62 = (fract(abs(tmpvar_61)) * 4.0);
      highp float tmpvar_63;
      if ((tmpvar_61 >= 0.0)) {
        tmpvar_63 = tmpvar_62;
      } else {
        tmpvar_63 = -(tmpvar_62);
      };
      highp float x_64;
      x_64 = ((a_57 - _DITHERMATRIX[
        int(tmpvar_60)
      ][
        int(tmpvar_63)
      ]) - 0.01);
      if ((x_64 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_37.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_33;
  mediump vec3 R_34;
  mediump float intensity_35;
  mediump vec4 noiseTex_36;
  mediump vec4 spColor_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_37 = tmpvar_38;
  spColor_37.w = (spColor_37.w * _SPOpaqueness);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_36 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (((1.99 * tmpvar_39.x) * _SPNoiseScaler) - 1.0);
  intensity_35 = tmpvar_40;
  highp vec3 tmpvar_41;
  highp vec3 I_42;
  I_42 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_36 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_41 = (I_42 - (2.0 * (
    dot (tmpvar_24, I_42)
   * tmpvar_24)));
  R_34 = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = textureCube (_SPCubeMap, R_34).xyz;
  reflection_33 = tmpvar_43;
  highp vec3 tmpvar_44;
  mediump vec3 x_45;
  x_45 = (spColor_37.xyz * _SPOldColor.xyz);
  tmpvar_44 = mix (x_45, ((reflection_33 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_37.xyz = tmpvar_44;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_35 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_35 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_46;
      tmpvar_46 = mix (spColor_37.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_35) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_37.xyz = tmpvar_46;
    };
  };
  highp vec4 tmpvar_47;
  tmpvar_47 = mix (outColor_5, spColor_37, vec4(xlat_mutable_SPIntensity));
  spColor_37 = tmpvar_47;
  outColor_5.w = spColor_37.w;
  mediump vec3 tmpvar_48;
  highp vec3 N_49;
  N_49 = tmpvar_24;
  highp vec3 V_50;
  V_50 = V_2;
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = pow (clamp ((1.001 - 
    dot (V_50, N_49)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_51 = (_RGBias + (tmpvar_52 * _RGScale));
  mediump vec3 tmpvar_53;
  tmpvar_53 = (tmpvar_51 * _RGColor).xyz;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (tmpvar_51, 0.0, 1.0);
  highp vec3 tmpvar_55;
  tmpvar_55 = mix (spColor_37.xyz, tmpvar_53, vec3((tmpvar_54 * _RGRatio)));
  tmpvar_48 = tmpvar_55;
  outColor_5.xyz = tmpvar_48;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_56;
    scrpos_56 = xlv_TEXCOORD3;
    mediump float a_57;
    a_57 = xlv_TEXCOORD3.z;
    if ((a_57 < 0.95)) {
      scrpos_56.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_57 = (a_57 * 17.0);
      highp float tmpvar_58;
      tmpvar_58 = (scrpos_56.y / 4.0);
      highp float tmpvar_59;
      tmpvar_59 = (fract(abs(tmpvar_58)) * 4.0);
      highp float tmpvar_60;
      if ((tmpvar_58 >= 0.0)) {
        tmpvar_60 = tmpvar_59;
      } else {
        tmpvar_60 = -(tmpvar_59);
      };
      highp float tmpvar_61;
      tmpvar_61 = (scrpos_56.x / 4.0);
      highp float tmpvar_62;
      tmpvar_62 = (fract(abs(tmpvar_61)) * 4.0);
      highp float tmpvar_63;
      if ((tmpvar_61 >= 0.0)) {
        tmpvar_63 = tmpvar_62;
      } else {
        tmpvar_63 = -(tmpvar_62);
      };
      highp float x_64;
      x_64 = ((a_57 - _DITHERMATRIX[
        int(tmpvar_60)
      ][
        int(tmpvar_63)
      ]) - 0.01);
      if ((x_64 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_37.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_33;
  mediump vec3 R_34;
  mediump float intensity_35;
  mediump vec4 noiseTex_36;
  mediump vec4 spColor_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_37 = tmpvar_38;
  spColor_37.w = (spColor_37.w * _SPOpaqueness);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_36 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (((1.99 * tmpvar_39.x) * _SPNoiseScaler) - 1.0);
  intensity_35 = tmpvar_40;
  highp vec3 tmpvar_41;
  highp vec3 I_42;
  I_42 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_36 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_41 = (I_42 - (2.0 * (
    dot (tmpvar_24, I_42)
   * tmpvar_24)));
  R_34 = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = textureCube (_SPCubeMap, R_34).xyz;
  reflection_33 = tmpvar_43;
  highp vec3 tmpvar_44;
  mediump vec3 x_45;
  x_45 = (spColor_37.xyz * _SPOldColor.xyz);
  tmpvar_44 = mix (x_45, ((reflection_33 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_37.xyz = tmpvar_44;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_35 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_35 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_46;
      tmpvar_46 = mix (spColor_37.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_35) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_37.xyz = tmpvar_46;
    };
  };
  highp vec4 tmpvar_47;
  tmpvar_47 = mix (outColor_5, spColor_37, vec4(xlat_mutable_SPIntensity));
  spColor_37 = tmpvar_47;
  outColor_5.w = spColor_37.w;
  mediump vec3 tmpvar_48;
  highp vec3 N_49;
  N_49 = tmpvar_24;
  highp vec3 V_50;
  V_50 = V_2;
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = pow (clamp ((1.001 - 
    dot (V_50, N_49)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_51 = (_RGBias + (tmpvar_52 * _RGScale));
  mediump vec3 tmpvar_53;
  tmpvar_53 = (tmpvar_51 * _RGColor).xyz;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (tmpvar_51, 0.0, 1.0);
  highp vec3 tmpvar_55;
  tmpvar_55 = mix (spColor_37.xyz, tmpvar_53, vec3((tmpvar_54 * _RGRatio)));
  tmpvar_48 = tmpvar_55;
  outColor_5.xyz = tmpvar_48;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_56;
    scrpos_56 = xlv_TEXCOORD3;
    mediump float a_57;
    a_57 = xlv_TEXCOORD3.z;
    if ((a_57 < 0.95)) {
      scrpos_56.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_57 = (a_57 * 17.0);
      highp float tmpvar_58;
      tmpvar_58 = (scrpos_56.y / 4.0);
      highp float tmpvar_59;
      tmpvar_59 = (fract(abs(tmpvar_58)) * 4.0);
      highp float tmpvar_60;
      if ((tmpvar_58 >= 0.0)) {
        tmpvar_60 = tmpvar_59;
      } else {
        tmpvar_60 = -(tmpvar_59);
      };
      highp float tmpvar_61;
      tmpvar_61 = (scrpos_56.x / 4.0);
      highp float tmpvar_62;
      tmpvar_62 = (fract(abs(tmpvar_61)) * 4.0);
      highp float tmpvar_63;
      if ((tmpvar_61 >= 0.0)) {
        tmpvar_63 = tmpvar_62;
      } else {
        tmpvar_63 = -(tmpvar_62);
      };
      highp float x_64;
      x_64 = ((a_57 - _DITHERMATRIX[
        int(tmpvar_60)
      ][
        int(tmpvar_63)
      ]) - 0.01);
      if ((x_64 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_37.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_76;
  mediump vec3 R_77;
  mediump float intensity_78;
  mediump vec4 noiseTex_79;
  mediump vec4 spColor_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_80 = tmpvar_81;
  spColor_80.w = (spColor_80.w * _SPOpaqueness);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_79 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((1.99 * tmpvar_82.x) * _SPNoiseScaler) - 1.0);
  intensity_78 = tmpvar_83;
  highp vec3 tmpvar_84;
  highp vec3 I_85;
  I_85 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_79 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_84 = (I_85 - (2.0 * (
    dot (tmpvar_67, I_85)
   * tmpvar_67)));
  R_77 = tmpvar_84;
  lowp vec3 tmpvar_86;
  tmpvar_86 = textureCube (_SPCubeMap, R_77).xyz;
  reflection_76 = tmpvar_86;
  highp vec3 tmpvar_87;
  mediump vec3 x_88;
  x_88 = (spColor_80.xyz * _SPOldColor.xyz);
  tmpvar_87 = mix (x_88, ((reflection_76 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_80.xyz = tmpvar_87;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_78 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_78 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_89;
      tmpvar_89 = mix (spColor_80.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_78) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_80.xyz = tmpvar_89;
    };
  };
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (outColor_5, spColor_80, vec4(xlat_mutable_SPIntensity));
  spColor_80 = tmpvar_90;
  outColor_5.w = spColor_80.w;
  mediump vec3 tmpvar_91;
  highp vec3 N_92;
  N_92 = tmpvar_67;
  highp vec3 V_93;
  V_93 = V_2;
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = pow (clamp ((1.001 - 
    dot (V_93, N_92)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_94 = (_RGBias + (tmpvar_95 * _RGScale));
  mediump vec3 tmpvar_96;
  tmpvar_96 = (tmpvar_94 * _RGColor).xyz;
  mediump float tmpvar_97;
  tmpvar_97 = clamp (tmpvar_94, 0.0, 1.0);
  highp vec3 tmpvar_98;
  tmpvar_98 = mix (spColor_80.xyz, tmpvar_96, vec3((tmpvar_97 * _RGRatio)));
  tmpvar_91 = tmpvar_98;
  outColor_5.xyz = tmpvar_91;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_99;
    scrpos_99 = xlv_TEXCOORD3;
    mediump float a_100;
    a_100 = xlv_TEXCOORD3.z;
    if ((a_100 < 0.95)) {
      scrpos_99.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_100 = (a_100 * 17.0);
      highp float tmpvar_101;
      tmpvar_101 = (scrpos_99.y / 4.0);
      highp float tmpvar_102;
      tmpvar_102 = (fract(abs(tmpvar_101)) * 4.0);
      highp float tmpvar_103;
      if ((tmpvar_101 >= 0.0)) {
        tmpvar_103 = tmpvar_102;
      } else {
        tmpvar_103 = -(tmpvar_102);
      };
      highp float tmpvar_104;
      tmpvar_104 = (scrpos_99.x / 4.0);
      highp float tmpvar_105;
      tmpvar_105 = (fract(abs(tmpvar_104)) * 4.0);
      highp float tmpvar_106;
      if ((tmpvar_104 >= 0.0)) {
        tmpvar_106 = tmpvar_105;
      } else {
        tmpvar_106 = -(tmpvar_105);
      };
      highp float x_107;
      x_107 = ((a_100 - _DITHERMATRIX[
        int(tmpvar_103)
      ][
        int(tmpvar_106)
      ]) - 0.01);
      if ((x_107 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_80.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_76;
  mediump vec3 R_77;
  mediump float intensity_78;
  mediump vec4 noiseTex_79;
  mediump vec4 spColor_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_80 = tmpvar_81;
  spColor_80.w = (spColor_80.w * _SPOpaqueness);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_79 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((1.99 * tmpvar_82.x) * _SPNoiseScaler) - 1.0);
  intensity_78 = tmpvar_83;
  highp vec3 tmpvar_84;
  highp vec3 I_85;
  I_85 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_79 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_84 = (I_85 - (2.0 * (
    dot (tmpvar_67, I_85)
   * tmpvar_67)));
  R_77 = tmpvar_84;
  lowp vec3 tmpvar_86;
  tmpvar_86 = textureCube (_SPCubeMap, R_77).xyz;
  reflection_76 = tmpvar_86;
  highp vec3 tmpvar_87;
  mediump vec3 x_88;
  x_88 = (spColor_80.xyz * _SPOldColor.xyz);
  tmpvar_87 = mix (x_88, ((reflection_76 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_80.xyz = tmpvar_87;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_78 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_78 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_89;
      tmpvar_89 = mix (spColor_80.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_78) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_80.xyz = tmpvar_89;
    };
  };
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (outColor_5, spColor_80, vec4(xlat_mutable_SPIntensity));
  spColor_80 = tmpvar_90;
  outColor_5.w = spColor_80.w;
  mediump vec3 tmpvar_91;
  highp vec3 N_92;
  N_92 = tmpvar_67;
  highp vec3 V_93;
  V_93 = V_2;
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = pow (clamp ((1.001 - 
    dot (V_93, N_92)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_94 = (_RGBias + (tmpvar_95 * _RGScale));
  mediump vec3 tmpvar_96;
  tmpvar_96 = (tmpvar_94 * _RGColor).xyz;
  mediump float tmpvar_97;
  tmpvar_97 = clamp (tmpvar_94, 0.0, 1.0);
  highp vec3 tmpvar_98;
  tmpvar_98 = mix (spColor_80.xyz, tmpvar_96, vec3((tmpvar_97 * _RGRatio)));
  tmpvar_91 = tmpvar_98;
  outColor_5.xyz = tmpvar_91;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_99;
    scrpos_99 = xlv_TEXCOORD3;
    mediump float a_100;
    a_100 = xlv_TEXCOORD3.z;
    if ((a_100 < 0.95)) {
      scrpos_99.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_100 = (a_100 * 17.0);
      highp float tmpvar_101;
      tmpvar_101 = (scrpos_99.y / 4.0);
      highp float tmpvar_102;
      tmpvar_102 = (fract(abs(tmpvar_101)) * 4.0);
      highp float tmpvar_103;
      if ((tmpvar_101 >= 0.0)) {
        tmpvar_103 = tmpvar_102;
      } else {
        tmpvar_103 = -(tmpvar_102);
      };
      highp float tmpvar_104;
      tmpvar_104 = (scrpos_99.x / 4.0);
      highp float tmpvar_105;
      tmpvar_105 = (fract(abs(tmpvar_104)) * 4.0);
      highp float tmpvar_106;
      if ((tmpvar_104 >= 0.0)) {
        tmpvar_106 = tmpvar_105;
      } else {
        tmpvar_106 = -(tmpvar_105);
      };
      highp float x_107;
      x_107 = ((a_100 - _DITHERMATRIX[
        int(tmpvar_103)
      ][
        int(tmpvar_106)
      ]) - 0.01);
      if ((x_107 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_80.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_76;
  mediump vec3 R_77;
  mediump float intensity_78;
  mediump vec4 noiseTex_79;
  mediump vec4 spColor_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_80 = tmpvar_81;
  spColor_80.w = (spColor_80.w * _SPOpaqueness);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_79 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((1.99 * tmpvar_82.x) * _SPNoiseScaler) - 1.0);
  intensity_78 = tmpvar_83;
  highp vec3 tmpvar_84;
  highp vec3 I_85;
  I_85 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_79 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_84 = (I_85 - (2.0 * (
    dot (tmpvar_67, I_85)
   * tmpvar_67)));
  R_77 = tmpvar_84;
  lowp vec3 tmpvar_86;
  tmpvar_86 = textureCube (_SPCubeMap, R_77).xyz;
  reflection_76 = tmpvar_86;
  highp vec3 tmpvar_87;
  mediump vec3 x_88;
  x_88 = (spColor_80.xyz * _SPOldColor.xyz);
  tmpvar_87 = mix (x_88, ((reflection_76 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_80.xyz = tmpvar_87;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_78 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_78 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_89;
      tmpvar_89 = mix (spColor_80.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_78) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_80.xyz = tmpvar_89;
    };
  };
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (outColor_5, spColor_80, vec4(xlat_mutable_SPIntensity));
  spColor_80 = tmpvar_90;
  outColor_5.w = spColor_80.w;
  mediump vec3 tmpvar_91;
  highp vec3 N_92;
  N_92 = tmpvar_67;
  highp vec3 V_93;
  V_93 = V_2;
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = pow (clamp ((1.001 - 
    dot (V_93, N_92)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_94 = (_RGBias + (tmpvar_95 * _RGScale));
  mediump vec3 tmpvar_96;
  tmpvar_96 = (tmpvar_94 * _RGColor).xyz;
  mediump float tmpvar_97;
  tmpvar_97 = clamp (tmpvar_94, 0.0, 1.0);
  highp vec3 tmpvar_98;
  tmpvar_98 = mix (spColor_80.xyz, tmpvar_96, vec3((tmpvar_97 * _RGRatio)));
  tmpvar_91 = tmpvar_98;
  outColor_5.xyz = tmpvar_91;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_99;
    scrpos_99 = xlv_TEXCOORD3;
    mediump float a_100;
    a_100 = xlv_TEXCOORD3.z;
    if ((a_100 < 0.95)) {
      scrpos_99.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_100 = (a_100 * 17.0);
      highp float tmpvar_101;
      tmpvar_101 = (scrpos_99.y / 4.0);
      highp float tmpvar_102;
      tmpvar_102 = (fract(abs(tmpvar_101)) * 4.0);
      highp float tmpvar_103;
      if ((tmpvar_101 >= 0.0)) {
        tmpvar_103 = tmpvar_102;
      } else {
        tmpvar_103 = -(tmpvar_102);
      };
      highp float tmpvar_104;
      tmpvar_104 = (scrpos_99.x / 4.0);
      highp float tmpvar_105;
      tmpvar_105 = (fract(abs(tmpvar_104)) * 4.0);
      highp float tmpvar_106;
      if ((tmpvar_104 >= 0.0)) {
        tmpvar_106 = tmpvar_105;
      } else {
        tmpvar_106 = -(tmpvar_105);
      };
      highp float x_107;
      x_107 = ((a_100 - _DITHERMATRIX[
        int(tmpvar_103)
      ][
        int(tmpvar_106)
      ]) - 0.01);
      if ((x_107 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_80.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
}
}
 Pass {
  Name "COMPLEX_FRONT"
  LOD 200
  Tags { "Distortion" = "None" "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "OutlineType" = "Complex" "QUEUE" = "Transparent" "Reflected" = "Reflected" "RenderType" = "Transparent" }
  ZWrite Off
  GpuProgramID 76862
Program "vp" {
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_76;
    scrpos_76 = xlv_TEXCOORD3;
    mediump float a_77;
    a_77 = xlv_TEXCOORD3.z;
    if ((a_77 < 0.95)) {
      scrpos_76.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_77 = (a_77 * 17.0);
      highp float tmpvar_78;
      tmpvar_78 = (scrpos_76.y / 4.0);
      highp float tmpvar_79;
      tmpvar_79 = (fract(abs(tmpvar_78)) * 4.0);
      highp float tmpvar_80;
      if ((tmpvar_78 >= 0.0)) {
        tmpvar_80 = tmpvar_79;
      } else {
        tmpvar_80 = -(tmpvar_79);
      };
      highp float tmpvar_81;
      tmpvar_81 = (scrpos_76.x / 4.0);
      highp float tmpvar_82;
      tmpvar_82 = (fract(abs(tmpvar_81)) * 4.0);
      highp float tmpvar_83;
      if ((tmpvar_81 >= 0.0)) {
        tmpvar_83 = tmpvar_82;
      } else {
        tmpvar_83 = -(tmpvar_82);
      };
      highp float x_84;
      x_84 = ((a_77 - _DITHERMATRIX[
        int(tmpvar_80)
      ][
        int(tmpvar_83)
      ]) - 0.01);
      if ((x_84 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_76;
    scrpos_76 = xlv_TEXCOORD3;
    mediump float a_77;
    a_77 = xlv_TEXCOORD3.z;
    if ((a_77 < 0.95)) {
      scrpos_76.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_77 = (a_77 * 17.0);
      highp float tmpvar_78;
      tmpvar_78 = (scrpos_76.y / 4.0);
      highp float tmpvar_79;
      tmpvar_79 = (fract(abs(tmpvar_78)) * 4.0);
      highp float tmpvar_80;
      if ((tmpvar_78 >= 0.0)) {
        tmpvar_80 = tmpvar_79;
      } else {
        tmpvar_80 = -(tmpvar_79);
      };
      highp float tmpvar_81;
      tmpvar_81 = (scrpos_76.x / 4.0);
      highp float tmpvar_82;
      tmpvar_82 = (fract(abs(tmpvar_81)) * 4.0);
      highp float tmpvar_83;
      if ((tmpvar_81 >= 0.0)) {
        tmpvar_83 = tmpvar_82;
      } else {
        tmpvar_83 = -(tmpvar_82);
      };
      highp float x_84;
      x_84 = ((a_77 - _DITHERMATRIX[
        int(tmpvar_80)
      ][
        int(tmpvar_83)
      ]) - 0.01);
      if ((x_84 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_76;
    scrpos_76 = xlv_TEXCOORD3;
    mediump float a_77;
    a_77 = xlv_TEXCOORD3.z;
    if ((a_77 < 0.95)) {
      scrpos_76.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_77 = (a_77 * 17.0);
      highp float tmpvar_78;
      tmpvar_78 = (scrpos_76.y / 4.0);
      highp float tmpvar_79;
      tmpvar_79 = (fract(abs(tmpvar_78)) * 4.0);
      highp float tmpvar_80;
      if ((tmpvar_78 >= 0.0)) {
        tmpvar_80 = tmpvar_79;
      } else {
        tmpvar_80 = -(tmpvar_79);
      };
      highp float tmpvar_81;
      tmpvar_81 = (scrpos_76.x / 4.0);
      highp float tmpvar_82;
      tmpvar_82 = (fract(abs(tmpvar_81)) * 4.0);
      highp float tmpvar_83;
      if ((tmpvar_81 >= 0.0)) {
        tmpvar_83 = tmpvar_82;
      } else {
        tmpvar_83 = -(tmpvar_82);
      };
      highp float x_84;
      x_84 = ((a_77 - _DITHERMATRIX[
        int(tmpvar_80)
      ][
        int(tmpvar_83)
      ]) - 0.01);
      if ((x_84 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_13;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_13;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_13;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_13;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_13;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_13;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = tmpvar_24;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (outColor_5.xyz, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_41;
    scrpos_41 = xlv_TEXCOORD3;
    mediump float a_42;
    a_42 = xlv_TEXCOORD3.z;
    if ((a_42 < 0.95)) {
      scrpos_41.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_42 = (a_42 * 17.0);
      highp float tmpvar_43;
      tmpvar_43 = (scrpos_41.y / 4.0);
      highp float tmpvar_44;
      tmpvar_44 = (fract(abs(tmpvar_43)) * 4.0);
      highp float tmpvar_45;
      if ((tmpvar_43 >= 0.0)) {
        tmpvar_45 = tmpvar_44;
      } else {
        tmpvar_45 = -(tmpvar_44);
      };
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_41.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float x_49;
      x_49 = ((a_42 - _DITHERMATRIX[
        int(tmpvar_45)
      ][
        int(tmpvar_48)
      ]) - 0.01);
      if ((x_49 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = tmpvar_24;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (outColor_5.xyz, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_41;
    scrpos_41 = xlv_TEXCOORD3;
    mediump float a_42;
    a_42 = xlv_TEXCOORD3.z;
    if ((a_42 < 0.95)) {
      scrpos_41.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_42 = (a_42 * 17.0);
      highp float tmpvar_43;
      tmpvar_43 = (scrpos_41.y / 4.0);
      highp float tmpvar_44;
      tmpvar_44 = (fract(abs(tmpvar_43)) * 4.0);
      highp float tmpvar_45;
      if ((tmpvar_43 >= 0.0)) {
        tmpvar_45 = tmpvar_44;
      } else {
        tmpvar_45 = -(tmpvar_44);
      };
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_41.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float x_49;
      x_49 = ((a_42 - _DITHERMATRIX[
        int(tmpvar_45)
      ][
        int(tmpvar_48)
      ]) - 0.01);
      if ((x_49 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = tmpvar_24;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (outColor_5.xyz, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_41;
    scrpos_41 = xlv_TEXCOORD3;
    mediump float a_42;
    a_42 = xlv_TEXCOORD3.z;
    if ((a_42 < 0.95)) {
      scrpos_41.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_42 = (a_42 * 17.0);
      highp float tmpvar_43;
      tmpvar_43 = (scrpos_41.y / 4.0);
      highp float tmpvar_44;
      tmpvar_44 = (fract(abs(tmpvar_43)) * 4.0);
      highp float tmpvar_45;
      if ((tmpvar_43 >= 0.0)) {
        tmpvar_45 = tmpvar_44;
      } else {
        tmpvar_45 = -(tmpvar_44);
      };
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_41.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float x_49;
      x_49 = ((a_42 - _DITHERMATRIX[
        int(tmpvar_45)
      ][
        int(tmpvar_48)
      ]) - 0.01);
      if ((x_49 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_76;
  highp vec3 N_77;
  N_77 = tmpvar_67;
  highp vec3 V_78;
  V_78 = V_2;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = pow (clamp ((1.001 - 
    dot (V_78, N_77)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_79 = (_RGBias + (tmpvar_80 * _RGScale));
  mediump vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_79 * _RGColor).xyz;
  mediump float tmpvar_82;
  tmpvar_82 = clamp (tmpvar_79, 0.0, 1.0);
  highp vec3 tmpvar_83;
  tmpvar_83 = mix (outColor_5.xyz, tmpvar_81, vec3((tmpvar_82 * _RGRatio)));
  tmpvar_76 = tmpvar_83;
  outColor_5.xyz = tmpvar_76;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_84;
    scrpos_84 = xlv_TEXCOORD3;
    mediump float a_85;
    a_85 = xlv_TEXCOORD3.z;
    if ((a_85 < 0.95)) {
      scrpos_84.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_85 = (a_85 * 17.0);
      highp float tmpvar_86;
      tmpvar_86 = (scrpos_84.y / 4.0);
      highp float tmpvar_87;
      tmpvar_87 = (fract(abs(tmpvar_86)) * 4.0);
      highp float tmpvar_88;
      if ((tmpvar_86 >= 0.0)) {
        tmpvar_88 = tmpvar_87;
      } else {
        tmpvar_88 = -(tmpvar_87);
      };
      highp float tmpvar_89;
      tmpvar_89 = (scrpos_84.x / 4.0);
      highp float tmpvar_90;
      tmpvar_90 = (fract(abs(tmpvar_89)) * 4.0);
      highp float tmpvar_91;
      if ((tmpvar_89 >= 0.0)) {
        tmpvar_91 = tmpvar_90;
      } else {
        tmpvar_91 = -(tmpvar_90);
      };
      highp float x_92;
      x_92 = ((a_85 - _DITHERMATRIX[
        int(tmpvar_88)
      ][
        int(tmpvar_91)
      ]) - 0.01);
      if ((x_92 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_76;
  highp vec3 N_77;
  N_77 = tmpvar_67;
  highp vec3 V_78;
  V_78 = V_2;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = pow (clamp ((1.001 - 
    dot (V_78, N_77)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_79 = (_RGBias + (tmpvar_80 * _RGScale));
  mediump vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_79 * _RGColor).xyz;
  mediump float tmpvar_82;
  tmpvar_82 = clamp (tmpvar_79, 0.0, 1.0);
  highp vec3 tmpvar_83;
  tmpvar_83 = mix (outColor_5.xyz, tmpvar_81, vec3((tmpvar_82 * _RGRatio)));
  tmpvar_76 = tmpvar_83;
  outColor_5.xyz = tmpvar_76;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_84;
    scrpos_84 = xlv_TEXCOORD3;
    mediump float a_85;
    a_85 = xlv_TEXCOORD3.z;
    if ((a_85 < 0.95)) {
      scrpos_84.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_85 = (a_85 * 17.0);
      highp float tmpvar_86;
      tmpvar_86 = (scrpos_84.y / 4.0);
      highp float tmpvar_87;
      tmpvar_87 = (fract(abs(tmpvar_86)) * 4.0);
      highp float tmpvar_88;
      if ((tmpvar_86 >= 0.0)) {
        tmpvar_88 = tmpvar_87;
      } else {
        tmpvar_88 = -(tmpvar_87);
      };
      highp float tmpvar_89;
      tmpvar_89 = (scrpos_84.x / 4.0);
      highp float tmpvar_90;
      tmpvar_90 = (fract(abs(tmpvar_89)) * 4.0);
      highp float tmpvar_91;
      if ((tmpvar_89 >= 0.0)) {
        tmpvar_91 = tmpvar_90;
      } else {
        tmpvar_91 = -(tmpvar_90);
      };
      highp float x_92;
      x_92 = ((a_85 - _DITHERMATRIX[
        int(tmpvar_88)
      ][
        int(tmpvar_91)
      ]) - 0.01);
      if ((x_92 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_76;
  highp vec3 N_77;
  N_77 = tmpvar_67;
  highp vec3 V_78;
  V_78 = V_2;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = pow (clamp ((1.001 - 
    dot (V_78, N_77)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_79 = (_RGBias + (tmpvar_80 * _RGScale));
  mediump vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_79 * _RGColor).xyz;
  mediump float tmpvar_82;
  tmpvar_82 = clamp (tmpvar_79, 0.0, 1.0);
  highp vec3 tmpvar_83;
  tmpvar_83 = mix (outColor_5.xyz, tmpvar_81, vec3((tmpvar_82 * _RGRatio)));
  tmpvar_76 = tmpvar_83;
  outColor_5.xyz = tmpvar_76;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_84;
    scrpos_84 = xlv_TEXCOORD3;
    mediump float a_85;
    a_85 = xlv_TEXCOORD3.z;
    if ((a_85 < 0.95)) {
      scrpos_84.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_85 = (a_85 * 17.0);
      highp float tmpvar_86;
      tmpvar_86 = (scrpos_84.y / 4.0);
      highp float tmpvar_87;
      tmpvar_87 = (fract(abs(tmpvar_86)) * 4.0);
      highp float tmpvar_88;
      if ((tmpvar_86 >= 0.0)) {
        tmpvar_88 = tmpvar_87;
      } else {
        tmpvar_88 = -(tmpvar_87);
      };
      highp float tmpvar_89;
      tmpvar_89 = (scrpos_84.x / 4.0);
      highp float tmpvar_90;
      tmpvar_90 = (fract(abs(tmpvar_89)) * 4.0);
      highp float tmpvar_91;
      if ((tmpvar_89 >= 0.0)) {
        tmpvar_91 = tmpvar_90;
      } else {
        tmpvar_91 = -(tmpvar_90);
      };
      highp float x_92;
      x_92 = ((a_85 - _DITHERMATRIX[
        int(tmpvar_88)
      ][
        int(tmpvar_91)
      ]) - 0.01);
      if ((x_92 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_33;
  mediump vec3 R_34;
  mediump float intensity_35;
  mediump vec4 noiseTex_36;
  mediump vec4 spColor_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_37 = tmpvar_38;
  spColor_37.w = (spColor_37.w * _SPOpaqueness);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_36 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (((1.99 * tmpvar_39.x) * _SPNoiseScaler) - 1.0);
  intensity_35 = tmpvar_40;
  highp vec3 tmpvar_41;
  highp vec3 I_42;
  I_42 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_36 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_41 = (I_42 - (2.0 * (
    dot (tmpvar_24, I_42)
   * tmpvar_24)));
  R_34 = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = textureCube (_SPCubeMap, R_34).xyz;
  reflection_33 = tmpvar_43;
  highp vec3 tmpvar_44;
  mediump vec3 x_45;
  x_45 = (spColor_37.xyz * _SPOldColor.xyz);
  tmpvar_44 = mix (x_45, ((reflection_33 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_37.xyz = tmpvar_44;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_35 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_35 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_46;
      tmpvar_46 = mix (spColor_37.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_35) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_37.xyz = tmpvar_46;
    };
  };
  highp vec4 tmpvar_47;
  tmpvar_47 = mix (outColor_5, spColor_37, vec4(xlat_mutable_SPIntensity));
  spColor_37 = tmpvar_47;
  outColor_5 = spColor_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_48;
    scrpos_48 = xlv_TEXCOORD3;
    mediump float a_49;
    a_49 = xlv_TEXCOORD3.z;
    if ((a_49 < 0.95)) {
      scrpos_48.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_49 = (a_49 * 17.0);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_48.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float tmpvar_53;
      tmpvar_53 = (scrpos_48.x / 4.0);
      highp float tmpvar_54;
      tmpvar_54 = (fract(abs(tmpvar_53)) * 4.0);
      highp float tmpvar_55;
      if ((tmpvar_53 >= 0.0)) {
        tmpvar_55 = tmpvar_54;
      } else {
        tmpvar_55 = -(tmpvar_54);
      };
      highp float x_56;
      x_56 = ((a_49 - _DITHERMATRIX[
        int(tmpvar_52)
      ][
        int(tmpvar_55)
      ]) - 0.01);
      if ((x_56 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_37.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_33;
  mediump vec3 R_34;
  mediump float intensity_35;
  mediump vec4 noiseTex_36;
  mediump vec4 spColor_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_37 = tmpvar_38;
  spColor_37.w = (spColor_37.w * _SPOpaqueness);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_36 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (((1.99 * tmpvar_39.x) * _SPNoiseScaler) - 1.0);
  intensity_35 = tmpvar_40;
  highp vec3 tmpvar_41;
  highp vec3 I_42;
  I_42 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_36 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_41 = (I_42 - (2.0 * (
    dot (tmpvar_24, I_42)
   * tmpvar_24)));
  R_34 = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = textureCube (_SPCubeMap, R_34).xyz;
  reflection_33 = tmpvar_43;
  highp vec3 tmpvar_44;
  mediump vec3 x_45;
  x_45 = (spColor_37.xyz * _SPOldColor.xyz);
  tmpvar_44 = mix (x_45, ((reflection_33 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_37.xyz = tmpvar_44;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_35 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_35 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_46;
      tmpvar_46 = mix (spColor_37.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_35) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_37.xyz = tmpvar_46;
    };
  };
  highp vec4 tmpvar_47;
  tmpvar_47 = mix (outColor_5, spColor_37, vec4(xlat_mutable_SPIntensity));
  spColor_37 = tmpvar_47;
  outColor_5 = spColor_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_48;
    scrpos_48 = xlv_TEXCOORD3;
    mediump float a_49;
    a_49 = xlv_TEXCOORD3.z;
    if ((a_49 < 0.95)) {
      scrpos_48.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_49 = (a_49 * 17.0);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_48.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float tmpvar_53;
      tmpvar_53 = (scrpos_48.x / 4.0);
      highp float tmpvar_54;
      tmpvar_54 = (fract(abs(tmpvar_53)) * 4.0);
      highp float tmpvar_55;
      if ((tmpvar_53 >= 0.0)) {
        tmpvar_55 = tmpvar_54;
      } else {
        tmpvar_55 = -(tmpvar_54);
      };
      highp float x_56;
      x_56 = ((a_49 - _DITHERMATRIX[
        int(tmpvar_52)
      ][
        int(tmpvar_55)
      ]) - 0.01);
      if ((x_56 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_37.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_33;
  mediump vec3 R_34;
  mediump float intensity_35;
  mediump vec4 noiseTex_36;
  mediump vec4 spColor_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_37 = tmpvar_38;
  spColor_37.w = (spColor_37.w * _SPOpaqueness);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_36 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (((1.99 * tmpvar_39.x) * _SPNoiseScaler) - 1.0);
  intensity_35 = tmpvar_40;
  highp vec3 tmpvar_41;
  highp vec3 I_42;
  I_42 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_36 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_41 = (I_42 - (2.0 * (
    dot (tmpvar_24, I_42)
   * tmpvar_24)));
  R_34 = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = textureCube (_SPCubeMap, R_34).xyz;
  reflection_33 = tmpvar_43;
  highp vec3 tmpvar_44;
  mediump vec3 x_45;
  x_45 = (spColor_37.xyz * _SPOldColor.xyz);
  tmpvar_44 = mix (x_45, ((reflection_33 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_37.xyz = tmpvar_44;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_35 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_35 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_46;
      tmpvar_46 = mix (spColor_37.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_35) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_37.xyz = tmpvar_46;
    };
  };
  highp vec4 tmpvar_47;
  tmpvar_47 = mix (outColor_5, spColor_37, vec4(xlat_mutable_SPIntensity));
  spColor_37 = tmpvar_47;
  outColor_5 = spColor_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_48;
    scrpos_48 = xlv_TEXCOORD3;
    mediump float a_49;
    a_49 = xlv_TEXCOORD3.z;
    if ((a_49 < 0.95)) {
      scrpos_48.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_49 = (a_49 * 17.0);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_48.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float tmpvar_53;
      tmpvar_53 = (scrpos_48.x / 4.0);
      highp float tmpvar_54;
      tmpvar_54 = (fract(abs(tmpvar_53)) * 4.0);
      highp float tmpvar_55;
      if ((tmpvar_53 >= 0.0)) {
        tmpvar_55 = tmpvar_54;
      } else {
        tmpvar_55 = -(tmpvar_54);
      };
      highp float x_56;
      x_56 = ((a_49 - _DITHERMATRIX[
        int(tmpvar_52)
      ][
        int(tmpvar_55)
      ]) - 0.01);
      if ((x_56 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_37.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_76;
  mediump vec3 R_77;
  mediump float intensity_78;
  mediump vec4 noiseTex_79;
  mediump vec4 spColor_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_80 = tmpvar_81;
  spColor_80.w = (spColor_80.w * _SPOpaqueness);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_79 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((1.99 * tmpvar_82.x) * _SPNoiseScaler) - 1.0);
  intensity_78 = tmpvar_83;
  highp vec3 tmpvar_84;
  highp vec3 I_85;
  I_85 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_79 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_84 = (I_85 - (2.0 * (
    dot (tmpvar_67, I_85)
   * tmpvar_67)));
  R_77 = tmpvar_84;
  lowp vec3 tmpvar_86;
  tmpvar_86 = textureCube (_SPCubeMap, R_77).xyz;
  reflection_76 = tmpvar_86;
  highp vec3 tmpvar_87;
  mediump vec3 x_88;
  x_88 = (spColor_80.xyz * _SPOldColor.xyz);
  tmpvar_87 = mix (x_88, ((reflection_76 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_80.xyz = tmpvar_87;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_78 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_78 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_89;
      tmpvar_89 = mix (spColor_80.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_78) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_80.xyz = tmpvar_89;
    };
  };
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (outColor_5, spColor_80, vec4(xlat_mutable_SPIntensity));
  spColor_80 = tmpvar_90;
  outColor_5 = spColor_80;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_91;
    scrpos_91 = xlv_TEXCOORD3;
    mediump float a_92;
    a_92 = xlv_TEXCOORD3.z;
    if ((a_92 < 0.95)) {
      scrpos_91.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_92 = (a_92 * 17.0);
      highp float tmpvar_93;
      tmpvar_93 = (scrpos_91.y / 4.0);
      highp float tmpvar_94;
      tmpvar_94 = (fract(abs(tmpvar_93)) * 4.0);
      highp float tmpvar_95;
      if ((tmpvar_93 >= 0.0)) {
        tmpvar_95 = tmpvar_94;
      } else {
        tmpvar_95 = -(tmpvar_94);
      };
      highp float tmpvar_96;
      tmpvar_96 = (scrpos_91.x / 4.0);
      highp float tmpvar_97;
      tmpvar_97 = (fract(abs(tmpvar_96)) * 4.0);
      highp float tmpvar_98;
      if ((tmpvar_96 >= 0.0)) {
        tmpvar_98 = tmpvar_97;
      } else {
        tmpvar_98 = -(tmpvar_97);
      };
      highp float x_99;
      x_99 = ((a_92 - _DITHERMATRIX[
        int(tmpvar_95)
      ][
        int(tmpvar_98)
      ]) - 0.01);
      if ((x_99 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_80.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_76;
  mediump vec3 R_77;
  mediump float intensity_78;
  mediump vec4 noiseTex_79;
  mediump vec4 spColor_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_80 = tmpvar_81;
  spColor_80.w = (spColor_80.w * _SPOpaqueness);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_79 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((1.99 * tmpvar_82.x) * _SPNoiseScaler) - 1.0);
  intensity_78 = tmpvar_83;
  highp vec3 tmpvar_84;
  highp vec3 I_85;
  I_85 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_79 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_84 = (I_85 - (2.0 * (
    dot (tmpvar_67, I_85)
   * tmpvar_67)));
  R_77 = tmpvar_84;
  lowp vec3 tmpvar_86;
  tmpvar_86 = textureCube (_SPCubeMap, R_77).xyz;
  reflection_76 = tmpvar_86;
  highp vec3 tmpvar_87;
  mediump vec3 x_88;
  x_88 = (spColor_80.xyz * _SPOldColor.xyz);
  tmpvar_87 = mix (x_88, ((reflection_76 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_80.xyz = tmpvar_87;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_78 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_78 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_89;
      tmpvar_89 = mix (spColor_80.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_78) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_80.xyz = tmpvar_89;
    };
  };
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (outColor_5, spColor_80, vec4(xlat_mutable_SPIntensity));
  spColor_80 = tmpvar_90;
  outColor_5 = spColor_80;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_91;
    scrpos_91 = xlv_TEXCOORD3;
    mediump float a_92;
    a_92 = xlv_TEXCOORD3.z;
    if ((a_92 < 0.95)) {
      scrpos_91.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_92 = (a_92 * 17.0);
      highp float tmpvar_93;
      tmpvar_93 = (scrpos_91.y / 4.0);
      highp float tmpvar_94;
      tmpvar_94 = (fract(abs(tmpvar_93)) * 4.0);
      highp float tmpvar_95;
      if ((tmpvar_93 >= 0.0)) {
        tmpvar_95 = tmpvar_94;
      } else {
        tmpvar_95 = -(tmpvar_94);
      };
      highp float tmpvar_96;
      tmpvar_96 = (scrpos_91.x / 4.0);
      highp float tmpvar_97;
      tmpvar_97 = (fract(abs(tmpvar_96)) * 4.0);
      highp float tmpvar_98;
      if ((tmpvar_96 >= 0.0)) {
        tmpvar_98 = tmpvar_97;
      } else {
        tmpvar_98 = -(tmpvar_97);
      };
      highp float x_99;
      x_99 = ((a_92 - _DITHERMATRIX[
        int(tmpvar_95)
      ][
        int(tmpvar_98)
      ]) - 0.01);
      if ((x_99 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_80.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_76;
  mediump vec3 R_77;
  mediump float intensity_78;
  mediump vec4 noiseTex_79;
  mediump vec4 spColor_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_80 = tmpvar_81;
  spColor_80.w = (spColor_80.w * _SPOpaqueness);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_79 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((1.99 * tmpvar_82.x) * _SPNoiseScaler) - 1.0);
  intensity_78 = tmpvar_83;
  highp vec3 tmpvar_84;
  highp vec3 I_85;
  I_85 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_79 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_84 = (I_85 - (2.0 * (
    dot (tmpvar_67, I_85)
   * tmpvar_67)));
  R_77 = tmpvar_84;
  lowp vec3 tmpvar_86;
  tmpvar_86 = textureCube (_SPCubeMap, R_77).xyz;
  reflection_76 = tmpvar_86;
  highp vec3 tmpvar_87;
  mediump vec3 x_88;
  x_88 = (spColor_80.xyz * _SPOldColor.xyz);
  tmpvar_87 = mix (x_88, ((reflection_76 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_80.xyz = tmpvar_87;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_78 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_78 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_89;
      tmpvar_89 = mix (spColor_80.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_78) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_80.xyz = tmpvar_89;
    };
  };
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (outColor_5, spColor_80, vec4(xlat_mutable_SPIntensity));
  spColor_80 = tmpvar_90;
  outColor_5 = spColor_80;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_91;
    scrpos_91 = xlv_TEXCOORD3;
    mediump float a_92;
    a_92 = xlv_TEXCOORD3.z;
    if ((a_92 < 0.95)) {
      scrpos_91.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_92 = (a_92 * 17.0);
      highp float tmpvar_93;
      tmpvar_93 = (scrpos_91.y / 4.0);
      highp float tmpvar_94;
      tmpvar_94 = (fract(abs(tmpvar_93)) * 4.0);
      highp float tmpvar_95;
      if ((tmpvar_93 >= 0.0)) {
        tmpvar_95 = tmpvar_94;
      } else {
        tmpvar_95 = -(tmpvar_94);
      };
      highp float tmpvar_96;
      tmpvar_96 = (scrpos_91.x / 4.0);
      highp float tmpvar_97;
      tmpvar_97 = (fract(abs(tmpvar_96)) * 4.0);
      highp float tmpvar_98;
      if ((tmpvar_96 >= 0.0)) {
        tmpvar_98 = tmpvar_97;
      } else {
        tmpvar_98 = -(tmpvar_97);
      };
      highp float x_99;
      x_99 = ((a_92 - _DITHERMATRIX[
        int(tmpvar_95)
      ][
        int(tmpvar_98)
      ]) - 0.01);
      if ((x_99 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_80.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_13;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_13;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_13;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_13;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_13;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_13;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_33;
  mediump vec3 R_34;
  mediump float intensity_35;
  mediump vec4 noiseTex_36;
  mediump vec4 spColor_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_37 = tmpvar_38;
  spColor_37.w = (spColor_37.w * _SPOpaqueness);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_36 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (((1.99 * tmpvar_39.x) * _SPNoiseScaler) - 1.0);
  intensity_35 = tmpvar_40;
  highp vec3 tmpvar_41;
  highp vec3 I_42;
  I_42 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_36 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_41 = (I_42 - (2.0 * (
    dot (tmpvar_24, I_42)
   * tmpvar_24)));
  R_34 = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = textureCube (_SPCubeMap, R_34).xyz;
  reflection_33 = tmpvar_43;
  highp vec3 tmpvar_44;
  mediump vec3 x_45;
  x_45 = (spColor_37.xyz * _SPOldColor.xyz);
  tmpvar_44 = mix (x_45, ((reflection_33 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_37.xyz = tmpvar_44;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_35 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_35 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_46;
      tmpvar_46 = mix (spColor_37.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_35) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_37.xyz = tmpvar_46;
    };
  };
  highp vec4 tmpvar_47;
  tmpvar_47 = mix (outColor_5, spColor_37, vec4(xlat_mutable_SPIntensity));
  spColor_37 = tmpvar_47;
  outColor_5.w = spColor_37.w;
  mediump vec3 tmpvar_48;
  highp vec3 N_49;
  N_49 = tmpvar_24;
  highp vec3 V_50;
  V_50 = V_2;
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = pow (clamp ((1.001 - 
    dot (V_50, N_49)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_51 = (_RGBias + (tmpvar_52 * _RGScale));
  mediump vec3 tmpvar_53;
  tmpvar_53 = (tmpvar_51 * _RGColor).xyz;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (tmpvar_51, 0.0, 1.0);
  highp vec3 tmpvar_55;
  tmpvar_55 = mix (spColor_37.xyz, tmpvar_53, vec3((tmpvar_54 * _RGRatio)));
  tmpvar_48 = tmpvar_55;
  outColor_5.xyz = tmpvar_48;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_56;
    scrpos_56 = xlv_TEXCOORD3;
    mediump float a_57;
    a_57 = xlv_TEXCOORD3.z;
    if ((a_57 < 0.95)) {
      scrpos_56.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_57 = (a_57 * 17.0);
      highp float tmpvar_58;
      tmpvar_58 = (scrpos_56.y / 4.0);
      highp float tmpvar_59;
      tmpvar_59 = (fract(abs(tmpvar_58)) * 4.0);
      highp float tmpvar_60;
      if ((tmpvar_58 >= 0.0)) {
        tmpvar_60 = tmpvar_59;
      } else {
        tmpvar_60 = -(tmpvar_59);
      };
      highp float tmpvar_61;
      tmpvar_61 = (scrpos_56.x / 4.0);
      highp float tmpvar_62;
      tmpvar_62 = (fract(abs(tmpvar_61)) * 4.0);
      highp float tmpvar_63;
      if ((tmpvar_61 >= 0.0)) {
        tmpvar_63 = tmpvar_62;
      } else {
        tmpvar_63 = -(tmpvar_62);
      };
      highp float x_64;
      x_64 = ((a_57 - _DITHERMATRIX[
        int(tmpvar_60)
      ][
        int(tmpvar_63)
      ]) - 0.01);
      if ((x_64 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_37.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_33;
  mediump vec3 R_34;
  mediump float intensity_35;
  mediump vec4 noiseTex_36;
  mediump vec4 spColor_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_37 = tmpvar_38;
  spColor_37.w = (spColor_37.w * _SPOpaqueness);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_36 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (((1.99 * tmpvar_39.x) * _SPNoiseScaler) - 1.0);
  intensity_35 = tmpvar_40;
  highp vec3 tmpvar_41;
  highp vec3 I_42;
  I_42 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_36 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_41 = (I_42 - (2.0 * (
    dot (tmpvar_24, I_42)
   * tmpvar_24)));
  R_34 = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = textureCube (_SPCubeMap, R_34).xyz;
  reflection_33 = tmpvar_43;
  highp vec3 tmpvar_44;
  mediump vec3 x_45;
  x_45 = (spColor_37.xyz * _SPOldColor.xyz);
  tmpvar_44 = mix (x_45, ((reflection_33 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_37.xyz = tmpvar_44;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_35 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_35 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_46;
      tmpvar_46 = mix (spColor_37.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_35) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_37.xyz = tmpvar_46;
    };
  };
  highp vec4 tmpvar_47;
  tmpvar_47 = mix (outColor_5, spColor_37, vec4(xlat_mutable_SPIntensity));
  spColor_37 = tmpvar_47;
  outColor_5.w = spColor_37.w;
  mediump vec3 tmpvar_48;
  highp vec3 N_49;
  N_49 = tmpvar_24;
  highp vec3 V_50;
  V_50 = V_2;
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = pow (clamp ((1.001 - 
    dot (V_50, N_49)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_51 = (_RGBias + (tmpvar_52 * _RGScale));
  mediump vec3 tmpvar_53;
  tmpvar_53 = (tmpvar_51 * _RGColor).xyz;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (tmpvar_51, 0.0, 1.0);
  highp vec3 tmpvar_55;
  tmpvar_55 = mix (spColor_37.xyz, tmpvar_53, vec3((tmpvar_54 * _RGRatio)));
  tmpvar_48 = tmpvar_55;
  outColor_5.xyz = tmpvar_48;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_56;
    scrpos_56 = xlv_TEXCOORD3;
    mediump float a_57;
    a_57 = xlv_TEXCOORD3.z;
    if ((a_57 < 0.95)) {
      scrpos_56.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_57 = (a_57 * 17.0);
      highp float tmpvar_58;
      tmpvar_58 = (scrpos_56.y / 4.0);
      highp float tmpvar_59;
      tmpvar_59 = (fract(abs(tmpvar_58)) * 4.0);
      highp float tmpvar_60;
      if ((tmpvar_58 >= 0.0)) {
        tmpvar_60 = tmpvar_59;
      } else {
        tmpvar_60 = -(tmpvar_59);
      };
      highp float tmpvar_61;
      tmpvar_61 = (scrpos_56.x / 4.0);
      highp float tmpvar_62;
      tmpvar_62 = (fract(abs(tmpvar_61)) * 4.0);
      highp float tmpvar_63;
      if ((tmpvar_61 >= 0.0)) {
        tmpvar_63 = tmpvar_62;
      } else {
        tmpvar_63 = -(tmpvar_62);
      };
      highp float x_64;
      x_64 = ((a_57 - _DITHERMATRIX[
        int(tmpvar_60)
      ][
        int(tmpvar_63)
      ]) - 0.01);
      if ((x_64 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_37.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_33;
  mediump vec3 R_34;
  mediump float intensity_35;
  mediump vec4 noiseTex_36;
  mediump vec4 spColor_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_37 = tmpvar_38;
  spColor_37.w = (spColor_37.w * _SPOpaqueness);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_36 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (((1.99 * tmpvar_39.x) * _SPNoiseScaler) - 1.0);
  intensity_35 = tmpvar_40;
  highp vec3 tmpvar_41;
  highp vec3 I_42;
  I_42 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_36 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_41 = (I_42 - (2.0 * (
    dot (tmpvar_24, I_42)
   * tmpvar_24)));
  R_34 = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = textureCube (_SPCubeMap, R_34).xyz;
  reflection_33 = tmpvar_43;
  highp vec3 tmpvar_44;
  mediump vec3 x_45;
  x_45 = (spColor_37.xyz * _SPOldColor.xyz);
  tmpvar_44 = mix (x_45, ((reflection_33 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_37.xyz = tmpvar_44;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_35 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_35 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_46;
      tmpvar_46 = mix (spColor_37.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_35) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_37.xyz = tmpvar_46;
    };
  };
  highp vec4 tmpvar_47;
  tmpvar_47 = mix (outColor_5, spColor_37, vec4(xlat_mutable_SPIntensity));
  spColor_37 = tmpvar_47;
  outColor_5.w = spColor_37.w;
  mediump vec3 tmpvar_48;
  highp vec3 N_49;
  N_49 = tmpvar_24;
  highp vec3 V_50;
  V_50 = V_2;
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = pow (clamp ((1.001 - 
    dot (V_50, N_49)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_51 = (_RGBias + (tmpvar_52 * _RGScale));
  mediump vec3 tmpvar_53;
  tmpvar_53 = (tmpvar_51 * _RGColor).xyz;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (tmpvar_51, 0.0, 1.0);
  highp vec3 tmpvar_55;
  tmpvar_55 = mix (spColor_37.xyz, tmpvar_53, vec3((tmpvar_54 * _RGRatio)));
  tmpvar_48 = tmpvar_55;
  outColor_5.xyz = tmpvar_48;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_56;
    scrpos_56 = xlv_TEXCOORD3;
    mediump float a_57;
    a_57 = xlv_TEXCOORD3.z;
    if ((a_57 < 0.95)) {
      scrpos_56.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_57 = (a_57 * 17.0);
      highp float tmpvar_58;
      tmpvar_58 = (scrpos_56.y / 4.0);
      highp float tmpvar_59;
      tmpvar_59 = (fract(abs(tmpvar_58)) * 4.0);
      highp float tmpvar_60;
      if ((tmpvar_58 >= 0.0)) {
        tmpvar_60 = tmpvar_59;
      } else {
        tmpvar_60 = -(tmpvar_59);
      };
      highp float tmpvar_61;
      tmpvar_61 = (scrpos_56.x / 4.0);
      highp float tmpvar_62;
      tmpvar_62 = (fract(abs(tmpvar_61)) * 4.0);
      highp float tmpvar_63;
      if ((tmpvar_61 >= 0.0)) {
        tmpvar_63 = tmpvar_62;
      } else {
        tmpvar_63 = -(tmpvar_62);
      };
      highp float x_64;
      x_64 = ((a_57 - _DITHERMATRIX[
        int(tmpvar_60)
      ][
        int(tmpvar_63)
      ]) - 0.01);
      if ((x_64 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_37.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_76;
  mediump vec3 R_77;
  mediump float intensity_78;
  mediump vec4 noiseTex_79;
  mediump vec4 spColor_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_80 = tmpvar_81;
  spColor_80.w = (spColor_80.w * _SPOpaqueness);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_79 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((1.99 * tmpvar_82.x) * _SPNoiseScaler) - 1.0);
  intensity_78 = tmpvar_83;
  highp vec3 tmpvar_84;
  highp vec3 I_85;
  I_85 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_79 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_84 = (I_85 - (2.0 * (
    dot (tmpvar_67, I_85)
   * tmpvar_67)));
  R_77 = tmpvar_84;
  lowp vec3 tmpvar_86;
  tmpvar_86 = textureCube (_SPCubeMap, R_77).xyz;
  reflection_76 = tmpvar_86;
  highp vec3 tmpvar_87;
  mediump vec3 x_88;
  x_88 = (spColor_80.xyz * _SPOldColor.xyz);
  tmpvar_87 = mix (x_88, ((reflection_76 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_80.xyz = tmpvar_87;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_78 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_78 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_89;
      tmpvar_89 = mix (spColor_80.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_78) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_80.xyz = tmpvar_89;
    };
  };
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (outColor_5, spColor_80, vec4(xlat_mutable_SPIntensity));
  spColor_80 = tmpvar_90;
  outColor_5.w = spColor_80.w;
  mediump vec3 tmpvar_91;
  highp vec3 N_92;
  N_92 = tmpvar_67;
  highp vec3 V_93;
  V_93 = V_2;
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = pow (clamp ((1.001 - 
    dot (V_93, N_92)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_94 = (_RGBias + (tmpvar_95 * _RGScale));
  mediump vec3 tmpvar_96;
  tmpvar_96 = (tmpvar_94 * _RGColor).xyz;
  mediump float tmpvar_97;
  tmpvar_97 = clamp (tmpvar_94, 0.0, 1.0);
  highp vec3 tmpvar_98;
  tmpvar_98 = mix (spColor_80.xyz, tmpvar_96, vec3((tmpvar_97 * _RGRatio)));
  tmpvar_91 = tmpvar_98;
  outColor_5.xyz = tmpvar_91;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_99;
    scrpos_99 = xlv_TEXCOORD3;
    mediump float a_100;
    a_100 = xlv_TEXCOORD3.z;
    if ((a_100 < 0.95)) {
      scrpos_99.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_100 = (a_100 * 17.0);
      highp float tmpvar_101;
      tmpvar_101 = (scrpos_99.y / 4.0);
      highp float tmpvar_102;
      tmpvar_102 = (fract(abs(tmpvar_101)) * 4.0);
      highp float tmpvar_103;
      if ((tmpvar_101 >= 0.0)) {
        tmpvar_103 = tmpvar_102;
      } else {
        tmpvar_103 = -(tmpvar_102);
      };
      highp float tmpvar_104;
      tmpvar_104 = (scrpos_99.x / 4.0);
      highp float tmpvar_105;
      tmpvar_105 = (fract(abs(tmpvar_104)) * 4.0);
      highp float tmpvar_106;
      if ((tmpvar_104 >= 0.0)) {
        tmpvar_106 = tmpvar_105;
      } else {
        tmpvar_106 = -(tmpvar_105);
      };
      highp float x_107;
      x_107 = ((a_100 - _DITHERMATRIX[
        int(tmpvar_103)
      ][
        int(tmpvar_106)
      ]) - 0.01);
      if ((x_107 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_80.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_76;
  mediump vec3 R_77;
  mediump float intensity_78;
  mediump vec4 noiseTex_79;
  mediump vec4 spColor_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_80 = tmpvar_81;
  spColor_80.w = (spColor_80.w * _SPOpaqueness);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_79 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((1.99 * tmpvar_82.x) * _SPNoiseScaler) - 1.0);
  intensity_78 = tmpvar_83;
  highp vec3 tmpvar_84;
  highp vec3 I_85;
  I_85 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_79 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_84 = (I_85 - (2.0 * (
    dot (tmpvar_67, I_85)
   * tmpvar_67)));
  R_77 = tmpvar_84;
  lowp vec3 tmpvar_86;
  tmpvar_86 = textureCube (_SPCubeMap, R_77).xyz;
  reflection_76 = tmpvar_86;
  highp vec3 tmpvar_87;
  mediump vec3 x_88;
  x_88 = (spColor_80.xyz * _SPOldColor.xyz);
  tmpvar_87 = mix (x_88, ((reflection_76 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_80.xyz = tmpvar_87;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_78 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_78 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_89;
      tmpvar_89 = mix (spColor_80.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_78) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_80.xyz = tmpvar_89;
    };
  };
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (outColor_5, spColor_80, vec4(xlat_mutable_SPIntensity));
  spColor_80 = tmpvar_90;
  outColor_5.w = spColor_80.w;
  mediump vec3 tmpvar_91;
  highp vec3 N_92;
  N_92 = tmpvar_67;
  highp vec3 V_93;
  V_93 = V_2;
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = pow (clamp ((1.001 - 
    dot (V_93, N_92)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_94 = (_RGBias + (tmpvar_95 * _RGScale));
  mediump vec3 tmpvar_96;
  tmpvar_96 = (tmpvar_94 * _RGColor).xyz;
  mediump float tmpvar_97;
  tmpvar_97 = clamp (tmpvar_94, 0.0, 1.0);
  highp vec3 tmpvar_98;
  tmpvar_98 = mix (spColor_80.xyz, tmpvar_96, vec3((tmpvar_97 * _RGRatio)));
  tmpvar_91 = tmpvar_98;
  outColor_5.xyz = tmpvar_91;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_99;
    scrpos_99 = xlv_TEXCOORD3;
    mediump float a_100;
    a_100 = xlv_TEXCOORD3.z;
    if ((a_100 < 0.95)) {
      scrpos_99.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_100 = (a_100 * 17.0);
      highp float tmpvar_101;
      tmpvar_101 = (scrpos_99.y / 4.0);
      highp float tmpvar_102;
      tmpvar_102 = (fract(abs(tmpvar_101)) * 4.0);
      highp float tmpvar_103;
      if ((tmpvar_101 >= 0.0)) {
        tmpvar_103 = tmpvar_102;
      } else {
        tmpvar_103 = -(tmpvar_102);
      };
      highp float tmpvar_104;
      tmpvar_104 = (scrpos_99.x / 4.0);
      highp float tmpvar_105;
      tmpvar_105 = (fract(abs(tmpvar_104)) * 4.0);
      highp float tmpvar_106;
      if ((tmpvar_104 >= 0.0)) {
        tmpvar_106 = tmpvar_105;
      } else {
        tmpvar_106 = -(tmpvar_105);
      };
      highp float x_107;
      x_107 = ((a_100 - _DITHERMATRIX[
        int(tmpvar_103)
      ][
        int(tmpvar_106)
      ]) - 0.01);
      if ((x_107 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_80.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_76;
  mediump vec3 R_77;
  mediump float intensity_78;
  mediump vec4 noiseTex_79;
  mediump vec4 spColor_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_80 = tmpvar_81;
  spColor_80.w = (spColor_80.w * _SPOpaqueness);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_79 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((1.99 * tmpvar_82.x) * _SPNoiseScaler) - 1.0);
  intensity_78 = tmpvar_83;
  highp vec3 tmpvar_84;
  highp vec3 I_85;
  I_85 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_79 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_84 = (I_85 - (2.0 * (
    dot (tmpvar_67, I_85)
   * tmpvar_67)));
  R_77 = tmpvar_84;
  lowp vec3 tmpvar_86;
  tmpvar_86 = textureCube (_SPCubeMap, R_77).xyz;
  reflection_76 = tmpvar_86;
  highp vec3 tmpvar_87;
  mediump vec3 x_88;
  x_88 = (spColor_80.xyz * _SPOldColor.xyz);
  tmpvar_87 = mix (x_88, ((reflection_76 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_80.xyz = tmpvar_87;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_78 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_78 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_89;
      tmpvar_89 = mix (spColor_80.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_78) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_80.xyz = tmpvar_89;
    };
  };
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (outColor_5, spColor_80, vec4(xlat_mutable_SPIntensity));
  spColor_80 = tmpvar_90;
  outColor_5.w = spColor_80.w;
  mediump vec3 tmpvar_91;
  highp vec3 N_92;
  N_92 = tmpvar_67;
  highp vec3 V_93;
  V_93 = V_2;
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = pow (clamp ((1.001 - 
    dot (V_93, N_92)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_94 = (_RGBias + (tmpvar_95 * _RGScale));
  mediump vec3 tmpvar_96;
  tmpvar_96 = (tmpvar_94 * _RGColor).xyz;
  mediump float tmpvar_97;
  tmpvar_97 = clamp (tmpvar_94, 0.0, 1.0);
  highp vec3 tmpvar_98;
  tmpvar_98 = mix (spColor_80.xyz, tmpvar_96, vec3((tmpvar_97 * _RGRatio)));
  tmpvar_91 = tmpvar_98;
  outColor_5.xyz = tmpvar_91;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_99;
    scrpos_99 = xlv_TEXCOORD3;
    mediump float a_100;
    a_100 = xlv_TEXCOORD3.z;
    if ((a_100 < 0.95)) {
      scrpos_99.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_100 = (a_100 * 17.0);
      highp float tmpvar_101;
      tmpvar_101 = (scrpos_99.y / 4.0);
      highp float tmpvar_102;
      tmpvar_102 = (fract(abs(tmpvar_101)) * 4.0);
      highp float tmpvar_103;
      if ((tmpvar_101 >= 0.0)) {
        tmpvar_103 = tmpvar_102;
      } else {
        tmpvar_103 = -(tmpvar_102);
      };
      highp float tmpvar_104;
      tmpvar_104 = (scrpos_99.x / 4.0);
      highp float tmpvar_105;
      tmpvar_105 = (fract(abs(tmpvar_104)) * 4.0);
      highp float tmpvar_106;
      if ((tmpvar_104 >= 0.0)) {
        tmpvar_106 = tmpvar_105;
      } else {
        tmpvar_106 = -(tmpvar_105);
      };
      highp float x_107;
      x_107 = ((a_100 - _DITHERMATRIX[
        int(tmpvar_103)
      ][
        int(tmpvar_106)
      ]) - 0.01);
      if ((x_107 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_80.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_76;
    scrpos_76 = xlv_TEXCOORD3;
    mediump float a_77;
    a_77 = xlv_TEXCOORD3.z;
    if ((a_77 < 0.95)) {
      scrpos_76.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_77 = (a_77 * 17.0);
      highp float tmpvar_78;
      tmpvar_78 = (scrpos_76.y / 4.0);
      highp float tmpvar_79;
      tmpvar_79 = (fract(abs(tmpvar_78)) * 4.0);
      highp float tmpvar_80;
      if ((tmpvar_78 >= 0.0)) {
        tmpvar_80 = tmpvar_79;
      } else {
        tmpvar_80 = -(tmpvar_79);
      };
      highp float tmpvar_81;
      tmpvar_81 = (scrpos_76.x / 4.0);
      highp float tmpvar_82;
      tmpvar_82 = (fract(abs(tmpvar_81)) * 4.0);
      highp float tmpvar_83;
      if ((tmpvar_81 >= 0.0)) {
        tmpvar_83 = tmpvar_82;
      } else {
        tmpvar_83 = -(tmpvar_82);
      };
      highp float x_84;
      x_84 = ((a_77 - _DITHERMATRIX[
        int(tmpvar_80)
      ][
        int(tmpvar_83)
      ]) - 0.01);
      if ((x_84 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_76;
    scrpos_76 = xlv_TEXCOORD3;
    mediump float a_77;
    a_77 = xlv_TEXCOORD3.z;
    if ((a_77 < 0.95)) {
      scrpos_76.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_77 = (a_77 * 17.0);
      highp float tmpvar_78;
      tmpvar_78 = (scrpos_76.y / 4.0);
      highp float tmpvar_79;
      tmpvar_79 = (fract(abs(tmpvar_78)) * 4.0);
      highp float tmpvar_80;
      if ((tmpvar_78 >= 0.0)) {
        tmpvar_80 = tmpvar_79;
      } else {
        tmpvar_80 = -(tmpvar_79);
      };
      highp float tmpvar_81;
      tmpvar_81 = (scrpos_76.x / 4.0);
      highp float tmpvar_82;
      tmpvar_82 = (fract(abs(tmpvar_81)) * 4.0);
      highp float tmpvar_83;
      if ((tmpvar_81 >= 0.0)) {
        tmpvar_83 = tmpvar_82;
      } else {
        tmpvar_83 = -(tmpvar_82);
      };
      highp float x_84;
      x_84 = ((a_77 - _DITHERMATRIX[
        int(tmpvar_80)
      ][
        int(tmpvar_83)
      ]) - 0.01);
      if ((x_84 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_76;
    scrpos_76 = xlv_TEXCOORD3;
    mediump float a_77;
    a_77 = xlv_TEXCOORD3.z;
    if ((a_77 < 0.95)) {
      scrpos_76.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_77 = (a_77 * 17.0);
      highp float tmpvar_78;
      tmpvar_78 = (scrpos_76.y / 4.0);
      highp float tmpvar_79;
      tmpvar_79 = (fract(abs(tmpvar_78)) * 4.0);
      highp float tmpvar_80;
      if ((tmpvar_78 >= 0.0)) {
        tmpvar_80 = tmpvar_79;
      } else {
        tmpvar_80 = -(tmpvar_79);
      };
      highp float tmpvar_81;
      tmpvar_81 = (scrpos_76.x / 4.0);
      highp float tmpvar_82;
      tmpvar_82 = (fract(abs(tmpvar_81)) * 4.0);
      highp float tmpvar_83;
      if ((tmpvar_81 >= 0.0)) {
        tmpvar_83 = tmpvar_82;
      } else {
        tmpvar_83 = -(tmpvar_82);
      };
      highp float x_84;
      x_84 = ((a_77 - _DITHERMATRIX[
        int(tmpvar_80)
      ][
        int(tmpvar_83)
      ]) - 0.01);
      if ((x_84 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_13;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_13;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_13;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_13;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_13;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_13;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = tmpvar_24;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (outColor_5.xyz, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_41;
    scrpos_41 = xlv_TEXCOORD3;
    mediump float a_42;
    a_42 = xlv_TEXCOORD3.z;
    if ((a_42 < 0.95)) {
      scrpos_41.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_42 = (a_42 * 17.0);
      highp float tmpvar_43;
      tmpvar_43 = (scrpos_41.y / 4.0);
      highp float tmpvar_44;
      tmpvar_44 = (fract(abs(tmpvar_43)) * 4.0);
      highp float tmpvar_45;
      if ((tmpvar_43 >= 0.0)) {
        tmpvar_45 = tmpvar_44;
      } else {
        tmpvar_45 = -(tmpvar_44);
      };
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_41.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float x_49;
      x_49 = ((a_42 - _DITHERMATRIX[
        int(tmpvar_45)
      ][
        int(tmpvar_48)
      ]) - 0.01);
      if ((x_49 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = tmpvar_24;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (outColor_5.xyz, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_41;
    scrpos_41 = xlv_TEXCOORD3;
    mediump float a_42;
    a_42 = xlv_TEXCOORD3.z;
    if ((a_42 < 0.95)) {
      scrpos_41.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_42 = (a_42 * 17.0);
      highp float tmpvar_43;
      tmpvar_43 = (scrpos_41.y / 4.0);
      highp float tmpvar_44;
      tmpvar_44 = (fract(abs(tmpvar_43)) * 4.0);
      highp float tmpvar_45;
      if ((tmpvar_43 >= 0.0)) {
        tmpvar_45 = tmpvar_44;
      } else {
        tmpvar_45 = -(tmpvar_44);
      };
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_41.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float x_49;
      x_49 = ((a_42 - _DITHERMATRIX[
        int(tmpvar_45)
      ][
        int(tmpvar_48)
      ]) - 0.01);
      if ((x_49 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = tmpvar_24;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (outColor_5.xyz, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_41;
    scrpos_41 = xlv_TEXCOORD3;
    mediump float a_42;
    a_42 = xlv_TEXCOORD3.z;
    if ((a_42 < 0.95)) {
      scrpos_41.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_42 = (a_42 * 17.0);
      highp float tmpvar_43;
      tmpvar_43 = (scrpos_41.y / 4.0);
      highp float tmpvar_44;
      tmpvar_44 = (fract(abs(tmpvar_43)) * 4.0);
      highp float tmpvar_45;
      if ((tmpvar_43 >= 0.0)) {
        tmpvar_45 = tmpvar_44;
      } else {
        tmpvar_45 = -(tmpvar_44);
      };
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_41.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float x_49;
      x_49 = ((a_42 - _DITHERMATRIX[
        int(tmpvar_45)
      ][
        int(tmpvar_48)
      ]) - 0.01);
      if ((x_49 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_76;
  highp vec3 N_77;
  N_77 = tmpvar_67;
  highp vec3 V_78;
  V_78 = V_2;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = pow (clamp ((1.001 - 
    dot (V_78, N_77)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_79 = (_RGBias + (tmpvar_80 * _RGScale));
  mediump vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_79 * _RGColor).xyz;
  mediump float tmpvar_82;
  tmpvar_82 = clamp (tmpvar_79, 0.0, 1.0);
  highp vec3 tmpvar_83;
  tmpvar_83 = mix (outColor_5.xyz, tmpvar_81, vec3((tmpvar_82 * _RGRatio)));
  tmpvar_76 = tmpvar_83;
  outColor_5.xyz = tmpvar_76;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_84;
    scrpos_84 = xlv_TEXCOORD3;
    mediump float a_85;
    a_85 = xlv_TEXCOORD3.z;
    if ((a_85 < 0.95)) {
      scrpos_84.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_85 = (a_85 * 17.0);
      highp float tmpvar_86;
      tmpvar_86 = (scrpos_84.y / 4.0);
      highp float tmpvar_87;
      tmpvar_87 = (fract(abs(tmpvar_86)) * 4.0);
      highp float tmpvar_88;
      if ((tmpvar_86 >= 0.0)) {
        tmpvar_88 = tmpvar_87;
      } else {
        tmpvar_88 = -(tmpvar_87);
      };
      highp float tmpvar_89;
      tmpvar_89 = (scrpos_84.x / 4.0);
      highp float tmpvar_90;
      tmpvar_90 = (fract(abs(tmpvar_89)) * 4.0);
      highp float tmpvar_91;
      if ((tmpvar_89 >= 0.0)) {
        tmpvar_91 = tmpvar_90;
      } else {
        tmpvar_91 = -(tmpvar_90);
      };
      highp float x_92;
      x_92 = ((a_85 - _DITHERMATRIX[
        int(tmpvar_88)
      ][
        int(tmpvar_91)
      ]) - 0.01);
      if ((x_92 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_76;
  highp vec3 N_77;
  N_77 = tmpvar_67;
  highp vec3 V_78;
  V_78 = V_2;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = pow (clamp ((1.001 - 
    dot (V_78, N_77)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_79 = (_RGBias + (tmpvar_80 * _RGScale));
  mediump vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_79 * _RGColor).xyz;
  mediump float tmpvar_82;
  tmpvar_82 = clamp (tmpvar_79, 0.0, 1.0);
  highp vec3 tmpvar_83;
  tmpvar_83 = mix (outColor_5.xyz, tmpvar_81, vec3((tmpvar_82 * _RGRatio)));
  tmpvar_76 = tmpvar_83;
  outColor_5.xyz = tmpvar_76;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_84;
    scrpos_84 = xlv_TEXCOORD3;
    mediump float a_85;
    a_85 = xlv_TEXCOORD3.z;
    if ((a_85 < 0.95)) {
      scrpos_84.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_85 = (a_85 * 17.0);
      highp float tmpvar_86;
      tmpvar_86 = (scrpos_84.y / 4.0);
      highp float tmpvar_87;
      tmpvar_87 = (fract(abs(tmpvar_86)) * 4.0);
      highp float tmpvar_88;
      if ((tmpvar_86 >= 0.0)) {
        tmpvar_88 = tmpvar_87;
      } else {
        tmpvar_88 = -(tmpvar_87);
      };
      highp float tmpvar_89;
      tmpvar_89 = (scrpos_84.x / 4.0);
      highp float tmpvar_90;
      tmpvar_90 = (fract(abs(tmpvar_89)) * 4.0);
      highp float tmpvar_91;
      if ((tmpvar_89 >= 0.0)) {
        tmpvar_91 = tmpvar_90;
      } else {
        tmpvar_91 = -(tmpvar_90);
      };
      highp float x_92;
      x_92 = ((a_85 - _DITHERMATRIX[
        int(tmpvar_88)
      ][
        int(tmpvar_91)
      ]) - 0.01);
      if ((x_92 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_76;
  highp vec3 N_77;
  N_77 = tmpvar_67;
  highp vec3 V_78;
  V_78 = V_2;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = pow (clamp ((1.001 - 
    dot (V_78, N_77)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_79 = (_RGBias + (tmpvar_80 * _RGScale));
  mediump vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_79 * _RGColor).xyz;
  mediump float tmpvar_82;
  tmpvar_82 = clamp (tmpvar_79, 0.0, 1.0);
  highp vec3 tmpvar_83;
  tmpvar_83 = mix (outColor_5.xyz, tmpvar_81, vec3((tmpvar_82 * _RGRatio)));
  tmpvar_76 = tmpvar_83;
  outColor_5.xyz = tmpvar_76;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_84;
    scrpos_84 = xlv_TEXCOORD3;
    mediump float a_85;
    a_85 = xlv_TEXCOORD3.z;
    if ((a_85 < 0.95)) {
      scrpos_84.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_85 = (a_85 * 17.0);
      highp float tmpvar_86;
      tmpvar_86 = (scrpos_84.y / 4.0);
      highp float tmpvar_87;
      tmpvar_87 = (fract(abs(tmpvar_86)) * 4.0);
      highp float tmpvar_88;
      if ((tmpvar_86 >= 0.0)) {
        tmpvar_88 = tmpvar_87;
      } else {
        tmpvar_88 = -(tmpvar_87);
      };
      highp float tmpvar_89;
      tmpvar_89 = (scrpos_84.x / 4.0);
      highp float tmpvar_90;
      tmpvar_90 = (fract(abs(tmpvar_89)) * 4.0);
      highp float tmpvar_91;
      if ((tmpvar_89 >= 0.0)) {
        tmpvar_91 = tmpvar_90;
      } else {
        tmpvar_91 = -(tmpvar_90);
      };
      highp float x_92;
      x_92 = ((a_85 - _DITHERMATRIX[
        int(tmpvar_88)
      ][
        int(tmpvar_91)
      ]) - 0.01);
      if ((x_92 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_33;
  mediump vec3 R_34;
  mediump float intensity_35;
  mediump vec4 noiseTex_36;
  mediump vec4 spColor_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_37 = tmpvar_38;
  spColor_37.w = (spColor_37.w * _SPOpaqueness);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_36 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (((1.99 * tmpvar_39.x) * _SPNoiseScaler) - 1.0);
  intensity_35 = tmpvar_40;
  highp vec3 tmpvar_41;
  highp vec3 I_42;
  I_42 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_36 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_41 = (I_42 - (2.0 * (
    dot (tmpvar_24, I_42)
   * tmpvar_24)));
  R_34 = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = textureCube (_SPCubeMap, R_34).xyz;
  reflection_33 = tmpvar_43;
  highp vec3 tmpvar_44;
  mediump vec3 x_45;
  x_45 = (spColor_37.xyz * _SPOldColor.xyz);
  tmpvar_44 = mix (x_45, ((reflection_33 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_37.xyz = tmpvar_44;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_35 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_35 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_46;
      tmpvar_46 = mix (spColor_37.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_35) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_37.xyz = tmpvar_46;
    };
  };
  highp vec4 tmpvar_47;
  tmpvar_47 = mix (outColor_5, spColor_37, vec4(xlat_mutable_SPIntensity));
  spColor_37 = tmpvar_47;
  outColor_5 = spColor_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_48;
    scrpos_48 = xlv_TEXCOORD3;
    mediump float a_49;
    a_49 = xlv_TEXCOORD3.z;
    if ((a_49 < 0.95)) {
      scrpos_48.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_49 = (a_49 * 17.0);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_48.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float tmpvar_53;
      tmpvar_53 = (scrpos_48.x / 4.0);
      highp float tmpvar_54;
      tmpvar_54 = (fract(abs(tmpvar_53)) * 4.0);
      highp float tmpvar_55;
      if ((tmpvar_53 >= 0.0)) {
        tmpvar_55 = tmpvar_54;
      } else {
        tmpvar_55 = -(tmpvar_54);
      };
      highp float x_56;
      x_56 = ((a_49 - _DITHERMATRIX[
        int(tmpvar_52)
      ][
        int(tmpvar_55)
      ]) - 0.01);
      if ((x_56 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_37.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_33;
  mediump vec3 R_34;
  mediump float intensity_35;
  mediump vec4 noiseTex_36;
  mediump vec4 spColor_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_37 = tmpvar_38;
  spColor_37.w = (spColor_37.w * _SPOpaqueness);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_36 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (((1.99 * tmpvar_39.x) * _SPNoiseScaler) - 1.0);
  intensity_35 = tmpvar_40;
  highp vec3 tmpvar_41;
  highp vec3 I_42;
  I_42 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_36 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_41 = (I_42 - (2.0 * (
    dot (tmpvar_24, I_42)
   * tmpvar_24)));
  R_34 = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = textureCube (_SPCubeMap, R_34).xyz;
  reflection_33 = tmpvar_43;
  highp vec3 tmpvar_44;
  mediump vec3 x_45;
  x_45 = (spColor_37.xyz * _SPOldColor.xyz);
  tmpvar_44 = mix (x_45, ((reflection_33 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_37.xyz = tmpvar_44;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_35 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_35 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_46;
      tmpvar_46 = mix (spColor_37.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_35) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_37.xyz = tmpvar_46;
    };
  };
  highp vec4 tmpvar_47;
  tmpvar_47 = mix (outColor_5, spColor_37, vec4(xlat_mutable_SPIntensity));
  spColor_37 = tmpvar_47;
  outColor_5 = spColor_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_48;
    scrpos_48 = xlv_TEXCOORD3;
    mediump float a_49;
    a_49 = xlv_TEXCOORD3.z;
    if ((a_49 < 0.95)) {
      scrpos_48.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_49 = (a_49 * 17.0);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_48.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float tmpvar_53;
      tmpvar_53 = (scrpos_48.x / 4.0);
      highp float tmpvar_54;
      tmpvar_54 = (fract(abs(tmpvar_53)) * 4.0);
      highp float tmpvar_55;
      if ((tmpvar_53 >= 0.0)) {
        tmpvar_55 = tmpvar_54;
      } else {
        tmpvar_55 = -(tmpvar_54);
      };
      highp float x_56;
      x_56 = ((a_49 - _DITHERMATRIX[
        int(tmpvar_52)
      ][
        int(tmpvar_55)
      ]) - 0.01);
      if ((x_56 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_37.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_33;
  mediump vec3 R_34;
  mediump float intensity_35;
  mediump vec4 noiseTex_36;
  mediump vec4 spColor_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_37 = tmpvar_38;
  spColor_37.w = (spColor_37.w * _SPOpaqueness);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_36 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (((1.99 * tmpvar_39.x) * _SPNoiseScaler) - 1.0);
  intensity_35 = tmpvar_40;
  highp vec3 tmpvar_41;
  highp vec3 I_42;
  I_42 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_36 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_41 = (I_42 - (2.0 * (
    dot (tmpvar_24, I_42)
   * tmpvar_24)));
  R_34 = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = textureCube (_SPCubeMap, R_34).xyz;
  reflection_33 = tmpvar_43;
  highp vec3 tmpvar_44;
  mediump vec3 x_45;
  x_45 = (spColor_37.xyz * _SPOldColor.xyz);
  tmpvar_44 = mix (x_45, ((reflection_33 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_37.xyz = tmpvar_44;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_35 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_35 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_46;
      tmpvar_46 = mix (spColor_37.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_35) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_37.xyz = tmpvar_46;
    };
  };
  highp vec4 tmpvar_47;
  tmpvar_47 = mix (outColor_5, spColor_37, vec4(xlat_mutable_SPIntensity));
  spColor_37 = tmpvar_47;
  outColor_5 = spColor_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_48;
    scrpos_48 = xlv_TEXCOORD3;
    mediump float a_49;
    a_49 = xlv_TEXCOORD3.z;
    if ((a_49 < 0.95)) {
      scrpos_48.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_49 = (a_49 * 17.0);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_48.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float tmpvar_53;
      tmpvar_53 = (scrpos_48.x / 4.0);
      highp float tmpvar_54;
      tmpvar_54 = (fract(abs(tmpvar_53)) * 4.0);
      highp float tmpvar_55;
      if ((tmpvar_53 >= 0.0)) {
        tmpvar_55 = tmpvar_54;
      } else {
        tmpvar_55 = -(tmpvar_54);
      };
      highp float x_56;
      x_56 = ((a_49 - _DITHERMATRIX[
        int(tmpvar_52)
      ][
        int(tmpvar_55)
      ]) - 0.01);
      if ((x_56 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_37.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_76;
  mediump vec3 R_77;
  mediump float intensity_78;
  mediump vec4 noiseTex_79;
  mediump vec4 spColor_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_80 = tmpvar_81;
  spColor_80.w = (spColor_80.w * _SPOpaqueness);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_79 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((1.99 * tmpvar_82.x) * _SPNoiseScaler) - 1.0);
  intensity_78 = tmpvar_83;
  highp vec3 tmpvar_84;
  highp vec3 I_85;
  I_85 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_79 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_84 = (I_85 - (2.0 * (
    dot (tmpvar_67, I_85)
   * tmpvar_67)));
  R_77 = tmpvar_84;
  lowp vec3 tmpvar_86;
  tmpvar_86 = textureCube (_SPCubeMap, R_77).xyz;
  reflection_76 = tmpvar_86;
  highp vec3 tmpvar_87;
  mediump vec3 x_88;
  x_88 = (spColor_80.xyz * _SPOldColor.xyz);
  tmpvar_87 = mix (x_88, ((reflection_76 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_80.xyz = tmpvar_87;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_78 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_78 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_89;
      tmpvar_89 = mix (spColor_80.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_78) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_80.xyz = tmpvar_89;
    };
  };
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (outColor_5, spColor_80, vec4(xlat_mutable_SPIntensity));
  spColor_80 = tmpvar_90;
  outColor_5 = spColor_80;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_91;
    scrpos_91 = xlv_TEXCOORD3;
    mediump float a_92;
    a_92 = xlv_TEXCOORD3.z;
    if ((a_92 < 0.95)) {
      scrpos_91.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_92 = (a_92 * 17.0);
      highp float tmpvar_93;
      tmpvar_93 = (scrpos_91.y / 4.0);
      highp float tmpvar_94;
      tmpvar_94 = (fract(abs(tmpvar_93)) * 4.0);
      highp float tmpvar_95;
      if ((tmpvar_93 >= 0.0)) {
        tmpvar_95 = tmpvar_94;
      } else {
        tmpvar_95 = -(tmpvar_94);
      };
      highp float tmpvar_96;
      tmpvar_96 = (scrpos_91.x / 4.0);
      highp float tmpvar_97;
      tmpvar_97 = (fract(abs(tmpvar_96)) * 4.0);
      highp float tmpvar_98;
      if ((tmpvar_96 >= 0.0)) {
        tmpvar_98 = tmpvar_97;
      } else {
        tmpvar_98 = -(tmpvar_97);
      };
      highp float x_99;
      x_99 = ((a_92 - _DITHERMATRIX[
        int(tmpvar_95)
      ][
        int(tmpvar_98)
      ]) - 0.01);
      if ((x_99 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_80.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_76;
  mediump vec3 R_77;
  mediump float intensity_78;
  mediump vec4 noiseTex_79;
  mediump vec4 spColor_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_80 = tmpvar_81;
  spColor_80.w = (spColor_80.w * _SPOpaqueness);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_79 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((1.99 * tmpvar_82.x) * _SPNoiseScaler) - 1.0);
  intensity_78 = tmpvar_83;
  highp vec3 tmpvar_84;
  highp vec3 I_85;
  I_85 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_79 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_84 = (I_85 - (2.0 * (
    dot (tmpvar_67, I_85)
   * tmpvar_67)));
  R_77 = tmpvar_84;
  lowp vec3 tmpvar_86;
  tmpvar_86 = textureCube (_SPCubeMap, R_77).xyz;
  reflection_76 = tmpvar_86;
  highp vec3 tmpvar_87;
  mediump vec3 x_88;
  x_88 = (spColor_80.xyz * _SPOldColor.xyz);
  tmpvar_87 = mix (x_88, ((reflection_76 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_80.xyz = tmpvar_87;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_78 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_78 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_89;
      tmpvar_89 = mix (spColor_80.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_78) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_80.xyz = tmpvar_89;
    };
  };
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (outColor_5, spColor_80, vec4(xlat_mutable_SPIntensity));
  spColor_80 = tmpvar_90;
  outColor_5 = spColor_80;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_91;
    scrpos_91 = xlv_TEXCOORD3;
    mediump float a_92;
    a_92 = xlv_TEXCOORD3.z;
    if ((a_92 < 0.95)) {
      scrpos_91.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_92 = (a_92 * 17.0);
      highp float tmpvar_93;
      tmpvar_93 = (scrpos_91.y / 4.0);
      highp float tmpvar_94;
      tmpvar_94 = (fract(abs(tmpvar_93)) * 4.0);
      highp float tmpvar_95;
      if ((tmpvar_93 >= 0.0)) {
        tmpvar_95 = tmpvar_94;
      } else {
        tmpvar_95 = -(tmpvar_94);
      };
      highp float tmpvar_96;
      tmpvar_96 = (scrpos_91.x / 4.0);
      highp float tmpvar_97;
      tmpvar_97 = (fract(abs(tmpvar_96)) * 4.0);
      highp float tmpvar_98;
      if ((tmpvar_96 >= 0.0)) {
        tmpvar_98 = tmpvar_97;
      } else {
        tmpvar_98 = -(tmpvar_97);
      };
      highp float x_99;
      x_99 = ((a_92 - _DITHERMATRIX[
        int(tmpvar_95)
      ][
        int(tmpvar_98)
      ]) - 0.01);
      if ((x_99 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_80.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_76;
  mediump vec3 R_77;
  mediump float intensity_78;
  mediump vec4 noiseTex_79;
  mediump vec4 spColor_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_80 = tmpvar_81;
  spColor_80.w = (spColor_80.w * _SPOpaqueness);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_79 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((1.99 * tmpvar_82.x) * _SPNoiseScaler) - 1.0);
  intensity_78 = tmpvar_83;
  highp vec3 tmpvar_84;
  highp vec3 I_85;
  I_85 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_79 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_84 = (I_85 - (2.0 * (
    dot (tmpvar_67, I_85)
   * tmpvar_67)));
  R_77 = tmpvar_84;
  lowp vec3 tmpvar_86;
  tmpvar_86 = textureCube (_SPCubeMap, R_77).xyz;
  reflection_76 = tmpvar_86;
  highp vec3 tmpvar_87;
  mediump vec3 x_88;
  x_88 = (spColor_80.xyz * _SPOldColor.xyz);
  tmpvar_87 = mix (x_88, ((reflection_76 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_80.xyz = tmpvar_87;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_78 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_78 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_89;
      tmpvar_89 = mix (spColor_80.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_78) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_80.xyz = tmpvar_89;
    };
  };
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (outColor_5, spColor_80, vec4(xlat_mutable_SPIntensity));
  spColor_80 = tmpvar_90;
  outColor_5 = spColor_80;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_91;
    scrpos_91 = xlv_TEXCOORD3;
    mediump float a_92;
    a_92 = xlv_TEXCOORD3.z;
    if ((a_92 < 0.95)) {
      scrpos_91.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_92 = (a_92 * 17.0);
      highp float tmpvar_93;
      tmpvar_93 = (scrpos_91.y / 4.0);
      highp float tmpvar_94;
      tmpvar_94 = (fract(abs(tmpvar_93)) * 4.0);
      highp float tmpvar_95;
      if ((tmpvar_93 >= 0.0)) {
        tmpvar_95 = tmpvar_94;
      } else {
        tmpvar_95 = -(tmpvar_94);
      };
      highp float tmpvar_96;
      tmpvar_96 = (scrpos_91.x / 4.0);
      highp float tmpvar_97;
      tmpvar_97 = (fract(abs(tmpvar_96)) * 4.0);
      highp float tmpvar_98;
      if ((tmpvar_96 >= 0.0)) {
        tmpvar_98 = tmpvar_97;
      } else {
        tmpvar_98 = -(tmpvar_97);
      };
      highp float x_99;
      x_99 = ((a_92 - _DITHERMATRIX[
        int(tmpvar_95)
      ][
        int(tmpvar_98)
      ]) - 0.01);
      if ((x_99 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_80.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_13;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_13;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_13;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_13;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_13;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_13;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_33;
  mediump vec3 R_34;
  mediump float intensity_35;
  mediump vec4 noiseTex_36;
  mediump vec4 spColor_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_37 = tmpvar_38;
  spColor_37.w = (spColor_37.w * _SPOpaqueness);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_36 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (((1.99 * tmpvar_39.x) * _SPNoiseScaler) - 1.0);
  intensity_35 = tmpvar_40;
  highp vec3 tmpvar_41;
  highp vec3 I_42;
  I_42 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_36 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_41 = (I_42 - (2.0 * (
    dot (tmpvar_24, I_42)
   * tmpvar_24)));
  R_34 = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = textureCube (_SPCubeMap, R_34).xyz;
  reflection_33 = tmpvar_43;
  highp vec3 tmpvar_44;
  mediump vec3 x_45;
  x_45 = (spColor_37.xyz * _SPOldColor.xyz);
  tmpvar_44 = mix (x_45, ((reflection_33 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_37.xyz = tmpvar_44;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_35 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_35 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_46;
      tmpvar_46 = mix (spColor_37.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_35) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_37.xyz = tmpvar_46;
    };
  };
  highp vec4 tmpvar_47;
  tmpvar_47 = mix (outColor_5, spColor_37, vec4(xlat_mutable_SPIntensity));
  spColor_37 = tmpvar_47;
  outColor_5.w = spColor_37.w;
  mediump vec3 tmpvar_48;
  highp vec3 N_49;
  N_49 = tmpvar_24;
  highp vec3 V_50;
  V_50 = V_2;
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = pow (clamp ((1.001 - 
    dot (V_50, N_49)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_51 = (_RGBias + (tmpvar_52 * _RGScale));
  mediump vec3 tmpvar_53;
  tmpvar_53 = (tmpvar_51 * _RGColor).xyz;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (tmpvar_51, 0.0, 1.0);
  highp vec3 tmpvar_55;
  tmpvar_55 = mix (spColor_37.xyz, tmpvar_53, vec3((tmpvar_54 * _RGRatio)));
  tmpvar_48 = tmpvar_55;
  outColor_5.xyz = tmpvar_48;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_56;
    scrpos_56 = xlv_TEXCOORD3;
    mediump float a_57;
    a_57 = xlv_TEXCOORD3.z;
    if ((a_57 < 0.95)) {
      scrpos_56.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_57 = (a_57 * 17.0);
      highp float tmpvar_58;
      tmpvar_58 = (scrpos_56.y / 4.0);
      highp float tmpvar_59;
      tmpvar_59 = (fract(abs(tmpvar_58)) * 4.0);
      highp float tmpvar_60;
      if ((tmpvar_58 >= 0.0)) {
        tmpvar_60 = tmpvar_59;
      } else {
        tmpvar_60 = -(tmpvar_59);
      };
      highp float tmpvar_61;
      tmpvar_61 = (scrpos_56.x / 4.0);
      highp float tmpvar_62;
      tmpvar_62 = (fract(abs(tmpvar_61)) * 4.0);
      highp float tmpvar_63;
      if ((tmpvar_61 >= 0.0)) {
        tmpvar_63 = tmpvar_62;
      } else {
        tmpvar_63 = -(tmpvar_62);
      };
      highp float x_64;
      x_64 = ((a_57 - _DITHERMATRIX[
        int(tmpvar_60)
      ][
        int(tmpvar_63)
      ]) - 0.01);
      if ((x_64 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_37.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_33;
  mediump vec3 R_34;
  mediump float intensity_35;
  mediump vec4 noiseTex_36;
  mediump vec4 spColor_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_37 = tmpvar_38;
  spColor_37.w = (spColor_37.w * _SPOpaqueness);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_36 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (((1.99 * tmpvar_39.x) * _SPNoiseScaler) - 1.0);
  intensity_35 = tmpvar_40;
  highp vec3 tmpvar_41;
  highp vec3 I_42;
  I_42 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_36 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_41 = (I_42 - (2.0 * (
    dot (tmpvar_24, I_42)
   * tmpvar_24)));
  R_34 = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = textureCube (_SPCubeMap, R_34).xyz;
  reflection_33 = tmpvar_43;
  highp vec3 tmpvar_44;
  mediump vec3 x_45;
  x_45 = (spColor_37.xyz * _SPOldColor.xyz);
  tmpvar_44 = mix (x_45, ((reflection_33 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_37.xyz = tmpvar_44;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_35 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_35 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_46;
      tmpvar_46 = mix (spColor_37.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_35) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_37.xyz = tmpvar_46;
    };
  };
  highp vec4 tmpvar_47;
  tmpvar_47 = mix (outColor_5, spColor_37, vec4(xlat_mutable_SPIntensity));
  spColor_37 = tmpvar_47;
  outColor_5.w = spColor_37.w;
  mediump vec3 tmpvar_48;
  highp vec3 N_49;
  N_49 = tmpvar_24;
  highp vec3 V_50;
  V_50 = V_2;
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = pow (clamp ((1.001 - 
    dot (V_50, N_49)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_51 = (_RGBias + (tmpvar_52 * _RGScale));
  mediump vec3 tmpvar_53;
  tmpvar_53 = (tmpvar_51 * _RGColor).xyz;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (tmpvar_51, 0.0, 1.0);
  highp vec3 tmpvar_55;
  tmpvar_55 = mix (spColor_37.xyz, tmpvar_53, vec3((tmpvar_54 * _RGRatio)));
  tmpvar_48 = tmpvar_55;
  outColor_5.xyz = tmpvar_48;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_56;
    scrpos_56 = xlv_TEXCOORD3;
    mediump float a_57;
    a_57 = xlv_TEXCOORD3.z;
    if ((a_57 < 0.95)) {
      scrpos_56.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_57 = (a_57 * 17.0);
      highp float tmpvar_58;
      tmpvar_58 = (scrpos_56.y / 4.0);
      highp float tmpvar_59;
      tmpvar_59 = (fract(abs(tmpvar_58)) * 4.0);
      highp float tmpvar_60;
      if ((tmpvar_58 >= 0.0)) {
        tmpvar_60 = tmpvar_59;
      } else {
        tmpvar_60 = -(tmpvar_59);
      };
      highp float tmpvar_61;
      tmpvar_61 = (scrpos_56.x / 4.0);
      highp float tmpvar_62;
      tmpvar_62 = (fract(abs(tmpvar_61)) * 4.0);
      highp float tmpvar_63;
      if ((tmpvar_61 >= 0.0)) {
        tmpvar_63 = tmpvar_62;
      } else {
        tmpvar_63 = -(tmpvar_62);
      };
      highp float x_64;
      x_64 = ((a_57 - _DITHERMATRIX[
        int(tmpvar_60)
      ][
        int(tmpvar_63)
      ]) - 0.01);
      if ((x_64 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_37.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_33;
  mediump vec3 R_34;
  mediump float intensity_35;
  mediump vec4 noiseTex_36;
  mediump vec4 spColor_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_37 = tmpvar_38;
  spColor_37.w = (spColor_37.w * _SPOpaqueness);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_36 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (((1.99 * tmpvar_39.x) * _SPNoiseScaler) - 1.0);
  intensity_35 = tmpvar_40;
  highp vec3 tmpvar_41;
  highp vec3 I_42;
  I_42 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_36 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_41 = (I_42 - (2.0 * (
    dot (tmpvar_24, I_42)
   * tmpvar_24)));
  R_34 = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = textureCube (_SPCubeMap, R_34).xyz;
  reflection_33 = tmpvar_43;
  highp vec3 tmpvar_44;
  mediump vec3 x_45;
  x_45 = (spColor_37.xyz * _SPOldColor.xyz);
  tmpvar_44 = mix (x_45, ((reflection_33 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_37.xyz = tmpvar_44;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_35 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_35 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_46;
      tmpvar_46 = mix (spColor_37.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_35) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_37.xyz = tmpvar_46;
    };
  };
  highp vec4 tmpvar_47;
  tmpvar_47 = mix (outColor_5, spColor_37, vec4(xlat_mutable_SPIntensity));
  spColor_37 = tmpvar_47;
  outColor_5.w = spColor_37.w;
  mediump vec3 tmpvar_48;
  highp vec3 N_49;
  N_49 = tmpvar_24;
  highp vec3 V_50;
  V_50 = V_2;
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = pow (clamp ((1.001 - 
    dot (V_50, N_49)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_51 = (_RGBias + (tmpvar_52 * _RGScale));
  mediump vec3 tmpvar_53;
  tmpvar_53 = (tmpvar_51 * _RGColor).xyz;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (tmpvar_51, 0.0, 1.0);
  highp vec3 tmpvar_55;
  tmpvar_55 = mix (spColor_37.xyz, tmpvar_53, vec3((tmpvar_54 * _RGRatio)));
  tmpvar_48 = tmpvar_55;
  outColor_5.xyz = tmpvar_48;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_56;
    scrpos_56 = xlv_TEXCOORD3;
    mediump float a_57;
    a_57 = xlv_TEXCOORD3.z;
    if ((a_57 < 0.95)) {
      scrpos_56.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_57 = (a_57 * 17.0);
      highp float tmpvar_58;
      tmpvar_58 = (scrpos_56.y / 4.0);
      highp float tmpvar_59;
      tmpvar_59 = (fract(abs(tmpvar_58)) * 4.0);
      highp float tmpvar_60;
      if ((tmpvar_58 >= 0.0)) {
        tmpvar_60 = tmpvar_59;
      } else {
        tmpvar_60 = -(tmpvar_59);
      };
      highp float tmpvar_61;
      tmpvar_61 = (scrpos_56.x / 4.0);
      highp float tmpvar_62;
      tmpvar_62 = (fract(abs(tmpvar_61)) * 4.0);
      highp float tmpvar_63;
      if ((tmpvar_61 >= 0.0)) {
        tmpvar_63 = tmpvar_62;
      } else {
        tmpvar_63 = -(tmpvar_62);
      };
      highp float x_64;
      x_64 = ((a_57 - _DITHERMATRIX[
        int(tmpvar_60)
      ][
        int(tmpvar_63)
      ]) - 0.01);
      if ((x_64 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_37.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_76;
  mediump vec3 R_77;
  mediump float intensity_78;
  mediump vec4 noiseTex_79;
  mediump vec4 spColor_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_80 = tmpvar_81;
  spColor_80.w = (spColor_80.w * _SPOpaqueness);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_79 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((1.99 * tmpvar_82.x) * _SPNoiseScaler) - 1.0);
  intensity_78 = tmpvar_83;
  highp vec3 tmpvar_84;
  highp vec3 I_85;
  I_85 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_79 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_84 = (I_85 - (2.0 * (
    dot (tmpvar_67, I_85)
   * tmpvar_67)));
  R_77 = tmpvar_84;
  lowp vec3 tmpvar_86;
  tmpvar_86 = textureCube (_SPCubeMap, R_77).xyz;
  reflection_76 = tmpvar_86;
  highp vec3 tmpvar_87;
  mediump vec3 x_88;
  x_88 = (spColor_80.xyz * _SPOldColor.xyz);
  tmpvar_87 = mix (x_88, ((reflection_76 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_80.xyz = tmpvar_87;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_78 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_78 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_89;
      tmpvar_89 = mix (spColor_80.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_78) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_80.xyz = tmpvar_89;
    };
  };
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (outColor_5, spColor_80, vec4(xlat_mutable_SPIntensity));
  spColor_80 = tmpvar_90;
  outColor_5.w = spColor_80.w;
  mediump vec3 tmpvar_91;
  highp vec3 N_92;
  N_92 = tmpvar_67;
  highp vec3 V_93;
  V_93 = V_2;
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = pow (clamp ((1.001 - 
    dot (V_93, N_92)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_94 = (_RGBias + (tmpvar_95 * _RGScale));
  mediump vec3 tmpvar_96;
  tmpvar_96 = (tmpvar_94 * _RGColor).xyz;
  mediump float tmpvar_97;
  tmpvar_97 = clamp (tmpvar_94, 0.0, 1.0);
  highp vec3 tmpvar_98;
  tmpvar_98 = mix (spColor_80.xyz, tmpvar_96, vec3((tmpvar_97 * _RGRatio)));
  tmpvar_91 = tmpvar_98;
  outColor_5.xyz = tmpvar_91;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_99;
    scrpos_99 = xlv_TEXCOORD3;
    mediump float a_100;
    a_100 = xlv_TEXCOORD3.z;
    if ((a_100 < 0.95)) {
      scrpos_99.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_100 = (a_100 * 17.0);
      highp float tmpvar_101;
      tmpvar_101 = (scrpos_99.y / 4.0);
      highp float tmpvar_102;
      tmpvar_102 = (fract(abs(tmpvar_101)) * 4.0);
      highp float tmpvar_103;
      if ((tmpvar_101 >= 0.0)) {
        tmpvar_103 = tmpvar_102;
      } else {
        tmpvar_103 = -(tmpvar_102);
      };
      highp float tmpvar_104;
      tmpvar_104 = (scrpos_99.x / 4.0);
      highp float tmpvar_105;
      tmpvar_105 = (fract(abs(tmpvar_104)) * 4.0);
      highp float tmpvar_106;
      if ((tmpvar_104 >= 0.0)) {
        tmpvar_106 = tmpvar_105;
      } else {
        tmpvar_106 = -(tmpvar_105);
      };
      highp float x_107;
      x_107 = ((a_100 - _DITHERMATRIX[
        int(tmpvar_103)
      ][
        int(tmpvar_106)
      ]) - 0.01);
      if ((x_107 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_80.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_76;
  mediump vec3 R_77;
  mediump float intensity_78;
  mediump vec4 noiseTex_79;
  mediump vec4 spColor_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_80 = tmpvar_81;
  spColor_80.w = (spColor_80.w * _SPOpaqueness);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_79 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((1.99 * tmpvar_82.x) * _SPNoiseScaler) - 1.0);
  intensity_78 = tmpvar_83;
  highp vec3 tmpvar_84;
  highp vec3 I_85;
  I_85 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_79 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_84 = (I_85 - (2.0 * (
    dot (tmpvar_67, I_85)
   * tmpvar_67)));
  R_77 = tmpvar_84;
  lowp vec3 tmpvar_86;
  tmpvar_86 = textureCube (_SPCubeMap, R_77).xyz;
  reflection_76 = tmpvar_86;
  highp vec3 tmpvar_87;
  mediump vec3 x_88;
  x_88 = (spColor_80.xyz * _SPOldColor.xyz);
  tmpvar_87 = mix (x_88, ((reflection_76 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_80.xyz = tmpvar_87;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_78 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_78 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_89;
      tmpvar_89 = mix (spColor_80.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_78) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_80.xyz = tmpvar_89;
    };
  };
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (outColor_5, spColor_80, vec4(xlat_mutable_SPIntensity));
  spColor_80 = tmpvar_90;
  outColor_5.w = spColor_80.w;
  mediump vec3 tmpvar_91;
  highp vec3 N_92;
  N_92 = tmpvar_67;
  highp vec3 V_93;
  V_93 = V_2;
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = pow (clamp ((1.001 - 
    dot (V_93, N_92)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_94 = (_RGBias + (tmpvar_95 * _RGScale));
  mediump vec3 tmpvar_96;
  tmpvar_96 = (tmpvar_94 * _RGColor).xyz;
  mediump float tmpvar_97;
  tmpvar_97 = clamp (tmpvar_94, 0.0, 1.0);
  highp vec3 tmpvar_98;
  tmpvar_98 = mix (spColor_80.xyz, tmpvar_96, vec3((tmpvar_97 * _RGRatio)));
  tmpvar_91 = tmpvar_98;
  outColor_5.xyz = tmpvar_91;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_99;
    scrpos_99 = xlv_TEXCOORD3;
    mediump float a_100;
    a_100 = xlv_TEXCOORD3.z;
    if ((a_100 < 0.95)) {
      scrpos_99.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_100 = (a_100 * 17.0);
      highp float tmpvar_101;
      tmpvar_101 = (scrpos_99.y / 4.0);
      highp float tmpvar_102;
      tmpvar_102 = (fract(abs(tmpvar_101)) * 4.0);
      highp float tmpvar_103;
      if ((tmpvar_101 >= 0.0)) {
        tmpvar_103 = tmpvar_102;
      } else {
        tmpvar_103 = -(tmpvar_102);
      };
      highp float tmpvar_104;
      tmpvar_104 = (scrpos_99.x / 4.0);
      highp float tmpvar_105;
      tmpvar_105 = (fract(abs(tmpvar_104)) * 4.0);
      highp float tmpvar_106;
      if ((tmpvar_104 >= 0.0)) {
        tmpvar_106 = tmpvar_105;
      } else {
        tmpvar_106 = -(tmpvar_105);
      };
      highp float x_107;
      x_107 = ((a_100 - _DITHERMATRIX[
        int(tmpvar_103)
      ][
        int(tmpvar_106)
      ]) - 0.01);
      if ((x_107 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_80.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_76;
  mediump vec3 R_77;
  mediump float intensity_78;
  mediump vec4 noiseTex_79;
  mediump vec4 spColor_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_80 = tmpvar_81;
  spColor_80.w = (spColor_80.w * _SPOpaqueness);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_79 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((1.99 * tmpvar_82.x) * _SPNoiseScaler) - 1.0);
  intensity_78 = tmpvar_83;
  highp vec3 tmpvar_84;
  highp vec3 I_85;
  I_85 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_79 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_84 = (I_85 - (2.0 * (
    dot (tmpvar_67, I_85)
   * tmpvar_67)));
  R_77 = tmpvar_84;
  lowp vec3 tmpvar_86;
  tmpvar_86 = textureCube (_SPCubeMap, R_77).xyz;
  reflection_76 = tmpvar_86;
  highp vec3 tmpvar_87;
  mediump vec3 x_88;
  x_88 = (spColor_80.xyz * _SPOldColor.xyz);
  tmpvar_87 = mix (x_88, ((reflection_76 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_80.xyz = tmpvar_87;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_78 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_78 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_89;
      tmpvar_89 = mix (spColor_80.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_78) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_80.xyz = tmpvar_89;
    };
  };
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (outColor_5, spColor_80, vec4(xlat_mutable_SPIntensity));
  spColor_80 = tmpvar_90;
  outColor_5.w = spColor_80.w;
  mediump vec3 tmpvar_91;
  highp vec3 N_92;
  N_92 = tmpvar_67;
  highp vec3 V_93;
  V_93 = V_2;
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = pow (clamp ((1.001 - 
    dot (V_93, N_92)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_94 = (_RGBias + (tmpvar_95 * _RGScale));
  mediump vec3 tmpvar_96;
  tmpvar_96 = (tmpvar_94 * _RGColor).xyz;
  mediump float tmpvar_97;
  tmpvar_97 = clamp (tmpvar_94, 0.0, 1.0);
  highp vec3 tmpvar_98;
  tmpvar_98 = mix (spColor_80.xyz, tmpvar_96, vec3((tmpvar_97 * _RGRatio)));
  tmpvar_91 = tmpvar_98;
  outColor_5.xyz = tmpvar_91;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_99;
    scrpos_99 = xlv_TEXCOORD3;
    mediump float a_100;
    a_100 = xlv_TEXCOORD3.z;
    if ((a_100 < 0.95)) {
      scrpos_99.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_100 = (a_100 * 17.0);
      highp float tmpvar_101;
      tmpvar_101 = (scrpos_99.y / 4.0);
      highp float tmpvar_102;
      tmpvar_102 = (fract(abs(tmpvar_101)) * 4.0);
      highp float tmpvar_103;
      if ((tmpvar_101 >= 0.0)) {
        tmpvar_103 = tmpvar_102;
      } else {
        tmpvar_103 = -(tmpvar_102);
      };
      highp float tmpvar_104;
      tmpvar_104 = (scrpos_99.x / 4.0);
      highp float tmpvar_105;
      tmpvar_105 = (fract(abs(tmpvar_104)) * 4.0);
      highp float tmpvar_106;
      if ((tmpvar_104 >= 0.0)) {
        tmpvar_106 = tmpvar_105;
      } else {
        tmpvar_106 = -(tmpvar_105);
      };
      highp float x_107;
      x_107 = ((a_100 - _DITHERMATRIX[
        int(tmpvar_103)
      ][
        int(tmpvar_106)
      ]) - 0.01);
      if ((x_107 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_80.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_76;
    scrpos_76 = xlv_TEXCOORD3;
    mediump float a_77;
    a_77 = xlv_TEXCOORD3.z;
    if ((a_77 < 0.95)) {
      scrpos_76.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_77 = (a_77 * 17.0);
      highp float tmpvar_78;
      tmpvar_78 = (scrpos_76.y / 4.0);
      highp float tmpvar_79;
      tmpvar_79 = (fract(abs(tmpvar_78)) * 4.0);
      highp float tmpvar_80;
      if ((tmpvar_78 >= 0.0)) {
        tmpvar_80 = tmpvar_79;
      } else {
        tmpvar_80 = -(tmpvar_79);
      };
      highp float tmpvar_81;
      tmpvar_81 = (scrpos_76.x / 4.0);
      highp float tmpvar_82;
      tmpvar_82 = (fract(abs(tmpvar_81)) * 4.0);
      highp float tmpvar_83;
      if ((tmpvar_81 >= 0.0)) {
        tmpvar_83 = tmpvar_82;
      } else {
        tmpvar_83 = -(tmpvar_82);
      };
      highp float x_84;
      x_84 = ((a_77 - _DITHERMATRIX[
        int(tmpvar_80)
      ][
        int(tmpvar_83)
      ]) - 0.01);
      if ((x_84 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_76;
    scrpos_76 = xlv_TEXCOORD3;
    mediump float a_77;
    a_77 = xlv_TEXCOORD3.z;
    if ((a_77 < 0.95)) {
      scrpos_76.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_77 = (a_77 * 17.0);
      highp float tmpvar_78;
      tmpvar_78 = (scrpos_76.y / 4.0);
      highp float tmpvar_79;
      tmpvar_79 = (fract(abs(tmpvar_78)) * 4.0);
      highp float tmpvar_80;
      if ((tmpvar_78 >= 0.0)) {
        tmpvar_80 = tmpvar_79;
      } else {
        tmpvar_80 = -(tmpvar_79);
      };
      highp float tmpvar_81;
      tmpvar_81 = (scrpos_76.x / 4.0);
      highp float tmpvar_82;
      tmpvar_82 = (fract(abs(tmpvar_81)) * 4.0);
      highp float tmpvar_83;
      if ((tmpvar_81 >= 0.0)) {
        tmpvar_83 = tmpvar_82;
      } else {
        tmpvar_83 = -(tmpvar_82);
      };
      highp float x_84;
      x_84 = ((a_77 - _DITHERMATRIX[
        int(tmpvar_80)
      ][
        int(tmpvar_83)
      ]) - 0.01);
      if ((x_84 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_76;
    scrpos_76 = xlv_TEXCOORD3;
    mediump float a_77;
    a_77 = xlv_TEXCOORD3.z;
    if ((a_77 < 0.95)) {
      scrpos_76.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_77 = (a_77 * 17.0);
      highp float tmpvar_78;
      tmpvar_78 = (scrpos_76.y / 4.0);
      highp float tmpvar_79;
      tmpvar_79 = (fract(abs(tmpvar_78)) * 4.0);
      highp float tmpvar_80;
      if ((tmpvar_78 >= 0.0)) {
        tmpvar_80 = tmpvar_79;
      } else {
        tmpvar_80 = -(tmpvar_79);
      };
      highp float tmpvar_81;
      tmpvar_81 = (scrpos_76.x / 4.0);
      highp float tmpvar_82;
      tmpvar_82 = (fract(abs(tmpvar_81)) * 4.0);
      highp float tmpvar_83;
      if ((tmpvar_81 >= 0.0)) {
        tmpvar_83 = tmpvar_82;
      } else {
        tmpvar_83 = -(tmpvar_82);
      };
      highp float x_84;
      x_84 = ((a_77 - _DITHERMATRIX[
        int(tmpvar_80)
      ][
        int(tmpvar_83)
      ]) - 0.01);
      if ((x_84 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_13;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_13;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_13;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_13;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_13;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_13;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = tmpvar_24;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (outColor_5.xyz, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_41;
    scrpos_41 = xlv_TEXCOORD3;
    mediump float a_42;
    a_42 = xlv_TEXCOORD3.z;
    if ((a_42 < 0.95)) {
      scrpos_41.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_42 = (a_42 * 17.0);
      highp float tmpvar_43;
      tmpvar_43 = (scrpos_41.y / 4.0);
      highp float tmpvar_44;
      tmpvar_44 = (fract(abs(tmpvar_43)) * 4.0);
      highp float tmpvar_45;
      if ((tmpvar_43 >= 0.0)) {
        tmpvar_45 = tmpvar_44;
      } else {
        tmpvar_45 = -(tmpvar_44);
      };
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_41.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float x_49;
      x_49 = ((a_42 - _DITHERMATRIX[
        int(tmpvar_45)
      ][
        int(tmpvar_48)
      ]) - 0.01);
      if ((x_49 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = tmpvar_24;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (outColor_5.xyz, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_41;
    scrpos_41 = xlv_TEXCOORD3;
    mediump float a_42;
    a_42 = xlv_TEXCOORD3.z;
    if ((a_42 < 0.95)) {
      scrpos_41.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_42 = (a_42 * 17.0);
      highp float tmpvar_43;
      tmpvar_43 = (scrpos_41.y / 4.0);
      highp float tmpvar_44;
      tmpvar_44 = (fract(abs(tmpvar_43)) * 4.0);
      highp float tmpvar_45;
      if ((tmpvar_43 >= 0.0)) {
        tmpvar_45 = tmpvar_44;
      } else {
        tmpvar_45 = -(tmpvar_44);
      };
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_41.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float x_49;
      x_49 = ((a_42 - _DITHERMATRIX[
        int(tmpvar_45)
      ][
        int(tmpvar_48)
      ]) - 0.01);
      if ((x_49 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = tmpvar_24;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (outColor_5.xyz, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_41;
    scrpos_41 = xlv_TEXCOORD3;
    mediump float a_42;
    a_42 = xlv_TEXCOORD3.z;
    if ((a_42 < 0.95)) {
      scrpos_41.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_42 = (a_42 * 17.0);
      highp float tmpvar_43;
      tmpvar_43 = (scrpos_41.y / 4.0);
      highp float tmpvar_44;
      tmpvar_44 = (fract(abs(tmpvar_43)) * 4.0);
      highp float tmpvar_45;
      if ((tmpvar_43 >= 0.0)) {
        tmpvar_45 = tmpvar_44;
      } else {
        tmpvar_45 = -(tmpvar_44);
      };
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_41.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float x_49;
      x_49 = ((a_42 - _DITHERMATRIX[
        int(tmpvar_45)
      ][
        int(tmpvar_48)
      ]) - 0.01);
      if ((x_49 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_76;
  highp vec3 N_77;
  N_77 = tmpvar_67;
  highp vec3 V_78;
  V_78 = V_2;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = pow (clamp ((1.001 - 
    dot (V_78, N_77)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_79 = (_RGBias + (tmpvar_80 * _RGScale));
  mediump vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_79 * _RGColor).xyz;
  mediump float tmpvar_82;
  tmpvar_82 = clamp (tmpvar_79, 0.0, 1.0);
  highp vec3 tmpvar_83;
  tmpvar_83 = mix (outColor_5.xyz, tmpvar_81, vec3((tmpvar_82 * _RGRatio)));
  tmpvar_76 = tmpvar_83;
  outColor_5.xyz = tmpvar_76;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_84;
    scrpos_84 = xlv_TEXCOORD3;
    mediump float a_85;
    a_85 = xlv_TEXCOORD3.z;
    if ((a_85 < 0.95)) {
      scrpos_84.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_85 = (a_85 * 17.0);
      highp float tmpvar_86;
      tmpvar_86 = (scrpos_84.y / 4.0);
      highp float tmpvar_87;
      tmpvar_87 = (fract(abs(tmpvar_86)) * 4.0);
      highp float tmpvar_88;
      if ((tmpvar_86 >= 0.0)) {
        tmpvar_88 = tmpvar_87;
      } else {
        tmpvar_88 = -(tmpvar_87);
      };
      highp float tmpvar_89;
      tmpvar_89 = (scrpos_84.x / 4.0);
      highp float tmpvar_90;
      tmpvar_90 = (fract(abs(tmpvar_89)) * 4.0);
      highp float tmpvar_91;
      if ((tmpvar_89 >= 0.0)) {
        tmpvar_91 = tmpvar_90;
      } else {
        tmpvar_91 = -(tmpvar_90);
      };
      highp float x_92;
      x_92 = ((a_85 - _DITHERMATRIX[
        int(tmpvar_88)
      ][
        int(tmpvar_91)
      ]) - 0.01);
      if ((x_92 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_76;
  highp vec3 N_77;
  N_77 = tmpvar_67;
  highp vec3 V_78;
  V_78 = V_2;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = pow (clamp ((1.001 - 
    dot (V_78, N_77)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_79 = (_RGBias + (tmpvar_80 * _RGScale));
  mediump vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_79 * _RGColor).xyz;
  mediump float tmpvar_82;
  tmpvar_82 = clamp (tmpvar_79, 0.0, 1.0);
  highp vec3 tmpvar_83;
  tmpvar_83 = mix (outColor_5.xyz, tmpvar_81, vec3((tmpvar_82 * _RGRatio)));
  tmpvar_76 = tmpvar_83;
  outColor_5.xyz = tmpvar_76;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_84;
    scrpos_84 = xlv_TEXCOORD3;
    mediump float a_85;
    a_85 = xlv_TEXCOORD3.z;
    if ((a_85 < 0.95)) {
      scrpos_84.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_85 = (a_85 * 17.0);
      highp float tmpvar_86;
      tmpvar_86 = (scrpos_84.y / 4.0);
      highp float tmpvar_87;
      tmpvar_87 = (fract(abs(tmpvar_86)) * 4.0);
      highp float tmpvar_88;
      if ((tmpvar_86 >= 0.0)) {
        tmpvar_88 = tmpvar_87;
      } else {
        tmpvar_88 = -(tmpvar_87);
      };
      highp float tmpvar_89;
      tmpvar_89 = (scrpos_84.x / 4.0);
      highp float tmpvar_90;
      tmpvar_90 = (fract(abs(tmpvar_89)) * 4.0);
      highp float tmpvar_91;
      if ((tmpvar_89 >= 0.0)) {
        tmpvar_91 = tmpvar_90;
      } else {
        tmpvar_91 = -(tmpvar_90);
      };
      highp float x_92;
      x_92 = ((a_85 - _DITHERMATRIX[
        int(tmpvar_88)
      ][
        int(tmpvar_91)
      ]) - 0.01);
      if ((x_92 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_76;
  highp vec3 N_77;
  N_77 = tmpvar_67;
  highp vec3 V_78;
  V_78 = V_2;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = pow (clamp ((1.001 - 
    dot (V_78, N_77)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_79 = (_RGBias + (tmpvar_80 * _RGScale));
  mediump vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_79 * _RGColor).xyz;
  mediump float tmpvar_82;
  tmpvar_82 = clamp (tmpvar_79, 0.0, 1.0);
  highp vec3 tmpvar_83;
  tmpvar_83 = mix (outColor_5.xyz, tmpvar_81, vec3((tmpvar_82 * _RGRatio)));
  tmpvar_76 = tmpvar_83;
  outColor_5.xyz = tmpvar_76;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_84;
    scrpos_84 = xlv_TEXCOORD3;
    mediump float a_85;
    a_85 = xlv_TEXCOORD3.z;
    if ((a_85 < 0.95)) {
      scrpos_84.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_85 = (a_85 * 17.0);
      highp float tmpvar_86;
      tmpvar_86 = (scrpos_84.y / 4.0);
      highp float tmpvar_87;
      tmpvar_87 = (fract(abs(tmpvar_86)) * 4.0);
      highp float tmpvar_88;
      if ((tmpvar_86 >= 0.0)) {
        tmpvar_88 = tmpvar_87;
      } else {
        tmpvar_88 = -(tmpvar_87);
      };
      highp float tmpvar_89;
      tmpvar_89 = (scrpos_84.x / 4.0);
      highp float tmpvar_90;
      tmpvar_90 = (fract(abs(tmpvar_89)) * 4.0);
      highp float tmpvar_91;
      if ((tmpvar_89 >= 0.0)) {
        tmpvar_91 = tmpvar_90;
      } else {
        tmpvar_91 = -(tmpvar_90);
      };
      highp float x_92;
      x_92 = ((a_85 - _DITHERMATRIX[
        int(tmpvar_88)
      ][
        int(tmpvar_91)
      ]) - 0.01);
      if ((x_92 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_33;
  mediump vec3 R_34;
  mediump float intensity_35;
  mediump vec4 noiseTex_36;
  mediump vec4 spColor_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_37 = tmpvar_38;
  spColor_37.w = (spColor_37.w * _SPOpaqueness);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_36 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (((1.99 * tmpvar_39.x) * _SPNoiseScaler) - 1.0);
  intensity_35 = tmpvar_40;
  highp vec3 tmpvar_41;
  highp vec3 I_42;
  I_42 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_36 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_41 = (I_42 - (2.0 * (
    dot (tmpvar_24, I_42)
   * tmpvar_24)));
  R_34 = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = textureCube (_SPCubeMap, R_34).xyz;
  reflection_33 = tmpvar_43;
  highp vec3 tmpvar_44;
  mediump vec3 x_45;
  x_45 = (spColor_37.xyz * _SPOldColor.xyz);
  tmpvar_44 = mix (x_45, ((reflection_33 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_37.xyz = tmpvar_44;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_35 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_35 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_46;
      tmpvar_46 = mix (spColor_37.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_35) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_37.xyz = tmpvar_46;
    };
  };
  highp vec4 tmpvar_47;
  tmpvar_47 = mix (outColor_5, spColor_37, vec4(xlat_mutable_SPIntensity));
  spColor_37 = tmpvar_47;
  outColor_5 = spColor_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_48;
    scrpos_48 = xlv_TEXCOORD3;
    mediump float a_49;
    a_49 = xlv_TEXCOORD3.z;
    if ((a_49 < 0.95)) {
      scrpos_48.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_49 = (a_49 * 17.0);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_48.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float tmpvar_53;
      tmpvar_53 = (scrpos_48.x / 4.0);
      highp float tmpvar_54;
      tmpvar_54 = (fract(abs(tmpvar_53)) * 4.0);
      highp float tmpvar_55;
      if ((tmpvar_53 >= 0.0)) {
        tmpvar_55 = tmpvar_54;
      } else {
        tmpvar_55 = -(tmpvar_54);
      };
      highp float x_56;
      x_56 = ((a_49 - _DITHERMATRIX[
        int(tmpvar_52)
      ][
        int(tmpvar_55)
      ]) - 0.01);
      if ((x_56 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_37.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_33;
  mediump vec3 R_34;
  mediump float intensity_35;
  mediump vec4 noiseTex_36;
  mediump vec4 spColor_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_37 = tmpvar_38;
  spColor_37.w = (spColor_37.w * _SPOpaqueness);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_36 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (((1.99 * tmpvar_39.x) * _SPNoiseScaler) - 1.0);
  intensity_35 = tmpvar_40;
  highp vec3 tmpvar_41;
  highp vec3 I_42;
  I_42 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_36 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_41 = (I_42 - (2.0 * (
    dot (tmpvar_24, I_42)
   * tmpvar_24)));
  R_34 = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = textureCube (_SPCubeMap, R_34).xyz;
  reflection_33 = tmpvar_43;
  highp vec3 tmpvar_44;
  mediump vec3 x_45;
  x_45 = (spColor_37.xyz * _SPOldColor.xyz);
  tmpvar_44 = mix (x_45, ((reflection_33 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_37.xyz = tmpvar_44;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_35 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_35 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_46;
      tmpvar_46 = mix (spColor_37.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_35) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_37.xyz = tmpvar_46;
    };
  };
  highp vec4 tmpvar_47;
  tmpvar_47 = mix (outColor_5, spColor_37, vec4(xlat_mutable_SPIntensity));
  spColor_37 = tmpvar_47;
  outColor_5 = spColor_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_48;
    scrpos_48 = xlv_TEXCOORD3;
    mediump float a_49;
    a_49 = xlv_TEXCOORD3.z;
    if ((a_49 < 0.95)) {
      scrpos_48.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_49 = (a_49 * 17.0);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_48.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float tmpvar_53;
      tmpvar_53 = (scrpos_48.x / 4.0);
      highp float tmpvar_54;
      tmpvar_54 = (fract(abs(tmpvar_53)) * 4.0);
      highp float tmpvar_55;
      if ((tmpvar_53 >= 0.0)) {
        tmpvar_55 = tmpvar_54;
      } else {
        tmpvar_55 = -(tmpvar_54);
      };
      highp float x_56;
      x_56 = ((a_49 - _DITHERMATRIX[
        int(tmpvar_52)
      ][
        int(tmpvar_55)
      ]) - 0.01);
      if ((x_56 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_37.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_33;
  mediump vec3 R_34;
  mediump float intensity_35;
  mediump vec4 noiseTex_36;
  mediump vec4 spColor_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_37 = tmpvar_38;
  spColor_37.w = (spColor_37.w * _SPOpaqueness);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_36 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (((1.99 * tmpvar_39.x) * _SPNoiseScaler) - 1.0);
  intensity_35 = tmpvar_40;
  highp vec3 tmpvar_41;
  highp vec3 I_42;
  I_42 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_36 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_41 = (I_42 - (2.0 * (
    dot (tmpvar_24, I_42)
   * tmpvar_24)));
  R_34 = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = textureCube (_SPCubeMap, R_34).xyz;
  reflection_33 = tmpvar_43;
  highp vec3 tmpvar_44;
  mediump vec3 x_45;
  x_45 = (spColor_37.xyz * _SPOldColor.xyz);
  tmpvar_44 = mix (x_45, ((reflection_33 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_37.xyz = tmpvar_44;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_35 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_35 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_46;
      tmpvar_46 = mix (spColor_37.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_35) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_37.xyz = tmpvar_46;
    };
  };
  highp vec4 tmpvar_47;
  tmpvar_47 = mix (outColor_5, spColor_37, vec4(xlat_mutable_SPIntensity));
  spColor_37 = tmpvar_47;
  outColor_5 = spColor_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_48;
    scrpos_48 = xlv_TEXCOORD3;
    mediump float a_49;
    a_49 = xlv_TEXCOORD3.z;
    if ((a_49 < 0.95)) {
      scrpos_48.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_49 = (a_49 * 17.0);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_48.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float tmpvar_53;
      tmpvar_53 = (scrpos_48.x / 4.0);
      highp float tmpvar_54;
      tmpvar_54 = (fract(abs(tmpvar_53)) * 4.0);
      highp float tmpvar_55;
      if ((tmpvar_53 >= 0.0)) {
        tmpvar_55 = tmpvar_54;
      } else {
        tmpvar_55 = -(tmpvar_54);
      };
      highp float x_56;
      x_56 = ((a_49 - _DITHERMATRIX[
        int(tmpvar_52)
      ][
        int(tmpvar_55)
      ]) - 0.01);
      if ((x_56 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_37.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_76;
  mediump vec3 R_77;
  mediump float intensity_78;
  mediump vec4 noiseTex_79;
  mediump vec4 spColor_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_80 = tmpvar_81;
  spColor_80.w = (spColor_80.w * _SPOpaqueness);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_79 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((1.99 * tmpvar_82.x) * _SPNoiseScaler) - 1.0);
  intensity_78 = tmpvar_83;
  highp vec3 tmpvar_84;
  highp vec3 I_85;
  I_85 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_79 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_84 = (I_85 - (2.0 * (
    dot (tmpvar_67, I_85)
   * tmpvar_67)));
  R_77 = tmpvar_84;
  lowp vec3 tmpvar_86;
  tmpvar_86 = textureCube (_SPCubeMap, R_77).xyz;
  reflection_76 = tmpvar_86;
  highp vec3 tmpvar_87;
  mediump vec3 x_88;
  x_88 = (spColor_80.xyz * _SPOldColor.xyz);
  tmpvar_87 = mix (x_88, ((reflection_76 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_80.xyz = tmpvar_87;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_78 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_78 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_89;
      tmpvar_89 = mix (spColor_80.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_78) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_80.xyz = tmpvar_89;
    };
  };
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (outColor_5, spColor_80, vec4(xlat_mutable_SPIntensity));
  spColor_80 = tmpvar_90;
  outColor_5 = spColor_80;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_91;
    scrpos_91 = xlv_TEXCOORD3;
    mediump float a_92;
    a_92 = xlv_TEXCOORD3.z;
    if ((a_92 < 0.95)) {
      scrpos_91.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_92 = (a_92 * 17.0);
      highp float tmpvar_93;
      tmpvar_93 = (scrpos_91.y / 4.0);
      highp float tmpvar_94;
      tmpvar_94 = (fract(abs(tmpvar_93)) * 4.0);
      highp float tmpvar_95;
      if ((tmpvar_93 >= 0.0)) {
        tmpvar_95 = tmpvar_94;
      } else {
        tmpvar_95 = -(tmpvar_94);
      };
      highp float tmpvar_96;
      tmpvar_96 = (scrpos_91.x / 4.0);
      highp float tmpvar_97;
      tmpvar_97 = (fract(abs(tmpvar_96)) * 4.0);
      highp float tmpvar_98;
      if ((tmpvar_96 >= 0.0)) {
        tmpvar_98 = tmpvar_97;
      } else {
        tmpvar_98 = -(tmpvar_97);
      };
      highp float x_99;
      x_99 = ((a_92 - _DITHERMATRIX[
        int(tmpvar_95)
      ][
        int(tmpvar_98)
      ]) - 0.01);
      if ((x_99 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_80.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_76;
  mediump vec3 R_77;
  mediump float intensity_78;
  mediump vec4 noiseTex_79;
  mediump vec4 spColor_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_80 = tmpvar_81;
  spColor_80.w = (spColor_80.w * _SPOpaqueness);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_79 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((1.99 * tmpvar_82.x) * _SPNoiseScaler) - 1.0);
  intensity_78 = tmpvar_83;
  highp vec3 tmpvar_84;
  highp vec3 I_85;
  I_85 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_79 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_84 = (I_85 - (2.0 * (
    dot (tmpvar_67, I_85)
   * tmpvar_67)));
  R_77 = tmpvar_84;
  lowp vec3 tmpvar_86;
  tmpvar_86 = textureCube (_SPCubeMap, R_77).xyz;
  reflection_76 = tmpvar_86;
  highp vec3 tmpvar_87;
  mediump vec3 x_88;
  x_88 = (spColor_80.xyz * _SPOldColor.xyz);
  tmpvar_87 = mix (x_88, ((reflection_76 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_80.xyz = tmpvar_87;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_78 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_78 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_89;
      tmpvar_89 = mix (spColor_80.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_78) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_80.xyz = tmpvar_89;
    };
  };
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (outColor_5, spColor_80, vec4(xlat_mutable_SPIntensity));
  spColor_80 = tmpvar_90;
  outColor_5 = spColor_80;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_91;
    scrpos_91 = xlv_TEXCOORD3;
    mediump float a_92;
    a_92 = xlv_TEXCOORD3.z;
    if ((a_92 < 0.95)) {
      scrpos_91.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_92 = (a_92 * 17.0);
      highp float tmpvar_93;
      tmpvar_93 = (scrpos_91.y / 4.0);
      highp float tmpvar_94;
      tmpvar_94 = (fract(abs(tmpvar_93)) * 4.0);
      highp float tmpvar_95;
      if ((tmpvar_93 >= 0.0)) {
        tmpvar_95 = tmpvar_94;
      } else {
        tmpvar_95 = -(tmpvar_94);
      };
      highp float tmpvar_96;
      tmpvar_96 = (scrpos_91.x / 4.0);
      highp float tmpvar_97;
      tmpvar_97 = (fract(abs(tmpvar_96)) * 4.0);
      highp float tmpvar_98;
      if ((tmpvar_96 >= 0.0)) {
        tmpvar_98 = tmpvar_97;
      } else {
        tmpvar_98 = -(tmpvar_97);
      };
      highp float x_99;
      x_99 = ((a_92 - _DITHERMATRIX[
        int(tmpvar_95)
      ][
        int(tmpvar_98)
      ]) - 0.01);
      if ((x_99 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_80.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_76;
  mediump vec3 R_77;
  mediump float intensity_78;
  mediump vec4 noiseTex_79;
  mediump vec4 spColor_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_80 = tmpvar_81;
  spColor_80.w = (spColor_80.w * _SPOpaqueness);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_79 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((1.99 * tmpvar_82.x) * _SPNoiseScaler) - 1.0);
  intensity_78 = tmpvar_83;
  highp vec3 tmpvar_84;
  highp vec3 I_85;
  I_85 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_79 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_84 = (I_85 - (2.0 * (
    dot (tmpvar_67, I_85)
   * tmpvar_67)));
  R_77 = tmpvar_84;
  lowp vec3 tmpvar_86;
  tmpvar_86 = textureCube (_SPCubeMap, R_77).xyz;
  reflection_76 = tmpvar_86;
  highp vec3 tmpvar_87;
  mediump vec3 x_88;
  x_88 = (spColor_80.xyz * _SPOldColor.xyz);
  tmpvar_87 = mix (x_88, ((reflection_76 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_80.xyz = tmpvar_87;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_78 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_78 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_89;
      tmpvar_89 = mix (spColor_80.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_78) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_80.xyz = tmpvar_89;
    };
  };
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (outColor_5, spColor_80, vec4(xlat_mutable_SPIntensity));
  spColor_80 = tmpvar_90;
  outColor_5 = spColor_80;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_91;
    scrpos_91 = xlv_TEXCOORD3;
    mediump float a_92;
    a_92 = xlv_TEXCOORD3.z;
    if ((a_92 < 0.95)) {
      scrpos_91.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_92 = (a_92 * 17.0);
      highp float tmpvar_93;
      tmpvar_93 = (scrpos_91.y / 4.0);
      highp float tmpvar_94;
      tmpvar_94 = (fract(abs(tmpvar_93)) * 4.0);
      highp float tmpvar_95;
      if ((tmpvar_93 >= 0.0)) {
        tmpvar_95 = tmpvar_94;
      } else {
        tmpvar_95 = -(tmpvar_94);
      };
      highp float tmpvar_96;
      tmpvar_96 = (scrpos_91.x / 4.0);
      highp float tmpvar_97;
      tmpvar_97 = (fract(abs(tmpvar_96)) * 4.0);
      highp float tmpvar_98;
      if ((tmpvar_96 >= 0.0)) {
        tmpvar_98 = tmpvar_97;
      } else {
        tmpvar_98 = -(tmpvar_97);
      };
      highp float x_99;
      x_99 = ((a_92 - _DITHERMATRIX[
        int(tmpvar_95)
      ][
        int(tmpvar_98)
      ]) - 0.01);
      if ((x_99 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_80.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_13;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_13;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_13;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_13;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_13;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_13;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_33;
  mediump vec3 R_34;
  mediump float intensity_35;
  mediump vec4 noiseTex_36;
  mediump vec4 spColor_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_37 = tmpvar_38;
  spColor_37.w = (spColor_37.w * _SPOpaqueness);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_36 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (((1.99 * tmpvar_39.x) * _SPNoiseScaler) - 1.0);
  intensity_35 = tmpvar_40;
  highp vec3 tmpvar_41;
  highp vec3 I_42;
  I_42 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_36 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_41 = (I_42 - (2.0 * (
    dot (tmpvar_24, I_42)
   * tmpvar_24)));
  R_34 = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = textureCube (_SPCubeMap, R_34).xyz;
  reflection_33 = tmpvar_43;
  highp vec3 tmpvar_44;
  mediump vec3 x_45;
  x_45 = (spColor_37.xyz * _SPOldColor.xyz);
  tmpvar_44 = mix (x_45, ((reflection_33 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_37.xyz = tmpvar_44;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_35 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_35 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_46;
      tmpvar_46 = mix (spColor_37.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_35) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_37.xyz = tmpvar_46;
    };
  };
  highp vec4 tmpvar_47;
  tmpvar_47 = mix (outColor_5, spColor_37, vec4(xlat_mutable_SPIntensity));
  spColor_37 = tmpvar_47;
  outColor_5.w = spColor_37.w;
  mediump vec3 tmpvar_48;
  highp vec3 N_49;
  N_49 = tmpvar_24;
  highp vec3 V_50;
  V_50 = V_2;
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = pow (clamp ((1.001 - 
    dot (V_50, N_49)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_51 = (_RGBias + (tmpvar_52 * _RGScale));
  mediump vec3 tmpvar_53;
  tmpvar_53 = (tmpvar_51 * _RGColor).xyz;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (tmpvar_51, 0.0, 1.0);
  highp vec3 tmpvar_55;
  tmpvar_55 = mix (spColor_37.xyz, tmpvar_53, vec3((tmpvar_54 * _RGRatio)));
  tmpvar_48 = tmpvar_55;
  outColor_5.xyz = tmpvar_48;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_56;
    scrpos_56 = xlv_TEXCOORD3;
    mediump float a_57;
    a_57 = xlv_TEXCOORD3.z;
    if ((a_57 < 0.95)) {
      scrpos_56.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_57 = (a_57 * 17.0);
      highp float tmpvar_58;
      tmpvar_58 = (scrpos_56.y / 4.0);
      highp float tmpvar_59;
      tmpvar_59 = (fract(abs(tmpvar_58)) * 4.0);
      highp float tmpvar_60;
      if ((tmpvar_58 >= 0.0)) {
        tmpvar_60 = tmpvar_59;
      } else {
        tmpvar_60 = -(tmpvar_59);
      };
      highp float tmpvar_61;
      tmpvar_61 = (scrpos_56.x / 4.0);
      highp float tmpvar_62;
      tmpvar_62 = (fract(abs(tmpvar_61)) * 4.0);
      highp float tmpvar_63;
      if ((tmpvar_61 >= 0.0)) {
        tmpvar_63 = tmpvar_62;
      } else {
        tmpvar_63 = -(tmpvar_62);
      };
      highp float x_64;
      x_64 = ((a_57 - _DITHERMATRIX[
        int(tmpvar_60)
      ][
        int(tmpvar_63)
      ]) - 0.01);
      if ((x_64 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_37.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_33;
  mediump vec3 R_34;
  mediump float intensity_35;
  mediump vec4 noiseTex_36;
  mediump vec4 spColor_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_37 = tmpvar_38;
  spColor_37.w = (spColor_37.w * _SPOpaqueness);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_36 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (((1.99 * tmpvar_39.x) * _SPNoiseScaler) - 1.0);
  intensity_35 = tmpvar_40;
  highp vec3 tmpvar_41;
  highp vec3 I_42;
  I_42 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_36 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_41 = (I_42 - (2.0 * (
    dot (tmpvar_24, I_42)
   * tmpvar_24)));
  R_34 = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = textureCube (_SPCubeMap, R_34).xyz;
  reflection_33 = tmpvar_43;
  highp vec3 tmpvar_44;
  mediump vec3 x_45;
  x_45 = (spColor_37.xyz * _SPOldColor.xyz);
  tmpvar_44 = mix (x_45, ((reflection_33 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_37.xyz = tmpvar_44;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_35 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_35 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_46;
      tmpvar_46 = mix (spColor_37.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_35) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_37.xyz = tmpvar_46;
    };
  };
  highp vec4 tmpvar_47;
  tmpvar_47 = mix (outColor_5, spColor_37, vec4(xlat_mutable_SPIntensity));
  spColor_37 = tmpvar_47;
  outColor_5.w = spColor_37.w;
  mediump vec3 tmpvar_48;
  highp vec3 N_49;
  N_49 = tmpvar_24;
  highp vec3 V_50;
  V_50 = V_2;
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = pow (clamp ((1.001 - 
    dot (V_50, N_49)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_51 = (_RGBias + (tmpvar_52 * _RGScale));
  mediump vec3 tmpvar_53;
  tmpvar_53 = (tmpvar_51 * _RGColor).xyz;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (tmpvar_51, 0.0, 1.0);
  highp vec3 tmpvar_55;
  tmpvar_55 = mix (spColor_37.xyz, tmpvar_53, vec3((tmpvar_54 * _RGRatio)));
  tmpvar_48 = tmpvar_55;
  outColor_5.xyz = tmpvar_48;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_56;
    scrpos_56 = xlv_TEXCOORD3;
    mediump float a_57;
    a_57 = xlv_TEXCOORD3.z;
    if ((a_57 < 0.95)) {
      scrpos_56.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_57 = (a_57 * 17.0);
      highp float tmpvar_58;
      tmpvar_58 = (scrpos_56.y / 4.0);
      highp float tmpvar_59;
      tmpvar_59 = (fract(abs(tmpvar_58)) * 4.0);
      highp float tmpvar_60;
      if ((tmpvar_58 >= 0.0)) {
        tmpvar_60 = tmpvar_59;
      } else {
        tmpvar_60 = -(tmpvar_59);
      };
      highp float tmpvar_61;
      tmpvar_61 = (scrpos_56.x / 4.0);
      highp float tmpvar_62;
      tmpvar_62 = (fract(abs(tmpvar_61)) * 4.0);
      highp float tmpvar_63;
      if ((tmpvar_61 >= 0.0)) {
        tmpvar_63 = tmpvar_62;
      } else {
        tmpvar_63 = -(tmpvar_62);
      };
      highp float x_64;
      x_64 = ((a_57 - _DITHERMATRIX[
        int(tmpvar_60)
      ][
        int(tmpvar_63)
      ]) - 0.01);
      if ((x_64 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_37.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_33;
  mediump vec3 R_34;
  mediump float intensity_35;
  mediump vec4 noiseTex_36;
  mediump vec4 spColor_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_37 = tmpvar_38;
  spColor_37.w = (spColor_37.w * _SPOpaqueness);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_36 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (((1.99 * tmpvar_39.x) * _SPNoiseScaler) - 1.0);
  intensity_35 = tmpvar_40;
  highp vec3 tmpvar_41;
  highp vec3 I_42;
  I_42 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_36 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_41 = (I_42 - (2.0 * (
    dot (tmpvar_24, I_42)
   * tmpvar_24)));
  R_34 = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = textureCube (_SPCubeMap, R_34).xyz;
  reflection_33 = tmpvar_43;
  highp vec3 tmpvar_44;
  mediump vec3 x_45;
  x_45 = (spColor_37.xyz * _SPOldColor.xyz);
  tmpvar_44 = mix (x_45, ((reflection_33 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_37.xyz = tmpvar_44;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_35 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_35 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_46;
      tmpvar_46 = mix (spColor_37.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_35) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_37.xyz = tmpvar_46;
    };
  };
  highp vec4 tmpvar_47;
  tmpvar_47 = mix (outColor_5, spColor_37, vec4(xlat_mutable_SPIntensity));
  spColor_37 = tmpvar_47;
  outColor_5.w = spColor_37.w;
  mediump vec3 tmpvar_48;
  highp vec3 N_49;
  N_49 = tmpvar_24;
  highp vec3 V_50;
  V_50 = V_2;
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = pow (clamp ((1.001 - 
    dot (V_50, N_49)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_51 = (_RGBias + (tmpvar_52 * _RGScale));
  mediump vec3 tmpvar_53;
  tmpvar_53 = (tmpvar_51 * _RGColor).xyz;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (tmpvar_51, 0.0, 1.0);
  highp vec3 tmpvar_55;
  tmpvar_55 = mix (spColor_37.xyz, tmpvar_53, vec3((tmpvar_54 * _RGRatio)));
  tmpvar_48 = tmpvar_55;
  outColor_5.xyz = tmpvar_48;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_56;
    scrpos_56 = xlv_TEXCOORD3;
    mediump float a_57;
    a_57 = xlv_TEXCOORD3.z;
    if ((a_57 < 0.95)) {
      scrpos_56.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_57 = (a_57 * 17.0);
      highp float tmpvar_58;
      tmpvar_58 = (scrpos_56.y / 4.0);
      highp float tmpvar_59;
      tmpvar_59 = (fract(abs(tmpvar_58)) * 4.0);
      highp float tmpvar_60;
      if ((tmpvar_58 >= 0.0)) {
        tmpvar_60 = tmpvar_59;
      } else {
        tmpvar_60 = -(tmpvar_59);
      };
      highp float tmpvar_61;
      tmpvar_61 = (scrpos_56.x / 4.0);
      highp float tmpvar_62;
      tmpvar_62 = (fract(abs(tmpvar_61)) * 4.0);
      highp float tmpvar_63;
      if ((tmpvar_61 >= 0.0)) {
        tmpvar_63 = tmpvar_62;
      } else {
        tmpvar_63 = -(tmpvar_62);
      };
      highp float x_64;
      x_64 = ((a_57 - _DITHERMATRIX[
        int(tmpvar_60)
      ][
        int(tmpvar_63)
      ]) - 0.01);
      if ((x_64 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_37.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_76;
  mediump vec3 R_77;
  mediump float intensity_78;
  mediump vec4 noiseTex_79;
  mediump vec4 spColor_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_80 = tmpvar_81;
  spColor_80.w = (spColor_80.w * _SPOpaqueness);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_79 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((1.99 * tmpvar_82.x) * _SPNoiseScaler) - 1.0);
  intensity_78 = tmpvar_83;
  highp vec3 tmpvar_84;
  highp vec3 I_85;
  I_85 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_79 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_84 = (I_85 - (2.0 * (
    dot (tmpvar_67, I_85)
   * tmpvar_67)));
  R_77 = tmpvar_84;
  lowp vec3 tmpvar_86;
  tmpvar_86 = textureCube (_SPCubeMap, R_77).xyz;
  reflection_76 = tmpvar_86;
  highp vec3 tmpvar_87;
  mediump vec3 x_88;
  x_88 = (spColor_80.xyz * _SPOldColor.xyz);
  tmpvar_87 = mix (x_88, ((reflection_76 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_80.xyz = tmpvar_87;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_78 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_78 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_89;
      tmpvar_89 = mix (spColor_80.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_78) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_80.xyz = tmpvar_89;
    };
  };
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (outColor_5, spColor_80, vec4(xlat_mutable_SPIntensity));
  spColor_80 = tmpvar_90;
  outColor_5.w = spColor_80.w;
  mediump vec3 tmpvar_91;
  highp vec3 N_92;
  N_92 = tmpvar_67;
  highp vec3 V_93;
  V_93 = V_2;
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = pow (clamp ((1.001 - 
    dot (V_93, N_92)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_94 = (_RGBias + (tmpvar_95 * _RGScale));
  mediump vec3 tmpvar_96;
  tmpvar_96 = (tmpvar_94 * _RGColor).xyz;
  mediump float tmpvar_97;
  tmpvar_97 = clamp (tmpvar_94, 0.0, 1.0);
  highp vec3 tmpvar_98;
  tmpvar_98 = mix (spColor_80.xyz, tmpvar_96, vec3((tmpvar_97 * _RGRatio)));
  tmpvar_91 = tmpvar_98;
  outColor_5.xyz = tmpvar_91;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_99;
    scrpos_99 = xlv_TEXCOORD3;
    mediump float a_100;
    a_100 = xlv_TEXCOORD3.z;
    if ((a_100 < 0.95)) {
      scrpos_99.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_100 = (a_100 * 17.0);
      highp float tmpvar_101;
      tmpvar_101 = (scrpos_99.y / 4.0);
      highp float tmpvar_102;
      tmpvar_102 = (fract(abs(tmpvar_101)) * 4.0);
      highp float tmpvar_103;
      if ((tmpvar_101 >= 0.0)) {
        tmpvar_103 = tmpvar_102;
      } else {
        tmpvar_103 = -(tmpvar_102);
      };
      highp float tmpvar_104;
      tmpvar_104 = (scrpos_99.x / 4.0);
      highp float tmpvar_105;
      tmpvar_105 = (fract(abs(tmpvar_104)) * 4.0);
      highp float tmpvar_106;
      if ((tmpvar_104 >= 0.0)) {
        tmpvar_106 = tmpvar_105;
      } else {
        tmpvar_106 = -(tmpvar_105);
      };
      highp float x_107;
      x_107 = ((a_100 - _DITHERMATRIX[
        int(tmpvar_103)
      ][
        int(tmpvar_106)
      ]) - 0.01);
      if ((x_107 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_80.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_76;
  mediump vec3 R_77;
  mediump float intensity_78;
  mediump vec4 noiseTex_79;
  mediump vec4 spColor_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_80 = tmpvar_81;
  spColor_80.w = (spColor_80.w * _SPOpaqueness);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_79 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((1.99 * tmpvar_82.x) * _SPNoiseScaler) - 1.0);
  intensity_78 = tmpvar_83;
  highp vec3 tmpvar_84;
  highp vec3 I_85;
  I_85 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_79 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_84 = (I_85 - (2.0 * (
    dot (tmpvar_67, I_85)
   * tmpvar_67)));
  R_77 = tmpvar_84;
  lowp vec3 tmpvar_86;
  tmpvar_86 = textureCube (_SPCubeMap, R_77).xyz;
  reflection_76 = tmpvar_86;
  highp vec3 tmpvar_87;
  mediump vec3 x_88;
  x_88 = (spColor_80.xyz * _SPOldColor.xyz);
  tmpvar_87 = mix (x_88, ((reflection_76 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_80.xyz = tmpvar_87;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_78 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_78 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_89;
      tmpvar_89 = mix (spColor_80.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_78) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_80.xyz = tmpvar_89;
    };
  };
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (outColor_5, spColor_80, vec4(xlat_mutable_SPIntensity));
  spColor_80 = tmpvar_90;
  outColor_5.w = spColor_80.w;
  mediump vec3 tmpvar_91;
  highp vec3 N_92;
  N_92 = tmpvar_67;
  highp vec3 V_93;
  V_93 = V_2;
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = pow (clamp ((1.001 - 
    dot (V_93, N_92)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_94 = (_RGBias + (tmpvar_95 * _RGScale));
  mediump vec3 tmpvar_96;
  tmpvar_96 = (tmpvar_94 * _RGColor).xyz;
  mediump float tmpvar_97;
  tmpvar_97 = clamp (tmpvar_94, 0.0, 1.0);
  highp vec3 tmpvar_98;
  tmpvar_98 = mix (spColor_80.xyz, tmpvar_96, vec3((tmpvar_97 * _RGRatio)));
  tmpvar_91 = tmpvar_98;
  outColor_5.xyz = tmpvar_91;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_99;
    scrpos_99 = xlv_TEXCOORD3;
    mediump float a_100;
    a_100 = xlv_TEXCOORD3.z;
    if ((a_100 < 0.95)) {
      scrpos_99.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_100 = (a_100 * 17.0);
      highp float tmpvar_101;
      tmpvar_101 = (scrpos_99.y / 4.0);
      highp float tmpvar_102;
      tmpvar_102 = (fract(abs(tmpvar_101)) * 4.0);
      highp float tmpvar_103;
      if ((tmpvar_101 >= 0.0)) {
        tmpvar_103 = tmpvar_102;
      } else {
        tmpvar_103 = -(tmpvar_102);
      };
      highp float tmpvar_104;
      tmpvar_104 = (scrpos_99.x / 4.0);
      highp float tmpvar_105;
      tmpvar_105 = (fract(abs(tmpvar_104)) * 4.0);
      highp float tmpvar_106;
      if ((tmpvar_104 >= 0.0)) {
        tmpvar_106 = tmpvar_105;
      } else {
        tmpvar_106 = -(tmpvar_105);
      };
      highp float x_107;
      x_107 = ((a_100 - _DITHERMATRIX[
        int(tmpvar_103)
      ][
        int(tmpvar_106)
      ]) - 0.01);
      if ((x_107 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_80.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_76;
  mediump vec3 R_77;
  mediump float intensity_78;
  mediump vec4 noiseTex_79;
  mediump vec4 spColor_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_80 = tmpvar_81;
  spColor_80.w = (spColor_80.w * _SPOpaqueness);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_79 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((1.99 * tmpvar_82.x) * _SPNoiseScaler) - 1.0);
  intensity_78 = tmpvar_83;
  highp vec3 tmpvar_84;
  highp vec3 I_85;
  I_85 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_79 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_84 = (I_85 - (2.0 * (
    dot (tmpvar_67, I_85)
   * tmpvar_67)));
  R_77 = tmpvar_84;
  lowp vec3 tmpvar_86;
  tmpvar_86 = textureCube (_SPCubeMap, R_77).xyz;
  reflection_76 = tmpvar_86;
  highp vec3 tmpvar_87;
  mediump vec3 x_88;
  x_88 = (spColor_80.xyz * _SPOldColor.xyz);
  tmpvar_87 = mix (x_88, ((reflection_76 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_80.xyz = tmpvar_87;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_78 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_78 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_89;
      tmpvar_89 = mix (spColor_80.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_78) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_80.xyz = tmpvar_89;
    };
  };
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (outColor_5, spColor_80, vec4(xlat_mutable_SPIntensity));
  spColor_80 = tmpvar_90;
  outColor_5.w = spColor_80.w;
  mediump vec3 tmpvar_91;
  highp vec3 N_92;
  N_92 = tmpvar_67;
  highp vec3 V_93;
  V_93 = V_2;
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = pow (clamp ((1.001 - 
    dot (V_93, N_92)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_94 = (_RGBias + (tmpvar_95 * _RGScale));
  mediump vec3 tmpvar_96;
  tmpvar_96 = (tmpvar_94 * _RGColor).xyz;
  mediump float tmpvar_97;
  tmpvar_97 = clamp (tmpvar_94, 0.0, 1.0);
  highp vec3 tmpvar_98;
  tmpvar_98 = mix (spColor_80.xyz, tmpvar_96, vec3((tmpvar_97 * _RGRatio)));
  tmpvar_91 = tmpvar_98;
  outColor_5.xyz = tmpvar_91;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_99;
    scrpos_99 = xlv_TEXCOORD3;
    mediump float a_100;
    a_100 = xlv_TEXCOORD3.z;
    if ((a_100 < 0.95)) {
      scrpos_99.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_100 = (a_100 * 17.0);
      highp float tmpvar_101;
      tmpvar_101 = (scrpos_99.y / 4.0);
      highp float tmpvar_102;
      tmpvar_102 = (fract(abs(tmpvar_101)) * 4.0);
      highp float tmpvar_103;
      if ((tmpvar_101 >= 0.0)) {
        tmpvar_103 = tmpvar_102;
      } else {
        tmpvar_103 = -(tmpvar_102);
      };
      highp float tmpvar_104;
      tmpvar_104 = (scrpos_99.x / 4.0);
      highp float tmpvar_105;
      tmpvar_105 = (fract(abs(tmpvar_104)) * 4.0);
      highp float tmpvar_106;
      if ((tmpvar_104 >= 0.0)) {
        tmpvar_106 = tmpvar_105;
      } else {
        tmpvar_106 = -(tmpvar_105);
      };
      highp float x_107;
      x_107 = ((a_100 - _DITHERMATRIX[
        int(tmpvar_103)
      ][
        int(tmpvar_106)
      ]) - 0.01);
      if ((x_107 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_80.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_22;
    scrpos_22 = xlv_TEXCOORD3;
    mediump float a_23;
    a_23 = xlv_TEXCOORD3.z;
    if ((a_23 < 0.95)) {
      scrpos_22.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_23 = (a_23 * 17.0);
      highp float tmpvar_24;
      tmpvar_24 = (scrpos_22.y / 4.0);
      highp float tmpvar_25;
      tmpvar_25 = (fract(abs(tmpvar_24)) * 4.0);
      highp float tmpvar_26;
      if ((tmpvar_24 >= 0.0)) {
        tmpvar_26 = tmpvar_25;
      } else {
        tmpvar_26 = -(tmpvar_25);
      };
      highp float tmpvar_27;
      tmpvar_27 = (scrpos_22.x / 4.0);
      highp float tmpvar_28;
      tmpvar_28 = (fract(abs(tmpvar_27)) * 4.0);
      highp float tmpvar_29;
      if ((tmpvar_27 >= 0.0)) {
        tmpvar_29 = tmpvar_28;
      } else {
        tmpvar_29 = -(tmpvar_28);
      };
      highp float x_30;
      x_30 = ((a_23 - _DITHERMATRIX[
        int(tmpvar_26)
      ][
        int(tmpvar_29)
      ]) - 0.01);
      if ((x_30 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_33;
    scrpos_33 = xlv_TEXCOORD3;
    mediump float a_34;
    a_34 = xlv_TEXCOORD3.z;
    if ((a_34 < 0.95)) {
      scrpos_33.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_34 = (a_34 * 17.0);
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_33.y / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float tmpvar_38;
      tmpvar_38 = (scrpos_33.x / 4.0);
      highp float tmpvar_39;
      tmpvar_39 = (fract(abs(tmpvar_38)) * 4.0);
      highp float tmpvar_40;
      if ((tmpvar_38 >= 0.0)) {
        tmpvar_40 = tmpvar_39;
      } else {
        tmpvar_40 = -(tmpvar_39);
      };
      highp float x_41;
      x_41 = ((a_34 - _DITHERMATRIX[
        int(tmpvar_37)
      ][
        int(tmpvar_40)
      ]) - 0.01);
      if ((x_41 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_76;
    scrpos_76 = xlv_TEXCOORD3;
    mediump float a_77;
    a_77 = xlv_TEXCOORD3.z;
    if ((a_77 < 0.95)) {
      scrpos_76.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_77 = (a_77 * 17.0);
      highp float tmpvar_78;
      tmpvar_78 = (scrpos_76.y / 4.0);
      highp float tmpvar_79;
      tmpvar_79 = (fract(abs(tmpvar_78)) * 4.0);
      highp float tmpvar_80;
      if ((tmpvar_78 >= 0.0)) {
        tmpvar_80 = tmpvar_79;
      } else {
        tmpvar_80 = -(tmpvar_79);
      };
      highp float tmpvar_81;
      tmpvar_81 = (scrpos_76.x / 4.0);
      highp float tmpvar_82;
      tmpvar_82 = (fract(abs(tmpvar_81)) * 4.0);
      highp float tmpvar_83;
      if ((tmpvar_81 >= 0.0)) {
        tmpvar_83 = tmpvar_82;
      } else {
        tmpvar_83 = -(tmpvar_82);
      };
      highp float x_84;
      x_84 = ((a_77 - _DITHERMATRIX[
        int(tmpvar_80)
      ][
        int(tmpvar_83)
      ]) - 0.01);
      if ((x_84 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_76;
    scrpos_76 = xlv_TEXCOORD3;
    mediump float a_77;
    a_77 = xlv_TEXCOORD3.z;
    if ((a_77 < 0.95)) {
      scrpos_76.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_77 = (a_77 * 17.0);
      highp float tmpvar_78;
      tmpvar_78 = (scrpos_76.y / 4.0);
      highp float tmpvar_79;
      tmpvar_79 = (fract(abs(tmpvar_78)) * 4.0);
      highp float tmpvar_80;
      if ((tmpvar_78 >= 0.0)) {
        tmpvar_80 = tmpvar_79;
      } else {
        tmpvar_80 = -(tmpvar_79);
      };
      highp float tmpvar_81;
      tmpvar_81 = (scrpos_76.x / 4.0);
      highp float tmpvar_82;
      tmpvar_82 = (fract(abs(tmpvar_81)) * 4.0);
      highp float tmpvar_83;
      if ((tmpvar_81 >= 0.0)) {
        tmpvar_83 = tmpvar_82;
      } else {
        tmpvar_83 = -(tmpvar_82);
      };
      highp float x_84;
      x_84 = ((a_77 - _DITHERMATRIX[
        int(tmpvar_80)
      ][
        int(tmpvar_83)
      ]) - 0.01);
      if ((x_84 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_76;
    scrpos_76 = xlv_TEXCOORD3;
    mediump float a_77;
    a_77 = xlv_TEXCOORD3.z;
    if ((a_77 < 0.95)) {
      scrpos_76.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_77 = (a_77 * 17.0);
      highp float tmpvar_78;
      tmpvar_78 = (scrpos_76.y / 4.0);
      highp float tmpvar_79;
      tmpvar_79 = (fract(abs(tmpvar_78)) * 4.0);
      highp float tmpvar_80;
      if ((tmpvar_78 >= 0.0)) {
        tmpvar_80 = tmpvar_79;
      } else {
        tmpvar_80 = -(tmpvar_79);
      };
      highp float tmpvar_81;
      tmpvar_81 = (scrpos_76.x / 4.0);
      highp float tmpvar_82;
      tmpvar_82 = (fract(abs(tmpvar_81)) * 4.0);
      highp float tmpvar_83;
      if ((tmpvar_81 >= 0.0)) {
        tmpvar_83 = tmpvar_82;
      } else {
        tmpvar_83 = -(tmpvar_82);
      };
      highp float x_84;
      x_84 = ((a_77 - _DITHERMATRIX[
        int(tmpvar_80)
      ][
        int(tmpvar_83)
      ]) - 0.01);
      if ((x_84 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_13;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_13;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_13;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_13;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_13;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_22;
  highp vec3 N_23;
  N_23 = tmpvar_13;
  highp vec3 V_24;
  V_24 = V_2;
  mediump float tmpvar_25;
  highp float tmpvar_26;
  tmpvar_26 = pow (clamp ((1.001 - 
    dot (V_24, N_23)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_25 = (_RGBias + (tmpvar_26 * _RGScale));
  mediump vec3 tmpvar_27;
  tmpvar_27 = (tmpvar_25 * _RGColor).xyz;
  mediump float tmpvar_28;
  tmpvar_28 = clamp (tmpvar_25, 0.0, 1.0);
  highp vec3 tmpvar_29;
  tmpvar_29 = mix (outColor_5.xyz, tmpvar_27, vec3((tmpvar_28 * _RGRatio)));
  tmpvar_22 = tmpvar_29;
  outColor_5.xyz = tmpvar_22;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_30;
    scrpos_30 = xlv_TEXCOORD3;
    mediump float a_31;
    a_31 = xlv_TEXCOORD3.z;
    if ((a_31 < 0.95)) {
      scrpos_30.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_31 = (a_31 * 17.0);
      highp float tmpvar_32;
      tmpvar_32 = (scrpos_30.y / 4.0);
      highp float tmpvar_33;
      tmpvar_33 = (fract(abs(tmpvar_32)) * 4.0);
      highp float tmpvar_34;
      if ((tmpvar_32 >= 0.0)) {
        tmpvar_34 = tmpvar_33;
      } else {
        tmpvar_34 = -(tmpvar_33);
      };
      highp float tmpvar_35;
      tmpvar_35 = (scrpos_30.x / 4.0);
      highp float tmpvar_36;
      tmpvar_36 = (fract(abs(tmpvar_35)) * 4.0);
      highp float tmpvar_37;
      if ((tmpvar_35 >= 0.0)) {
        tmpvar_37 = tmpvar_36;
      } else {
        tmpvar_37 = -(tmpvar_36);
      };
      highp float x_38;
      x_38 = ((a_31 - _DITHERMATRIX[
        int(tmpvar_34)
      ][
        int(tmpvar_37)
      ]) - 0.01);
      if ((x_38 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = tmpvar_24;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (outColor_5.xyz, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_41;
    scrpos_41 = xlv_TEXCOORD3;
    mediump float a_42;
    a_42 = xlv_TEXCOORD3.z;
    if ((a_42 < 0.95)) {
      scrpos_41.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_42 = (a_42 * 17.0);
      highp float tmpvar_43;
      tmpvar_43 = (scrpos_41.y / 4.0);
      highp float tmpvar_44;
      tmpvar_44 = (fract(abs(tmpvar_43)) * 4.0);
      highp float tmpvar_45;
      if ((tmpvar_43 >= 0.0)) {
        tmpvar_45 = tmpvar_44;
      } else {
        tmpvar_45 = -(tmpvar_44);
      };
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_41.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float x_49;
      x_49 = ((a_42 - _DITHERMATRIX[
        int(tmpvar_45)
      ][
        int(tmpvar_48)
      ]) - 0.01);
      if ((x_49 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = tmpvar_24;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (outColor_5.xyz, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_41;
    scrpos_41 = xlv_TEXCOORD3;
    mediump float a_42;
    a_42 = xlv_TEXCOORD3.z;
    if ((a_42 < 0.95)) {
      scrpos_41.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_42 = (a_42 * 17.0);
      highp float tmpvar_43;
      tmpvar_43 = (scrpos_41.y / 4.0);
      highp float tmpvar_44;
      tmpvar_44 = (fract(abs(tmpvar_43)) * 4.0);
      highp float tmpvar_45;
      if ((tmpvar_43 >= 0.0)) {
        tmpvar_45 = tmpvar_44;
      } else {
        tmpvar_45 = -(tmpvar_44);
      };
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_41.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float x_49;
      x_49 = ((a_42 - _DITHERMATRIX[
        int(tmpvar_45)
      ][
        int(tmpvar_48)
      ]) - 0.01);
      if ((x_49 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_33;
  highp vec3 N_34;
  N_34 = tmpvar_24;
  highp vec3 V_35;
  V_35 = V_2;
  mediump float tmpvar_36;
  highp float tmpvar_37;
  tmpvar_37 = pow (clamp ((1.001 - 
    dot (V_35, N_34)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_36 = (_RGBias + (tmpvar_37 * _RGScale));
  mediump vec3 tmpvar_38;
  tmpvar_38 = (tmpvar_36 * _RGColor).xyz;
  mediump float tmpvar_39;
  tmpvar_39 = clamp (tmpvar_36, 0.0, 1.0);
  highp vec3 tmpvar_40;
  tmpvar_40 = mix (outColor_5.xyz, tmpvar_38, vec3((tmpvar_39 * _RGRatio)));
  tmpvar_33 = tmpvar_40;
  outColor_5.xyz = tmpvar_33;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_41;
    scrpos_41 = xlv_TEXCOORD3;
    mediump float a_42;
    a_42 = xlv_TEXCOORD3.z;
    if ((a_42 < 0.95)) {
      scrpos_41.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_42 = (a_42 * 17.0);
      highp float tmpvar_43;
      tmpvar_43 = (scrpos_41.y / 4.0);
      highp float tmpvar_44;
      tmpvar_44 = (fract(abs(tmpvar_43)) * 4.0);
      highp float tmpvar_45;
      if ((tmpvar_43 >= 0.0)) {
        tmpvar_45 = tmpvar_44;
      } else {
        tmpvar_45 = -(tmpvar_44);
      };
      highp float tmpvar_46;
      tmpvar_46 = (scrpos_41.x / 4.0);
      highp float tmpvar_47;
      tmpvar_47 = (fract(abs(tmpvar_46)) * 4.0);
      highp float tmpvar_48;
      if ((tmpvar_46 >= 0.0)) {
        tmpvar_48 = tmpvar_47;
      } else {
        tmpvar_48 = -(tmpvar_47);
      };
      highp float x_49;
      x_49 = ((a_42 - _DITHERMATRIX[
        int(tmpvar_45)
      ][
        int(tmpvar_48)
      ]) - 0.01);
      if ((x_49 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_76;
  highp vec3 N_77;
  N_77 = tmpvar_67;
  highp vec3 V_78;
  V_78 = V_2;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = pow (clamp ((1.001 - 
    dot (V_78, N_77)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_79 = (_RGBias + (tmpvar_80 * _RGScale));
  mediump vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_79 * _RGColor).xyz;
  mediump float tmpvar_82;
  tmpvar_82 = clamp (tmpvar_79, 0.0, 1.0);
  highp vec3 tmpvar_83;
  tmpvar_83 = mix (outColor_5.xyz, tmpvar_81, vec3((tmpvar_82 * _RGRatio)));
  tmpvar_76 = tmpvar_83;
  outColor_5.xyz = tmpvar_76;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_84;
    scrpos_84 = xlv_TEXCOORD3;
    mediump float a_85;
    a_85 = xlv_TEXCOORD3.z;
    if ((a_85 < 0.95)) {
      scrpos_84.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_85 = (a_85 * 17.0);
      highp float tmpvar_86;
      tmpvar_86 = (scrpos_84.y / 4.0);
      highp float tmpvar_87;
      tmpvar_87 = (fract(abs(tmpvar_86)) * 4.0);
      highp float tmpvar_88;
      if ((tmpvar_86 >= 0.0)) {
        tmpvar_88 = tmpvar_87;
      } else {
        tmpvar_88 = -(tmpvar_87);
      };
      highp float tmpvar_89;
      tmpvar_89 = (scrpos_84.x / 4.0);
      highp float tmpvar_90;
      tmpvar_90 = (fract(abs(tmpvar_89)) * 4.0);
      highp float tmpvar_91;
      if ((tmpvar_89 >= 0.0)) {
        tmpvar_91 = tmpvar_90;
      } else {
        tmpvar_91 = -(tmpvar_90);
      };
      highp float x_92;
      x_92 = ((a_85 - _DITHERMATRIX[
        int(tmpvar_88)
      ][
        int(tmpvar_91)
      ]) - 0.01);
      if ((x_92 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_76;
  highp vec3 N_77;
  N_77 = tmpvar_67;
  highp vec3 V_78;
  V_78 = V_2;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = pow (clamp ((1.001 - 
    dot (V_78, N_77)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_79 = (_RGBias + (tmpvar_80 * _RGScale));
  mediump vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_79 * _RGColor).xyz;
  mediump float tmpvar_82;
  tmpvar_82 = clamp (tmpvar_79, 0.0, 1.0);
  highp vec3 tmpvar_83;
  tmpvar_83 = mix (outColor_5.xyz, tmpvar_81, vec3((tmpvar_82 * _RGRatio)));
  tmpvar_76 = tmpvar_83;
  outColor_5.xyz = tmpvar_76;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_84;
    scrpos_84 = xlv_TEXCOORD3;
    mediump float a_85;
    a_85 = xlv_TEXCOORD3.z;
    if ((a_85 < 0.95)) {
      scrpos_84.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_85 = (a_85 * 17.0);
      highp float tmpvar_86;
      tmpvar_86 = (scrpos_84.y / 4.0);
      highp float tmpvar_87;
      tmpvar_87 = (fract(abs(tmpvar_86)) * 4.0);
      highp float tmpvar_88;
      if ((tmpvar_86 >= 0.0)) {
        tmpvar_88 = tmpvar_87;
      } else {
        tmpvar_88 = -(tmpvar_87);
      };
      highp float tmpvar_89;
      tmpvar_89 = (scrpos_84.x / 4.0);
      highp float tmpvar_90;
      tmpvar_90 = (fract(abs(tmpvar_89)) * 4.0);
      highp float tmpvar_91;
      if ((tmpvar_89 >= 0.0)) {
        tmpvar_91 = tmpvar_90;
      } else {
        tmpvar_91 = -(tmpvar_90);
      };
      highp float x_92;
      x_92 = ((a_85 - _DITHERMATRIX[
        int(tmpvar_88)
      ][
        int(tmpvar_91)
      ]) - 0.01);
      if ((x_92 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_15.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 tmpvar_76;
  highp vec3 N_77;
  N_77 = tmpvar_67;
  highp vec3 V_78;
  V_78 = V_2;
  mediump float tmpvar_79;
  highp float tmpvar_80;
  tmpvar_80 = pow (clamp ((1.001 - 
    dot (V_78, N_77)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_79 = (_RGBias + (tmpvar_80 * _RGScale));
  mediump vec3 tmpvar_81;
  tmpvar_81 = (tmpvar_79 * _RGColor).xyz;
  mediump float tmpvar_82;
  tmpvar_82 = clamp (tmpvar_79, 0.0, 1.0);
  highp vec3 tmpvar_83;
  tmpvar_83 = mix (outColor_5.xyz, tmpvar_81, vec3((tmpvar_82 * _RGRatio)));
  tmpvar_76 = tmpvar_83;
  outColor_5.xyz = tmpvar_76;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_84;
    scrpos_84 = xlv_TEXCOORD3;
    mediump float a_85;
    a_85 = xlv_TEXCOORD3.z;
    if ((a_85 < 0.95)) {
      scrpos_84.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_85 = (a_85 * 17.0);
      highp float tmpvar_86;
      tmpvar_86 = (scrpos_84.y / 4.0);
      highp float tmpvar_87;
      tmpvar_87 = (fract(abs(tmpvar_86)) * 4.0);
      highp float tmpvar_88;
      if ((tmpvar_86 >= 0.0)) {
        tmpvar_88 = tmpvar_87;
      } else {
        tmpvar_88 = -(tmpvar_87);
      };
      highp float tmpvar_89;
      tmpvar_89 = (scrpos_84.x / 4.0);
      highp float tmpvar_90;
      tmpvar_90 = (fract(abs(tmpvar_89)) * 4.0);
      highp float tmpvar_91;
      if ((tmpvar_89 >= 0.0)) {
        tmpvar_91 = tmpvar_90;
      } else {
        tmpvar_91 = -(tmpvar_90);
      };
      highp float x_92;
      x_92 = ((a_85 - _DITHERMATRIX[
        int(tmpvar_88)
      ][
        int(tmpvar_91)
      ]) - 0.01);
      if ((x_92 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (_Opaqueness, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5 = spColor_26;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_37;
    scrpos_37 = xlv_TEXCOORD3;
    mediump float a_38;
    a_38 = xlv_TEXCOORD3.z;
    if ((a_38 < 0.95)) {
      scrpos_37.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_38 = (a_38 * 17.0);
      highp float tmpvar_39;
      tmpvar_39 = (scrpos_37.y / 4.0);
      highp float tmpvar_40;
      tmpvar_40 = (fract(abs(tmpvar_39)) * 4.0);
      highp float tmpvar_41;
      if ((tmpvar_39 >= 0.0)) {
        tmpvar_41 = tmpvar_40;
      } else {
        tmpvar_41 = -(tmpvar_40);
      };
      highp float tmpvar_42;
      tmpvar_42 = (scrpos_37.x / 4.0);
      highp float tmpvar_43;
      tmpvar_43 = (fract(abs(tmpvar_42)) * 4.0);
      highp float tmpvar_44;
      if ((tmpvar_42 >= 0.0)) {
        tmpvar_44 = tmpvar_43;
      } else {
        tmpvar_44 = -(tmpvar_43);
      };
      highp float x_45;
      x_45 = ((a_38 - _DITHERMATRIX[
        int(tmpvar_41)
      ][
        int(tmpvar_44)
      ]) - 0.01);
      if ((x_45 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_33;
  mediump vec3 R_34;
  mediump float intensity_35;
  mediump vec4 noiseTex_36;
  mediump vec4 spColor_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_37 = tmpvar_38;
  spColor_37.w = (spColor_37.w * _SPOpaqueness);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_36 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (((1.99 * tmpvar_39.x) * _SPNoiseScaler) - 1.0);
  intensity_35 = tmpvar_40;
  highp vec3 tmpvar_41;
  highp vec3 I_42;
  I_42 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_36 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_41 = (I_42 - (2.0 * (
    dot (tmpvar_24, I_42)
   * tmpvar_24)));
  R_34 = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = textureCube (_SPCubeMap, R_34).xyz;
  reflection_33 = tmpvar_43;
  highp vec3 tmpvar_44;
  mediump vec3 x_45;
  x_45 = (spColor_37.xyz * _SPOldColor.xyz);
  tmpvar_44 = mix (x_45, ((reflection_33 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_37.xyz = tmpvar_44;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_35 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_35 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_46;
      tmpvar_46 = mix (spColor_37.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_35) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_37.xyz = tmpvar_46;
    };
  };
  highp vec4 tmpvar_47;
  tmpvar_47 = mix (outColor_5, spColor_37, vec4(xlat_mutable_SPIntensity));
  spColor_37 = tmpvar_47;
  outColor_5 = spColor_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_48;
    scrpos_48 = xlv_TEXCOORD3;
    mediump float a_49;
    a_49 = xlv_TEXCOORD3.z;
    if ((a_49 < 0.95)) {
      scrpos_48.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_49 = (a_49 * 17.0);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_48.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float tmpvar_53;
      tmpvar_53 = (scrpos_48.x / 4.0);
      highp float tmpvar_54;
      tmpvar_54 = (fract(abs(tmpvar_53)) * 4.0);
      highp float tmpvar_55;
      if ((tmpvar_53 >= 0.0)) {
        tmpvar_55 = tmpvar_54;
      } else {
        tmpvar_55 = -(tmpvar_54);
      };
      highp float x_56;
      x_56 = ((a_49 - _DITHERMATRIX[
        int(tmpvar_52)
      ][
        int(tmpvar_55)
      ]) - 0.01);
      if ((x_56 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_37.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_33;
  mediump vec3 R_34;
  mediump float intensity_35;
  mediump vec4 noiseTex_36;
  mediump vec4 spColor_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_37 = tmpvar_38;
  spColor_37.w = (spColor_37.w * _SPOpaqueness);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_36 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (((1.99 * tmpvar_39.x) * _SPNoiseScaler) - 1.0);
  intensity_35 = tmpvar_40;
  highp vec3 tmpvar_41;
  highp vec3 I_42;
  I_42 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_36 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_41 = (I_42 - (2.0 * (
    dot (tmpvar_24, I_42)
   * tmpvar_24)));
  R_34 = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = textureCube (_SPCubeMap, R_34).xyz;
  reflection_33 = tmpvar_43;
  highp vec3 tmpvar_44;
  mediump vec3 x_45;
  x_45 = (spColor_37.xyz * _SPOldColor.xyz);
  tmpvar_44 = mix (x_45, ((reflection_33 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_37.xyz = tmpvar_44;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_35 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_35 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_46;
      tmpvar_46 = mix (spColor_37.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_35) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_37.xyz = tmpvar_46;
    };
  };
  highp vec4 tmpvar_47;
  tmpvar_47 = mix (outColor_5, spColor_37, vec4(xlat_mutable_SPIntensity));
  spColor_37 = tmpvar_47;
  outColor_5 = spColor_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_48;
    scrpos_48 = xlv_TEXCOORD3;
    mediump float a_49;
    a_49 = xlv_TEXCOORD3.z;
    if ((a_49 < 0.95)) {
      scrpos_48.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_49 = (a_49 * 17.0);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_48.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float tmpvar_53;
      tmpvar_53 = (scrpos_48.x / 4.0);
      highp float tmpvar_54;
      tmpvar_54 = (fract(abs(tmpvar_53)) * 4.0);
      highp float tmpvar_55;
      if ((tmpvar_53 >= 0.0)) {
        tmpvar_55 = tmpvar_54;
      } else {
        tmpvar_55 = -(tmpvar_54);
      };
      highp float x_56;
      x_56 = ((a_49 - _DITHERMATRIX[
        int(tmpvar_52)
      ][
        int(tmpvar_55)
      ]) - 0.01);
      if ((x_56 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_37.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_33;
  mediump vec3 R_34;
  mediump float intensity_35;
  mediump vec4 noiseTex_36;
  mediump vec4 spColor_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_37 = tmpvar_38;
  spColor_37.w = (spColor_37.w * _SPOpaqueness);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_36 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (((1.99 * tmpvar_39.x) * _SPNoiseScaler) - 1.0);
  intensity_35 = tmpvar_40;
  highp vec3 tmpvar_41;
  highp vec3 I_42;
  I_42 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_36 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_41 = (I_42 - (2.0 * (
    dot (tmpvar_24, I_42)
   * tmpvar_24)));
  R_34 = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = textureCube (_SPCubeMap, R_34).xyz;
  reflection_33 = tmpvar_43;
  highp vec3 tmpvar_44;
  mediump vec3 x_45;
  x_45 = (spColor_37.xyz * _SPOldColor.xyz);
  tmpvar_44 = mix (x_45, ((reflection_33 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_37.xyz = tmpvar_44;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_35 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_35 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_46;
      tmpvar_46 = mix (spColor_37.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_35) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_37.xyz = tmpvar_46;
    };
  };
  highp vec4 tmpvar_47;
  tmpvar_47 = mix (outColor_5, spColor_37, vec4(xlat_mutable_SPIntensity));
  spColor_37 = tmpvar_47;
  outColor_5 = spColor_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_48;
    scrpos_48 = xlv_TEXCOORD3;
    mediump float a_49;
    a_49 = xlv_TEXCOORD3.z;
    if ((a_49 < 0.95)) {
      scrpos_48.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_49 = (a_49 * 17.0);
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_48.y / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float tmpvar_53;
      tmpvar_53 = (scrpos_48.x / 4.0);
      highp float tmpvar_54;
      tmpvar_54 = (fract(abs(tmpvar_53)) * 4.0);
      highp float tmpvar_55;
      if ((tmpvar_53 >= 0.0)) {
        tmpvar_55 = tmpvar_54;
      } else {
        tmpvar_55 = -(tmpvar_54);
      };
      highp float x_56;
      x_56 = ((a_49 - _DITHERMATRIX[
        int(tmpvar_52)
      ][
        int(tmpvar_55)
      ]) - 0.01);
      if ((x_56 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_37.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_76;
  mediump vec3 R_77;
  mediump float intensity_78;
  mediump vec4 noiseTex_79;
  mediump vec4 spColor_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_80 = tmpvar_81;
  spColor_80.w = (spColor_80.w * _SPOpaqueness);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_79 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((1.99 * tmpvar_82.x) * _SPNoiseScaler) - 1.0);
  intensity_78 = tmpvar_83;
  highp vec3 tmpvar_84;
  highp vec3 I_85;
  I_85 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_79 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_84 = (I_85 - (2.0 * (
    dot (tmpvar_67, I_85)
   * tmpvar_67)));
  R_77 = tmpvar_84;
  lowp vec3 tmpvar_86;
  tmpvar_86 = textureCube (_SPCubeMap, R_77).xyz;
  reflection_76 = tmpvar_86;
  highp vec3 tmpvar_87;
  mediump vec3 x_88;
  x_88 = (spColor_80.xyz * _SPOldColor.xyz);
  tmpvar_87 = mix (x_88, ((reflection_76 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_80.xyz = tmpvar_87;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_78 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_78 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_89;
      tmpvar_89 = mix (spColor_80.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_78) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_80.xyz = tmpvar_89;
    };
  };
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (outColor_5, spColor_80, vec4(xlat_mutable_SPIntensity));
  spColor_80 = tmpvar_90;
  outColor_5 = spColor_80;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_91;
    scrpos_91 = xlv_TEXCOORD3;
    mediump float a_92;
    a_92 = xlv_TEXCOORD3.z;
    if ((a_92 < 0.95)) {
      scrpos_91.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_92 = (a_92 * 17.0);
      highp float tmpvar_93;
      tmpvar_93 = (scrpos_91.y / 4.0);
      highp float tmpvar_94;
      tmpvar_94 = (fract(abs(tmpvar_93)) * 4.0);
      highp float tmpvar_95;
      if ((tmpvar_93 >= 0.0)) {
        tmpvar_95 = tmpvar_94;
      } else {
        tmpvar_95 = -(tmpvar_94);
      };
      highp float tmpvar_96;
      tmpvar_96 = (scrpos_91.x / 4.0);
      highp float tmpvar_97;
      tmpvar_97 = (fract(abs(tmpvar_96)) * 4.0);
      highp float tmpvar_98;
      if ((tmpvar_96 >= 0.0)) {
        tmpvar_98 = tmpvar_97;
      } else {
        tmpvar_98 = -(tmpvar_97);
      };
      highp float x_99;
      x_99 = ((a_92 - _DITHERMATRIX[
        int(tmpvar_95)
      ][
        int(tmpvar_98)
      ]) - 0.01);
      if ((x_99 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_80.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_76;
  mediump vec3 R_77;
  mediump float intensity_78;
  mediump vec4 noiseTex_79;
  mediump vec4 spColor_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_80 = tmpvar_81;
  spColor_80.w = (spColor_80.w * _SPOpaqueness);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_79 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((1.99 * tmpvar_82.x) * _SPNoiseScaler) - 1.0);
  intensity_78 = tmpvar_83;
  highp vec3 tmpvar_84;
  highp vec3 I_85;
  I_85 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_79 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_84 = (I_85 - (2.0 * (
    dot (tmpvar_67, I_85)
   * tmpvar_67)));
  R_77 = tmpvar_84;
  lowp vec3 tmpvar_86;
  tmpvar_86 = textureCube (_SPCubeMap, R_77).xyz;
  reflection_76 = tmpvar_86;
  highp vec3 tmpvar_87;
  mediump vec3 x_88;
  x_88 = (spColor_80.xyz * _SPOldColor.xyz);
  tmpvar_87 = mix (x_88, ((reflection_76 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_80.xyz = tmpvar_87;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_78 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_78 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_89;
      tmpvar_89 = mix (spColor_80.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_78) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_80.xyz = tmpvar_89;
    };
  };
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (outColor_5, spColor_80, vec4(xlat_mutable_SPIntensity));
  spColor_80 = tmpvar_90;
  outColor_5 = spColor_80;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_91;
    scrpos_91 = xlv_TEXCOORD3;
    mediump float a_92;
    a_92 = xlv_TEXCOORD3.z;
    if ((a_92 < 0.95)) {
      scrpos_91.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_92 = (a_92 * 17.0);
      highp float tmpvar_93;
      tmpvar_93 = (scrpos_91.y / 4.0);
      highp float tmpvar_94;
      tmpvar_94 = (fract(abs(tmpvar_93)) * 4.0);
      highp float tmpvar_95;
      if ((tmpvar_93 >= 0.0)) {
        tmpvar_95 = tmpvar_94;
      } else {
        tmpvar_95 = -(tmpvar_94);
      };
      highp float tmpvar_96;
      tmpvar_96 = (scrpos_91.x / 4.0);
      highp float tmpvar_97;
      tmpvar_97 = (fract(abs(tmpvar_96)) * 4.0);
      highp float tmpvar_98;
      if ((tmpvar_96 >= 0.0)) {
        tmpvar_98 = tmpvar_97;
      } else {
        tmpvar_98 = -(tmpvar_97);
      };
      highp float x_99;
      x_99 = ((a_92 - _DITHERMATRIX[
        int(tmpvar_95)
      ][
        int(tmpvar_98)
      ]) - 0.01);
      if ((x_99 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_80.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_76;
  mediump vec3 R_77;
  mediump float intensity_78;
  mediump vec4 noiseTex_79;
  mediump vec4 spColor_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_80 = tmpvar_81;
  spColor_80.w = (spColor_80.w * _SPOpaqueness);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_79 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((1.99 * tmpvar_82.x) * _SPNoiseScaler) - 1.0);
  intensity_78 = tmpvar_83;
  highp vec3 tmpvar_84;
  highp vec3 I_85;
  I_85 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_79 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_84 = (I_85 - (2.0 * (
    dot (tmpvar_67, I_85)
   * tmpvar_67)));
  R_77 = tmpvar_84;
  lowp vec3 tmpvar_86;
  tmpvar_86 = textureCube (_SPCubeMap, R_77).xyz;
  reflection_76 = tmpvar_86;
  highp vec3 tmpvar_87;
  mediump vec3 x_88;
  x_88 = (spColor_80.xyz * _SPOldColor.xyz);
  tmpvar_87 = mix (x_88, ((reflection_76 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_80.xyz = tmpvar_87;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_78 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_78 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_89;
      tmpvar_89 = mix (spColor_80.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_78) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_80.xyz = tmpvar_89;
    };
  };
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (outColor_5, spColor_80, vec4(xlat_mutable_SPIntensity));
  spColor_80 = tmpvar_90;
  outColor_5 = spColor_80;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_91;
    scrpos_91 = xlv_TEXCOORD3;
    mediump float a_92;
    a_92 = xlv_TEXCOORD3.z;
    if ((a_92 < 0.95)) {
      scrpos_91.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_92 = (a_92 * 17.0);
      highp float tmpvar_93;
      tmpvar_93 = (scrpos_91.y / 4.0);
      highp float tmpvar_94;
      tmpvar_94 = (fract(abs(tmpvar_93)) * 4.0);
      highp float tmpvar_95;
      if ((tmpvar_93 >= 0.0)) {
        tmpvar_95 = tmpvar_94;
      } else {
        tmpvar_95 = -(tmpvar_94);
      };
      highp float tmpvar_96;
      tmpvar_96 = (scrpos_91.x / 4.0);
      highp float tmpvar_97;
      tmpvar_97 = (fract(abs(tmpvar_96)) * 4.0);
      highp float tmpvar_98;
      if ((tmpvar_96 >= 0.0)) {
        tmpvar_98 = tmpvar_97;
      } else {
        tmpvar_98 = -(tmpvar_97);
      };
      highp float x_99;
      x_99 = ((a_92 - _DITHERMATRIX[
        int(tmpvar_95)
      ][
        int(tmpvar_98)
      ]) - 0.01);
      if ((x_99 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_80.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_13;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_13;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_13;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_13;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_13;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _MainTex;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0);
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_8;
  baseTexColor_8 = baseTexColor_3.xyz;
  mediump float threshold_9;
  mediump float D_10;
  mediump vec3 diffColor_11;
  diffColor_11 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_12;
  tmpvar_12 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_10 = tmpvar_12;
  threshold_9 = 0.0;
  if ((tmpvar_12 < 0.09)) {
    threshold_9 = ((xlv_COLOR1 + tmpvar_12) * 0.5);
    if ((threshold_9 < _SecondShadow)) {
      diffColor_11 = (baseTexColor_3.xyz * _SecondShadowMultColor);
    } else {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_12 >= 0.5)) {
      D_10 = ((tmpvar_12 * 1.2) - 0.1);
    } else {
      D_10 = ((D_10 * 1.25) - 0.125);
    };
    threshold_9 = ((xlv_COLOR1 + D_10) * 0.5);
    if ((threshold_9 < _LightArea)) {
      diffColor_11 = (baseTexColor_3.xyz * _FirstShadowMultColor);
    } else {
      diffColor_11 = baseTexColor_8;
    };
  };
  outColor_5.xyz = diffColor_11;
  mediump vec3 tmpvar_13;
  tmpvar_13 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 H_17;
  H_17 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_18;
    highp vec3 tmpvar_19;
    tmpvar_19 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_18 = tmpvar_19;
    H_17 = normalize((_CustomLightDir.xyz + V_18));
  };
  mediump float tmpvar_20;
  tmpvar_20 = pow (max (dot (tmpvar_13, H_17), 0.0), _Shininess);
  if ((tmpvar_20 >= (1.0 - tex_Light_Color_4.z))) {
    color_16 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_16 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_11 + color_16);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_21;
    tmpvar_21 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (baseTexColor_3.w * tmpvar_21.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((baseTexColor_3.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_22;
  mediump vec3 R_23;
  mediump float intensity_24;
  mediump vec4 noiseTex_25;
  mediump vec4 spColor_26;
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_26 = tmpvar_27;
  spColor_26.w = (spColor_26.w * _SPOpaqueness);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_25 = tmpvar_28;
  highp float tmpvar_29;
  tmpvar_29 = (((1.99 * tmpvar_28.x) * _SPNoiseScaler) - 1.0);
  intensity_24 = tmpvar_29;
  highp vec3 tmpvar_30;
  highp vec3 I_31;
  I_31 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_25 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_30 = (I_31 - (2.0 * (
    dot (tmpvar_13, I_31)
   * tmpvar_13)));
  R_23 = tmpvar_30;
  lowp vec3 tmpvar_32;
  tmpvar_32 = textureCube (_SPCubeMap, R_23).xyz;
  reflection_22 = tmpvar_32;
  highp vec3 tmpvar_33;
  mediump vec3 x_34;
  x_34 = (spColor_26.xyz * _SPOldColor.xyz);
  tmpvar_33 = mix (x_34, ((reflection_22 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_26.xyz = tmpvar_33;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_24 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_24 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_35;
      tmpvar_35 = mix (spColor_26.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_24) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_26.xyz = tmpvar_35;
    };
  };
  highp vec4 tmpvar_36;
  tmpvar_36 = mix (outColor_5, spColor_26, vec4(xlat_mutable_SPIntensity));
  spColor_26 = tmpvar_36;
  outColor_5.w = spColor_26.w;
  mediump vec3 tmpvar_37;
  highp vec3 N_38;
  N_38 = tmpvar_13;
  highp vec3 V_39;
  V_39 = V_2;
  mediump float tmpvar_40;
  highp float tmpvar_41;
  tmpvar_41 = pow (clamp ((1.001 - 
    dot (V_39, N_38)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_40 = (_RGBias + (tmpvar_41 * _RGScale));
  mediump vec3 tmpvar_42;
  tmpvar_42 = (tmpvar_40 * _RGColor).xyz;
  mediump float tmpvar_43;
  tmpvar_43 = clamp (tmpvar_40, 0.0, 1.0);
  highp vec3 tmpvar_44;
  tmpvar_44 = mix (spColor_26.xyz, tmpvar_42, vec3((tmpvar_43 * _RGRatio)));
  tmpvar_37 = tmpvar_44;
  outColor_5.xyz = tmpvar_37;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_45;
    scrpos_45 = xlv_TEXCOORD3;
    mediump float a_46;
    a_46 = xlv_TEXCOORD3.z;
    if ((a_46 < 0.95)) {
      scrpos_45.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_46 = (a_46 * 17.0);
      highp float tmpvar_47;
      tmpvar_47 = (scrpos_45.y / 4.0);
      highp float tmpvar_48;
      tmpvar_48 = (fract(abs(tmpvar_47)) * 4.0);
      highp float tmpvar_49;
      if ((tmpvar_47 >= 0.0)) {
        tmpvar_49 = tmpvar_48;
      } else {
        tmpvar_49 = -(tmpvar_48);
      };
      highp float tmpvar_50;
      tmpvar_50 = (scrpos_45.x / 4.0);
      highp float tmpvar_51;
      tmpvar_51 = (fract(abs(tmpvar_50)) * 4.0);
      highp float tmpvar_52;
      if ((tmpvar_50 >= 0.0)) {
        tmpvar_52 = tmpvar_51;
      } else {
        tmpvar_52 = -(tmpvar_51);
      };
      highp float x_53;
      x_53 = ((a_46 - _DITHERMATRIX[
        int(tmpvar_49)
      ][
        int(tmpvar_52)
      ]) - 0.01);
      if ((x_53 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_26.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_33;
  mediump vec3 R_34;
  mediump float intensity_35;
  mediump vec4 noiseTex_36;
  mediump vec4 spColor_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_37 = tmpvar_38;
  spColor_37.w = (spColor_37.w * _SPOpaqueness);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_36 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (((1.99 * tmpvar_39.x) * _SPNoiseScaler) - 1.0);
  intensity_35 = tmpvar_40;
  highp vec3 tmpvar_41;
  highp vec3 I_42;
  I_42 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_36 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_41 = (I_42 - (2.0 * (
    dot (tmpvar_24, I_42)
   * tmpvar_24)));
  R_34 = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = textureCube (_SPCubeMap, R_34).xyz;
  reflection_33 = tmpvar_43;
  highp vec3 tmpvar_44;
  mediump vec3 x_45;
  x_45 = (spColor_37.xyz * _SPOldColor.xyz);
  tmpvar_44 = mix (x_45, ((reflection_33 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_37.xyz = tmpvar_44;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_35 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_35 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_46;
      tmpvar_46 = mix (spColor_37.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_35) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_37.xyz = tmpvar_46;
    };
  };
  highp vec4 tmpvar_47;
  tmpvar_47 = mix (outColor_5, spColor_37, vec4(xlat_mutable_SPIntensity));
  spColor_37 = tmpvar_47;
  outColor_5.w = spColor_37.w;
  mediump vec3 tmpvar_48;
  highp vec3 N_49;
  N_49 = tmpvar_24;
  highp vec3 V_50;
  V_50 = V_2;
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = pow (clamp ((1.001 - 
    dot (V_50, N_49)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_51 = (_RGBias + (tmpvar_52 * _RGScale));
  mediump vec3 tmpvar_53;
  tmpvar_53 = (tmpvar_51 * _RGColor).xyz;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (tmpvar_51, 0.0, 1.0);
  highp vec3 tmpvar_55;
  tmpvar_55 = mix (spColor_37.xyz, tmpvar_53, vec3((tmpvar_54 * _RGRatio)));
  tmpvar_48 = tmpvar_55;
  outColor_5.xyz = tmpvar_48;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_56;
    scrpos_56 = xlv_TEXCOORD3;
    mediump float a_57;
    a_57 = xlv_TEXCOORD3.z;
    if ((a_57 < 0.95)) {
      scrpos_56.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_57 = (a_57 * 17.0);
      highp float tmpvar_58;
      tmpvar_58 = (scrpos_56.y / 4.0);
      highp float tmpvar_59;
      tmpvar_59 = (fract(abs(tmpvar_58)) * 4.0);
      highp float tmpvar_60;
      if ((tmpvar_58 >= 0.0)) {
        tmpvar_60 = tmpvar_59;
      } else {
        tmpvar_60 = -(tmpvar_59);
      };
      highp float tmpvar_61;
      tmpvar_61 = (scrpos_56.x / 4.0);
      highp float tmpvar_62;
      tmpvar_62 = (fract(abs(tmpvar_61)) * 4.0);
      highp float tmpvar_63;
      if ((tmpvar_61 >= 0.0)) {
        tmpvar_63 = tmpvar_62;
      } else {
        tmpvar_63 = -(tmpvar_62);
      };
      highp float x_64;
      x_64 = ((a_57 - _DITHERMATRIX[
        int(tmpvar_60)
      ][
        int(tmpvar_63)
      ]) - 0.01);
      if ((x_64 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_37.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_33;
  mediump vec3 R_34;
  mediump float intensity_35;
  mediump vec4 noiseTex_36;
  mediump vec4 spColor_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_37 = tmpvar_38;
  spColor_37.w = (spColor_37.w * _SPOpaqueness);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_36 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (((1.99 * tmpvar_39.x) * _SPNoiseScaler) - 1.0);
  intensity_35 = tmpvar_40;
  highp vec3 tmpvar_41;
  highp vec3 I_42;
  I_42 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_36 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_41 = (I_42 - (2.0 * (
    dot (tmpvar_24, I_42)
   * tmpvar_24)));
  R_34 = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = textureCube (_SPCubeMap, R_34).xyz;
  reflection_33 = tmpvar_43;
  highp vec3 tmpvar_44;
  mediump vec3 x_45;
  x_45 = (spColor_37.xyz * _SPOldColor.xyz);
  tmpvar_44 = mix (x_45, ((reflection_33 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_37.xyz = tmpvar_44;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_35 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_35 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_46;
      tmpvar_46 = mix (spColor_37.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_35) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_37.xyz = tmpvar_46;
    };
  };
  highp vec4 tmpvar_47;
  tmpvar_47 = mix (outColor_5, spColor_37, vec4(xlat_mutable_SPIntensity));
  spColor_37 = tmpvar_47;
  outColor_5.w = spColor_37.w;
  mediump vec3 tmpvar_48;
  highp vec3 N_49;
  N_49 = tmpvar_24;
  highp vec3 V_50;
  V_50 = V_2;
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = pow (clamp ((1.001 - 
    dot (V_50, N_49)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_51 = (_RGBias + (tmpvar_52 * _RGScale));
  mediump vec3 tmpvar_53;
  tmpvar_53 = (tmpvar_51 * _RGColor).xyz;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (tmpvar_51, 0.0, 1.0);
  highp vec3 tmpvar_55;
  tmpvar_55 = mix (spColor_37.xyz, tmpvar_53, vec3((tmpvar_54 * _RGRatio)));
  tmpvar_48 = tmpvar_55;
  outColor_5.xyz = tmpvar_48;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_56;
    scrpos_56 = xlv_TEXCOORD3;
    mediump float a_57;
    a_57 = xlv_TEXCOORD3.z;
    if ((a_57 < 0.95)) {
      scrpos_56.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_57 = (a_57 * 17.0);
      highp float tmpvar_58;
      tmpvar_58 = (scrpos_56.y / 4.0);
      highp float tmpvar_59;
      tmpvar_59 = (fract(abs(tmpvar_58)) * 4.0);
      highp float tmpvar_60;
      if ((tmpvar_58 >= 0.0)) {
        tmpvar_60 = tmpvar_59;
      } else {
        tmpvar_60 = -(tmpvar_59);
      };
      highp float tmpvar_61;
      tmpvar_61 = (scrpos_56.x / 4.0);
      highp float tmpvar_62;
      tmpvar_62 = (fract(abs(tmpvar_61)) * 4.0);
      highp float tmpvar_63;
      if ((tmpvar_61 >= 0.0)) {
        tmpvar_63 = tmpvar_62;
      } else {
        tmpvar_63 = -(tmpvar_62);
      };
      highp float x_64;
      x_64 = ((a_57 - _DITHERMATRIX[
        int(tmpvar_60)
      ][
        int(tmpvar_63)
      ]) - 0.01);
      if ((x_64 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_37.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  highp vec2 uv_7;
  uv_7 = xlv_TEXCOORD0;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_factorTex, uv_7);
  mediump vec4 tmpvar_9;
  tmpvar_9 = tmpvar_8;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_indexTex, uv_7);
  mediump float tmpvar_11;
  tmpvar_11 = tmpvar_10.w;
  mediump vec2 tmpvar_12;
  tmpvar_12.y = 0.0;
  tmpvar_12.x = tmpvar_11;
  lowp vec3 tmpvar_13;
  tmpvar_13 = texture2D (_tableTex, tmpvar_12).xyz;
  mediump vec3 tmpvar_14;
  tmpvar_14 = tmpvar_13;
  mediump vec2 tmpvar_15;
  tmpvar_15.y = 1.0;
  tmpvar_15.x = tmpvar_11;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_tableTex, tmpvar_15).xyz;
  mediump vec3 tmpvar_17;
  tmpvar_17 = tmpvar_16;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = mix (tmpvar_14, tmpvar_17, tmpvar_9.xxx);
  tmpvar_18.w = tmpvar_9.y;
  baseTexColor_3 = tmpvar_18;
  mediump vec3 baseTexColor_19;
  baseTexColor_19 = tmpvar_18.xyz;
  mediump float threshold_20;
  mediump float D_21;
  mediump vec3 diffColor_22;
  diffColor_22 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_23;
  tmpvar_23 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_21 = tmpvar_23;
  threshold_20 = 0.0;
  if ((tmpvar_23 < 0.09)) {
    threshold_20 = ((xlv_COLOR1 + tmpvar_23) * 0.5);
    if ((threshold_20 < _SecondShadow)) {
      diffColor_22 = (tmpvar_18.xyz * _SecondShadowMultColor);
    } else {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_23 >= 0.5)) {
      D_21 = ((tmpvar_23 * 1.2) - 0.1);
    } else {
      D_21 = ((D_21 * 1.25) - 0.125);
    };
    threshold_20 = ((xlv_COLOR1 + D_21) * 0.5);
    if ((threshold_20 < _LightArea)) {
      diffColor_22 = (tmpvar_18.xyz * _FirstShadowMultColor);
    } else {
      diffColor_22 = baseTexColor_19;
    };
  };
  outColor_5.xyz = diffColor_22;
  mediump vec3 tmpvar_24;
  tmpvar_24 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_26;
  mediump vec3 color_27;
  mediump vec3 H_28;
  H_28 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_29;
    highp vec3 tmpvar_30;
    tmpvar_30 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_29 = tmpvar_30;
    H_28 = normalize((_CustomLightDir.xyz + V_29));
  };
  mediump float tmpvar_31;
  tmpvar_31 = pow (max (dot (tmpvar_24, H_28), 0.0), _Shininess);
  if ((tmpvar_31 >= (1.0 - tex_Light_Color_4.z))) {
    color_27 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_27 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_22 + color_27);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_32;
    tmpvar_32 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_9.y * tmpvar_32.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_18.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_33;
  mediump vec3 R_34;
  mediump float intensity_35;
  mediump vec4 noiseTex_36;
  mediump vec4 spColor_37;
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_37 = tmpvar_38;
  spColor_37.w = (spColor_37.w * _SPOpaqueness);
  lowp vec4 tmpvar_39;
  tmpvar_39 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_36 = tmpvar_39;
  highp float tmpvar_40;
  tmpvar_40 = (((1.99 * tmpvar_39.x) * _SPNoiseScaler) - 1.0);
  intensity_35 = tmpvar_40;
  highp vec3 tmpvar_41;
  highp vec3 I_42;
  I_42 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_36 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_41 = (I_42 - (2.0 * (
    dot (tmpvar_24, I_42)
   * tmpvar_24)));
  R_34 = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = textureCube (_SPCubeMap, R_34).xyz;
  reflection_33 = tmpvar_43;
  highp vec3 tmpvar_44;
  mediump vec3 x_45;
  x_45 = (spColor_37.xyz * _SPOldColor.xyz);
  tmpvar_44 = mix (x_45, ((reflection_33 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_37.xyz = tmpvar_44;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_35 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_35 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_46;
      tmpvar_46 = mix (spColor_37.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_35) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_37.xyz = tmpvar_46;
    };
  };
  highp vec4 tmpvar_47;
  tmpvar_47 = mix (outColor_5, spColor_37, vec4(xlat_mutable_SPIntensity));
  spColor_37 = tmpvar_47;
  outColor_5.w = spColor_37.w;
  mediump vec3 tmpvar_48;
  highp vec3 N_49;
  N_49 = tmpvar_24;
  highp vec3 V_50;
  V_50 = V_2;
  mediump float tmpvar_51;
  highp float tmpvar_52;
  tmpvar_52 = pow (clamp ((1.001 - 
    dot (V_50, N_49)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_51 = (_RGBias + (tmpvar_52 * _RGScale));
  mediump vec3 tmpvar_53;
  tmpvar_53 = (tmpvar_51 * _RGColor).xyz;
  mediump float tmpvar_54;
  tmpvar_54 = clamp (tmpvar_51, 0.0, 1.0);
  highp vec3 tmpvar_55;
  tmpvar_55 = mix (spColor_37.xyz, tmpvar_53, vec3((tmpvar_54 * _RGRatio)));
  tmpvar_48 = tmpvar_55;
  outColor_5.xyz = tmpvar_48;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_56;
    scrpos_56 = xlv_TEXCOORD3;
    mediump float a_57;
    a_57 = xlv_TEXCOORD3.z;
    if ((a_57 < 0.95)) {
      scrpos_56.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_57 = (a_57 * 17.0);
      highp float tmpvar_58;
      tmpvar_58 = (scrpos_56.y / 4.0);
      highp float tmpvar_59;
      tmpvar_59 = (fract(abs(tmpvar_58)) * 4.0);
      highp float tmpvar_60;
      if ((tmpvar_58 >= 0.0)) {
        tmpvar_60 = tmpvar_59;
      } else {
        tmpvar_60 = -(tmpvar_59);
      };
      highp float tmpvar_61;
      tmpvar_61 = (scrpos_56.x / 4.0);
      highp float tmpvar_62;
      tmpvar_62 = (fract(abs(tmpvar_61)) * 4.0);
      highp float tmpvar_63;
      if ((tmpvar_61 >= 0.0)) {
        tmpvar_63 = tmpvar_62;
      } else {
        tmpvar_63 = -(tmpvar_62);
      };
      highp float x_64;
      x_64 = ((a_57 - _DITHERMATRIX[
        int(tmpvar_60)
      ][
        int(tmpvar_63)
      ]) - 0.01);
      if ((x_64 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_37.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_76;
  mediump vec3 R_77;
  mediump float intensity_78;
  mediump vec4 noiseTex_79;
  mediump vec4 spColor_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_80 = tmpvar_81;
  spColor_80.w = (spColor_80.w * _SPOpaqueness);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_79 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((1.99 * tmpvar_82.x) * _SPNoiseScaler) - 1.0);
  intensity_78 = tmpvar_83;
  highp vec3 tmpvar_84;
  highp vec3 I_85;
  I_85 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_79 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_84 = (I_85 - (2.0 * (
    dot (tmpvar_67, I_85)
   * tmpvar_67)));
  R_77 = tmpvar_84;
  lowp vec3 tmpvar_86;
  tmpvar_86 = textureCube (_SPCubeMap, R_77).xyz;
  reflection_76 = tmpvar_86;
  highp vec3 tmpvar_87;
  mediump vec3 x_88;
  x_88 = (spColor_80.xyz * _SPOldColor.xyz);
  tmpvar_87 = mix (x_88, ((reflection_76 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_80.xyz = tmpvar_87;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_78 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_78 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_89;
      tmpvar_89 = mix (spColor_80.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_78) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_80.xyz = tmpvar_89;
    };
  };
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (outColor_5, spColor_80, vec4(xlat_mutable_SPIntensity));
  spColor_80 = tmpvar_90;
  outColor_5.w = spColor_80.w;
  mediump vec3 tmpvar_91;
  highp vec3 N_92;
  N_92 = tmpvar_67;
  highp vec3 V_93;
  V_93 = V_2;
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = pow (clamp ((1.001 - 
    dot (V_93, N_92)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_94 = (_RGBias + (tmpvar_95 * _RGScale));
  mediump vec3 tmpvar_96;
  tmpvar_96 = (tmpvar_94 * _RGColor).xyz;
  mediump float tmpvar_97;
  tmpvar_97 = clamp (tmpvar_94, 0.0, 1.0);
  highp vec3 tmpvar_98;
  tmpvar_98 = mix (spColor_80.xyz, tmpvar_96, vec3((tmpvar_97 * _RGRatio)));
  tmpvar_91 = tmpvar_98;
  outColor_5.xyz = tmpvar_91;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_99;
    scrpos_99 = xlv_TEXCOORD3;
    mediump float a_100;
    a_100 = xlv_TEXCOORD3.z;
    if ((a_100 < 0.95)) {
      scrpos_99.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_100 = (a_100 * 17.0);
      highp float tmpvar_101;
      tmpvar_101 = (scrpos_99.y / 4.0);
      highp float tmpvar_102;
      tmpvar_102 = (fract(abs(tmpvar_101)) * 4.0);
      highp float tmpvar_103;
      if ((tmpvar_101 >= 0.0)) {
        tmpvar_103 = tmpvar_102;
      } else {
        tmpvar_103 = -(tmpvar_102);
      };
      highp float tmpvar_104;
      tmpvar_104 = (scrpos_99.x / 4.0);
      highp float tmpvar_105;
      tmpvar_105 = (fract(abs(tmpvar_104)) * 4.0);
      highp float tmpvar_106;
      if ((tmpvar_104 >= 0.0)) {
        tmpvar_106 = tmpvar_105;
      } else {
        tmpvar_106 = -(tmpvar_105);
      };
      highp float x_107;
      x_107 = ((a_100 - _DITHERMATRIX[
        int(tmpvar_103)
      ][
        int(tmpvar_106)
      ]) - 0.01);
      if ((x_107 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_80.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_76;
  mediump vec3 R_77;
  mediump float intensity_78;
  mediump vec4 noiseTex_79;
  mediump vec4 spColor_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_80 = tmpvar_81;
  spColor_80.w = (spColor_80.w * _SPOpaqueness);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_79 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((1.99 * tmpvar_82.x) * _SPNoiseScaler) - 1.0);
  intensity_78 = tmpvar_83;
  highp vec3 tmpvar_84;
  highp vec3 I_85;
  I_85 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_79 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_84 = (I_85 - (2.0 * (
    dot (tmpvar_67, I_85)
   * tmpvar_67)));
  R_77 = tmpvar_84;
  lowp vec3 tmpvar_86;
  tmpvar_86 = textureCube (_SPCubeMap, R_77).xyz;
  reflection_76 = tmpvar_86;
  highp vec3 tmpvar_87;
  mediump vec3 x_88;
  x_88 = (spColor_80.xyz * _SPOldColor.xyz);
  tmpvar_87 = mix (x_88, ((reflection_76 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_80.xyz = tmpvar_87;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_78 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_78 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_89;
      tmpvar_89 = mix (spColor_80.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_78) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_80.xyz = tmpvar_89;
    };
  };
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (outColor_5, spColor_80, vec4(xlat_mutable_SPIntensity));
  spColor_80 = tmpvar_90;
  outColor_5.w = spColor_80.w;
  mediump vec3 tmpvar_91;
  highp vec3 N_92;
  N_92 = tmpvar_67;
  highp vec3 V_93;
  V_93 = V_2;
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = pow (clamp ((1.001 - 
    dot (V_93, N_92)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_94 = (_RGBias + (tmpvar_95 * _RGScale));
  mediump vec3 tmpvar_96;
  tmpvar_96 = (tmpvar_94 * _RGColor).xyz;
  mediump float tmpvar_97;
  tmpvar_97 = clamp (tmpvar_94, 0.0, 1.0);
  highp vec3 tmpvar_98;
  tmpvar_98 = mix (spColor_80.xyz, tmpvar_96, vec3((tmpvar_97 * _RGRatio)));
  tmpvar_91 = tmpvar_98;
  outColor_5.xyz = tmpvar_91;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_99;
    scrpos_99 = xlv_TEXCOORD3;
    mediump float a_100;
    a_100 = xlv_TEXCOORD3.z;
    if ((a_100 < 0.95)) {
      scrpos_99.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_100 = (a_100 * 17.0);
      highp float tmpvar_101;
      tmpvar_101 = (scrpos_99.y / 4.0);
      highp float tmpvar_102;
      tmpvar_102 = (fract(abs(tmpvar_101)) * 4.0);
      highp float tmpvar_103;
      if ((tmpvar_101 >= 0.0)) {
        tmpvar_103 = tmpvar_102;
      } else {
        tmpvar_103 = -(tmpvar_102);
      };
      highp float tmpvar_104;
      tmpvar_104 = (scrpos_99.x / 4.0);
      highp float tmpvar_105;
      tmpvar_105 = (fract(abs(tmpvar_104)) * 4.0);
      highp float tmpvar_106;
      if ((tmpvar_104 >= 0.0)) {
        tmpvar_106 = tmpvar_105;
      } else {
        tmpvar_106 = -(tmpvar_105);
      };
      highp float x_107;
      x_107 = ((a_100 - _DITHERMATRIX[
        int(tmpvar_103)
      ][
        int(tmpvar_106)
      ]) - 0.01);
      if ((x_107 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_80.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_WorldToObject;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPTex_ST;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump vec4 _CustomLightDir;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord0;
  mediump vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  mediump vec2 tmpvar_3;
  mediump vec3 tmpvar_4;
  highp vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  mediump vec2 tmpvar_7;
  tmpvar_6 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_7 = vec2(0.0, 0.0);
  highp vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = _glesVertex.xyz;
  tmpvar_8 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_9));
  highp vec4 tmpvar_10;
  tmpvar_10 = (unity_ObjectToWorld * _glesVertex);
  tmpvar_5 = (tmpvar_10.xyz / tmpvar_10.w);
  tmpvar_3 = tmpvar_1.xy;
  highp mat3 tmpvar_11;
  tmpvar_11[0] = unity_WorldToObject[0].xyz;
  tmpvar_11[1] = unity_WorldToObject[1].xyz;
  tmpvar_11[2] = unity_WorldToObject[2].xyz;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(normalize((_glesNormal * tmpvar_11)));
  tmpvar_4 = tmpvar_12;
  mediump float tmpvar_13;
  mediump vec3 L_14;
  L_14 = _WorldSpaceLightPos0.xyz;
  if ((_CustomLightDir.w > 0.5)) {
    L_14 = _CustomLightDir.xyz;
  };
  tmpvar_13 = ((dot (tmpvar_4, L_14) * 0.4975) + 0.5);
  highp vec4 spuvs_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_glesVertex * 0.5);
  spuvs_15.xy = ((_glesMultiTexCoord0.xy * _SPTex_ST.xy) + _SPTex_ST.zw);
  highp vec2 tmpvar_17;
  tmpvar_17.x = (tmpvar_16.x + (tmpvar_16.z * tmpvar_16.z));
  tmpvar_17.y = ((tmpvar_16.y + (0.5 * tmpvar_16.z)) + ((0.5 * tmpvar_16.x) * tmpvar_16.x));
  spuvs_15.zw = ((tmpvar_17 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_18;
    highp vec4 tmpvar_19;
    tmpvar_19 = (tmpvar_8 * 0.5);
    highp vec2 tmpvar_20;
    tmpvar_20.x = tmpvar_19.x;
    tmpvar_20.y = (tmpvar_19.y * _ProjectionParams.x);
    o_18.xy = (tmpvar_20 + tmpvar_19.w);
    o_18.zw = tmpvar_8.zw;
    tmpvar_6.xyw = o_18.xyw;
    tmpvar_6.z = _DitherAlpha;
  };
  if (bool(_UsingBloomMask)) {
    tmpvar_7 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_8;
  xlv_COLOR0 = tmpvar_2;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = spuvs_15;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_COLOR1 = tmpvar_13;
}


#endif
#ifdef FRAGMENT
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp mat4 _DITHERMATRIX;
uniform sampler2D _SPTex;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPIntensity;
uniform highp float _SPTransition;
uniform mediump vec4 _SPTransitionColor;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionEmissionScaler;
uniform lowp samplerCube _SPCubeMap;
uniform highp vec3 _SPCubeMapOffset;
uniform highp float _SPCubeMapIntensity;
uniform highp float _SPCubeMapNoiseIntensity;
uniform highp float _SPCubeMapBrightness;
uniform mediump vec4 _SPOldColor;
uniform mediump vec4 _SPCubeMapColor;
uniform mediump vec4 _RGColor;
uniform highp float _RGShininess;
uniform highp float _RGScale;
uniform highp float _RGBias;
uniform highp float _RGRatio;
uniform mediump vec4 _Color;
uniform mediump vec4 _EnvColor;
uniform sampler2D _LightMapTex;
uniform mediump float _LightArea;
uniform mediump float _SecondShadow;
uniform mediump vec3 _FirstShadowMultColor;
uniform mediump vec3 _SecondShadowMultColor;
uniform mediump float _Shininess;
uniform mediump float _SpecMulti;
uniform mediump vec3 _LightSpecColor;
uniform mediump float _Opaqueness;
uniform mediump vec4 _CustomLightDir;
uniform sampler2D _factorTex;
uniform sampler2D _indexTex;
uniform sampler2D _tableTex;
uniform highp vec4 _indexTex_TexelSize;
uniform mediump float _Emission;
uniform mediump vec4 _EmissionColor;
uniform highp float _UsingDitherAlpha;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPIntensity;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying mediump vec2 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying highp vec3 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying mediump vec2 xlv_TEXCOORD5;
varying mediump float xlv_COLOR1;
void main ()
{
  xlat_mutable_SPIntensity = _SPIntensity;
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec3 H_1;
  mediump vec3 V_2;
  mediump vec4 baseTexColor_3;
  mediump vec3 tex_Light_Color_4;
  mediump vec4 outColor_5;
  outColor_5 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec3 tmpvar_6;
  tmpvar_6 = texture2D (_LightMapTex, xlv_TEXCOORD0).xyz;
  tex_Light_Color_4 = tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec2 uv_8;
  uv_8 = xlv_TEXCOORD0;
  highp vec2 pixelSize_9;
  pixelSize_9 = (1.0/(_indexTex_TexelSize.zw));
  highp vec2 tmpvar_10;
  tmpvar_10 = ((uv_8 * _indexTex_TexelSize.zw) - 0.5);
  highp vec2 tmpvar_11;
  tmpvar_11 = floor(tmpvar_10);
  highp vec2 tmpvar_12;
  tmpvar_12 = fract(tmpvar_10);
  highp vec2 uv_13;
  uv_13 = ((tmpvar_11 + vec2(0.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_factorTex, uv_13);
  mediump vec4 tmpvar_15;
  tmpvar_15 = tmpvar_14;
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_indexTex, uv_13);
  mediump float tmpvar_17;
  tmpvar_17 = tmpvar_16.w;
  mediump vec2 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17;
  lowp vec3 tmpvar_19;
  tmpvar_19 = texture2D (_tableTex, tmpvar_18).xyz;
  mediump vec3 tmpvar_20;
  tmpvar_20 = tmpvar_19;
  mediump vec2 tmpvar_21;
  tmpvar_21.y = 1.0;
  tmpvar_21.x = tmpvar_17;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_tableTex, tmpvar_21).xyz;
  mediump vec3 tmpvar_23;
  tmpvar_23 = tmpvar_22;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix (tmpvar_20, tmpvar_23, tmpvar_15.xxx);
  tmpvar_24.w = tmpvar_15.y;
  highp vec2 uv_25;
  uv_25 = ((tmpvar_11 + vec2(1.5, 0.5)) * pixelSize_9);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_factorTex, uv_25);
  mediump vec4 tmpvar_27;
  tmpvar_27 = tmpvar_26;
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_indexTex, uv_25);
  mediump float tmpvar_29;
  tmpvar_29 = tmpvar_28.w;
  mediump vec2 tmpvar_30;
  tmpvar_30.y = 0.0;
  tmpvar_30.x = tmpvar_29;
  lowp vec3 tmpvar_31;
  tmpvar_31 = texture2D (_tableTex, tmpvar_30).xyz;
  mediump vec3 tmpvar_32;
  tmpvar_32 = tmpvar_31;
  mediump vec2 tmpvar_33;
  tmpvar_33.y = 1.0;
  tmpvar_33.x = tmpvar_29;
  lowp vec3 tmpvar_34;
  tmpvar_34 = texture2D (_tableTex, tmpvar_33).xyz;
  mediump vec3 tmpvar_35;
  tmpvar_35 = tmpvar_34;
  mediump vec4 tmpvar_36;
  tmpvar_36.xyz = mix (tmpvar_32, tmpvar_35, tmpvar_27.xxx);
  tmpvar_36.w = tmpvar_27.y;
  highp vec2 uv_37;
  uv_37 = ((tmpvar_11 + vec2(0.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_38;
  tmpvar_38 = texture2D (_factorTex, uv_37);
  mediump vec4 tmpvar_39;
  tmpvar_39 = tmpvar_38;
  lowp vec4 tmpvar_40;
  tmpvar_40 = texture2D (_indexTex, uv_37);
  mediump float tmpvar_41;
  tmpvar_41 = tmpvar_40.w;
  mediump vec2 tmpvar_42;
  tmpvar_42.y = 0.0;
  tmpvar_42.x = tmpvar_41;
  lowp vec3 tmpvar_43;
  tmpvar_43 = texture2D (_tableTex, tmpvar_42).xyz;
  mediump vec3 tmpvar_44;
  tmpvar_44 = tmpvar_43;
  mediump vec2 tmpvar_45;
  tmpvar_45.y = 1.0;
  tmpvar_45.x = tmpvar_41;
  lowp vec3 tmpvar_46;
  tmpvar_46 = texture2D (_tableTex, tmpvar_45).xyz;
  mediump vec3 tmpvar_47;
  tmpvar_47 = tmpvar_46;
  mediump vec4 tmpvar_48;
  tmpvar_48.xyz = mix (tmpvar_44, tmpvar_47, tmpvar_39.xxx);
  tmpvar_48.w = tmpvar_39.y;
  highp vec2 uv_49;
  uv_49 = ((tmpvar_11 + vec2(1.5, 1.5)) * pixelSize_9);
  lowp vec4 tmpvar_50;
  tmpvar_50 = texture2D (_factorTex, uv_49);
  mediump vec4 tmpvar_51;
  tmpvar_51 = tmpvar_50;
  lowp vec4 tmpvar_52;
  tmpvar_52 = texture2D (_indexTex, uv_49);
  mediump float tmpvar_53;
  tmpvar_53 = tmpvar_52.w;
  mediump vec2 tmpvar_54;
  tmpvar_54.y = 0.0;
  tmpvar_54.x = tmpvar_53;
  lowp vec3 tmpvar_55;
  tmpvar_55 = texture2D (_tableTex, tmpvar_54).xyz;
  mediump vec3 tmpvar_56;
  tmpvar_56 = tmpvar_55;
  mediump vec2 tmpvar_57;
  tmpvar_57.y = 1.0;
  tmpvar_57.x = tmpvar_53;
  lowp vec3 tmpvar_58;
  tmpvar_58 = texture2D (_tableTex, tmpvar_57).xyz;
  mediump vec3 tmpvar_59;
  tmpvar_59 = tmpvar_58;
  mediump vec4 tmpvar_60;
  tmpvar_60.xyz = mix (tmpvar_56, tmpvar_59, tmpvar_51.xxx);
  tmpvar_60.w = tmpvar_51.y;
  highp vec4 tmpvar_61;
  tmpvar_61 = mix (mix (tmpvar_24, tmpvar_36, tmpvar_12.xxxx), mix (tmpvar_48, tmpvar_60, tmpvar_12.xxxx), tmpvar_12.yyyy);
  tmpvar_7 = tmpvar_61;
  baseTexColor_3 = tmpvar_7;
  mediump vec3 baseTexColor_62;
  baseTexColor_62 = tmpvar_7.xyz;
  mediump float threshold_63;
  mediump float D_64;
  mediump vec3 diffColor_65;
  diffColor_65 = vec3(1.0, 1.0, 1.0);
  mediump float tmpvar_66;
  tmpvar_66 = (xlv_COLOR0.x * tex_Light_Color_4.y);
  D_64 = tmpvar_66;
  threshold_63 = 0.0;
  if ((tmpvar_66 < 0.09)) {
    threshold_63 = ((xlv_COLOR1 + tmpvar_66) * 0.5);
    if ((threshold_63 < _SecondShadow)) {
      diffColor_65 = (tmpvar_7.xyz * _SecondShadowMultColor);
    } else {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    };
  } else {
    if ((tmpvar_66 >= 0.5)) {
      D_64 = ((tmpvar_66 * 1.2) - 0.1);
    } else {
      D_64 = ((D_64 * 1.25) - 0.125);
    };
    threshold_63 = ((xlv_COLOR1 + D_64) * 0.5);
    if ((threshold_63 < _LightArea)) {
      diffColor_65 = (tmpvar_7.xyz * _FirstShadowMultColor);
    } else {
      diffColor_65 = baseTexColor_62;
    };
  };
  outColor_5.xyz = diffColor_65;
  mediump vec3 tmpvar_67;
  tmpvar_67 = normalize(xlv_TEXCOORD1);
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((_WorldSpaceCameraPos - xlv_TEXCOORD2));
  V_2 = tmpvar_68;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((_WorldSpaceLightPos0.xyz + V_2));
  H_1 = tmpvar_69;
  mediump vec3 color_70;
  mediump vec3 H_71;
  H_71 = H_1;
  if ((_CustomLightDir.w > 0.5)) {
    mediump vec3 V_72;
    highp vec3 tmpvar_73;
    tmpvar_73 = normalize((H_1 - _WorldSpaceLightPos0.xyz));
    V_72 = tmpvar_73;
    H_71 = normalize((_CustomLightDir.xyz + V_72));
  };
  mediump float tmpvar_74;
  tmpvar_74 = pow (max (dot (tmpvar_67, H_71), 0.0), _Shininess);
  if ((tmpvar_74 >= (1.0 - tex_Light_Color_4.z))) {
    color_70 = ((_LightSpecColor * _SpecMulti) * tex_Light_Color_4.x);
  } else {
    color_70 = vec3(0.0, 0.0, 0.0);
  };
  outColor_5.xyz = (diffColor_65 + color_70);
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_75;
    tmpvar_75 = texture2D (_BloomMaskTex, xlv_TEXCOORD5);
    baseTexColor_3.w = (tmpvar_7.w * tmpvar_75.x);
  };
  outColor_5.xyz = mix (((outColor_5.xyz * _Color.xyz) * _EnvColor.xyz), ((tmpvar_7.xyz * _Emission) * _EmissionColor.xyz), baseTexColor_3.www);
  outColor_5.w = _Opaqueness;
  mediump vec3 reflection_76;
  mediump vec3 R_77;
  mediump float intensity_78;
  mediump vec4 noiseTex_79;
  mediump vec4 spColor_80;
  lowp vec4 tmpvar_81;
  tmpvar_81 = texture2D (_SPTex, xlv_TEXCOORD4.xy);
  spColor_80 = tmpvar_81;
  spColor_80.w = (spColor_80.w * _SPOpaqueness);
  lowp vec4 tmpvar_82;
  tmpvar_82 = texture2D (_SPNoiseTex, xlv_TEXCOORD4.zw);
  noiseTex_79 = tmpvar_82;
  highp float tmpvar_83;
  tmpvar_83 = (((1.99 * tmpvar_82.x) * _SPNoiseScaler) - 1.0);
  intensity_78 = tmpvar_83;
  highp vec3 tmpvar_84;
  highp vec3 I_85;
  I_85 = ((normalize(
    (V_2 - _WorldSpaceCameraPos)
  ) + (noiseTex_79 * _SPCubeMapNoiseIntensity).xyz) + _SPCubeMapOffset);
  tmpvar_84 = (I_85 - (2.0 * (
    dot (tmpvar_67, I_85)
   * tmpvar_67)));
  R_77 = tmpvar_84;
  lowp vec3 tmpvar_86;
  tmpvar_86 = textureCube (_SPCubeMap, R_77).xyz;
  reflection_76 = tmpvar_86;
  highp vec3 tmpvar_87;
  mediump vec3 x_88;
  x_88 = (spColor_80.xyz * _SPOldColor.xyz);
  tmpvar_87 = mix (x_88, ((reflection_76 * _SPCubeMapColor.xyz) * _SPCubeMapBrightness), vec3(_SPCubeMapIntensity));
  spColor_80.xyz = tmpvar_87;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_78 >= (1.7 * xlat_mutable_SPTransition))) {
    xlat_mutable_SPIntensity = 0.0;
  } else {
    if ((intensity_78 >= (1.5 * xlat_mutable_SPTransition))) {
      highp vec3 tmpvar_89;
      tmpvar_89 = mix (spColor_80.xyz, (_SPTransitionColor.xyz * _SPTransitionEmissionScaler), vec3(clamp ((10.0 * 
        (-(intensity_78) + (1.7 * xlat_mutable_SPTransition))
      ), 0.0, 1.0)));
      spColor_80.xyz = tmpvar_89;
    };
  };
  highp vec4 tmpvar_90;
  tmpvar_90 = mix (outColor_5, spColor_80, vec4(xlat_mutable_SPIntensity));
  spColor_80 = tmpvar_90;
  outColor_5.w = spColor_80.w;
  mediump vec3 tmpvar_91;
  highp vec3 N_92;
  N_92 = tmpvar_67;
  highp vec3 V_93;
  V_93 = V_2;
  mediump float tmpvar_94;
  highp float tmpvar_95;
  tmpvar_95 = pow (clamp ((1.001 - 
    dot (V_93, N_92)
  ), 0.001, 1.0), _RGShininess);
  tmpvar_94 = (_RGBias + (tmpvar_95 * _RGScale));
  mediump vec3 tmpvar_96;
  tmpvar_96 = (tmpvar_94 * _RGColor).xyz;
  mediump float tmpvar_97;
  tmpvar_97 = clamp (tmpvar_94, 0.0, 1.0);
  highp vec3 tmpvar_98;
  tmpvar_98 = mix (spColor_80.xyz, tmpvar_96, vec3((tmpvar_97 * _RGRatio)));
  tmpvar_91 = tmpvar_98;
  outColor_5.xyz = tmpvar_91;
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_99;
    scrpos_99 = xlv_TEXCOORD3;
    mediump float a_100;
    a_100 = xlv_TEXCOORD3.z;
    if ((a_100 < 0.95)) {
      scrpos_99.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_100 = (a_100 * 17.0);
      highp float tmpvar_101;
      tmpvar_101 = (scrpos_99.y / 4.0);
      highp float tmpvar_102;
      tmpvar_102 = (fract(abs(tmpvar_101)) * 4.0);
      highp float tmpvar_103;
      if ((tmpvar_101 >= 0.0)) {
        tmpvar_103 = tmpvar_102;
      } else {
        tmpvar_103 = -(tmpvar_102);
      };
      highp float tmpvar_104;
      tmpvar_104 = (scrpos_99.x / 4.0);
      highp float tmpvar_105;
      tmpvar_105 = (fract(abs(tmpvar_104)) * 4.0);
      highp float tmpvar_106;
      if ((tmpvar_104 >= 0.0)) {
        tmpvar_106 = tmpvar_105;
      } else {
        tmpvar_106 = -(tmpvar_105);
      };
      highp float x_107;
      x_107 = ((a_100 - _DITHERMATRIX[
        int(tmpvar_103)
      ][
        int(tmpvar_106)
      ]) - 0.01);
      if ((x_107 < 0.0)) {
        discard;
      };
    };
  };
  outColor_5.w = clamp (spColor_80.w, 0.0, 1.0);
  gl_FragData[0] = outColor_5;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_ORIG" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_R" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_G" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" }
""
}
SubProgram "gles hw_tier00 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "ALPHA_B" "SPECIAL_STATE" "RIM_GLOW" "LOOKUP_COLOR" "LOOKUP_COLOR_BILINEAR" }
""
}
}
}
 Pass {
  Name "COMPLEX"
  LOD 200
  Tags { "Distortion" = "None" "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "OutlineType" = "Complex" "QUEUE" = "Transparent" "Reflected" = "Reflected" "RenderType" = "Transparent" }
  ZWrite Off
  Cull Off
  GpuProgramID 178992
Program "vp" {
SubProgram "gles hw_tier00 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_6;
  tmpvar_6 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_6;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_MatrixMV[0].xyz;
  tmpvar_7[1] = unity_MatrixMV[1].xyz;
  tmpvar_7[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_8.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_9;
  tmpvar_9 = normalize(N_1);
  N_1 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_10));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_9.xy * tmpvar_11));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_12;
    highp vec4 tmpvar_13;
    tmpvar_13 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_14;
    tmpvar_14.x = tmpvar_13.x;
    tmpvar_14.y = (tmpvar_13.y * _ProjectionParams.x);
    o_12.xy = (tmpvar_14 + tmpvar_13.w);
    o_12.zw = tmpvar_3.zw;
    tmpvar_5.xyw = o_12.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 color_1;
  color_1.w = xlv_COLOR0.w;
  mediump float x_2;
  x_2 = (xlv_COLOR0.w - 0.01);
  if ((x_2 < 0.0)) {
    discard;
  };
  color_1.xyz = (xlv_COLOR0.xyz * _Color.xyz);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_3;
    scrpos_3 = xlv_TEXCOORD3;
    mediump float a_4;
    a_4 = xlv_TEXCOORD3.z;
    if ((a_4 < 0.95)) {
      scrpos_3.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_4 = (a_4 * 17.0);
      highp float tmpvar_5;
      tmpvar_5 = (scrpos_3.y / 4.0);
      highp float tmpvar_6;
      tmpvar_6 = (fract(abs(tmpvar_5)) * 4.0);
      highp float tmpvar_7;
      if ((tmpvar_5 >= 0.0)) {
        tmpvar_7 = tmpvar_6;
      } else {
        tmpvar_7 = -(tmpvar_6);
      };
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_3.x / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float x_11;
      x_11 = ((a_4 - _DITHERMATRIX[
        int(tmpvar_7)
      ][
        int(tmpvar_10)
      ]) - 0.01);
      if ((x_11 < 0.0)) {
        discard;
      };
    };
  };
  color_1.w = clamp (xlv_COLOR0.w, 0.0, 1.0);
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_6;
  tmpvar_6 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_6;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_MatrixMV[0].xyz;
  tmpvar_7[1] = unity_MatrixMV[1].xyz;
  tmpvar_7[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_8.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_9;
  tmpvar_9 = normalize(N_1);
  N_1 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_10));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_9.xy * tmpvar_11));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_12;
    highp vec4 tmpvar_13;
    tmpvar_13 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_14;
    tmpvar_14.x = tmpvar_13.x;
    tmpvar_14.y = (tmpvar_13.y * _ProjectionParams.x);
    o_12.xy = (tmpvar_14 + tmpvar_13.w);
    o_12.zw = tmpvar_3.zw;
    tmpvar_5.xyw = o_12.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 color_1;
  color_1.w = xlv_COLOR0.w;
  mediump float x_2;
  x_2 = (xlv_COLOR0.w - 0.01);
  if ((x_2 < 0.0)) {
    discard;
  };
  color_1.xyz = (xlv_COLOR0.xyz * _Color.xyz);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_3;
    scrpos_3 = xlv_TEXCOORD3;
    mediump float a_4;
    a_4 = xlv_TEXCOORD3.z;
    if ((a_4 < 0.95)) {
      scrpos_3.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_4 = (a_4 * 17.0);
      highp float tmpvar_5;
      tmpvar_5 = (scrpos_3.y / 4.0);
      highp float tmpvar_6;
      tmpvar_6 = (fract(abs(tmpvar_5)) * 4.0);
      highp float tmpvar_7;
      if ((tmpvar_5 >= 0.0)) {
        tmpvar_7 = tmpvar_6;
      } else {
        tmpvar_7 = -(tmpvar_6);
      };
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_3.x / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float x_11;
      x_11 = ((a_4 - _DITHERMATRIX[
        int(tmpvar_7)
      ][
        int(tmpvar_10)
      ]) - 0.01);
      if ((x_11 < 0.0)) {
        discard;
      };
    };
  };
  color_1.w = clamp (xlv_COLOR0.w, 0.0, 1.0);
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_6;
  tmpvar_6 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_6;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_MatrixMV[0].xyz;
  tmpvar_7[1] = unity_MatrixMV[1].xyz;
  tmpvar_7[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_8.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_9;
  tmpvar_9 = normalize(N_1);
  N_1 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_10));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_9.xy * tmpvar_11));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_12;
    highp vec4 tmpvar_13;
    tmpvar_13 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_14;
    tmpvar_14.x = tmpvar_13.x;
    tmpvar_14.y = (tmpvar_13.y * _ProjectionParams.x);
    o_12.xy = (tmpvar_14 + tmpvar_13.w);
    o_12.zw = tmpvar_3.zw;
    tmpvar_5.xyw = o_12.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform highp float _UsingDitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 color_1;
  color_1.w = xlv_COLOR0.w;
  mediump float x_2;
  x_2 = (xlv_COLOR0.w - 0.01);
  if ((x_2 < 0.0)) {
    discard;
  };
  color_1.xyz = (xlv_COLOR0.xyz * _Color.xyz);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_3;
    scrpos_3 = xlv_TEXCOORD3;
    mediump float a_4;
    a_4 = xlv_TEXCOORD3.z;
    if ((a_4 < 0.95)) {
      scrpos_3.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_4 = (a_4 * 17.0);
      highp float tmpvar_5;
      tmpvar_5 = (scrpos_3.y / 4.0);
      highp float tmpvar_6;
      tmpvar_6 = (fract(abs(tmpvar_5)) * 4.0);
      highp float tmpvar_7;
      if ((tmpvar_5 >= 0.0)) {
        tmpvar_7 = tmpvar_6;
      } else {
        tmpvar_7 = -(tmpvar_6);
      };
      highp float tmpvar_8;
      tmpvar_8 = (scrpos_3.x / 4.0);
      highp float tmpvar_9;
      tmpvar_9 = (fract(abs(tmpvar_8)) * 4.0);
      highp float tmpvar_10;
      if ((tmpvar_8 >= 0.0)) {
        tmpvar_10 = tmpvar_9;
      } else {
        tmpvar_10 = -(tmpvar_9);
      };
      highp float x_11;
      x_11 = ((a_4 - _DITHERMATRIX[
        int(tmpvar_7)
      ][
        int(tmpvar_10)
      ]) - 0.01);
      if ((x_11 < 0.0)) {
        discard;
      };
    };
  };
  color_1.w = clamp (xlv_COLOR0.w, 0.0, 1.0);
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_6;
  tmpvar_6 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_6;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_MatrixMV[0].xyz;
  tmpvar_7[1] = unity_MatrixMV[1].xyz;
  tmpvar_7[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_8.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_9;
  tmpvar_9 = normalize(N_1);
  N_1 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_10));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_9.xy * tmpvar_11));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  highp vec2 spnoiseuv_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = (_glesVertex * 0.5);
  highp vec2 tmpvar_14;
  tmpvar_14.x = (tmpvar_13.x + (tmpvar_13.z * tmpvar_13.z));
  tmpvar_14.y = ((tmpvar_13.y + (0.5 * tmpvar_13.z)) + ((0.5 * tmpvar_13.x) * tmpvar_13.x));
  spnoiseuv_12 = ((tmpvar_14 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_3.zw;
    tmpvar_5.xyw = o_15.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = spnoiseuv_12;
  xlv_TEXCOORD3 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPTransition;
uniform mediump vec4 _SPOutlineColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 color_1;
  color_1 = xlv_COLOR0;
  mediump float x_2;
  x_2 = (xlv_COLOR0.w - 0.01);
  if ((x_2 < 0.0)) {
    discard;
  };
  mediump float intensity_3;
  mediump vec4 outColor_4;
  outColor_4 = _SPOutlineColor;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_SPNoiseTex, xlv_TEXCOORD0);
  highp float tmpvar_6;
  tmpvar_6 = (((1.99 * tmpvar_5.x) * _SPNoiseScaler) - 1.0);
  intensity_3 = tmpvar_6;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_3 >= (1.7 * xlat_mutable_SPTransition))) {
    outColor_4 = xlv_COLOR0;
  };
  color_1.w = outColor_4.w;
  color_1.xyz = (outColor_4.xyz * _Color.xyz);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_7;
    scrpos_7 = xlv_TEXCOORD3;
    mediump float a_8;
    a_8 = xlv_TEXCOORD3.z;
    if ((a_8 < 0.95)) {
      scrpos_7.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_8 = (a_8 * 17.0);
      highp float tmpvar_9;
      tmpvar_9 = (scrpos_7.y / 4.0);
      highp float tmpvar_10;
      tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
      highp float tmpvar_11;
      if ((tmpvar_9 >= 0.0)) {
        tmpvar_11 = tmpvar_10;
      } else {
        tmpvar_11 = -(tmpvar_10);
      };
      highp float tmpvar_12;
      tmpvar_12 = (scrpos_7.x / 4.0);
      highp float tmpvar_13;
      tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
      highp float tmpvar_14;
      if ((tmpvar_12 >= 0.0)) {
        tmpvar_14 = tmpvar_13;
      } else {
        tmpvar_14 = -(tmpvar_13);
      };
      highp float x_15;
      x_15 = ((a_8 - _DITHERMATRIX[
        int(tmpvar_11)
      ][
        int(tmpvar_14)
      ]) - 0.01);
      if ((x_15 < 0.0)) {
        discard;
      };
    };
  };
  color_1.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_6;
  tmpvar_6 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_6;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_MatrixMV[0].xyz;
  tmpvar_7[1] = unity_MatrixMV[1].xyz;
  tmpvar_7[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_8.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_9;
  tmpvar_9 = normalize(N_1);
  N_1 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_10));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_9.xy * tmpvar_11));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  highp vec2 spnoiseuv_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = (_glesVertex * 0.5);
  highp vec2 tmpvar_14;
  tmpvar_14.x = (tmpvar_13.x + (tmpvar_13.z * tmpvar_13.z));
  tmpvar_14.y = ((tmpvar_13.y + (0.5 * tmpvar_13.z)) + ((0.5 * tmpvar_13.x) * tmpvar_13.x));
  spnoiseuv_12 = ((tmpvar_14 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_3.zw;
    tmpvar_5.xyw = o_15.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = spnoiseuv_12;
  xlv_TEXCOORD3 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPTransition;
uniform mediump vec4 _SPOutlineColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 color_1;
  color_1 = xlv_COLOR0;
  mediump float x_2;
  x_2 = (xlv_COLOR0.w - 0.01);
  if ((x_2 < 0.0)) {
    discard;
  };
  mediump float intensity_3;
  mediump vec4 outColor_4;
  outColor_4 = _SPOutlineColor;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_SPNoiseTex, xlv_TEXCOORD0);
  highp float tmpvar_6;
  tmpvar_6 = (((1.99 * tmpvar_5.x) * _SPNoiseScaler) - 1.0);
  intensity_3 = tmpvar_6;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_3 >= (1.7 * xlat_mutable_SPTransition))) {
    outColor_4 = xlv_COLOR0;
  };
  color_1.w = outColor_4.w;
  color_1.xyz = (outColor_4.xyz * _Color.xyz);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_7;
    scrpos_7 = xlv_TEXCOORD3;
    mediump float a_8;
    a_8 = xlv_TEXCOORD3.z;
    if ((a_8 < 0.95)) {
      scrpos_7.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_8 = (a_8 * 17.0);
      highp float tmpvar_9;
      tmpvar_9 = (scrpos_7.y / 4.0);
      highp float tmpvar_10;
      tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
      highp float tmpvar_11;
      if ((tmpvar_9 >= 0.0)) {
        tmpvar_11 = tmpvar_10;
      } else {
        tmpvar_11 = -(tmpvar_10);
      };
      highp float tmpvar_12;
      tmpvar_12 = (scrpos_7.x / 4.0);
      highp float tmpvar_13;
      tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
      highp float tmpvar_14;
      if ((tmpvar_12 >= 0.0)) {
        tmpvar_14 = tmpvar_13;
      } else {
        tmpvar_14 = -(tmpvar_13);
      };
      highp float x_15;
      x_15 = ((a_8 - _DITHERMATRIX[
        int(tmpvar_11)
      ][
        int(tmpvar_14)
      ]) - 0.01);
      if ((x_15 < 0.0)) {
        discard;
      };
    };
  };
  color_1.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = color_1;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
uniform highp vec4 _ProjectionParams;
uniform highp mat4 unity_CameraProjection;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 glstate_matrix_projection;
uniform highp mat4 unity_MatrixV;
highp mat4 unity_MatrixMV;
uniform highp vec4 _SPNoiseTex_ST;
uniform mediump float _OutlineWidth;
uniform mediump vec4 _OutlineColor;
uniform mediump float _MaxOutlineZOffset;
uniform mediump float _Scale;
uniform highp float _UsingDitherAlpha;
uniform highp float _DitherAlpha;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  unity_MatrixMV = (unity_MatrixV * unity_ObjectToWorld);
  mediump vec3 N_1;
  mediump float S_2;
  highp vec4 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = vec4(0.0, 0.0, 0.0, 0.0);
  tmpvar_3 = (unity_MatrixMV * _glesVertex);
  tmpvar_3 = (tmpvar_3 / tmpvar_3.w);
  highp float tmpvar_6;
  tmpvar_6 = (-(tmpvar_3.z) / unity_CameraProjection[1].y);
  S_2 = tmpvar_6;
  highp mat3 tmpvar_7;
  tmpvar_7[0] = unity_MatrixMV[0].xyz;
  tmpvar_7[1] = unity_MatrixMV[1].xyz;
  tmpvar_7[2] = unity_MatrixMV[2].xyz;
  highp vec3 tmpvar_8;
  tmpvar_8 = (tmpvar_7 * _glesTANGENT.xyz);
  N_1.xy = tmpvar_8.xy;
  N_1.z = 0.01;
  mediump vec3 tmpvar_9;
  tmpvar_9 = normalize(N_1);
  N_1 = tmpvar_9;
  mediump float tmpvar_10;
  tmpvar_10 = pow ((S_2 / _Scale), 0.5);
  S_2 = tmpvar_10;
  mediump float tmpvar_11;
  tmpvar_11 = ((_OutlineWidth * _Scale) * (_glesColor.w * tmpvar_10));
  tmpvar_3.xyz = (tmpvar_3.xyz + ((
    (normalize(tmpvar_3.xyz) * _MaxOutlineZOffset)
   * _Scale) * (_glesColor.z - 0.5)));
  tmpvar_3.xy = (tmpvar_3.xy + (tmpvar_9.xy * tmpvar_11));
  tmpvar_4.xyz = _OutlineColor.xyz;
  tmpvar_4.w = 1.0;
  tmpvar_3 = (glstate_matrix_projection * tmpvar_3);
  highp vec2 spnoiseuv_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = (_glesVertex * 0.5);
  highp vec2 tmpvar_14;
  tmpvar_14.x = (tmpvar_13.x + (tmpvar_13.z * tmpvar_13.z));
  tmpvar_14.y = ((tmpvar_13.y + (0.5 * tmpvar_13.z)) + ((0.5 * tmpvar_13.x) * tmpvar_13.x));
  spnoiseuv_12 = ((tmpvar_14 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 o_15;
    highp vec4 tmpvar_16;
    tmpvar_16 = (tmpvar_3 * 0.5);
    highp vec2 tmpvar_17;
    tmpvar_17.x = tmpvar_16.x;
    tmpvar_17.y = (tmpvar_16.y * _ProjectionParams.x);
    o_15.xy = (tmpvar_17 + tmpvar_16.w);
    o_15.zw = tmpvar_3.zw;
    tmpvar_5.xyw = o_15.xyw;
    tmpvar_5.z = _DitherAlpha;
  };
  gl_Position = tmpvar_3;
  xlv_COLOR0 = tmpvar_4;
  xlv_TEXCOORD0 = spnoiseuv_12;
  xlv_TEXCOORD3 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _ScreenParams;
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPTransition;
uniform mediump vec4 _SPOutlineColor;
uniform highp mat4 _DITHERMATRIX;
uniform mediump vec4 _Color;
uniform highp float _UsingDitherAlpha;
highp float xlat_mutable_SPTransition;
varying mediump vec4 xlv_COLOR0;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD3;
void main ()
{
  mediump vec4 color_1;
  color_1 = xlv_COLOR0;
  mediump float x_2;
  x_2 = (xlv_COLOR0.w - 0.01);
  if ((x_2 < 0.0)) {
    discard;
  };
  mediump float intensity_3;
  mediump vec4 outColor_4;
  outColor_4 = _SPOutlineColor;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_SPNoiseTex, xlv_TEXCOORD0);
  highp float tmpvar_6;
  tmpvar_6 = (((1.99 * tmpvar_5.x) * _SPNoiseScaler) - 1.0);
  intensity_3 = tmpvar_6;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if ((intensity_3 >= (1.7 * xlat_mutable_SPTransition))) {
    outColor_4 = xlv_COLOR0;
  };
  color_1.w = outColor_4.w;
  color_1.xyz = (outColor_4.xyz * _Color.xyz);
  if (bool(_UsingDitherAlpha)) {
    highp vec4 scrpos_7;
    scrpos_7 = xlv_TEXCOORD3;
    mediump float a_8;
    a_8 = xlv_TEXCOORD3.z;
    if ((a_8 < 0.95)) {
      scrpos_7.xy = ((xlv_TEXCOORD3.xy / xlv_TEXCOORD3.w) * _ScreenParams.xy);
      a_8 = (a_8 * 17.0);
      highp float tmpvar_9;
      tmpvar_9 = (scrpos_7.y / 4.0);
      highp float tmpvar_10;
      tmpvar_10 = (fract(abs(tmpvar_9)) * 4.0);
      highp float tmpvar_11;
      if ((tmpvar_9 >= 0.0)) {
        tmpvar_11 = tmpvar_10;
      } else {
        tmpvar_11 = -(tmpvar_10);
      };
      highp float tmpvar_12;
      tmpvar_12 = (scrpos_7.x / 4.0);
      highp float tmpvar_13;
      tmpvar_13 = (fract(abs(tmpvar_12)) * 4.0);
      highp float tmpvar_14;
      if ((tmpvar_12 >= 0.0)) {
        tmpvar_14 = tmpvar_13;
      } else {
        tmpvar_14 = -(tmpvar_13);
      };
      highp float x_15;
      x_15 = ((a_8 - _DITHERMATRIX[
        int(tmpvar_11)
      ][
        int(tmpvar_14)
      ]) - 0.01);
      if ((x_15 < 0.0)) {
        discard;
      };
    };
  };
  color_1.w = clamp (outColor_4.w, 0.0, 1.0);
  gl_FragData[0] = color_1;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
""
}
SubProgram "gles hw_tier01 " {
""
}
SubProgram "gles hw_tier02 " {
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" }
""
}
}
}
 Pass {
  Name "CONSTANT_REPLACE"
  LOD 200
  Tags { "Distortion" = "None" "IGNOREPROJECTOR" = "true" "OutlineType" = "Complex" "QUEUE" = "Transparent" "Reflected" = "Reflected" "RenderType" = "Transparent" }
  ZWrite Off
  GpuProgramID 238816
Program "vp" {
SubProgram "gles hw_tier00 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec2 tmpvar_1;
  mediump vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  tmpvar_1 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  if (bool(_UsingBloomMask)) {
    tmpvar_2 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionBloomFactor;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 tex_color_1;
  mediump vec4 o_2;
  o_2 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_color_1 = tmpvar_3;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_4;
    tmpvar_4 = texture2D (_BloomMaskTex, xlv_TEXCOORD2);
    tex_color_1.w = (tex_color_1.w * tmpvar_4.x);
  };
  o_2.w = mix (_BloomFactor, _EmissionBloomFactor, tex_color_1.w);
  gl_FragData[0] = o_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec2 tmpvar_1;
  mediump vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  tmpvar_1 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  if (bool(_UsingBloomMask)) {
    tmpvar_2 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionBloomFactor;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 tex_color_1;
  mediump vec4 o_2;
  o_2 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_color_1 = tmpvar_3;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_4;
    tmpvar_4 = texture2D (_BloomMaskTex, xlv_TEXCOORD2);
    tex_color_1.w = (tex_color_1.w * tmpvar_4.x);
  };
  o_2.w = mix (_BloomFactor, _EmissionBloomFactor, tex_color_1.w);
  gl_FragData[0] = o_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec2 tmpvar_1;
  mediump vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  tmpvar_1 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  if (bool(_UsingBloomMask)) {
    tmpvar_2 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD2 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionBloomFactor;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD2;
void main ()
{
  mediump vec4 tex_color_1;
  mediump vec4 o_2;
  o_2 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_color_1 = tmpvar_3;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_4;
    tmpvar_4 = texture2D (_BloomMaskTex, xlv_TEXCOORD2);
    tex_color_1.w = (tex_color_1.w * tmpvar_4.x);
  };
  o_2.w = mix (_BloomFactor, _EmissionBloomFactor, tex_color_1.w);
  gl_FragData[0] = o_2;
}


#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec2 tmpvar_1;
  mediump vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  tmpvar_1 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  if (bool(_UsingBloomMask)) {
    tmpvar_2 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  highp vec4 tmpvar_5;
  tmpvar_5 = (_glesVertex * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = (tmpvar_5.x + (tmpvar_5.z * tmpvar_5.z));
  tmpvar_6.y = ((tmpvar_5.y + (0.5 * tmpvar_5.z)) + ((0.5 * tmpvar_5.x) * tmpvar_5.x));
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = ((tmpvar_6 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  xlv_TEXCOORD2 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPTransition;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionBloomFactor;
uniform sampler2D _MainTex;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionBloomFactor;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPTransition;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
void main ()
{
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec4 tex_color_1;
  mediump vec4 o_2;
  o_2 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_color_1 = tmpvar_3;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_4;
    tmpvar_4 = texture2D (_BloomMaskTex, xlv_TEXCOORD2);
    tex_color_1.w = (tex_color_1.w * tmpvar_4.x);
  };
  o_2.w = mix (_BloomFactor, _EmissionBloomFactor, tex_color_1.w);
  mediump float intensity_5;
  mediump float outBloomFactor_6;
  outBloomFactor_6 = o_2.w;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_SPNoiseTex, xlv_TEXCOORD1);
  highp float tmpvar_8;
  tmpvar_8 = (((1.99 * tmpvar_7.x) * _SPNoiseScaler) - 1.0);
  intensity_5 = tmpvar_8;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if (((intensity_5 >= (1.5 * xlat_mutable_SPTransition)) && (intensity_5 < (1.7 * xlat_mutable_SPTransition)))) {
    highp float tmpvar_9;
    tmpvar_9 = mix (o_2.w, _SPTransitionBloomFactor, clamp ((10.0 * 
      (-(intensity_5) + (1.7 * xlat_mutable_SPTransition))
    ), 0.0, 1.0));
    outBloomFactor_6 = tmpvar_9;
  } else {
    if ((intensity_5 < (1.5 * xlat_mutable_SPTransition))) {
      outBloomFactor_6 = (outBloomFactor_6 * _SPOpaqueness);
    };
  };
  o_2.w = outBloomFactor_6;
  gl_FragData[0] = o_2;
}


#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec2 tmpvar_1;
  mediump vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  tmpvar_1 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  if (bool(_UsingBloomMask)) {
    tmpvar_2 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  highp vec4 tmpvar_5;
  tmpvar_5 = (_glesVertex * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = (tmpvar_5.x + (tmpvar_5.z * tmpvar_5.z));
  tmpvar_6.y = ((tmpvar_5.y + (0.5 * tmpvar_5.z)) + ((0.5 * tmpvar_5.x) * tmpvar_5.x));
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = ((tmpvar_6 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  xlv_TEXCOORD2 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPTransition;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionBloomFactor;
uniform sampler2D _MainTex;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionBloomFactor;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPTransition;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
void main ()
{
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec4 tex_color_1;
  mediump vec4 o_2;
  o_2 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_color_1 = tmpvar_3;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_4;
    tmpvar_4 = texture2D (_BloomMaskTex, xlv_TEXCOORD2);
    tex_color_1.w = (tex_color_1.w * tmpvar_4.x);
  };
  o_2.w = mix (_BloomFactor, _EmissionBloomFactor, tex_color_1.w);
  mediump float intensity_5;
  mediump float outBloomFactor_6;
  outBloomFactor_6 = o_2.w;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_SPNoiseTex, xlv_TEXCOORD1);
  highp float tmpvar_8;
  tmpvar_8 = (((1.99 * tmpvar_7.x) * _SPNoiseScaler) - 1.0);
  intensity_5 = tmpvar_8;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if (((intensity_5 >= (1.5 * xlat_mutable_SPTransition)) && (intensity_5 < (1.7 * xlat_mutable_SPTransition)))) {
    highp float tmpvar_9;
    tmpvar_9 = mix (o_2.w, _SPTransitionBloomFactor, clamp ((10.0 * 
      (-(intensity_5) + (1.7 * xlat_mutable_SPTransition))
    ), 0.0, 1.0));
    outBloomFactor_6 = tmpvar_9;
  } else {
    if ((intensity_5 < (1.5 * xlat_mutable_SPTransition))) {
      outBloomFactor_6 = (outBloomFactor_6 * _SPOpaqueness);
    };
  };
  o_2.w = outBloomFactor_6;
  gl_FragData[0] = o_2;
}


#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" }
"#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 unity_ObjectToWorld;
uniform highp mat4 unity_MatrixVP;
uniform highp vec4 _SPNoiseTex_ST;
uniform highp vec4 _MainTex_ST;
uniform highp float _UsingBloomMask;
uniform highp vec4 _BloomMaskTex_ST;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
void main ()
{
  highp vec2 tmpvar_1;
  mediump vec2 tmpvar_2;
  highp vec4 tmpvar_3;
  highp vec4 tmpvar_4;
  tmpvar_4.w = 1.0;
  tmpvar_4.xyz = _glesVertex.xyz;
  tmpvar_3 = (unity_MatrixVP * (unity_ObjectToWorld * tmpvar_4));
  tmpvar_1 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  if (bool(_UsingBloomMask)) {
    tmpvar_2 = ((_glesMultiTexCoord0.xy * _BloomMaskTex_ST.xy) + _BloomMaskTex_ST.zw);
  };
  highp vec4 tmpvar_5;
  tmpvar_5 = (_glesVertex * 0.5);
  highp vec2 tmpvar_6;
  tmpvar_6.x = (tmpvar_5.x + (tmpvar_5.z * tmpvar_5.z));
  tmpvar_6.y = ((tmpvar_5.y + (0.5 * tmpvar_5.z)) + ((0.5 * tmpvar_5.x) * tmpvar_5.x));
  gl_Position = tmpvar_3;
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = ((tmpvar_6 * _SPNoiseTex_ST.xy) + _SPNoiseTex_ST.zw);
  xlv_TEXCOORD2 = tmpvar_2;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _SPNoiseTex;
uniform highp float _SPNoiseScaler;
uniform highp float _SPTransition;
uniform mediump float _SPOpaqueness;
uniform highp float _SPTransitionBloomFactor;
uniform sampler2D _MainTex;
uniform mediump float _BloomFactor;
uniform mediump float _EmissionBloomFactor;
uniform highp float _UsingBloomMask;
uniform sampler2D _BloomMaskTex;
highp float xlat_mutable_SPTransition;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec2 xlv_TEXCOORD1;
varying mediump vec2 xlv_TEXCOORD2;
void main ()
{
  xlat_mutable_SPTransition = _SPTransition;
  mediump vec4 tex_color_1;
  mediump vec4 o_2;
  o_2 = vec4(0.0, 0.0, 0.0, 0.0);
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0);
  tex_color_1 = tmpvar_3;
  if (bool(_UsingBloomMask)) {
    lowp vec4 tmpvar_4;
    tmpvar_4 = texture2D (_BloomMaskTex, xlv_TEXCOORD2);
    tex_color_1.w = (tex_color_1.w * tmpvar_4.x);
  };
  o_2.w = mix (_BloomFactor, _EmissionBloomFactor, tex_color_1.w);
  mediump float intensity_5;
  mediump float outBloomFactor_6;
  outBloomFactor_6 = o_2.w;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_SPNoiseTex, xlv_TEXCOORD1);
  highp float tmpvar_8;
  tmpvar_8 = (((1.99 * tmpvar_7.x) * _SPNoiseScaler) - 1.0);
  intensity_5 = tmpvar_8;
  xlat_mutable_SPTransition = (_SPTransition * _SPNoiseScaler);
  if (((intensity_5 >= (1.5 * xlat_mutable_SPTransition)) && (intensity_5 < (1.7 * xlat_mutable_SPTransition)))) {
    highp float tmpvar_9;
    tmpvar_9 = mix (o_2.w, _SPTransitionBloomFactor, clamp ((10.0 * 
      (-(intensity_5) + (1.7 * xlat_mutable_SPTransition))
    ), 0.0, 1.0));
    outBloomFactor_6 = tmpvar_9;
  } else {
    if ((intensity_5 < (1.5 * xlat_mutable_SPTransition))) {
      outBloomFactor_6 = (outBloomFactor_6 * _SPOpaqueness);
    };
  };
  o_2.w = outBloomFactor_6;
  gl_FragData[0] = o_2;
}


#endif
"
}
}
Program "fp" {
SubProgram "gles hw_tier00 " {
""
}
SubProgram "gles hw_tier01 " {
""
}
SubProgram "gles hw_tier02 " {
""
}
SubProgram "gles hw_tier00 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier01 " {
Keywords { "SPECIAL_STATE" }
""
}
SubProgram "gles hw_tier02 " {
Keywords { "SPECIAL_STATE" }
""
}
}
}
}
CustomEditor "MoleMole.CharacterShaderEditorBase"
}